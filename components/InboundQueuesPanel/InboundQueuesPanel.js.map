{"version":3,"sources":["components/InboundQueuesPanel/InboundQueuesPanel.tsx"],"names":["InboundQueuesPanel","searchOption","currentLocale","inboundQueueSource","inboundQueues","submitInboundQueues","getAssignedInboundQueues","isAllAssign","isSeveralAssign","checkBoxOnChange","allCheckBoxOnChange","goBack","inboundQueuesState","setInboundQueuesState","assignedInboundQueues","assignedInboundQueuesNumber","length","allAssign","severalAssign","renderListView","map","index","gateName","gateId","checked","e","preventDefault","classes","root","styles","checkbox","label","i18n","getString","selectListBasic","backHeader","listContainer","bottomBar","selected","selectedTips","totalInboundQueuesNumber"],"mappings":"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","sourcesContent":["import {\n  RcButton,\n  RcCheckbox,\n  RcList,\n  RcListItem,\n} from '@ringcentral-integration/rcui';\nimport formatMessage from 'format-message';\nimport React, { FunctionComponent, useState } from 'react';\nimport { SelectListBasic } from 'ringcentral-widgets/components/SelectListBasic';\n\nimport {\n  AvailableQueue,\n  EvInboundQueuesUIFunctions,\n  EvInboundQueuesUIProps,\n} from '../../interfaces';\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\nexport type InboundQueuesProps = EvInboundQueuesUIProps &\n  EvInboundQueuesUIFunctions;\n\nconst InboundQueuesPanel: FunctionComponent<InboundQueuesProps> = ({\n  searchOption,\n  currentLocale,\n  inboundQueues: inboundQueueSource,\n  submitInboundQueues,\n  getAssignedInboundQueues,\n  isAllAssign,\n  isSeveralAssign,\n  checkBoxOnChange,\n  allCheckBoxOnChange,\n  goBack,\n}) => {\n  const [inboundQueuesState, setInboundQueuesState] = useState(\n    inboundQueueSource,\n  );\n\n  const assignedInboundQueues = getAssignedInboundQueues(inboundQueuesState);\n  const assignedInboundQueuesNumber = assignedInboundQueues.length;\n  const allAssign = isAllAssign(assignedInboundQueues, inboundQueuesState);\n  const severalAssign = isSeveralAssign(\n    assignedInboundQueues,\n    inboundQueuesState,\n  );\n\n  const renderListView = (inboundQueues: AvailableQueue[]) =>\n    inboundQueues.length ? (\n      <RcList>\n        {inboundQueues.map(({ gateName, gateId, checked }, index) => {\n          return (\n            <RcListItem\n              key={index}\n              title={gateName}\n              button\n              singleLine\n              size=\"small\"\n              onClick={(e) => {\n                e.preventDefault();\n                checkBoxOnChange(\n                  gateId,\n                  inboundQueuesState,\n                  setInboundQueuesState,\n                );\n              }}\n            >\n              <RcCheckbox\n                color=\"primary\"\n                formControlLabelProps={{\n                  classes: {\n                    root: styles.checkbox,\n                    label: styles.label,\n                  },\n                }}\n                label={gateName}\n                checked={checked}\n              />\n            </RcListItem>\n          );\n        })}\n      </RcList>\n    ) : null;\n\n  return (\n    <>\n      <SelectListBasic\n        title={i18n.getString('inboundQueues', currentLocale)}\n        placeholder={i18n.getString('search', currentLocale)}\n        options={inboundQueuesState}\n        searchOption={searchOption}\n        currentLocale={currentLocale}\n        renderListView={renderListView}\n        selectListBasicClassName={styles.selectListBasic}\n        backHeaderClassName={styles.backHeader}\n        listContainerClassName={styles.listContainer}\n        open\n        onBackClick={goBack}\n      />\n      <div className={styles.bottomBar}>\n        <div className={styles.selected}>\n          <RcCheckbox\n            color=\"primary\"\n            label={i18n.getString('selectAll', currentLocale)}\n            data-sign=\"bulkChangeCheckBox\"\n            onClick={() =>\n              allCheckBoxOnChange(\n                severalAssign,\n                inboundQueuesState,\n                setInboundQueuesState,\n              )\n            }\n            checked={allAssign}\n            indeterminate={!!assignedInboundQueuesNumber && !allAssign}\n          />\n          <div className={styles.selectedTips} data-sign=\"selectedTips\">\n            {formatMessage(i18n.getString('selectedTips', currentLocale), {\n              totalInboundQueuesNumber: inboundQueueSource.length,\n              assignedInboundQueuesNumber,\n            })}\n          </div>\n        </div>\n        <RcButton\n          data-sign=\"update\"\n          onClick={() => submitInboundQueues(assignedInboundQueues)}\n          size=\"medium\"\n          fullWidth\n        >\n          {i18n.getString('update', currentLocale)}\n        </RcButton>\n      </div>\n    </>\n  );\n};\n\nexport { InboundQueuesPanel };\n"],"file":"InboundQueuesPanel.js"}