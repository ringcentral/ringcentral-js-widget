{"version":3,"sources":["components/InnerTopic/index.tsx"],"names":["InnerTopic","name","currentLocale","defaultTopic","setTopicRef","updateMeetingTopic","topic","setTopic","isTopicChange","setIsTopicChange","topicRef","i18n","getString","maxLength","e","target","value","root","styles","input","Topic","React","memo","prevProps","nextProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,UAMX,GAAG,SANQA,UAMR,OAMC;AAAA,MALJC,IAKI,QALJA,IAKI;AAAA,MAJJC,aAII,QAJJA,aAII;AAAA,MAHJC,YAGI,QAHJA,YAGI;AAAA,MAFJC,WAEI,QAFJA,WAEI;AAAA,MADJC,kBACI,QADJA,kBACI;;AAAA,kBACsB,qBAASJ,IAAT,CADtB;AAAA;AAAA,MACGK,KADH;AAAA,MACUC,QADV;;AAAA,mBAEsC,qBAAS,KAAT,CAFtC;AAAA;AAAA,MAEGC,aAFH;AAAA,MAEkBC,gBAFlB;;AAGJ,MAAMC,QAAQ,GAAG,oBAAjB;AAEA,wBAAU,YAAM;AACdH,IAAAA,QAAQ,CAACN,IAAD,CAAR;AACAG,IAAAA,WAAW,CAACM,QAAD,CAAX;AACD,GAHD,EAGG,CAACT,IAAD,EAAOG,WAAP,CAHH;AAKA,wBAAU,YAAM;AACd,QAAI,CAACI,aAAL,EAAoB;AAClBD,MAAAA,QAAQ,CAACJ,YAAD,CAAR;AACAC,MAAAA,WAAW,CAACM,QAAD,CAAX;AACD;AACF,GALD,EAKG,CAACP,YAAD,EAAeK,aAAf,EAA8BJ,WAA9B,CALH;AAOA,sBACE,gCAAC,iBAAD;AACE,IAAA,GAAG,EAAEM,QADP;AAEE,IAAA,KAAK,EAAEC,iBAAKC,SAAL,CAAe,OAAf,EAAwBV,aAAxB,CAFT;AAGE,iBAAU,OAHZ;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,QAAQ,EAAE,KALZ;AAME,IAAA,KAAK,EAAEI,KANT;AAOE,IAAA,UAAU,EAAE;AACVO,MAAAA,SAAS,EAAE;AADD,KAPd;AAUE,IAAA,QAAQ,EAAE,kBAACC,CAAD,EAAO;AACfL,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAF,MAAAA,QAAQ,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,KAbH;AAcE,IAAA,MAAM,EAAE,kBAAM;AACZX,MAAAA,kBAAkB,CAACC,KAAD,CAAlB;AACD,KAhBH;AAiBE,IAAA,OAAO,EAAE;AACPW,MAAAA,IAAI,EAAEC,mBAAOC;AADN,KAjBX;AAoBE,IAAA,YAAY;AApBd,IADF;AAwBD,CArDM;;;;AAuDA,IAAMC,KAAK,gBAAGC,kBAAMC,IAAN,CACnBtB,UADmB,EAEnB,UAACuB,SAAD,EAAYC,SAAZ;AAAA,SACED,SAAS,CAACtB,IAAV,KAAmBuB,SAAS,CAACvB,IAA7B,IACAsB,SAAS,CAACrB,aAAV,KAA4BsB,SAAS,CAACtB,aAFxC;AAAA,CAFmB,CAAd","sourcesContent":["import React, { FC, useState, useRef, useEffect } from 'react';\nimport { RcTextField } from '@ringcentral/juno';\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\nexport const InnerTopic: FC<{\n  name: string;\n  currentLocale: string;\n  defaultTopic: string;\n  setTopicRef: (ref: any) => void;\n  updateMeetingTopic: (name: string) => void;\n}> = ({\n  name,\n  currentLocale,\n  defaultTopic,\n  setTopicRef,\n  updateMeetingTopic,\n}) => {\n  const [topic, setTopic] = useState(name);\n  const [isTopicChange, setIsTopicChange] = useState(false);\n  const topicRef = useRef();\n\n  useEffect(() => {\n    setTopic(name);\n    setTopicRef(topicRef);\n  }, [name, setTopicRef]);\n\n  useEffect(() => {\n    if (!isTopicChange) {\n      setTopic(defaultTopic);\n      setTopicRef(topicRef);\n    }\n  }, [defaultTopic, isTopicChange, setTopicRef]);\n\n  return (\n    <RcTextField\n      ref={topicRef}\n      label={i18n.getString('topic', currentLocale)}\n      data-sign=\"topic\"\n      fullWidth\n      clearBtn={false}\n      value={topic}\n      inputProps={{\n        maxLength: 255,\n      }}\n      onChange={(e) => {\n        setIsTopicChange(true);\n        setTopic(e.target.value);\n      }}\n      onBlur={() => {\n        updateMeetingTopic(topic);\n      }}\n      classes={{\n        root: styles.input,\n      }}\n      gutterBottom\n    />\n  );\n};\n\nexport const Topic = React.memo(\n  InnerTopic,\n  (prevProps, nextProps) =>\n    prevProps.name === nextProps.name &&\n    prevProps.currentLocale === nextProps.currentLocale,\n);\n"],"file":"index.js"}