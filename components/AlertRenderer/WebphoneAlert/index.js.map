{"version":3,"sources":["components/AlertRenderer/WebphoneAlert/index.js"],"names":["webphoneMessageList","webphoneErrors","connectFailed","toVoiceMailError","connected","muteError","holdError","flipError","recordError","recordDisabled","transferError","noOutboundCallWithoutDL","checkDLError","browserNotSupported","sipProvisionError","webphoneCountOverLimit","webphoneForbidden","requestTimeout","serverTimeout","internalServerError","unknownError","provisionUpdate","serverConnecting","webphoneMessages","parked","WebphoneAlert","props","message","view","i18n","getString","currentLocale","payload","errorCode","statusCode","isConnecting","brandName","brand","name","parkedNumber","propTypes","PropTypes","string","isRequired","object","shape","handleMessage","filter","err","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport webphoneErrors from '@ringcentral-integration/commons/modules/Webphone/webphoneErrors';\nimport webphoneMessages from '@ringcentral-integration/commons/modules/Webphone/webphoneMessages';\nimport FormattedMessage from '../../FormattedMessage';\nimport i18n from './i18n';\n\nconst webphoneMessageList = [\n  webphoneErrors.connectFailed,\n  webphoneErrors.toVoiceMailError,\n  webphoneErrors.connected,\n  webphoneErrors.muteError,\n  webphoneErrors.holdError,\n  webphoneErrors.flipError,\n  webphoneErrors.recordError,\n  webphoneErrors.recordDisabled,\n  webphoneErrors.transferError,\n  webphoneErrors.noOutboundCallWithoutDL,\n  webphoneErrors.checkDLError,\n  webphoneErrors.browserNotSupported,\n  webphoneErrors.sipProvisionError,\n  webphoneErrors.webphoneCountOverLimit,\n  webphoneErrors.webphoneForbidden,\n  webphoneErrors.requestTimeout,\n  webphoneErrors.serverTimeout,\n  webphoneErrors.internalServerError,\n  webphoneErrors.unknownError,\n  webphoneErrors.provisionUpdate,\n  webphoneErrors.serverConnecting,\n  webphoneMessages.parked,\n];\n\nexport default function WebphoneAlert(props) {\n  const { message } = props.message;\n  let view = <span>{i18n.getString(message, props.currentLocale)}</span>;\n  // Handle call record error\n  if (message === webphoneErrors.recordError) {\n    const { payload: { errorCode } = {} } = props.message;\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ errorCode }}\n      />\n    );\n  } else if (\n    message === webphoneErrors.sipProvisionError ||\n    message === webphoneErrors.webphoneForbidden ||\n    message === webphoneErrors.requestTimeout ||\n    message === webphoneErrors.serverTimeout ||\n    message === webphoneErrors.internalServerError ||\n    message === webphoneErrors.unknownError\n  ) {\n    const {\n      payload: { statusCode, isConnecting = false } = {},\n    } = props.message;\n    // sipProvisionError does not have statusCode\n    if (statusCode && isConnecting) {\n      view = (\n        <FormattedMessage\n          message={i18n.getString(\n            'registeringWithStatusCode',\n            props.currentLocale,\n          )}\n          values={{ errorCode: statusCode, brandName: props.brand.name }}\n        />\n      );\n    } else if (statusCode) {\n      view = (\n        <FormattedMessage\n          message={i18n.getString('failWithStatusCode', props.currentLocale)}\n          values={{ errorCode: statusCode, brandName: props.brand.name }}\n        />\n      );\n    } else if (isConnecting) {\n      view = (\n        <FormattedMessage\n          message={i18n.getString(\n            'registeringWithoutStatusCode',\n            props.currentLocale,\n          )}\n          values={{ brandName: props.brand.name }}\n        />\n      );\n    } else {\n      view = (\n        <FormattedMessage\n          message={i18n.getString('failWithoutStatusCode', props.currentLocale)}\n          values={{ brandName: props.brand.name }}\n        />\n      );\n    }\n  } else if (message === webphoneErrors.checkDLError) {\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ brandName: props.brand.name }}\n      />\n    );\n  } else if (message === webphoneMessages.parked) {\n    const { payload: { parkedNumber } = {} } = props.message;\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ parkedNumber }}\n      />\n    );\n  }\n  return view;\n}\n\nWebphoneAlert.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  brand: PropTypes.object.isRequired,\n  message: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nWebphoneAlert.handleMessage = ({ message }) =>\n  webphoneMessageList.filter((err) => err === message).length > 0;\n"],"file":"index.js"}