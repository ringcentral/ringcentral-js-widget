{"version":3,"sources":["components/AlertRenderer/RegionSettingsAlert/index.js"],"names":["RegionSettingsAlert","message","id","currentLocale","onRegionSettingsLinkClick","msg","regionSettingsMessages","dialingPlansChanged","regionSettings","i18n","getString","regionSettingsLink","styles","link","e","preventDefault","alertId","propTypes","PropTypes","shape","string","isRequired","func","defaultProps","undefined","handleMessage","saveSuccess","areaCodeInvalid"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEe,SAASA,mBAAT,OAIZ;AAAA,0BAHDC,OAGC;AAAA,MAHUC,EAGV,gBAHUA,EAGV;AAAA,MAHcD,OAGd,gBAHcA,OAGd;AAAA,MAFDE,aAEC,QAFDA,aAEC;AAAA,MADDC,yBACC,QADDA,yBACC;AACD,MAAIC,GAAJ;;AACA,UAAQJ,OAAR;AACE,SAAKK,mCAAuBC,mBAA5B;AACE;AACE,YAAMC,cAAc,GAAGC,iBAAKC,SAAL,CAAe,gBAAf,EAAiCP,aAAjC,CAAvB;;AACA,YAAMQ,kBAAkB,GAAGP,yBAAyB,gBAClD;AACE,UAAA,SAAS,EAAEQ,mBAAOC,IADpB;AAEE,UAAA,OAAO,EAAE,iBAACC,CAAD,EAAO;AACdA,YAAAA,CAAC,CAACC,cAAF;AACAX,YAAAA,yBAAyB,CAAC;AAAEY,cAAAA,OAAO,EAAEd;AAAX,aAAD,CAAzB;AACD;AALH,WAOGM,cAPH,CADkD,GAWlDA,cAXF;AAaAH,QAAAA,GAAG,gBACD,gCAAC,4BAAD;AACE,UAAA,OAAO,EAAEI,iBAAKC,SAAL,CAAeT,OAAf,EAAwBE,aAAxB,CADX;AAEE,UAAA,MAAM,EAAE;AAAEQ,YAAAA,kBAAkB,EAAlBA;AAAF;AAFV,UADF;AAMD;AACD;;AACF;AACEN,MAAAA,GAAG,GAAGI,iBAAKC,SAAL,CAAeT,OAAf,EAAwBE,aAAxB,CAAN;AACA;AA3BJ;;AA6BA,sBAAO,6CAAME,GAAN,CAAP;AACD;;AACDL,mBAAmB,CAACiB,SAApB,GAAgC;AAC9BhB,EAAAA,OAAO,EAAEiB,sBAAUC,KAAV,CAAgB;AACvBlB,IAAAA,OAAO,EAAEiB,sBAAUE,MAAV,CAAiBC;AADH,GAAhB,EAENA,UAH2B;AAI9BlB,EAAAA,aAAa,EAAEe,sBAAUE,MAAV,CAAiBC,UAJF;AAK9BjB,EAAAA,yBAAyB,EAAEc,sBAAUI;AALP,CAAhC;AAOAtB,mBAAmB,CAACuB,YAApB,GAAmC;AACjCnB,EAAAA,yBAAyB,EAAEoB;AADM,CAAnC;;AAGAxB,mBAAmB,CAACyB,aAApB,GAAoC;AAAA,MAAGxB,OAAH,SAAGA,OAAH;AAAA,SAClCA,OAAO,KAAKK,mCAAuBoB,WAAnC,IACAzB,OAAO,KAAKK,mCAAuBC,mBADnC,IAEAN,OAAO,KAAKK,mCAAuBqB,eAHD;AAAA,CAApC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport regionSettingsMessages from '@ringcentral-integration/commons/modules/RegionSettings/regionSettingsMessages';\nimport FormattedMessage from '../../FormattedMessage';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nexport default function RegionSettingsAlert({\n  message: { id, message },\n  currentLocale,\n  onRegionSettingsLinkClick,\n}) {\n  let msg;\n  switch (message) {\n    case regionSettingsMessages.dialingPlansChanged:\n      {\n        const regionSettings = i18n.getString('regionSettings', currentLocale);\n        const regionSettingsLink = onRegionSettingsLinkClick ? (\n          <a\n            className={styles.link}\n            onClick={(e) => {\n              e.preventDefault();\n              onRegionSettingsLinkClick({ alertId: id });\n            }}\n          >\n            {regionSettings}\n          </a>\n        ) : (\n          regionSettings\n        );\n        msg = (\n          <FormattedMessage\n            message={i18n.getString(message, currentLocale)}\n            values={{ regionSettingsLink }}\n          />\n        );\n      }\n      break;\n    default:\n      msg = i18n.getString(message, currentLocale);\n      break;\n  }\n  return <div>{msg}</div>;\n}\nRegionSettingsAlert.propTypes = {\n  message: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n  }).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  onRegionSettingsLinkClick: PropTypes.func,\n};\nRegionSettingsAlert.defaultProps = {\n  onRegionSettingsLinkClick: undefined,\n};\nRegionSettingsAlert.handleMessage = ({ message }) =>\n  message === regionSettingsMessages.saveSuccess ||\n  message === regionSettingsMessages.dialingPlansChanged ||\n  message === regionSettingsMessages.areaCodeInvalid;\n"],"file":"index.js"}