{"version":3,"sources":["components/NotificationPanel/NotificationItem.tsx"],"names":["getLevelType","level","type","NotificationItem","data","currentLocale","brand","dismiss","getRenderer","duration","defaultAnimation","animation","defaultBackdropAnimation","backdropAnimation","defaultClasses","classes","Message","second","id","loading","action","backdrop","onBackdropClick","animationStyle","animationDuration","styles","container","root","snackbar","closeSvg","defaultProps"],"mappings":"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","sourcesContent":["import {\n  RcSnackbarAction,\n  RcSnackbarContent,\n  RcSnackbarContentType,\n} from '@ringcentral-integration/rcui';\nimport closeSvg from '@ringcentral-integration/rcui/icons/icon-close.svg';\nimport classNames from 'classnames';\nimport React, { DOMAttributes, FunctionComponent, memo, useMemo } from 'react';\n\nimport styles from './styles.scss';\n\nfunction getLevelType(level: NotificationMessage['level']) {\n  let type: RcSnackbarContentType;\n  switch (level) {\n    case 'warning':\n      // the error is yellow\n      type = 'error';\n      break;\n    case 'danger':\n      // the warn is red\n      type = 'warn';\n      break;\n    default:\n      type = level;\n  }\n  return type;\n}\n\nexport interface NotificationMessage {\n  id: string;\n  message: string;\n  level: 'info' | 'success' | 'warning' | 'danger';\n  payload: any;\n  ttl: number;\n  timestamp: number;\n  /**\n   * snackbar animation\n   */\n  animation?: string;\n  /**\n   * has backdrop behind whole window\n   */\n  backdrop?: boolean;\n  /**\n   * backdrop animation\n   */\n  backdropAnimation?: string;\n  /**\n   * classes for whole component\n   */\n  classes?: {\n    backdrop?: string;\n  };\n  /** emit event when backdrop to be click */\n  onBackdropClick?: DOMAttributes<HTMLDivElement>['onClick'];\n  /**\n   * loading state\n   */\n  loading: boolean;\n  /**\n   * right action area\n   */\n  action?: React.ReactNode;\n}\n\nexport type NotificationItemProps = {\n  data: NotificationMessage;\n  currentLocale: string;\n  brand: string;\n  dismiss: (id: string) => void;\n  getRenderer(type: NotificationMessage): FunctionComponent<any>;\n  duration?: number;\n} & Pick<NotificationMessage, 'animation' | 'backdropAnimation' | 'classes'>;\n\nexport const NotificationItem: FunctionComponent<NotificationItemProps> = memo(\n  ({\n    data,\n    currentLocale,\n    brand,\n    dismiss,\n    getRenderer,\n    duration,\n    animation: defaultAnimation,\n    backdropAnimation: defaultBackdropAnimation,\n    classes: defaultClasses,\n  }) => {\n    const Message = getRenderer(data);\n    const second = duration / 1000;\n    const {\n      id,\n      level,\n      classes = {},\n      loading,\n      action,\n      animation = defaultAnimation,\n      backdropAnimation = defaultBackdropAnimation,\n      backdrop,\n      onBackdropClick,\n    } = data;\n\n    const type: RcSnackbarContentType = getLevelType(level);\n\n    const animationStyle = useMemo(\n      () => ({\n        animationDuration: `${second}s`,\n      }),\n      [second],\n    );\n\n    return (\n      <div className={styles.container}>\n        {backdrop && (\n          <div\n            className={classNames(\n              styles.backdrop,\n              defaultClasses.backdrop,\n              classes.backdrop,\n              'animated',\n              backdropAnimation,\n            )}\n            style={animationStyle}\n            onClick={onBackdropClick}\n          />\n        )}\n        <RcSnackbarContent\n          data-sign=\"notification\"\n          data-sign-type={type}\n          type={type}\n          size=\"small\"\n          fullWidth\n          loading={loading}\n          classes={{\n            root: classNames('animated', styles.snackbar, animation),\n          }}\n          style={animationStyle}\n          messageAlign=\"left\"\n          message={\n            <Message\n              message={data}\n              currentLocale={currentLocale}\n              brand={brand}\n            />\n          }\n          action={\n            action ?? (\n              <RcSnackbarAction\n                variant=\"icon\"\n                symbol={closeSvg}\n                size=\"small\"\n                onClick={() => {\n                  dismiss(id);\n                }}\n              />\n            )\n          }\n        />\n      </div>\n    );\n  },\n);\n\nNotificationItem.defaultProps = {\n  duration: 500,\n  classes: {},\n};\n"],"file":"NotificationItem.js"}