{"version":3,"sources":["components/NotificationPanel/NotificationItem.tsx"],"names":["getLevelType","level","type","NotificationItem","message","currentLocale","brand","dismiss","getRenderer","animation","duration","Message","second","id","loading","action","styles","animationDuration","root","snackbar","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAKA;;AACA;;AAEA;;;;;;;;AAEA,SAASA,YAAT,CAAsBC,KAAtB,EAA2D;AACzD,MAAIC,IAAJ;;AACA,UAAQD,KAAR;AACE,SAAK,SAAL;AACE;AACAC,MAAAA,IAAI,GAAG,OAAP;AACA;;AACF,SAAK,QAAL;AACE;AACAA,MAAAA,IAAI,GAAG,MAAP;AACA;;AACF;AACEA,MAAAA,IAAI,GAAGD,KAAP;AAVJ;;AAYA,SAAOC,IAAP;AACD;;AAwBM,IAAMC,gBAA0D,GAAG,iBACxE,gBAQM;AAAA,MAPJC,OAOI,QAPJA,OAOI;AAAA,MANJC,aAMI,QANJA,aAMI;AAAA,MALJC,KAKI,QALJA,KAKI;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,WAGI,QAHJA,WAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADJC,QACI,QADJA,QACI;AACJ,MAAMC,OAAO,GAAGH,WAAW,CAACJ,OAAD,CAA3B;AACA,MAAMQ,MAAM,GAAGF,QAAQ,GAAG,IAA1B;AAFI,MAGIG,EAHJ,GAGmCT,OAHnC,CAGIS,EAHJ;AAAA,MAGQZ,KAHR,GAGmCG,OAHnC,CAGQH,KAHR;AAAA,MAGea,OAHf,GAGmCV,OAHnC,CAGeU,OAHf;AAAA,MAGwBC,MAHxB,GAGmCX,OAHnC,CAGwBW,MAHxB;AAKJ,MAAMb,IAA2B,GAAGF,YAAY,CAACC,KAAD,CAAhD;AAEA,SACE;AACE,IAAA,SAAS,EAAE,4BAAWQ,SAAX,EAAsBO,mBAAOZ,OAA7B,EAAsC,UAAtC,CADb;AAEE,IAAA,KAAK,EAAE;AACLa,MAAAA,iBAAiB,YAAKL,MAAL;AADZ;AAFT,KAME,gCAAC,uBAAD;AACE,IAAA,IAAI,EAAEV,IADR;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,OAAO,EAAEY,OAJX;AAKE,IAAA,OAAO,EAAE;AACPI,MAAAA,IAAI,EAAEF,mBAAOG;AADN,KALX;AAQE,IAAA,OAAO,EACL,gCAAC,OAAD;AACE,MAAA,OAAO,EAAEf,OADX;AAEE,MAAA,aAAa,EAAEC,aAFjB;AAGE,MAAA,KAAK,EAAEC;AAHT,MATJ;AAeE,IAAA,MAAM,EACJS,MADI,aACJA,MADI,cACJA,MADI,GAEF,gCAAC,sBAAD;AACE,MAAA,OAAO,EAAC,MADV;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,OAAO,EAAE,mBAAM;AACbR,QAAAA,OAAO,CAACM,EAAD,CAAP;AACD;AANH;AAjBN,IANF,CADF;AAqCD,CArDuE,CAAnE;;AAwDPV,gBAAgB,CAACiB,YAAjB,GAAgC;AAC9BV,EAAAA,QAAQ,EAAE;AADoB,CAAhC","sourcesContent":["import {\n  RcSnackbarAction,\n  RcSnackbarContent,\n  RcSnackbarContentType,\n} from '@ringcentral-integration/rcui';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport styles from './styles.scss';\n\nfunction getLevelType(level: NotificationMessage['level']) {\n  let type: RcSnackbarContentType;\n  switch (level) {\n    case 'warning':\n      // the error is yellow\n      type = 'error';\n      break;\n    case 'danger':\n      // the warn is red\n      type = 'warn';\n      break;\n    default:\n      type = level;\n  }\n  return type;\n}\n\nexport interface NotificationMessage {\n  id: string;\n  message: string;\n  level: 'info' | 'success' | 'warning' | 'danger';\n  payload: any;\n  ttl: number;\n  timestamp: number;\n  animation?: string;\n  loading: boolean;\n  action?: React.ReactNode;\n}\n\nexport interface NotificationItemProps {\n  message: NotificationMessage;\n  animation?: string;\n  currentLocale: string;\n  brand: string;\n  dismiss: (id: string) => void;\n  getRenderer(type: NotificationMessage): FunctionComponent<any>;\n  duration?: number;\n}\n\nexport const NotificationItem: FunctionComponent<NotificationItemProps> = memo(\n  ({\n    message,\n    currentLocale,\n    brand,\n    dismiss,\n    getRenderer,\n    animation,\n    duration,\n  }) => {\n    const Message = getRenderer(message);\n    const second = duration / 1000;\n    const { id, level, loading, action } = message;\n\n    const type: RcSnackbarContentType = getLevelType(level);\n\n    return (\n      <div\n        className={classNames(animation, styles.message, 'animated')}\n        style={{\n          animationDuration: `${second}s`,\n        }}\n      >\n        <RcSnackbarContent\n          type={type}\n          size=\"small\"\n          fullWidth\n          loading={loading}\n          classes={{\n            root: styles.snackbar,\n          }}\n          message={\n            <Message\n              message={message}\n              currentLocale={currentLocale}\n              brand={brand}\n            />\n          }\n          action={\n            action ?? (\n              <RcSnackbarAction\n                variant=\"icon\"\n                icon=\"close\"\n                size=\"small\"\n                onClick={() => {\n                  dismiss(id);\n                }}\n              />\n            )\n          }\n        />\n      </div>\n    );\n  },\n);\n\nNotificationItem.defaultProps = {\n  duration: 500,\n};\n"],"file":"NotificationItem.js"}