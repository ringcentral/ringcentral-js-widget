{"version":3,"sources":["components/NotificationPanel/NotificationPanel.tsx"],"names":["NotificationPanel","messages","className","exitAnimation","entranceAnimation","backdropEntranceAnimation","backdropExitAnimation","duration","rest","currentMessages","setCurrentMessages","timer","setTimer","length","forEach","cm","some","m","id","animation","backdropAnimation","timerId","setTimeout","clearTimeout","styles","root","map","data","i","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBO,IAAMA,iBAA4D,GAAG,SAA/DA,iBAA+D,OAStE;AAAA,MARJC,QAQI,QARJA,QAQI;AAAA,MAPJC,SAOI,QAPJA,SAOI;AAAA,MANJC,aAMI,QANJA,aAMI;AAAA,MALJC,iBAKI,QALJA,iBAKI;AAAA,MAJJC,yBAII,QAJJA,yBAII;AAAA,MAHJC,qBAGI,QAHJA,qBAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADDC,IACC;;AAAA,kBAC0C,qBAASP,QAAT,CAD1C;AAAA;AAAA,MACGQ,eADH;AAAA,MACoBC,kBADpB;;AAAA,mBAGsB,qBAAS,IAAT,CAHtB;AAAA;AAAA,MAGGC,KAHH;AAAA,MAGUC,QAHV;;AAKJ,wBAAU,YAAM;AACd;AACA,QAAIH,eAAe,CAACI,MAAhB,GAAyBZ,QAAQ,CAACY,MAAtC,EAA8C;AAC5CJ,MAAAA,eAAe,CAACK,OAAhB,CAAwB,UAACC,EAAD,EAAQ;AAC9B;AACA,YAAI,CAACd,QAAQ,CAACe,IAAT,CAAc,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAACC,EAAF,KAASH,EAAE,CAACG,EAAnB;AAAA,SAAd,CAAL,EAA2C;AACzCH,UAAAA,EAAE,CAACI,SAAH,GAAehB,aAAf;AACAY,UAAAA,EAAE,CAACK,iBAAH,GAAuBd,qBAAvB;AACD,SAHD,MAGO;AACLS,UAAAA,EAAE,CAACI,SAAH,GAAe,EAAf;AACAJ,UAAAA,EAAE,CAACK,iBAAH,GAAuB,EAAvB;AACD;AACF,OATD;AAWAV,MAAAA,kBAAkB,oBAAKD,eAAL,EAAlB;;AAEA,UAAIF,QAAQ,GAAG,CAAf,EAAkB;AAChB,YAAMc,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/BZ,UAAAA,kBAAkB,CAACT,QAAD,CAAlB;AACD,SAFyB,EAEvBM,QAFuB,CAA1B;AAIAK,QAAAA,QAAQ,CAACS,OAAD,CAAR;AACD;AACF,KArBD,MAqBO;AACL,UAAIV,KAAJ,EAAW;AACTY,QAAAA,YAAY,CAACZ,KAAD,CAAZ;AACD;;AACDD,MAAAA,kBAAkB,CAACT,QAAD,CAAlB;AACD,KA5Ba,CA6Bd;;AACD,GA9BD,EA8BG,CAACA,QAAD,CA9BH;AAgCA,sBACE;AAAK,IAAA,SAAS,EAAE,4BAAWuB,mBAAOC,IAAlB,EAAwBvB,SAAxB;AAAhB,KACGO,eAAe,CAACiB,GAAhB,CAAoB,UAACC,IAAD,EAAOC,CAAP,EAAa;AAAA;;AAChC,wBACE,gCAAC,kCAAD,eACMpB,IADN;AAEE,MAAA,IAAI,EAAEmB,IAFR;AAGE,MAAA,QAAQ,EAAEpB,QAHZ;AAIE,MAAA,iBAAiB,2BACfoB,IAAI,CAACP,iBADU,yEACWf,yBAL9B;AAOE,MAAA,SAAS,qBAAEsB,IAAI,CAACR,SAAP,6DAAoBf,iBAP/B;AAQE,MAAA,GAAG,EAAEwB;AARP,OADF;AAYD,GAbA,CADH,CADF;AAkBD,CAhEM;;;AAkEP5B,iBAAiB,CAAC6B,YAAlB,GAAiC;AAC/BzB,EAAAA,iBAAiB,EAAE,YADY;AAE/BD,EAAAA,aAAa,EAAE,WAFgB;AAG/BE,EAAAA,yBAAyB,EAAE,QAHI;AAI/BC,EAAAA,qBAAqB,EAAE,SAJQ;AAK/BC,EAAAA,QAAQ,EAAE;AALqB,CAAjC","sourcesContent":["import 'animate.css/animate.min.css';\n\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport {\n  NotificationItem,\n  NotificationItemProps,\n  NotificationMessage,\n} from './NotificationItem';\nimport styles from './styles.scss';\n\nexport type NotificationPanelProps = {\n  messages: NotificationMessage[];\n  exitAnimation?: string;\n  entranceAnimation: string;\n\n  backdropEntranceAnimation?: string;\n  backdropExitAnimation?: string;\n\n  dismiss: (id: string) => void;\n\n  className?: string;\n  currentLocale: string;\n\n  brand: string;\n} & NotificationItemProps;\n\nexport const NotificationPanel: FunctionComponent<NotificationPanelProps> = ({\n  messages,\n  className,\n  exitAnimation,\n  entranceAnimation,\n  backdropEntranceAnimation,\n  backdropExitAnimation,\n  duration,\n  ...rest\n}) => {\n  const [currentMessages, setCurrentMessages] = useState(messages);\n\n  const [timer, setTimer] = useState(null);\n\n  useEffect(() => {\n    // if length is grater means that is delete item.\n    if (currentMessages.length > messages.length) {\n      currentMessages.forEach((cm) => {\n        // if that can't find this id, that means that is delete\n        if (!messages.some((m) => m.id === cm.id)) {\n          cm.animation = exitAnimation;\n          cm.backdropAnimation = backdropExitAnimation;\n        } else {\n          cm.animation = '';\n          cm.backdropAnimation = '';\n        }\n      });\n\n      setCurrentMessages([...currentMessages]);\n\n      if (duration > 0) {\n        const timerId = setTimeout(() => {\n          setCurrentMessages(messages);\n        }, duration);\n\n        setTimer(timerId);\n      }\n    } else {\n      if (timer) {\n        clearTimeout(timer);\n      }\n      setCurrentMessages(messages);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  return (\n    <div className={classNames(styles.root, className)}>\n      {currentMessages.map((data, i) => {\n        return (\n          <NotificationItem\n            {...rest}\n            data={data}\n            duration={duration}\n            backdropAnimation={\n              data.backdropAnimation ?? backdropEntranceAnimation\n            }\n            animation={data.animation ?? entranceAnimation}\n            key={i}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nNotificationPanel.defaultProps = {\n  entranceAnimation: 'fadeInDown',\n  exitAnimation: 'fadeOutUp',\n  backdropEntranceAnimation: 'fadeIn',\n  backdropExitAnimation: 'fadeOut',\n  duration: 500,\n};\n"],"file":"NotificationPanel.js"}