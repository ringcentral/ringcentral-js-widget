{"version":3,"sources":["components/ActiveCallPanel/ConferenceInfo.js"],"names":["MAXIMUM_AVATARS","WIDTH_PER_AVATAR","parseInt","styles","conferenceAvatarSize","AVATAR_MERGIN_LEFT","avatarMerginLeftSize","PEDDING_WIDTH","avatarPaddingSize","minWidthCalculator","count","KINDS_OF_WIDTH_THAT_NEED_ADAPATER","avartarCount","width","ConferenceInfo","props","onWindowResize","updateAvatarAmounts","state","avatarCount","_container","React","createRef","partyProfiles","avatarProfilesCount","length","_mounted","current","clientWidth","firstMatchWidth","find","it","_computeAvatarCountByWindowWidth","setState","nextProps","window","addEventListener","removeEventListener","nextState","oldpartyProfiles","showUpdate","Array","isArray","i","id","profiles","displayedProfiles","slice","remains","currentLocale","onClick","computeDisplayedProfiles","conferenceCallInfoContainer","avatarContainer","clickable","e","preventDefault","map","idx","avatarUrl","partyName","avatar","backgroundColor","dynamicsFont","portrait","icon","info","i18n","getString","Component","propTypes","PropTypes","string","isRequired","arrayOf","shape","func","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GAAG,CAAxB;AAEA,IAAMC,gBAAgB,GAAGC,QAAQ,CAACC,mBAAOC,oBAAR,EAA8B,CAA9B,CAAjC,C,CAAmE;;AAEnE,IAAMC,kBAAkB,GAAGH,QAAQ,CAACC,mBAAOG,oBAAR,EAA8B,CAA9B,CAAnC,C,CAAqE;;AACrE,IAAMC,aAAa,GAAGL,QAAQ,CAACC,mBAAOK,iBAAR,EAA2B,CAA3B,CAA9B,C,CAA6D;;AAE7D,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD;AAAA,SACzBT,gBAAgB,GAAGS,KAAnB,GACAL,kBAAkB,IAAIK,KAAK,GAAG,CAAZ,CADlB,GAEAH,aAAa,GAAG,CAFhB,GAGA,CAHA,GAIA,CALyB;AAAA,CAA3B,C,CAOA;;;AACA,IAAMI,iCAAiC,GAAG,CACxC;AAAEC,EAAAA,YAAY,EAAE,CAAhB;AAAmBC,EAAAA,KAAK,EAAEJ,kBAAkB,CAAC,CAAD;AAA5C,CADwC,EAExC;AAAEG,EAAAA,YAAY,EAAE,CAAhB;AAAmBC,EAAAA,KAAK,EAAEJ,kBAAkB,CAAC,CAAD;AAA5C,CAFwC,EAGxC;AAAEG,EAAAA,YAAY,EAAE,CAAhB;AAAmBC,EAAAA,KAAK,EAAEJ,kBAAkB,CAACT,eAAD;AAA5C,CAHwC,EAIxC;AAAEY,EAAAA,YAAY,EAAE,CAAhB;AAAmBC,EAAAA,KAAK,EAAEJ,kBAAkB,CAACT,eAAe,GAAG,CAAnB;AAA5C,CAJwC,CAA1C;;IAOqBc,c;;;;;AACnB,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,wFAAMA,KAAN;AADiB,UA2CnBC,cA3CmB,GA2CF,0BAAS,YAAM;AAC9B,YAAKC,mBAAL,CAAyB,MAAKF,KAA9B;AACD,KAFgB,EAEd,GAFc,CA3CE;AAEjB,UAAKG,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAEnB;AADF,KAAb;AAIA,UAAKoB,UAAL,GAAkBC,kBAAMC,SAAN,EAAlB;AANiB;AAOlB;;;;qDAEgCP,K,EAAO;AAAA,UAC9BQ,aAD8B,GACZR,KADY,CAC9BQ,aAD8B;AAEtC,UAAMC,mBAAmB,GAAID,aAAa,IAAIA,aAAa,CAACE,MAAhC,IAA2C,CAAvE;;AAEA,UAAI,CAAC,KAAKC,QAAV,EAAoB;AAClB,YAAIF,mBAAmB,IAAIxB,eAA3B,EAA4C;AAC1C,iBAAOA,eAAP;AACD;;AACD,eAAOwB,mBAAP;AACD;;AAED,UAAMX,KAAK,GACT,KAAKO,UAAL,IACA,KAAKA,UAAL,CAAgBO,OADhB,IAEA,KAAKP,UAAL,CAAgBO,OAAhB,CAAwBC,WAH1B;AAKA,UAAIT,WAAW,GAAGK,mBAAlB;AAEA,UAAMK,eAAe,GAAGlB,iCAAiC,CAACmB,IAAlC,CACtB,UAACC,EAAD;AAAA,eAAQlB,KAAK,GAAGkB,EAAE,CAAClB,KAAnB;AAAA,OADsB,CAAxB;;AAIA,UAAIgB,eAAJ,EAAqB;AACnBV,QAAAA,WAAW,GAAGU,eAAe,CAACjB,YAA9B;;AACA,YAAIO,WAAW,GAAG,CAAd,KAAoBK,mBAAxB,EAA6C;AAC3CL,UAAAA,WAAW,GAAGK,mBAAd;AACD;AACF,OALD,MAKO,IAAIL,WAAW,IAAInB,eAAnB,EAAoC;AACzCmB,QAAAA,WAAW,GAAGnB,eAAd;AACD;;AAED,aAAOmB,WAAP;AACD;;;wCAMmBJ,K,EAAO;AACzB,UAAI,CAAC,KAAKW,QAAV,EAAoB;AAClB;AACD;;AAED,UAAMP,WAAW,GAAG,KAAKa,gCAAL,CAAsCjB,KAAtC,CAApB;;AAEA,UAAII,WAAW,KAAK,KAAKD,KAAL,CAAWC,WAA/B,EAA4C;AAC1C,aAAKc,QAAL,CAAc;AACZd,UAAAA,WAAW,EAAXA;AADY,SAAd;AAGD;AACF;;;8CAEyBe,S,EAAW;AACnC,WAAKjB,mBAAL,CAAyBiB,SAAzB;AACD;;;wCAEmB;AAClB,WAAKR,QAAL,GAAgB,IAAhB;AACAS,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKpB,cAAvC;AACA,WAAKC,mBAAL,CAAyB,KAAKF,KAA9B;AACD;;;2CAEsB;AACrB,WAAKW,QAAL,GAAgB,KAAhB;AACAS,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKrB,cAA1C;AACD;;;0CAEqBkB,S,EAAWI,S,EAAW;AAAA,UAClCf,aADkC,GAChBW,SADgB,CAClCX,aADkC;AAE1C,UAAMgB,gBAAgB,GAAG,KAAKxB,KAAL,CAAWQ,aAApC;AACA,UAAIiB,UAAU,GAAG,IAAjB;;AACA,UAAIjB,aAAa,KAAKgB,gBAAtB,EAAwC;AACtC,YACEE,KAAK,CAACC,OAAN,CAAcnB,aAAd,KACAkB,KAAK,CAACC,OAAN,CAAcH,gBAAd,CADA,IAEAhB,aAAa,CAACE,MAAd,KAAyBc,gBAAgB,CAACd,MAH5C,EAIE;AACAe,UAAAA,UAAU,GAAG,KAAb;;AACA,eAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,aAAa,CAACE,MAAlC,EAA0CkB,CAAC,IAAI,CAA/C,EAAkD;AAChD,gBAAIpB,aAAa,CAACoB,CAAD,CAAb,CAAiBC,EAAjB,KAAwBL,gBAAgB,CAACI,CAAD,CAAhB,CAAoBC,EAAhD,EAAoD;AAClDJ,cAAAA,UAAU,GAAG,IAAb;AACA;AACD;AACF;AACF;AACF,OAdD,MAcO,IAAIF,SAAS,CAACnB,WAAV,KAA0B,KAAKD,KAAL,CAAWC,WAAzC,EAAsD;AAC3DqB,QAAAA,UAAU,GAAG,IAAb;AACD,OAFM,MAEA;AACLA,QAAAA,UAAU,GAAG,KAAb;AACD;;AAED,aAAOA,UAAP;AACD;;;mDAEmD;AAAA,UAAzBK,QAAyB,QAAzBA,QAAyB;AAAA,UAAf1B,WAAe,QAAfA,WAAe;AAClD,UAAM2B,iBAAiB,GACrBD,QAAQ,CAACpB,MAAT,IAAmBN,WAAnB,GACI0B,QAAQ,CAACE,KAAT,CAAe,CAAf,EAAkB5B,WAAlB,CADJ,GAEI0B,QAHN;AAKA,UAAMG,OAAO,GAAGH,QAAQ,CAACpB,MAAT,GAAkBN,WAAlC;AAEA,aAAO;AACL2B,QAAAA,iBAAiB,EAAjBA,iBADK;AAELE,QAAAA,OAAO,EAAPA;AAFK,OAAP;AAID;;;6BAEQ;AAAA,wBAC2C,KAAKjC,KADhD;AAAA,UACCkC,aADD,eACCA,aADD;AAAA,UACgB1B,aADhB,eACgBA,aADhB;AAAA,UAC+B2B,QAD/B,eAC+BA,OAD/B;AAEP,UAAML,QAAQ,GAAGtB,aAAa,IAAI,EAAlC;AAFO,UAICJ,WAJD,GAIiB,KAAKD,KAJtB,CAICC,WAJD;;AAAA,kCAMgC,KAAKgC,wBAAL,CAA8B;AACnEN,QAAAA,QAAQ,EAARA,QADmE;AAEnE1B,QAAAA,WAAW,EAAXA;AAFmE,OAA9B,CANhC;AAAA,UAMC2B,iBAND,yBAMCA,iBAND;AAAA,UAMoBE,OANpB,yBAMoBA,OANpB;;AAWP,aACE;AAAK,QAAA,SAAS,EAAE7C,mBAAOiD,2BAAvB;AAAoD,QAAA,GAAG,EAAE,KAAKhC;AAA9D,SACG0B,iBAAiB,CAACrB,MAAlB,IAA6BN,WAAW,KAAK,CAAhB,IAAqB6B,OAAO,GAAG,CAA5D,GACC;AACE,QAAA,SAAS,EAAE,4BAAW7C,mBAAOkD,eAAlB,EAAmClD,mBAAOmD,SAA1C,CADb;AAEE,QAAA,OAAO,EAAE,iBAACC,CAAD,EAAO;AACdA,UAAAA,CAAC,CAACC,cAAF;;AACAN,UAAAA,QAAO;AACR;AALH,SAOGJ,iBAAiB,CAACW,GAAlB,CAAsB,iBAA2BC,GAA3B;AAAA,YAAGC,SAAH,SAAGA,SAAH;AAAA,YAAcC,SAAd,SAAcA,SAAd;AAAA,eACrB;AAAK,UAAA,GAAG,YAAKA,SAAL,cAAkBF,GAAlB,CAAR;AAAiC,UAAA,SAAS,EAAEvD,mBAAO0D;AAAnD,WACE,gCAAC,sBAAD;AAAY,UAAA,SAAS,EAAEF;AAAvB,UADF,CADqB;AAAA,OAAtB,CAPH,EAYGX,OAAO,GAAG,CAAV,GACC;AAAK,QAAA,SAAS,EAAE,4BAAW7C,mBAAO0D,MAAlB,EAA0B1D,mBAAO6C,OAAjC;AAAhB,oBACOA,OADP,EADD,GAIG,IAhBN,CADD,GAoBC;AAAK,QAAA,SAAS,EAAE7C,mBAAOkD;AAAvB,SACE;AAAK,QAAA,SAAS,EAAElD,mBAAO0D,MAAvB;AAA+B,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,EAAE;AAAnB;AAAtC,SACE;AAAG,QAAA,SAAS,EAAE,4BAAWC,yBAAaC,QAAxB,EAAkC7D,mBAAO8D,IAAzC;AAAd,QADF,CADF,CArBJ,EA2BE;AAAG,QAAA,SAAS,EAAE9D,mBAAO+D,IAArB;AAA2B,qBAAU;AAArC,SACGC,iBAAKC,SAAL,CAAe,gBAAf,EAAiCnB,aAAjC,CADH,CA3BF,CADF;AAiCD;;;;EAlKyCoB,gB;;;AAqK5CvD,cAAc,CAACwD,SAAf,GAA2B;AACzBrB,EAAAA,aAAa,EAAEsB,sBAAUC,MAAV,CAAiBC,UADP;AAEzBlD,EAAAA,aAAa,EAAEgD,sBAAUG,OAAV,CACbH,sBAAUI,KAAV,CAAgB;AACdhB,IAAAA,SAAS,EAAEY,sBAAUC,MADP;AAEdZ,IAAAA,SAAS,EAAEW,sBAAUC;AAFP,GAAhB,CADa,CAFU;AAQzBtB,EAAAA,OAAO,EAAEqB,sBAAUK;AARM,CAA3B;AAWA9D,cAAc,CAAC+D,YAAf,GAA8B;AAC5BtD,EAAAA,aAAa,EAAE,IADa;AAE5B2B,EAAAA,OAAO,EAAE,iBAACP,CAAD;AAAA,WAAOA,CAAP;AAAA;AAFmB,CAA9B","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport debounce from 'ringcentral-integration/lib/debounce';\n\nimport CallAvatar from '../CallAvatar';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nconst MAXIMUM_AVATARS = 4;\n\nconst WIDTH_PER_AVATAR = parseInt(styles.conferenceAvatarSize, 0); // 51\n\nconst AVATAR_MERGIN_LEFT = parseInt(styles.avatarMerginLeftSize, 0); // -20\nconst PEDDING_WIDTH = parseInt(styles.avatarPaddingSize, 0); // 15\n\nconst minWidthCalculator = (count) =>\n  WIDTH_PER_AVATAR * count +\n  AVATAR_MERGIN_LEFT * (count - 1) +\n  PEDDING_WIDTH * 2 +\n  1 +\n  2;\n\n// when the container width reachs below item of width, display the avatar amount of count.\nconst KINDS_OF_WIDTH_THAT_NEED_ADAPATER = [\n  { avartarCount: 0, width: minWidthCalculator(1) },\n  { avartarCount: 1, width: minWidthCalculator(3) },\n  { avartarCount: 2, width: minWidthCalculator(MAXIMUM_AVATARS) },\n  { avartarCount: 3, width: minWidthCalculator(MAXIMUM_AVATARS + 1) },\n];\n\nexport default class ConferenceInfo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      avatarCount: MAXIMUM_AVATARS,\n    };\n\n    this._container = React.createRef();\n  }\n\n  _computeAvatarCountByWindowWidth(props) {\n    const { partyProfiles } = props;\n    const avatarProfilesCount = (partyProfiles && partyProfiles.length) || 0;\n\n    if (!this._mounted) {\n      if (avatarProfilesCount >= MAXIMUM_AVATARS) {\n        return MAXIMUM_AVATARS;\n      }\n      return avatarProfilesCount;\n    }\n\n    const width =\n      this._container &&\n      this._container.current &&\n      this._container.current.clientWidth;\n\n    let avatarCount = avatarProfilesCount;\n\n    const firstMatchWidth = KINDS_OF_WIDTH_THAT_NEED_ADAPATER.find(\n      (it) => width < it.width,\n    );\n\n    if (firstMatchWidth) {\n      avatarCount = firstMatchWidth.avartarCount;\n      if (avatarCount + 1 === avatarProfilesCount) {\n        avatarCount = avatarProfilesCount;\n      }\n    } else if (avatarCount >= MAXIMUM_AVATARS) {\n      avatarCount = MAXIMUM_AVATARS;\n    }\n\n    return avatarCount;\n  }\n\n  onWindowResize = debounce(() => {\n    this.updateAvatarAmounts(this.props);\n  }, 100);\n\n  updateAvatarAmounts(props) {\n    if (!this._mounted) {\n      return;\n    }\n\n    const avatarCount = this._computeAvatarCountByWindowWidth(props);\n\n    if (avatarCount !== this.state.avatarCount) {\n      this.setState({\n        avatarCount,\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.updateAvatarAmounts(nextProps);\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n    window.addEventListener('resize', this.onWindowResize);\n    this.updateAvatarAmounts(this.props);\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n    window.removeEventListener('resize', this.onWindowResize);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { partyProfiles } = nextProps;\n    const oldpartyProfiles = this.props.partyProfiles;\n    let showUpdate = true;\n    if (partyProfiles !== oldpartyProfiles) {\n      if (\n        Array.isArray(partyProfiles) &&\n        Array.isArray(oldpartyProfiles) &&\n        partyProfiles.length === oldpartyProfiles.length\n      ) {\n        showUpdate = false;\n        for (let i = 0; i < partyProfiles.length; i += 1) {\n          if (partyProfiles[i].id !== oldpartyProfiles[i].id) {\n            showUpdate = true;\n            break;\n          }\n        }\n      }\n    } else if (nextState.avatarCount !== this.state.avatarCount) {\n      showUpdate = true;\n    } else {\n      showUpdate = false;\n    }\n\n    return showUpdate;\n  }\n\n  computeDisplayedProfiles({ profiles, avatarCount }) {\n    const displayedProfiles =\n      profiles.length >= avatarCount\n        ? profiles.slice(0, avatarCount)\n        : profiles;\n\n    const remains = profiles.length - avatarCount;\n\n    return {\n      displayedProfiles,\n      remains,\n    };\n  }\n\n  render() {\n    const { currentLocale, partyProfiles, onClick } = this.props;\n    const profiles = partyProfiles || [];\n\n    const { avatarCount } = this.state;\n\n    const { displayedProfiles, remains } = this.computeDisplayedProfiles({\n      profiles,\n      avatarCount,\n    });\n\n    return (\n      <div className={styles.conferenceCallInfoContainer} ref={this._container}>\n        {displayedProfiles.length || (avatarCount === 0 && remains > 0) ? (\n          <div\n            className={classnames(styles.avatarContainer, styles.clickable)}\n            onClick={(e) => {\n              e.preventDefault();\n              onClick();\n            }}\n          >\n            {displayedProfiles.map(({ avatarUrl, partyName }, idx) => (\n              <div key={`${partyName}_${idx}`} className={styles.avatar}>\n                <CallAvatar avatarUrl={avatarUrl} />\n              </div>\n            ))}\n            {remains > 0 ? (\n              <div className={classnames(styles.avatar, styles.remains)}>\n                {`+${remains}`}\n              </div>\n            ) : null}\n          </div>\n        ) : (\n          <div className={styles.avatarContainer}>\n            <div className={styles.avatar} style={{ backgroundColor: '#fff' }}>\n              <i className={classnames(dynamicsFont.portrait, styles.icon)} />\n            </div>\n          </div>\n        )}\n        <p className={styles.info} data-sign=\"conferenceCall\">\n          {i18n.getString('conferenceCall', currentLocale)}\n        </p>\n      </div>\n    );\n  }\n}\n\nConferenceInfo.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  partyProfiles: PropTypes.arrayOf(\n    PropTypes.shape({\n      avatarUrl: PropTypes.string,\n      partyName: PropTypes.string,\n    }),\n  ),\n  onClick: PropTypes.func,\n};\n\nConferenceInfo.defaultProps = {\n  partyProfiles: null,\n  onClick: (i) => i,\n};\n"],"file":"ConferenceInfo.js"}