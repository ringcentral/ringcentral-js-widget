{"version":3,"sources":["components/GlipPostContent/index.js"],"names":["Attachments","attachments","attachmentFiles","map","attachment","contentUri","name","styles","attachmentImg","type","attachmentFile","downloadIcon","propTypes","PropTypes","array","isRequired","PostContent","post","className","atRender","text","length","root","replace","textContent","content","object","string","func","defaultProps","undefined"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;;AAEA,SAASA,WAAT,OAAsC;AAAA,MAAfC,WAAe,QAAfA,WAAe;AACpC,MAAMC,eAAe,GAAGD,WAAW,CAACE,GAAZ,CAAgB,UAACC,UAAD,EAAgB;AACtD,QAAI,2BAAUA,UAAU,CAACC,UAArB,CAAJ,EAAsC;AACpC,0BACE;AACE,QAAA,GAAG,EAAED,UAAU,CAACE,IADlB;AAEE,QAAA,GAAG,EAAEF,UAAU,CAACC,UAFlB;AAGE,QAAA,GAAG,EAAED,UAAU,CAACE,IAHlB;AAIE,QAAA,SAAS,EAAEC,mBAAOC;AAJpB,QADF;AAQD;;AACD,QAAIJ,UAAU,CAACK,IAAX,KAAoB,MAAxB,EAAgC;AAC9B;AACA,aAAO,qBAAP;AACD;;AACD,wBACE;AACE,MAAA,GAAG,EAAEL,UAAU,CAACE,IADlB;AAEE,MAAA,QAAQ,MAFV;AAGE,MAAA,IAAI,EAAEF,UAAU,CAACC,UAHnB;AAIE,MAAA,SAAS,EAAEE,mBAAOG;AAJpB,OAMGN,UAAU,CAACE,IANd,eAOE;AAAM,MAAA,KAAK,EAAC,UAAZ;AAAuB,MAAA,SAAS,EAAEC,mBAAOI;AAAzC,oBACE,gCAAC,oBAAD;AAAc,MAAA,KAAK,EAAC,IAApB;AAAyB,MAAA,MAAM,EAAC;AAAhC,MADF,CAPF,CADF;AAaD,GA5BuB,CAAxB;AA6BA,sBAAO;AAAK,IAAA,SAAS,EAAEJ,mBAAON;AAAvB,KAAqCC,eAArC,CAAP;AACD;;AAEDF,WAAW,CAACY,SAAZ,GAAwB;AACtBX,EAAAA,WAAW,EAAEY,sBAAUC,KAAV,CAAgBC;AADP,CAAxB;;AAIA,SAASC,WAAT,QAAoD;AAAA,MAA7BC,IAA6B,SAA7BA,IAA6B;AAAA,MAAvBC,SAAuB,SAAvBA,SAAuB;AAAA,MAAZC,QAAY,SAAZA,QAAY;;AAClD,MAAI,CAACF,IAAI,CAACG,IAAN,KAAe,CAACH,IAAI,CAAChB,WAAN,IAAqBgB,IAAI,CAAChB,WAAL,CAAiBoB,MAAjB,KAA4B,CAAhE,CAAJ,EAAwE;AACtE,wBACE;AAAK,MAAA,SAAS,EAAE,4BAAWd,mBAAOe,IAAlB,EAAwBJ,SAAxB;AAAhB,6BADF;AAKD;;AACD,MAAIE,IAAI,GAAGH,IAAI,CAACG,IAAhB;;AACA,MAAIA,IAAJ,EAAU;AACRA,IAAAA,IAAI,GAAGA,IAAI,CAACG,OAAL,CAAa,QAAb,EAAuB,OAAvB,EAAgCA,OAAhC,CAAwC,SAAxC,EAAmD,SAAnD,CAAP;AACD;;AACD,MAAMC,WAAW,GAAGJ,IAAI,gBACtB,gCAAC,wBAAD;AAAU,IAAA,IAAI,EAAEA,IAAhB;AAAsB,IAAA,QAAQ,EAAED;AAAhC,IADsB,GAEpB,IAFJ;AAGA,MAAMlB,WAAW,GAAGgB,IAAI,CAAChB,WAAL,gBAClB,gCAAC,WAAD;AAAa,IAAA,WAAW,EAAEgB,IAAI,CAAChB;AAA/B,IADkB,GAEhB,IAFJ;AAGA,sBACE;AAAK,IAAA,SAAS,EAAE,4BAAWM,mBAAOe,IAAlB,EAAwBJ,SAAxB;AAAhB,kBACE;AAAK,IAAA,SAAS,EAAEX,mBAAOkB;AAAvB,KACGD,WADH,EAEGvB,WAFH,CADF,CADF;AAQD;;AAEDe,WAAW,CAACJ,SAAZ,GAAwB;AACtBK,EAAAA,IAAI,EAAEJ,sBAAUa,MAAV,CAAiBX,UADD;AAEtBG,EAAAA,SAAS,EAAEL,sBAAUc,MAFC;AAGtBR,EAAAA,QAAQ,EAAEN,sBAAUe;AAHE,CAAxB;AAMAZ,WAAW,CAACa,YAAZ,GAA2B;AACzBX,EAAAA,SAAS,EAAEY,SADc;AAEzBX,EAAAA,QAAQ,EAAEW;AAFe,CAA3B;eAKed,W","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport DownloadIcon from 'ringcentral-widgets/assets/images/Download.svg';\n\nimport isPicture from '../../lib/isPicture';\n\nimport Markdown from '../GlipMarkdown';\n\nimport styles from './styles.scss';\n\nfunction Attachments({ attachments }) {\n  const attachmentFiles = attachments.map((attachment) => {\n    if (isPicture(attachment.contentUri)) {\n      return (\n        <img\n          key={attachment.name}\n          src={attachment.contentUri}\n          alt={attachment.name}\n          className={styles.attachmentImg}\n        />\n      );\n    }\n    if (attachment.type === 'Card') {\n      // TODO: update message with i18n\n      return 'Unsupported message';\n    }\n    return (\n      <a\n        key={attachment.name}\n        download\n        href={attachment.contentUri}\n        className={styles.attachmentFile}\n      >\n        {attachment.name}\n        <span title=\"Download\" className={styles.downloadIcon}>\n          <DownloadIcon width=\"18\" height=\"18\" />\n        </span>\n      </a>\n    );\n  });\n  return <div className={styles.attachments}>{attachmentFiles}</div>;\n}\n\nAttachments.propTypes = {\n  attachments: PropTypes.array.isRequired,\n};\n\nfunction PostContent({ post, className, atRender }) {\n  if (!post.text && (!post.attachments || post.attachments.length === 0)) {\n    return (\n      <div className={classnames(styles.root, className)}>\n        Unsupported message\n      </div>\n    );\n  }\n  let text = post.text;\n  if (text) {\n    text = text.replace('[code]', '```\\n').replace('[/code]', '\\n```\\n');\n  }\n  const textContent = text ? (\n    <Markdown text={text} atRender={atRender} />\n  ) : null;\n  const attachments = post.attachments ? (\n    <Attachments attachments={post.attachments} />\n  ) : null;\n  return (\n    <div className={classnames(styles.root, className)}>\n      <div className={styles.content}>\n        {textContent}\n        {attachments}\n      </div>\n    </div>\n  );\n}\n\nPostContent.propTypes = {\n  post: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  atRender: PropTypes.func,\n};\n\nPostContent.defaultProps = {\n  className: undefined,\n  atRender: undefined,\n};\n\nexport default PostContent;\n"],"file":"index.js"}