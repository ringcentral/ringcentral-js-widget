{"version":3,"sources":["components/RecentActivityMessages/index.js"],"names":["cx","classNames","bind","styles","MessageItem","message","navigateTo","dateTimeFormatter","subject","creationTime","readStatus","conversationId","isUnread","time","utcTimestamp","localMessageItem","fromRemote","dl","unread","propTypes","PropTypes","object","isRequired","func","RecentActivityMessages","nextProps","currentLocale","props","messages","isMessagesLoaded","messageListView","spinner","length","map","id","noRecords","i18n","getString","Component","string","array","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport Spinner from '../Spinner';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nconst cx = classNames.bind(styles);\nfunction MessageItem({ message, navigateTo, dateTimeFormatter }) {\n  const { subject, creationTime, readStatus, conversationId } = message;\n  const isUnread = readStatus !== 'Read';\n  const time = dateTimeFormatter({ utcTimestamp: creationTime });\n  return (\n    <div\n      className={cx('messageItem', { localMessageItem: !message.fromRemote })}\n      onClick={() =>\n        !message.fromRemote && navigateTo(`/conversations/${conversationId}`)\n      }\n    >\n      <dl className={styles.dl}>\n        <dt\n          className={cx('messageSubject', { unread: isUnread })}\n          title={subject}\n        >\n          {subject}\n        </dt>\n        <dd className={cx('messageTime', { unread: isUnread })} title={time}>\n          {time}\n        </dd>\n      </dl>\n    </div>\n  );\n}\n\nMessageItem.propTypes = {\n  message: PropTypes.object.isRequired,\n  navigateTo: PropTypes.func.isRequired,\n  dateTimeFormatter: PropTypes.func.isRequired,\n};\n\nexport default class RecentActivityMessages extends Component {\n  shouldComponentUpdate(nextProps) {\n    return (\n      nextProps.currentLocale !== this.props.currentLocale ||\n      nextProps.messages !== this.props.messages ||\n      nextProps.isMessagesLoaded !== this.props.isMessagesLoaded\n    );\n  }\n\n  render() {\n    const {\n      currentLocale,\n      messages,\n      isMessagesLoaded,\n      navigateTo,\n      dateTimeFormatter,\n    } = this.props;\n    let messageListView = null;\n    if (!isMessagesLoaded) {\n      messageListView = <Spinner className={styles.spinner} ringWidth={4} />;\n    } else if (messages.length > 0) {\n      messageListView = messages.map((message) => (\n        <MessageItem\n          key={message.id}\n          message={message}\n          navigateTo={navigateTo}\n          dateTimeFormatter={dateTimeFormatter}\n        />\n      ));\n    } else {\n      messageListView = (\n        <p className={styles.noRecords}>\n          {i18n.getString('noRecords', currentLocale)}\n        </p>\n      );\n    }\n    return <div className={styles.messages}>{messageListView}</div>;\n  }\n}\n\nRecentActivityMessages.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  messages: PropTypes.array.isRequired,\n  isMessagesLoaded: PropTypes.bool.isRequired,\n  navigateTo: PropTypes.func.isRequired,\n  dateTimeFormatter: PropTypes.func.isRequired,\n};\n"],"file":"index.js"}