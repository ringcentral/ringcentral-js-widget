{"version":3,"sources":["components/SessionConfigPanel/SessionConfigPanel.spec.tsx"],"names":["wrapper","currentLocale","defaultSkillProfileList","profileId","profileName","isDefault","profileDesc","defaultLoginTypeList","label","id","setup","selectedSkillProfileId","skillProfileList","setSkillProfileId","loginTypeList","loginType","setLoginType","extensionNumber","setExtensionNumber","takingCall","setTakingCall","autoAnswer","setAutoAnswer","setConfigure","inboundQueuesFieldText","isLoading","isExtensionNumber","navigateToInboundQueuesPage","getConfigureButton","find","at","afterEach","unmount","describe","it","jest","fn","inboundQueuesField","expect","prop","toEqual","simulate","toBeCalled","extensionNumberFieldFn","extensionNumberField","newExtensionNumber","target","value","toBeCalledWith","extensionNumberField2","toHaveLength","configureButton","toBe","not","skillProfilePickList","text","x","length","userSelectedSkillProfileId","document","body","querySelector","click","loginTypePickList","changeLoginType","menuItems","querySelectorAll"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AASA,IAAIA,OAAJ;AACA,IAAMC,aAAa,GAAG,OAAtB;AACA,IAAMC,uBAAuB,GAAG,CAC9B;AACEC,EAAAA,SAAS,EAAE,MADb;AAEEC,EAAAA,WAAW,EAAE,MAFf;AAGEC,EAAAA,SAAS,EAAE,GAHb;AAIEC,EAAAA,WAAW,EAAE;AAJf,CAD8B,EAO9B;AACEH,EAAAA,SAAS,EAAE,MADb;AAEEC,EAAAA,WAAW,EAAE,KAFf;AAGEC,EAAAA,SAAS,EAAE,GAHb;AAIEC,EAAAA,WAAW,EAAE;AAJf,CAP8B,EAa9B;AACEH,EAAAA,SAAS,EAAE,MADb;AAEEC,EAAAA,WAAW,EAAE,MAFf;AAGEC,EAAAA,SAAS,EAAE,GAHb;AAIEC,EAAAA,WAAW,EAAE;AAJf,CAb8B,CAAhC;AAoBA,IAAMC,oBAAoB,GAAG,CAC3B;AACEC,EAAAA,KAAK,EAAE,eADT;AAEEC,EAAAA,EAAE,EAAE;AAFN,CAD2B,EAK3B;AACED,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,EAAE,EAAE;AAFN,CAL2B,CAA7B;;AAWA,SAASC,KAAT,OAkBqC;AAAA,mCAjBnCC,sBAiBmC;AAAA,MAjBnCA,sBAiBmC,sCAjBV,MAiBU;AAAA,mCAhBnCC,gBAgBmC;AAAA,MAhBnCA,gBAgBmC,sCAhBhBV,uBAgBgB;AAAA,mCAfnCW,iBAemC;AAAA,MAfnCA,iBAemC,sCAff,YAAM,CAAE,CAeO;AAAA,gCAdnCC,aAcmC;AAAA,MAdnCA,aAcmC,mCAdnBP,oBAcmB;AAAA,4BAbnCQ,SAamC;AAAA,MAbnCA,SAamC,+BAbvB,KAauB;AAAA,+BAZnCC,YAYmC;AAAA,MAZnCA,YAYmC,kCAZpB,YAAM,CAAE,CAYY;AAAA,kCAXnCC,eAWmC;AAAA,MAXnCA,eAWmC,qCAXjB,EAWiB;AAAA,mCAVnCC,kBAUmC;AAAA,MAVnCA,kBAUmC,sCAVd,YAAM,CAAE,CAUM;AAAA,6BATnCC,UASmC;AAAA,MATnCA,UASmC,gCATtB,KASsB;AAAA,gCARnCC,aAQmC;AAAA,MARnCA,aAQmC,mCARnB,YAAM,CAAE,CAQW;AAAA,6BAPnCC,UAOmC;AAAA,MAPnCA,UAOmC,gCAPtB,IAOsB;AAAA,gCANnCC,aAMmC;AAAA,MANnCA,aAMmC,mCANnB,YAAM,CAAE,CAMW;AAAA,+BALnCC,YAKmC;AAAA,MALnCA,YAKmC,kCALpB;AAAA,WAAM,IAAN;AAAA,GAKoB;AAAA,mCAJnCC,sBAImC;AAAA,MAJnCA,sBAImC,sCAJV,EAIU;AAAA,4BAHnCC,SAGmC;AAAA,MAHnCA,SAGmC,+BAHvB,KAGuB;AAAA,mCAFnCC,iBAEmC;AAAA,MAFnCA,iBAEmC,sCAFf,KAEe;AAAA,mCADnCC,2BACmC;AAAA,MADnCA,2BACmC,sCADL,YAAM,CAAE,CACH;AACnC,SAAO,iCACL,gCAAC,qBAAD,qBACE,gCAAC,sCAAD;AACE,IAAA,aAAa,EAAE1B,aADjB;AAEE,IAAA,sBAAsB,EAAEU,sBAF1B;AAGE,IAAA,gBAAgB,EAAEC,gBAHpB;AAIE,IAAA,iBAAiB,EAAEC,iBAJrB;AAKE,IAAA,aAAa,EAAEC,aALjB;AAME,IAAA,SAAS,EAAEC,SANb;AAOE,IAAA,YAAY,EAAEC,YAPhB;AAQE,IAAA,eAAe,EAAEC,eARnB;AASE,IAAA,kBAAkB,EAAEC,kBATtB;AAUE,IAAA,UAAU,EAAEC,UAVd;AAWE,IAAA,aAAa,EAAEC,aAXjB;AAYE,IAAA,UAAU,EAAEC,UAZd;AAaE,IAAA,aAAa,EAAEC,aAbjB;AAcE,IAAA,YAAY,EAAEC,YAdhB;AAeE,IAAA,sBAAsB,EAAEC,sBAf1B;AAgBE,IAAA,iBAAiB,EAAEE,iBAhBrB;AAiBE,IAAA,SAAS,EAAED,SAjBb;AAkBE,IAAA,2BAA2B,EAAEE;AAlB/B,IADF,CADK,CAAP;AAwBD;;AAED,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SACzB5B,OAAO,CACJ6B,IADH,CACQ,oCADR,EAEGC,EAFH,CAEM,CAFN,EAGGD,IAHH,CAGQ,QAHR,CADyB;AAAA,CAA3B;;AAMAE,SAAS,uEAAC;AAAA;AAAA;AAAA;AAAA;AACR/B,UAAAA,OAAO,CAACgC,OAAR;;AADQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,GAAT;AAIAC,QAAQ,CAAC,wBAAD,uEAA2B;AAAA;AAAA;AAAA;AAAA;AACjCC,UAAAA,EAAE,CAAC,qGAAD,EAAwG,YAAM;AAC9G,gBAAMP,2BAA2B,GAAGQ,IAAI,CAACC,EAAL,EAApC;AACA,gBAAMZ,sBAAsB,GAAG,cAA/B;AACAxB,YAAAA,OAAO,GAAGU,KAAK,CAAC;AACdc,cAAAA,sBAAsB,EAAtBA,sBADc;AAEdG,cAAAA,2BAA2B,EAA3BA;AAFc,aAAD,CAAf;AAIA,gBAAMU,kBAAkB,GAAGrC,OAAO,CAC/B6B,IADwB,CACnB,wCADmB,EAExBC,EAFwB,CAErB,CAFqB,EAGxBD,IAHwB,CAGnB,OAHmB,EAIxBC,EAJwB,CAIrB,CAJqB,CAA3B;AAMAQ,YAAAA,MAAM,CAACD,kBAAkB,CAACE,IAAnB,CAAwB,OAAxB,CAAD,CAAN,CAAyCC,OAAzC,CAAiDhB,sBAAjD;AACAa,YAAAA,kBAAkB,CAACI,QAAnB,CAA4B,OAA5B;AACAH,YAAAA,MAAM,CAACX,2BAAD,CAAN,CAAoCe,UAApC;AACD,WAhBC,CAAF;AAkBAR,UAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACrE,gBAAMhB,kBAAkB,GAAGiB,IAAI,CAACC,EAAL,EAA3B;AACA,gBAAMnB,eAAe,GAAG,aAAxB;AACAjB,YAAAA,OAAO,GAAGU,KAAK,CAAC;AACdQ,cAAAA,kBAAkB,EAAlBA,kBADc;AAEdD,cAAAA,eAAe,EAAfA,eAFc;AAGdS,cAAAA,iBAAiB,EAAE;AAHL,aAAD,CAAf;;AAMA,gBAAMiB,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,qBAC7B3C,OAAO,CACJ6B,IADH,CACQ,0CADR,EAEGC,EAFH,CAEM,CAFN,EAGGD,IAHH,CAGQ,OAHR,EAIGC,EAJH,CAIM,CAJN,CAD6B;AAAA,aAA/B;;AAMA,gBAAMc,oBAAoB,GAAGD,sBAAsB,EAAnD;AAEAL,YAAAA,MAAM,CAACM,oBAAoB,CAACL,IAArB,CAA0B,OAA1B,CAAD,CAAN,CAA2CC,OAA3C,CAAmDvB,eAAnD;AAEA,gBAAM4B,kBAAkB,GAAG,aAA3B;AACAD,YAAAA,oBAAoB,CAACH,QAArB,CAA8B,QAA9B,EAAwC;AACtCK,cAAAA,MAAM,EAAE;AAAEC,gBAAAA,KAAK,EAAEF;AAAT;AAD8B,aAAxC;AAGAP,YAAAA,MAAM,CAACpB,kBAAD,CAAN,CAA2B8B,cAA3B,CAA0CH,kBAA1C;AAEA7C,YAAAA,OAAO,GAAGU,KAAK,CAAC;AACdQ,cAAAA,kBAAkB,EAAlBA,kBADc;AAEdD,cAAAA,eAAe,EAAfA,eAFc;AAGdS,cAAAA,iBAAiB,EAAE;AAHL,aAAD,CAAf;AAKA,gBAAMuB,qBAAqB,GAAGN,sBAAsB,EAApD;AAEAL,YAAAA,MAAM,CAACW,qBAAD,CAAN,CAA8BC,YAA9B,CAA2C,CAA3C;AACD,WAjCC,CAAF,CAnBiC,CAsDjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAhB,UAAAA,EAAE,CAAC,mEAAD,EAAsE,YAAM;AAC5E,gBAAMX,YAAY,GAAGY,IAAI,CAACC,EAAL,EAArB;AACApC,YAAAA,OAAO,GAAGU,KAAK,CAAC;AACda,cAAAA,YAAY,EAAZA;AADc,aAAD,CAAf;AAGA,gBAAM4B,eAAe,GAAGvB,kBAAkB,EAA1C;AACAuB,YAAAA,eAAe,CAACV,QAAhB,CAAyB,OAAzB;AACAH,YAAAA,MAAM,CAACf,YAAD,CAAN,CAAqBmB,UAArB;AACD,WARC,CAAF;AAUAR,UAAAA,EAAE,CAAC,yFAAD,EAA4F,YAAM;AAClG,gBAAMX,YAAY,GAAGY,IAAI,CAACC,EAAL,EAArB;AACA,gBAAMX,SAAS,GAAG,IAAlB;AACAzB,YAAAA,OAAO,GAAGU,KAAK,CAAC;AACda,cAAAA,YAAY,EAAZA,YADc;AAEdE,cAAAA,SAAS,EAATA;AAFc,aAAD,CAAf;AAIA,gBAAM0B,eAAe,GAAGvB,kBAAkB,EAA1C;AACAU,YAAAA,MAAM,CAACa,eAAe,CAACtB,IAAhB,CAAqB,oBAArB,CAAD,CAAN,CAAmDqB,YAAnD,CAAgE,CAAhE;AACAZ,YAAAA,MAAM,CAACa,eAAe,CAACZ,IAAhB,CAAqB,UAArB,CAAD,CAAN,CAAyCa,IAAzC,CAA8C3B,SAA9C;AACA0B,YAAAA,eAAe,CAACV,QAAhB,CAAyB,OAAzB;AACAH,YAAAA,MAAM,CAACf,YAAD,CAAN,CAAqB8B,GAArB,CAAyBX,UAAzB;AACD,WAZC,CAAF;AAcAR,UAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAClE,gBAAMrB,iBAAiB,GAAGsB,IAAI,CAACC,EAAL,EAA1B;AACA,gBAAMzB,sBAAsB,GAAG,MAA/B;AACAX,YAAAA,OAAO,GAAGU,KAAK,CAAC;AACdG,cAAAA,iBAAiB,EAAjBA,iBADc;AAEdF,cAAAA,sBAAsB,EAAtBA;AAFc,aAAD,CAAf;AAIA,gBAAM2C,oBAAoB,GAAGtD,OAAO,CAAC6B,IAAR,CAC3B,oCAD2B,CAA7B;AAIAS,YAAAA,MAAM,CAACgB,oBAAoB,CAACf,IAArB,CAA0B,OAA1B,CAAD,CAAN,CAA2Ca,IAA3C,CAAgDzC,sBAAhD;AACA2B,YAAAA,MAAM,CAACgB,oBAAoB,CAACzB,IAArB,CAA0B,iBAA1B,EAA6C0B,IAA7C,EAAD,CAAN,CAA4DH,IAA5D,CACElD,uBAAuB,CAAC2B,IAAxB,CACE,UAAC2B,CAAD;AAAA,qBAAOA,CAAC,CAACrD,SAAF,KAAgBQ,sBAAvB;AAAA,aADF,EAEEP,WAHJ;AAKAkC,YAAAA,MAAM,CAACgB,oBAAoB,CAACf,IAArB,CAA0B,SAA1B,CAAD,CAAN,CAA6CW,YAA7C,CACEhD,uBAAuB,CAACuD,MAD1B;AAGA,gBAAMC,0BAA0B,GAAG,MAAnC;AAEAJ,YAAAA,oBAAoB,CAACzB,IAArB,CAA0B,iBAA1B,EAA6CY,QAA7C,CAAsD,OAAtD;AACAkB,YAAAA,QAAQ,CAACC,IAAT,CACGC,aADH,2BAEsBH,0BAFtB,UAIGI,KAJH;AAKAxB,YAAAA,MAAM,CAACzB,iBAAD,CAAN,CAA0BmC,cAA1B,CAAyCU,0BAAzC;AACD,WA7BC,CAAF;AA+BAxB,UAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC/D,gBAAMlB,YAAY,GAAGmB,IAAI,CAACC,EAAL,EAArB;AACA,gBAAMrB,SAAS,GAAG,KAAlB;AACAf,YAAAA,OAAO,GAAGU,KAAK,CAAC;AACdM,cAAAA,YAAY,EAAZA,YADc;AAEdD,cAAAA,SAAS,EAATA;AAFc,aAAD,CAAf;AAIA,gBAAMgD,iBAAiB,GAAG/D,OAAO,CAAC6B,IAAR,CAAa,iCAAb,CAA1B;AAEAS,YAAAA,MAAM,CAACyB,iBAAiB,CAACxB,IAAlB,CAAuB,OAAvB,CAAD,CAAN,CAAwCa,IAAxC,CAA6CrC,SAA7C;AACAuB,YAAAA,MAAM,CAACyB,iBAAiB,CAAClC,IAAlB,CAAuB,iBAAvB,EAA0C0B,IAA1C,EAAD,CAAN,CAAyDH,IAAzD,CACE7C,oBAAoB,CAACsB,IAArB,CAA0B,UAAC2B,CAAD;AAAA,qBAAOA,CAAC,CAAC/C,EAAF,KAASM,SAAhB;AAAA,aAA1B,EAAqDP,KADvD;AAGA,gBAAMwD,eAAe,GAAG,KAAxB;AACAD,YAAAA,iBAAiB,CAAClC,IAAlB,CAAuB,iBAAvB,EAA0CY,QAA1C,CAAmD,OAAnD;AACA,gBAAMwB,SAAS,GAAGN,QAAQ,CAACC,IAAT,CAAcM,gBAAd,CAChB,yCADgB,CAAlB;AAGA5B,YAAAA,MAAM,CAAC2B,SAAD,CAAN,CAAkBf,YAAlB,CAA+B3C,oBAAoB,CAACkD,MAApD;AACAE,YAAAA,QAAQ,CAACC,IAAT,CACGC,aADH,2BACsDG,eADtD,UAEGF,KAFH;AAGAxB,YAAAA,MAAM,CAACtB,YAAD,CAAN,CAAqBgC,cAArB,CAAoCgB,eAApC;AACD,WAvBC,CAAF;;AAjJiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B,GAAR","sourcesContent":["import React from 'react';\nimport { RcThemeProvider } from '@ringcentral-integration/rcui';\nimport { mount } from 'enzyme';\nimport { SessionConfigPanel } from './SessionConfigPanel';\nimport {\n  EvSessionConfigUIFunctions,\n  EvSessionConfigUIProps,\n} from '../../interfaces/EvSessionConfigUI.interface';\n\nexport type SessionConfigPanelProps = EvSessionConfigUIProps &\n  EvSessionConfigUIFunctions;\n\nlet wrapper;\nconst currentLocale = 'en-US';\nconst defaultSkillProfileList = [\n  {\n    profileId: '1001',\n    profileName: 'Work',\n    isDefault: '1',\n    profileDesc: 'like to work',\n  },\n  {\n    profileId: '1002',\n    profileName: 'eat',\n    isDefault: '1',\n    profileDesc: 'fat man',\n  },\n  {\n    profileId: '1003',\n    profileName: 'play',\n    isDefault: '1',\n    profileDesc: 'like to work',\n  },\n];\nconst defaultLoginTypeList = [\n  {\n    label: 'externalPhone',\n    id: '101',\n  },\n  {\n    label: 'externalPhone2',\n    id: '102',\n  },\n];\n\nfunction setup({\n  selectedSkillProfileId = '1002',\n  skillProfileList = defaultSkillProfileList,\n  setSkillProfileId = () => {},\n  loginTypeList = defaultLoginTypeList,\n  loginType = '102',\n  setLoginType = () => {},\n  extensionNumber = '',\n  setExtensionNumber = () => {},\n  takingCall = false,\n  setTakingCall = () => {},\n  autoAnswer = true,\n  setAutoAnswer = () => {},\n  setConfigure = () => null,\n  inboundQueuesFieldText = '',\n  isLoading = false,\n  isExtensionNumber = false,\n  navigateToInboundQueuesPage = () => {},\n}: Partial<SessionConfigPanelProps>) {\n  return mount(\n    <RcThemeProvider>\n      <SessionConfigPanel\n        currentLocale={currentLocale}\n        selectedSkillProfileId={selectedSkillProfileId}\n        skillProfileList={skillProfileList}\n        setSkillProfileId={setSkillProfileId}\n        loginTypeList={loginTypeList}\n        loginType={loginType}\n        setLoginType={setLoginType}\n        extensionNumber={extensionNumber}\n        setExtensionNumber={setExtensionNumber}\n        takingCall={takingCall}\n        setTakingCall={setTakingCall}\n        autoAnswer={autoAnswer}\n        setAutoAnswer={setAutoAnswer}\n        setConfigure={setConfigure}\n        inboundQueuesFieldText={inboundQueuesFieldText}\n        isExtensionNumber={isExtensionNumber}\n        isLoading={isLoading}\n        navigateToInboundQueuesPage={navigateToInboundQueuesPage}\n      />\n    </RcThemeProvider>,\n  );\n}\n\nconst getConfigureButton = () =>\n  wrapper\n    .find('RcButton[data-sign=\"setConfigure\"]')\n    .at(0)\n    .find('button');\n\nafterEach(async () => {\n  wrapper.unmount();\n});\n\ndescribe('<SessionConfigPanel />', async () => {\n  it(\"Page display user's selected Inbound queue, and navigate to InboundQueuesPage when click the field.\", () => {\n    const navigateToInboundQueuesPage = jest.fn();\n    const inboundQueuesFieldText = 'AmyTestQueue';\n    wrapper = setup({\n      inboundQueuesFieldText,\n      navigateToInboundQueuesPage,\n    });\n    const inboundQueuesField = wrapper\n      .find('RcTextField[data-sign=\"inboundQueues\"]')\n      .at(0)\n      .find('input')\n      .at(0);\n\n    expect(inboundQueuesField.prop('value')).toEqual(inboundQueuesFieldText);\n    inboundQueuesField.simulate('click');\n    expect(navigateToInboundQueuesPage).toBeCalled();\n  });\n\n  it('Can display extensionNumber correctly, and can be changed.', () => {\n    const setExtensionNumber = jest.fn();\n    const extensionNumber = '65787344333';\n    wrapper = setup({\n      setExtensionNumber,\n      extensionNumber,\n      isExtensionNumber: true,\n    });\n\n    const extensionNumberFieldFn = () =>\n      wrapper\n        .find('RcTextField[data-sign=\"extensionNumber\"]')\n        .at(0)\n        .find('input')\n        .at(0);\n    const extensionNumberField = extensionNumberFieldFn();\n\n    expect(extensionNumberField.prop('value')).toEqual(extensionNumber);\n\n    const newExtensionNumber = '65787344366';\n    extensionNumberField.simulate('change', {\n      target: { value: newExtensionNumber },\n    });\n    expect(setExtensionNumber).toBeCalledWith(newExtensionNumber);\n\n    wrapper = setup({\n      setExtensionNumber,\n      extensionNumber,\n      isExtensionNumber: false,\n    });\n    const extensionNumberField2 = extensionNumberFieldFn();\n\n    expect(extensionNumberField2).toHaveLength(0);\n  });\n\n  // [true, false].forEach((takingCall) => {\n  //   it(`When click the takingCall, setTakingCall to be called. (with initial state: ${takingCall})`, () => {\n  //     const setTakingCall = jest.fn();\n  //     wrapper = setup({\n  //       takingCall,\n  //       setTakingCall,\n  //     });\n  //     const takingCallToggle = wrapper\n  //       .find('ToggleButton[data-sign=\"takingCall\"]')\n  //       .at(0)\n  //       .find('input[type=\"checkbox\"]')\n  //       .at(0);\n  //     expect(takingCallToggle.prop('checked')).toEqual(takingCall);\n  //     takingCallToggle.simulate('change', { target: { value: !takingCall } });\n  //     expect(setTakingCall).toBeCalledWith(!takingCall);\n  //   });\n  // });\n\n  // [true, false].forEach((autoAnswer) => {\n  //   it(`When click the autoAnswer, setAutoAnswer to be called. (with initial state: ${autoAnswer})`, () => {\n  //     const setAutoAnswer = jest.fn();\n  //     wrapper = setup({\n  //       autoAnswer,\n  //       setAutoAnswer,\n  //     });\n  //     const autoAnswerToggle = wrapper\n  //       .find('ToggleButton[data-sign=\"autoAnswer\"]')\n  //       .at(0)\n  //       .find('input[type=\"checkbox\"]')\n  //       .at(0);\n  //     expect(autoAnswerToggle.prop('checked')).toEqual(autoAnswer);\n  //     autoAnswerToggle.simulate('change', { target: { value: !autoAnswer } });\n  //     expect(setAutoAnswer).toBeCalledWith(!autoAnswer);\n  //   });\n  // });\n\n  it('When user click setConfigure Button, setConfigure is to be called', () => {\n    const setConfigure = jest.fn();\n    wrapper = setup({\n      setConfigure,\n    });\n    const configureButton = getConfigureButton();\n    configureButton.simulate('click');\n    expect(setConfigure).toBeCalled();\n  });\n\n  it('When loading, setConfigure Button is in loading state, and setConfigure cannot be fired', () => {\n    const setConfigure = jest.fn();\n    const isLoading = true;\n    wrapper = setup({\n      setConfigure,\n      isLoading,\n    });\n    const configureButton = getConfigureButton();\n    expect(configureButton.find('RcCircularProgress')).toHaveLength(1);\n    expect(configureButton.prop('disabled')).toBe(isLoading);\n    configureButton.simulate('click');\n    expect(setConfigure).not.toBeCalled();\n  });\n\n  it('Can display skillProfile correctly, and can be changed.', () => {\n    const setSkillProfileId = jest.fn();\n    const selectedSkillProfileId = '1002';\n    wrapper = setup({\n      setSkillProfileId,\n      selectedSkillProfileId,\n    });\n    const skillProfilePickList = wrapper.find(\n      'PickList[data-sign=\"skillProfile\"]',\n    );\n\n    expect(skillProfilePickList.prop('value')).toBe(selectedSkillProfileId);\n    expect(skillProfilePickList.find('[role=\"button\"]').text()).toBe(\n      defaultSkillProfileList.find(\n        (x) => x.profileId === selectedSkillProfileId,\n      ).profileName,\n    );\n    expect(skillProfilePickList.prop('options')).toHaveLength(\n      defaultSkillProfileList.length,\n    );\n    const userSelectedSkillProfileId = '1003';\n\n    skillProfilePickList.find('[role=\"button\"]').simulate('click');\n    document.body\n      .querySelector<HTMLButtonElement>(\n        `li[data-value=\"${userSelectedSkillProfileId}\"]`,\n      )\n      .click();\n    expect(setSkillProfileId).toBeCalledWith(userSelectedSkillProfileId);\n  });\n\n  it('Can display loginType correctly, and can be changed.', () => {\n    const setLoginType = jest.fn();\n    const loginType = '102';\n    wrapper = setup({\n      setLoginType,\n      loginType,\n    });\n    const loginTypePickList = wrapper.find('PickList[data-sign=\"loginType\"]');\n\n    expect(loginTypePickList.prop('value')).toBe(loginType);\n    expect(loginTypePickList.find('[role=\"button\"]').text()).toBe(\n      defaultLoginTypeList.find((x) => x.id === loginType).label,\n    );\n    const changeLoginType = '101';\n    loginTypePickList.find('[role=\"button\"]').simulate('click');\n    const menuItems = document.body.querySelectorAll(\n      '[role=\"presentation\"] li[role=\"option\"]',\n    );\n    expect(menuItems).toHaveLength(defaultLoginTypeList.length);\n    document.body\n      .querySelector<HTMLButtonElement>(`li[data-value=\"${changeLoginType}\"]`)\n      .click();\n    expect(setLoginType).toBeCalledWith(changeLoginType);\n  });\n});\n"],"file":"SessionConfigPanel.spec.js"}