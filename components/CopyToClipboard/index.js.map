{"version":3,"sources":["components/CopyToClipboard/index.js"],"names":["CopyToClipboard","copyTextArea","focus","select","result","document","execCommand","blur","props","handleSuccess","handleFailure","e","console","error","currentLocale","buttonClassName","disabled","copiedText","buttonText","CustomButton","button","styles","container","ref","executeCopy","primaryButton","i18n","getString","Component","propTypes","PropTypes","string","isRequired","func","bool","oneOfType","node","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Button from '../Button';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nclass CopyToClipboard extends Component {\n  executeCopy() {\n    this.copyTextArea.focus();\n    this.copyTextArea.select();\n    try {\n      const result = document.execCommand('copy');\n      if (result) {\n        this.copyTextArea.blur();\n        if (typeof this.props.handleSuccess === 'function')\n          this.props.handleSuccess();\n      } else if (typeof this.props.handleFailure === 'function') {\n        this.props.handleFailure();\n      }\n    } catch (e) {\n      console.error(e);\n      if (typeof this.props.handleFailure === 'function') {\n        this.props.handleFailure();\n      }\n    }\n  }\n\n  render() {\n    const {\n      currentLocale,\n      buttonClassName,\n      disabled,\n      copiedText,\n      buttonText,\n      button: CustomButton,\n    } = this.props;\n    return (\n      <div className={styles.container}>\n        <textarea\n          className={styles.copyTextArea}\n          ref={(ref) => {\n            this.copyTextArea = ref;\n          }}\n          defaultValue={copiedText}\n        />\n        {CustomButton ? (\n          <CustomButton\n            {...this.props}\n            executeCopy={() => this.executeCopy()}\n          />\n        ) : (\n          <Button\n            disabled={disabled}\n            dataSign=\"copyToClipboard\"\n            className={classnames(styles.primaryButton, buttonClassName)}\n            onClick={() => this.executeCopy()}\n          >\n            {buttonText || i18n.getString('copyToClipboard', currentLocale)}\n          </Button>\n        )}\n      </div>\n    );\n  }\n}\n\nCopyToClipboard.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  handleSuccess: PropTypes.func,\n  handleFailure: PropTypes.func,\n  buttonClassName: PropTypes.string,\n  disabled: PropTypes.bool,\n  copiedText: PropTypes.string,\n  buttonText: PropTypes.string,\n  button: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n};\n\nCopyToClipboard.defaultProps = {\n  handleSuccess: undefined,\n  handleFailure: undefined,\n  buttonClassName: undefined,\n  disabled: undefined,\n  copiedText: undefined,\n  buttonText: undefined,\n  button: undefined,\n};\n\nexport default CopyToClipboard;\n"],"file":"index.js"}