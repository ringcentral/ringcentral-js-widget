{"version":3,"sources":["components/CopyToClipboard/index.js"],"names":["CopyToClipboard","props","copiedText","handleSuccess","handleFailure","currentLocale","buttonClassName","disabled","buttonText","CustomButton","button","executeCopy","styles","primaryButton","i18n","getString","Component","propTypes","PropTypes","string","isRequired","func","bool","oneOfType","node","defaultProps","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,e;;;;;;;;;;;;;;;;;;;;;8BAEmD,KAAKC,K,EAAlDC,U,eAAAA,U,EAAYC,a,eAAAA,a,EAAeC,a,eAAAA,a;;;uBAE3B,4BAAWF,UAAX,C;;;AACNC,gBAAAA,aAAa;;;;;;;;AAEb,oBAAI,OAAOC,aAAP,KAAyB,UAA7B,EAAyC;AACvCA,kBAAAA,aAAa;AACd;;;;;;;;;;;;;;;;;;6BAII;AAAA;;AAAA,yBAOH,KAAKH,KAPF;AAAA,UAELI,aAFK,gBAELA,aAFK;AAAA,UAGLC,eAHK,gBAGLA,eAHK;AAAA,UAILC,QAJK,gBAILA,QAJK;AAAA,UAKLC,UALK,gBAKLA,UALK;AAAA,UAMGC,YANH,gBAMLC,MANK;AAQP,aAAOD,YAAY,gBACjB,gCAAC,YAAD,eAAkB,KAAKR,KAAvB;AAA8B,QAAA,WAAW,EAAE;AAAA,iBAAM,KAAI,CAACU,WAAL,EAAN;AAAA;AAA3C,SADiB,gBAGjB,gCAAC,cAAD;AACE,QAAA,QAAQ,EAAEJ,QADZ;AAEE,QAAA,QAAQ,EAAC,iBAFX;AAGE,QAAA,SAAS,EAAE,4BAAWK,mBAAOC,aAAlB,EAAiCP,eAAjC,CAHb;AAIE,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACK,WAAL,EAAN;AAAA;AAJX,SAMGH,UAAU,IAAIM,iBAAKC,SAAL,CAAe,iBAAf,EAAkCV,aAAlC,CANjB,CAHF;AAYD;;;;EAjC2BW,gB;;AAoC9BhB,eAAe,CAACiB,SAAhB,GAA4B;AAC1BZ,EAAAA,aAAa,EAAEa,sBAAUC,MAAV,CAAiBC,UADN;AAE1BjB,EAAAA,aAAa,EAAEe,sBAAUG,IAFC;AAG1BjB,EAAAA,aAAa,EAAEc,sBAAUG,IAHC;AAI1Bf,EAAAA,eAAe,EAAEY,sBAAUC,MAJD;AAK1BZ,EAAAA,QAAQ,EAAEW,sBAAUI,IALM;AAM1BpB,EAAAA,UAAU,EAAEgB,sBAAUC,MANI;AAO1BX,EAAAA,UAAU,EAAEU,sBAAUC,MAPI;AAQ1BT,EAAAA,MAAM,EAAEQ,sBAAUK,SAAV,CAAoB,CAACL,sBAAUM,IAAX,EAAiBN,sBAAUG,IAA3B,CAApB;AARkB,CAA5B;AAWArB,eAAe,CAACyB,YAAhB,GAA+B;AAC7BtB,EAAAA,aAAa,EAAEuB,SADc;AAE7BtB,EAAAA,aAAa,EAAEsB,SAFc;AAG7BpB,EAAAA,eAAe,EAAEoB,SAHY;AAI7BnB,EAAAA,QAAQ,EAAEmB,SAJmB;AAK7BxB,EAAAA,UAAU,EAAEwB,SALiB;AAM7BlB,EAAAA,UAAU,EAAEkB,SANiB;AAO7BhB,EAAAA,MAAM,EAAEgB;AAPqB,CAA/B;eAUe1B,e","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { Button } from '../Button';\nimport { handleCopy } from '../../lib/handleCopy';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nclass CopyToClipboard extends Component {\n  async executeCopy() {\n    const { copiedText, handleSuccess, handleFailure } = this.props;\n    try {\n      await handleCopy(copiedText);\n      handleSuccess();\n    } catch (e) {\n      if (typeof handleFailure === 'function') {\n        handleFailure();\n      }\n    }\n  }\n\n  render() {\n    const {\n      currentLocale,\n      buttonClassName,\n      disabled,\n      buttonText,\n      button: CustomButton,\n    } = this.props;\n    return CustomButton ? (\n      <CustomButton {...this.props} executeCopy={() => this.executeCopy()} />\n    ) : (\n      <Button\n        disabled={disabled}\n        dataSign=\"copyToClipboard\"\n        className={classnames(styles.primaryButton, buttonClassName)}\n        onClick={() => this.executeCopy()}\n      >\n        {buttonText || i18n.getString('copyToClipboard', currentLocale)}\n      </Button>\n    );\n  }\n}\n\nCopyToClipboard.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  handleSuccess: PropTypes.func,\n  handleFailure: PropTypes.func,\n  buttonClassName: PropTypes.string,\n  disabled: PropTypes.bool,\n  copiedText: PropTypes.string,\n  buttonText: PropTypes.string,\n  button: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n};\n\nCopyToClipboard.defaultProps = {\n  handleSuccess: undefined,\n  handleFailure: undefined,\n  buttonClassName: undefined,\n  disabled: undefined,\n  copiedText: undefined,\n  buttonText: undefined,\n  button: undefined,\n};\n\nexport default CopyToClipboard;\n"],"file":"index.js"}