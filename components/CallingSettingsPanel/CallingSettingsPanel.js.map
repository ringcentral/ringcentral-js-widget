{"version":3,"sources":["components/CallingSettingsPanel/CallingSettingsPanel.tsx"],"names":["TooltipBaseComp","TooltipBase","Tooltip","brand","callWith","currentLocale","tooltipContainerRef","keys","callingOptions","browser","softphone","push","overlay","map","key","i18n","getString","offset","current","styles","infoIcon","CallWithSettings","callWithOptions","disabled","onCallWithChange","optionRenderer","option","myphone","replace","select","tooltipContainer","RingoutSettings","availableNumbers","locationSearchable","myLocation","onMyLocationChange","onMyLocationTextChange","ringoutPrompt","onRingoutPromptChange","ringoutHint","locationSelect","text","includes","iconField","CallingSettings","defaultRingoutPrompt","onSave","showRingToneSettings","incomingAudio","incomingAudioFile","outgoingAudio","outgoingAudioFile","defaultIncomingAudio","defaultIncomingAudioFile","defaultOutgoingAudio","defaultOutgoingAudioFile","callWithState","setCallWithState","ringoutPromptState","setRingoutPromptState","myLocationState","setMyLocationState","incomingAudioState","setIncomingAudioState","incomingAudioFileState","setIncomingAudioFileState","outgoingAudioState","setOutgoingAudioState","outgoingAudioFileState","setOutgoingAudioFileState","newCallWith","value","target","setIncomingAudio","fileName","dataUrl","resetIncomingAudio","setOutgoingAudio","resetOutgoingAudio","onClick","CallingSettingsPanel","className","onBackButtonClick","showSpinner","props","content","root"],"mappings":"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","sourcesContent":["/* eslint-disable react/destructuring-assignment */\nimport React, {\n  FunctionComponent,\n  useState,\n  ReactNode,\n  useRef,\n  MutableRefObject,\n  ChangeEvent,\n  useEffect,\n} from 'react';\nimport classnames from 'classnames';\nimport formatMessage from 'format-message';\n\nimport callingOptions from 'ringcentral-integration/modules/CallingSettings/callingOptions';\nimport TooltipBase from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap_white.css';\n\nimport InfoIcon from '../../assets/images/Info.svg';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nimport SpinnerOverlay from '../SpinnerOverlay';\nimport BackHeader from '../BackHeader';\nimport Panel from '../Panel';\nimport Switch from '../Switch';\nimport IconField from '../IconField';\nimport InputField from '../InputField';\nimport TextInput from '../TextInput';\nimport DropdownSelect from '../DropdownSelect';\nimport SaveButton from '../SaveButton';\nimport { RingTone } from '../Ringtone';\nimport {\n  CallingSettingsPanelProps,\n  CallingSettingsProps,\n} from './CallingSettingsPenal.interface';\n\nconst TooltipBaseComp =\n  typeof TooltipBase === 'function' ? TooltipBase : TooltipBase.default;\n\ninterface CallWithProps {\n  callWithOptions: string[];\n  disabled: boolean;\n  brand: string;\n  callWith: string;\n  onCallWithChange: (newCallWith: string) => void;\n}\ninterface TooltipProps {\n  brand: string;\n  callWith: string;\n  currentLocale: string;\n  tooltipContainerRef: MutableRefObject<ReactNode>;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({\n  brand,\n  callWith,\n  currentLocale,\n  tooltipContainerRef,\n}) => {\n  const keys = [`${callWith}Tooltip`];\n  if (\n    callWith !== callingOptions.browser &&\n    callWith !== callingOptions.softphone\n  ) {\n    keys.push(`${callWith}Tooltip1`);\n  }\n  const overlay = (\n    <div>\n      {keys.map((key) => (\n        <div key={key}>\n          {formatMessage(i18n.getString(key, currentLocale), { brand })}\n        </div>\n      ))}\n    </div>\n  );\n  return (\n    <TooltipBaseComp\n      placement=\"bottom\"\n      trigger=\"click\"\n      overlay={overlay}\n      align={{\n        offset: [0, 47],\n      }}\n      arrowContent={<div className=\"rc-tooltip-arrow-inner\" />}\n      getTooltipContainer={() => tooltipContainerRef.current}\n    >\n      <InfoIcon width={14} height={14} className={styles.infoIcon} />\n    </TooltipBaseComp>\n  );\n};\n\nconst CallWithSettings: FunctionComponent<CallWithProps> = ({\n  callWith,\n  callWithOptions,\n  currentLocale,\n  disabled,\n  onCallWithChange,\n  brand,\n}) => {\n  const tooltipContainerRef = useRef(null);\n  const optionRenderer = (option) =>\n    formatMessage(i18n.getString(option, currentLocale), {\n      brand:\n        option === callingOptions.myphone\n          ? brand.replace(/\\sPhone$/, '')\n          : brand,\n    });\n  return (\n    <InputField\n      label={\n        <span>\n          {i18n.getString('makeCallsWith', currentLocale)}\n          <Tooltip\n            {...{\n              brand,\n              callWith,\n              currentLocale,\n              tooltipContainerRef,\n            }}\n          />\n        </span>\n      }\n    >\n      <DropdownSelect\n        dataSign=\"callingSetting\"\n        className={styles.select}\n        value={callWith}\n        onChange={onCallWithChange}\n        options={callWithOptions}\n        dropdownAlign=\"left\"\n        renderFunction={optionRenderer}\n        renderValue={optionRenderer}\n        disabled={disabled}\n        titleEnabled\n      />\n      <div className={styles.tooltipContainer} ref={tooltipContainerRef} />\n    </InputField>\n  );\n};\n\n// TODO properly type available numbers\n\ninterface RingoutSettingsProps {\n  currentLocale: string;\n  callWith: string;\n  availableNumbers: any;\n  locationSearchable: boolean;\n  myLocation: string;\n  onMyLocationChange: (newMyLocation: string) => void;\n  onMyLocationTextChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  disabled: boolean;\n  ringoutPrompt: boolean;\n  onRingoutPromptChange: (newRingoutPrompt: boolean) => void;\n}\n\nconst RingoutSettings: FunctionComponent<RingoutSettingsProps> = ({\n  currentLocale,\n  callWith,\n  availableNumbers,\n  locationSearchable,\n  myLocation,\n  onMyLocationChange,\n  onMyLocationTextChange,\n  disabled,\n  ringoutPrompt,\n  onRingoutPromptChange,\n}) => {\n  if (\n    callWith !== callingOptions.softphone &&\n    callWith !== callingOptions.browser\n  ) {\n    return (\n      <div>\n        <div className={styles.ringoutHint}>\n          {i18n.getString('ringoutHint', currentLocale)}\n        </div>\n        <InputField\n          dataSign=\"myLocation\"\n          label={i18n.getString('myLocationLabel', currentLocale)}\n        >\n          {availableNumbers[callWith] ? (\n            <DropdownSelect\n              className={classnames(styles.select, styles.locationSelect)}\n              value={myLocation}\n              onChange={onMyLocationChange}\n              searchOption={\n                locationSearchable\n                  ? (option, text) => option.includes(text)\n                  : null\n              }\n              options={availableNumbers[callWith]}\n              disabled={disabled}\n              dropdownAlign=\"left\"\n              titleEnabled\n            />\n          ) : (\n            <TextInput\n              dataSign=\"myLocationInput\"\n              value={myLocation}\n              maxLength={30}\n              onChange={onMyLocationTextChange}\n            />\n          )}\n        </InputField>\n        <IconField\n          className={styles.iconField}\n          icon={\n            <Switch\n              dataSign=\"ringoutPromptToggle\"\n              checked={ringoutPrompt}\n              onChange={onRingoutPromptChange}\n            />\n          }\n        >\n          {i18n.getString('press1ToStartCallLabel', currentLocale)}\n        </IconField>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst CallingSettings: FunctionComponent<CallingSettingsProps> = ({\n  availableNumbers,\n  brand,\n  callWith,\n  callWithOptions,\n  currentLocale,\n  defaultRingoutPrompt = true,\n  disabled = false,\n  locationSearchable = false,\n  myLocation,\n  onSave,\n  ringoutPrompt,\n  showRingToneSettings = false,\n  incomingAudio,\n  incomingAudioFile,\n  outgoingAudio,\n  outgoingAudioFile,\n  defaultIncomingAudio,\n  defaultIncomingAudioFile,\n  defaultOutgoingAudio,\n  defaultOutgoingAudioFile,\n}) => {\n  const [callWithState, setCallWithState] = useState(callWith);\n  const [ringoutPromptState, setRingoutPromptState] = useState(ringoutPrompt);\n  const [myLocationState, setMyLocationState] = useState(myLocation);\n  const [incomingAudioState, setIncomingAudioState] = useState(incomingAudio);\n  const [incomingAudioFileState, setIncomingAudioFileState] = useState(\n    incomingAudioFile,\n  );\n  const [outgoingAudioState, setOutgoingAudioState] = useState(outgoingAudio);\n  const [outgoingAudioFileState, setOutgoingAudioFileState] = useState(\n    outgoingAudioFile,\n  );\n\n  useEffect(() => {\n    setCallWithState(callWith);\n    setMyLocationState(myLocation);\n    setRingoutPromptState(ringoutPrompt);\n    setIncomingAudioState(incomingAudio);\n    setIncomingAudioFileState(incomingAudioFile);\n    setOutgoingAudioState(outgoingAudio);\n    setOutgoingAudioFileState(outgoingAudioFile);\n  }, [\n    callWith,\n    myLocation,\n    ringoutPrompt,\n    incomingAudio,\n    incomingAudioFile,\n    outgoingAudio,\n    outgoingAudioFile,\n  ]);\n  return (\n    <>\n      <CallWithSettings\n        {...{\n          brand,\n          callWith: callWithState,\n          callWithOptions,\n          currentLocale,\n          disabled,\n          onCallWithChange: (newCallWith: string) => {\n            setCallWithState(newCallWith);\n            if (newCallWith === callWith) {\n              setMyLocationState(myLocation);\n              setRingoutPromptState(ringoutPrompt);\n            } else {\n              setMyLocationState(availableNumbers[newCallWith]?.[0] || '');\n              setRingoutPromptState(defaultRingoutPrompt);\n            }\n          },\n        }}\n      />\n      <RingoutSettings\n        {...{\n          currentLocale,\n          callWith: callWithState,\n          availableNumbers,\n          locationSearchable,\n          myLocation: myLocationState,\n          onMyLocationChange: setMyLocationState,\n          onMyLocationTextChange: ({ target: { value } }) => {\n            setMyLocationState(value);\n          },\n          ringoutPrompt: ringoutPromptState,\n          onRingoutPromptChange: setRingoutPromptState,\n          disabled,\n        }}\n      />\n      <RingTone\n        {...{\n          currentLocale,\n          showRingToneSettings:\n            showRingToneSettings && callWithState === callingOptions.browser,\n          incomingAudio: incomingAudioState,\n          incomingAudioFile: incomingAudioFileState,\n          outgoingAudio: outgoingAudioState,\n          outgoingAudioFile: outgoingAudioFileState,\n          defaultIncomingAudio,\n          defaultIncomingAudioFile,\n          defaultOutgoingAudio,\n          defaultOutgoingAudioFile,\n          setIncomingAudio: ({ fileName, dataUrl }) => {\n            setIncomingAudioState(dataUrl);\n            setIncomingAudioFileState(fileName);\n          },\n          resetIncomingAudio: () => {\n            setIncomingAudioState(defaultIncomingAudio);\n            setIncomingAudioFileState(defaultIncomingAudioFile);\n          },\n          setOutgoingAudio: ({ fileName, dataUrl }) => {\n            setOutgoingAudioState(dataUrl);\n            setOutgoingAudioFileState(fileName);\n          },\n          resetOutgoingAudio: () => {\n            setOutgoingAudioState(defaultOutgoingAudio);\n            setOutgoingAudioFileState(defaultOutgoingAudioFile);\n          },\n        }}\n      />\n      <SaveButton\n        {...{\n          currentLocale,\n          onClick: () => {\n            onSave({\n              callWith: callWithState,\n              myLocation: myLocationState,\n              ringoutPrompt: ringoutPromptState,\n              incomingAudio: incomingAudioState,\n              incomingAudioFile: incomingAudioFileState,\n              outgoingAudio: outgoingAudioState,\n              outgoingAudioFile: outgoingAudioFileState,\n            });\n          },\n          disabled:\n            callWithState === callWith &&\n            myLocationState === myLocation &&\n            ringoutPromptState === ringoutPrompt &&\n            incomingAudioState === incomingAudio &&\n            incomingAudioFileState === incomingAudioFile &&\n            outgoingAudioState === outgoingAudio &&\n            outgoingAudioFileState === outgoingAudioFile,\n        }}\n      />\n    </>\n  );\n};\n\nexport const CallingSettingsPanel: FunctionComponent<CallingSettingsPanelProps> = ({\n  className,\n  onBackButtonClick,\n  currentLocale,\n  showSpinner = false,\n  ...props\n}) => {\n  const content = showSpinner ? (\n    <SpinnerOverlay />\n  ) : (\n    <>\n      <CallingSettings {...{ ...props, currentLocale }} />\n    </>\n  );\n  return (\n    <div\n      data-sign=\"callingSettings\"\n      className={classnames(styles.root, className)}\n    >\n      <BackHeader onBackClick={onBackButtonClick}>\n        {i18n.getString('title', currentLocale)}\n      </BackHeader>\n      <Panel className={styles.content}>{content}</Panel>\n    </div>\n  );\n};\n"],"file":"CallingSettingsPanel.js"}