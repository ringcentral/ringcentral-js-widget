{"version":3,"sources":["components/ConnectivityBadge/index.js"],"names":["ConnectivityBadge","onClick","className","currentLocale","mode","webphoneConnecting","hasLimitedStatusError","isWebphoneConnecting","connectivityTypes","webphoneUnavailable","hasRetryButton","view","styles","badge","loading","i18n","getString","result","root","propTypes","PropTypes","string","isRequired","bool","func","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEe,SAASA,iBAAT,OAOZ;AAAA,MANDC,OAMC,QANDA,OAMC;AAAA,MALDC,SAKC,QALDA,SAKC;AAAA,MAJDC,aAIC,QAJDA,aAIC;AAAA,MAHDC,IAGC,QAHDA,IAGC;AAAA,MAFDC,kBAEC,QAFDA,kBAEC;AAAA,MADDC,qBACC,QADDA,qBACC;AACD,MAAI,CAACF,IAAL,EAAW,OAAO,IAAP;AAEX,MAAMG,oBAAoB,GACxBH,IAAI,KAAKI,8BAAkBC,mBAA3B,IAAkDJ,kBADpD;AAEA,MAAMK,cAAc,GAClBN,IAAI,KAAKI,8BAAkBC,mBAA3B,IAAkDH,qBADpD;AAGA,MAAIK,IAAI,GAAG,IAAX;;AACA,MAAIJ,oBAAJ,EAA0B;AACxBI,IAAAA,IAAI,gBACF,gCAAC,iBAAD;AACE,MAAA,SAAS,EAAE,4BAAWT,SAAX,EAAsBU,mBAAOC,KAA7B,EAAoCD,mBAAOE,OAA3C,CADb;AAEE,MAAA,IAAI,EAAEC,iBAAKC,SAAL,CAAeZ,IAAf,EAAqBD,aAArB;AAFR,OAIGY,iBAAKC,SAAL,CAAe,YAAf,EAA6Bb,aAA7B,CAJH,eAKE,gCAAC,uBAAD;AAAa,MAAA,KAAK,EAAE,EAApB;AAAwB,MAAA,MAAM,EAAE;AAAhC,MALF,CADF;AASD,GAVD,MAUO;AACLQ,IAAAA,IAAI,gBACF,gCAAC,iBAAD;AACE,MAAA,SAAS,EAAE,4BAAWT,SAAX,EAAsBU,mBAAOC,KAA7B,EAAoCD,mBAAOK,MAA3C,CADb;AAEE,MAAA,IAAI,EAAEF,iBAAKC,SAAL,CAAeZ,IAAf,EAAqBD,aAArB;AAFR,OAIGY,iBAAKC,SAAL,CAAeZ,IAAf,EAAqBD,aAArB,CAJH,EAKGO,cAAc,gBAAG,gCAAC,qBAAD;AAAW,MAAA,KAAK,EAAE,EAAlB;AAAsB,MAAA,MAAM,EAAE;AAA9B,MAAH,GAA0C,IAL3D,CADF;AASD;;AACD,sBACE,gCAAC,qBAAD;AAAW,IAAA,SAAS,EAAEE,mBAAOM,IAA7B;AAAmC,IAAA,OAAO,EAAEjB;AAA5C,KACGU,IADH,CADF;AAKD;;AAEDX,iBAAiB,CAACmB,SAAlB,GAA8B;AAC5BjB,EAAAA,SAAS,EAAEkB,sBAAUC,MADO;AAE5BlB,EAAAA,aAAa,EAAEiB,sBAAUC,MAAV,CAAiBC,UAFJ;AAG5BlB,EAAAA,IAAI,EAAEgB,sBAAUC,MAHY;AAI5BhB,EAAAA,kBAAkB,EAAEe,sBAAUG,IAJF;AAK5BtB,EAAAA,OAAO,EAAEmB,sBAAUI,IALS;AAM5BlB,EAAAA,qBAAqB,EAAEc,sBAAUG;AANL,CAA9B;AASAvB,iBAAiB,CAACyB,YAAlB,GAAiC;AAC/BvB,EAAAA,SAAS,EAAE,IADoB;AAE/BD,EAAAA,OAF+B,qBAErB,CAAE,CAFmB;AAG/BG,EAAAA,IAAI,EAAE,IAHyB;AAI/BC,EAAAA,kBAAkB,EAAE,KAJW;AAK/BC,EAAAA,qBAAqB,EAAE;AALQ,CAAjC","sourcesContent":["import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport connectivityTypes from '../../modules/ConnectivityManager/connectivityTypes';\nimport Badge from '../Badge';\nimport Draggable from '../Draggable';\nimport i18n from './i18n';\nimport styles from './styles.scss';\nimport RetryIcon from '../../assets/images/RetryIcon.svg';\nimport OvalLoading from '../../assets/images/OvalLoading.svg';\n\nexport default function ConnectivityBadge({\n  onClick,\n  className,\n  currentLocale,\n  mode,\n  webphoneConnecting,\n  hasLimitedStatusError,\n}) {\n  if (!mode) return null;\n\n  const isWebphoneConnecting =\n    mode === connectivityTypes.webphoneUnavailable && webphoneConnecting;\n  const hasRetryButton =\n    mode === connectivityTypes.webphoneUnavailable || hasLimitedStatusError;\n\n  let view = null;\n  if (isWebphoneConnecting) {\n    view = (\n      <Badge\n        className={classnames(className, styles.badge, styles.loading)}\n        name={i18n.getString(mode, currentLocale)}\n      >\n        {i18n.getString('Connecting', currentLocale)}\n        <OvalLoading width={12} height={12} />\n      </Badge>\n    );\n  } else {\n    view = (\n      <Badge\n        className={classnames(className, styles.badge, styles.result)}\n        name={i18n.getString(mode, currentLocale)}\n      >\n        {i18n.getString(mode, currentLocale)}\n        {hasRetryButton ? <RetryIcon width={12} height={12} /> : null}\n      </Badge>\n    );\n  }\n  return (\n    <Draggable className={styles.root} onClick={onClick}>\n      {view}\n    </Draggable>\n  );\n}\n\nConnectivityBadge.propTypes = {\n  className: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n  mode: PropTypes.string,\n  webphoneConnecting: PropTypes.bool,\n  onClick: PropTypes.func,\n  hasLimitedStatusError: PropTypes.bool,\n};\n\nConnectivityBadge.defaultProps = {\n  className: null,\n  onClick() {},\n  mode: null,\n  webphoneConnecting: false,\n  hasLimitedStatusError: false,\n};\n"],"file":"index.js"}