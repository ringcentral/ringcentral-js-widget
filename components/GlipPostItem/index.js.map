{"version":3,"sources":["components/GlipPostItem/index.js"],"names":["PostAvatar","creator","viewProfile","defaultAvatar","id","avatar","propTypes","PropTypes","object","func","isRequired","defaultProps","PostName","showName","styles","name","firstName","lastName","bool","PostStatus","sendStatus","status","creating","string","PostTime","creationTime","time","GlipPost","post","className","atRender","addedPersons","type","addedPersonIds","map","peronName","root","content","title","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport status from 'ringcentral-integration/modules/GlipPosts/status';\n\nimport defaultAvatar from '../../assets/images/default_avatar.png';\nimport styles from './styles.scss';\n\nimport GlipPostContent from '../GlipPostContent';\n\nfunction PostAvatar({ creator, viewProfile }) {\n  if (!creator) {\n    // TODO: update alt with i18n\n    return <img src={defaultAvatar} alt=\"default avatar\" />;\n  }\n  return (\n    <img\n      onClick={() => viewProfile(creator.id)}\n      src={creator.avatar || defaultAvatar}\n      alt={creator.id}\n    />\n  );\n}\n\nPostAvatar.propTypes = {\n  creator: PropTypes.object,\n  viewProfile: PropTypes.func.isRequired,\n};\n\nPostAvatar.defaultProps = {\n  creator: null,\n};\n\nfunction PostName({ creator, showName, viewProfile }) {\n  if (!creator || !showName) {\n    return null;\n  }\n  return (\n    <span className={styles.name} onClick={() => viewProfile(creator.id)}>\n      {creator.firstName} {creator.lastName}\n    </span>\n  );\n}\n\nPostName.propTypes = {\n  creator: PropTypes.object,\n  viewProfile: PropTypes.func.isRequired,\n  showName: PropTypes.bool.isRequired,\n};\n\nPostName.defaultProps = {\n  creator: null,\n};\n\nfunction PostStatus({ sendStatus }) {\n  if (!sendStatus) {\n    return null;\n  }\n  // TODO: update sending status with i18n\n  return (\n    <span>({sendStatus === status.creating ? 'Sending' : 'Send failed'})</span>\n  );\n}\n\nPostStatus.propTypes = {\n  sendStatus: PropTypes.string,\n};\n\nPostStatus.defaultProps = {\n  sendStatus: null,\n};\n\nfunction PostTime({ creationTime }) {\n  if (!creationTime) {\n    return null;\n  }\n  return <div className={styles.time}>{creationTime}</div>;\n}\n\nPostTime.propTypes = {\n  creationTime: PropTypes.string,\n};\n\nPostTime.defaultProps = {\n  creationTime: null,\n};\n\nexport default function GlipPost({\n  post,\n  className,\n  creationTime,\n  showName,\n  atRender,\n  viewProfile,\n}) {\n  let addedPersons = null;\n  if (post.type === 'PersonsAdded') {\n    addedPersons =\n      post.addedPersonIds &&\n      post.addedPersonIds.map((id) => {\n        const peronName = atRender({ id, type: 'Person' });\n        return <span key={id}>{peronName}</span>;\n      });\n  }\n  // TODO: update joining status with i18n\n  return (\n    <div className={classnames(styles.root, className)}>\n      <PostTime creationTime={creationTime} />\n      <div className={styles.avatar}>\n        <PostAvatar creator={post.creator} viewProfile={viewProfile} />\n      </div>\n      <div className={styles.content}>\n        <div className={styles.title}>\n          <PostName\n            creator={post.creator}\n            showName={showName || post.type !== 'TextMessage'}\n            viewProfile={viewProfile}\n          />\n          {post.type === 'PersonJoined' ? 'joined the team' : null}\n          {post.type === 'PersonsAdded' ? 'added ' : null}\n          {addedPersons}\n          {post.type === 'PersonsAdded' ? 'to the team' : null}\n          <PostStatus sendStatus={post.sendStatus} />\n        </div>\n        {post.type === 'TextMessage' ? (\n          <GlipPostContent post={post} atRender={atRender} />\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nGlipPost.propTypes = {\n  className: PropTypes.string,\n  post: PropTypes.object,\n  creationTime: PropTypes.string,\n  showName: PropTypes.bool,\n  atRender: PropTypes.func,\n  viewProfile: PropTypes.func.isRequired,\n};\n\nGlipPost.defaultProps = {\n  className: undefined,\n  creationTime: undefined,\n  post: {},\n  showName: true,\n  atRender: undefined,\n};\n"],"file":"index.js"}