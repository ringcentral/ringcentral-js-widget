{"version":3,"sources":["components/WebRTCNotificationSection/WebRTCNotificationSection.tsx"],"names":["WebRTCNotificationSection","call","onCloseNotification","currentNotificationIdentify","logName","currentLocale","formatPhone","isWide","onIgnore","endAndAnswer","holdAndAnswer","toVoicemail","isCurrentSessionEnd","answer","forwardingNumbers","onForward","anchorEl","setAnchorEl","result","renderLogSection","direction","to","from","telephonySessionId","number","callDirections","outbound","phoneNumber","extensionNumber","formatNumber","handleClick","event","currentTarget","styles","layer","classic","content","contact","control","buttonsGroup","singleCallCtrl","callButton","IgnoreIcon","button","text","i18n","getString","ForwardIcon","voicemail","VoicemailIcon","hangup","answerButton","AnswerIcon","EndAnswerIcon","multipleButton","HoldAnswerIcon","renderForwardList","handleClose","forward","e","stopPropagation","selectedValue","attributes","value","forwardList","map","key","label","subText","onClick","push","vertical","horizontal","paper","forwardPopover","moreActionItem","actionText"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport React, { FunctionComponent, useState, useEffect } from 'react';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport IgnoreIcon from '@ringcentral/juno/icons/icon-ignore.svg';\nimport VoicemailIcon from '@ringcentral/juno/icons/icon-voicemail.svg';\nimport { RcPopover, RcMenuList, RcMenuItem } from '@ringcentral/juno';\nimport ForwardIcon from '../../assets/images/Forward_white.svg';\nimport HoldAnswerIcon from '../../assets/images/HoldAnswer.svg';\nimport EndAnswerIcon from '../../assets/images/EndAnswer.svg';\nimport AnswerIcon from '../../assets/images/Answer.svg';\nimport { WebRTCNotificationProps } from './WebRTCNotificationSection.interface';\nimport CircleButton from '../CircleButton';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nexport const WebRTCNotificationSection: FunctionComponent<WebRTCNotificationProps> = ({\n  call,\n  onCloseNotification,\n  currentNotificationIdentify,\n  logName,\n  currentLocale,\n  formatPhone,\n  isWide,\n  onIgnore,\n  endAndAnswer,\n  holdAndAnswer,\n  toVoicemail,\n  isCurrentSessionEnd,\n  answer,\n  forwardingNumbers,\n  onForward,\n}) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  useEffect(() => {\n    if (currentNotificationIdentify) {\n      const { result } = call;\n      if (result) {\n        onCloseNotification();\n      }\n    }\n  }, [call.result]);\n\n  const renderLogSection = () => {\n    if (!call) return null;\n    const { direction, to, from, telephonySessionId } = call;\n    const number =\n      direction === callDirections.outbound\n        ? to && (to.phoneNumber || to.extensionNumber)\n        : from && (from.phoneNumber || from.extensionNumber);\n    const formatNumber = formatPhone(number);\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n      setAnchorEl(event.currentTarget);\n    };\n    return (\n      <div className={styles.layer}>\n        <div\n          className={classnames(\n            !isWide ? styles.classic : null,\n            styles.content,\n          )}\n        >\n          <div className={styles.contact}>{logName}</div>\n          <div className={styles.number}>{formatNumber}</div>\n          <div className={styles.control}>\n            <ul\n              className={classnames(styles.buttonsGroup, {\n                [styles.singleCallCtrl]: isCurrentSessionEnd,\n              })}\n            >\n              <li className={styles.callButton}>\n                <CircleButton\n                  dataSign=\"ignore\"\n                  icon={IgnoreIcon}\n                  iconWidth={250}\n                  iconHeight={250}\n                  iconX={125}\n                  iconY={125}\n                  className={styles.button}\n                  onClick={() => onIgnore(telephonySessionId)}\n                />\n                <span className={styles.text}>\n                  {i18n.getString('ignore', currentLocale)}\n                </span>\n              </li>\n              <li className={styles.callButton}>\n                <CircleButton\n                  dataSign=\"forward\"\n                  icon={ForwardIcon}\n                  className={styles.button}\n                  onClick={handleClick}\n                />\n                <span className={styles.text}>\n                  {i18n.getString('forward', currentLocale)}\n                </span>\n              </li>\n              {!isWide && !isCurrentSessionEnd && (\n                <li className={classnames(styles.callButton, styles.voicemail)}>\n                  <CircleButton\n                    dataSign=\"toVoicemail\"\n                    icon={VoicemailIcon}\n                    className={classnames(styles.button, styles.hangup)}\n                    showBorder={false}\n                    iconWidth={250}\n                    iconHeight={250}\n                    iconX={125}\n                    iconY={125}\n                    onClick={() => toVoicemail(telephonySessionId)}\n                  />\n                  <span className={styles.text}>\n                    {i18n.getString('toVoicemail', currentLocale)}\n                  </span>\n                </li>\n              )}\n            </ul>\n            <ul className={styles.buttonsGroup}>\n              {isCurrentSessionEnd && (\n                <li\n                  className={classnames(styles.callButton, styles.answerButton)}\n                >\n                  <CircleButton\n                    dataSign=\"answer\"\n                    icon={AnswerIcon}\n                    className={classnames(styles.button, styles.answer)}\n                    showBorder={false}\n                    onClick={() => answer(telephonySessionId)}\n                  />\n                  <span className={styles.text}>\n                    {i18n.getString('answer', currentLocale)}\n                  </span>\n                </li>\n              )}\n              {!isCurrentSessionEnd && (\n                <li className={styles.callButton}>\n                  <CircleButton\n                    dataSign=\"endAndAnswer\"\n                    icon={EndAnswerIcon}\n                    className={classnames(styles.button, styles.multipleButton)}\n                    showBorder={false}\n                    iconWidth={500}\n                    iconHeight={500}\n                    iconX={0}\n                    iconY={0}\n                    onClick={() => endAndAnswer(telephonySessionId)}\n                  />\n                  <span className={styles.text}>\n                    {i18n.getString('endAndAnswer', currentLocale)}\n                  </span>\n                </li>\n              )}\n              {(isWide || isCurrentSessionEnd) && (\n                <li className={styles.callButton}>\n                  <CircleButton\n                    dataSign=\"toVoicemail\"\n                    icon={VoicemailIcon}\n                    className={classnames(styles.button, styles.hangup)}\n                    showBorder={false}\n                    iconWidth={250}\n                    iconHeight={250}\n                    iconX={125}\n                    iconY={125}\n                    onClick={() => toVoicemail(telephonySessionId)}\n                  />\n                  <span className={styles.text}>\n                    {i18n.getString('toVoicemail', currentLocale)}\n                  </span>\n                </li>\n              )}\n              {!isCurrentSessionEnd && (\n                <li className={styles.callButton}>\n                  <CircleButton\n                    dataSign=\"holdAndAnswer\"\n                    icon={HoldAnswerIcon}\n                    className={classnames(styles.button, styles.multipleButton)}\n                    showBorder={false}\n                    iconWidth={500}\n                    iconHeight={500}\n                    iconX={0}\n                    iconY={0}\n                    onClick={() => holdAndAnswer(telephonySessionId)}\n                  />\n                  <span className={styles.text}>\n                    {i18n.getString('holdAndAnswer', currentLocale)}\n                  </span>\n                </li>\n              )}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderForwardList = () => {\n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n    const forward = (e: React.MouseEvent<HTMLElement>) => {\n      e.stopPropagation();\n      handleClose();\n      const selectedValue = e.currentTarget.attributes['data-value'].value;\n      onForward(selectedValue, call?.telephonySessionId);\n    };\n    const forwardList = forwardingNumbers.map((phoneNumber) => {\n      return {\n        key: phoneNumber.phoneNumber,\n        text: phoneNumber.label,\n        subText: phoneNumber.phoneNumber,\n        onClick: forward,\n      };\n    });\n    forwardList.push({\n      key: 'custom',\n      text: i18n.getString('custom', currentLocale),\n      subText: null,\n      onClick: forward,\n    });\n    return (\n      <RcPopover\n        anchorOrigin={{\n          vertical: 'center',\n          horizontal: isWide ? 'left' : 'center',\n        }}\n        transformOrigin={{\n          vertical: 'center',\n          horizontal: isWide ? 'right' : 'center',\n        }}\n        marginThreshold={isWide ? 0 : 15}\n        anchorEl={anchorEl}\n        open={!!anchorEl}\n        onClose={() => handleClose()}\n        classes={{ paper: styles.forwardPopover }}\n      >\n        <RcMenuList>\n          {forwardList.map(({ text, subText, onClick, key }) => (\n            <RcMenuItem\n              key={key}\n              onClick={onClick}\n              maxWidth={170}\n              data-value={key}\n            >\n              <div className={styles.moreActionItem} data-sign={key}>\n                {text && <span className={styles.actionText}>{text}</span>}\n                {subText && <span className={styles.subText}>{subText} </span>}\n              </div>\n            </RcMenuItem>\n          ))}\n        </RcMenuList>\n      </RcPopover>\n    );\n  };\n  return (\n    <>\n      {renderLogSection()}\n      {renderForwardList()}\n    </>\n  );\n};\n"],"file":"WebRTCNotificationSection.js"}