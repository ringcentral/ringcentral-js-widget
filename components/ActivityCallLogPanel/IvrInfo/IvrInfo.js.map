{"version":3,"sources":["components/ActivityCallLogPanel/IvrInfo/IvrInfo.tsx"],"names":["IvrInfo","isCallEnd","ivrAlertData","expanded","setExpanded","styles","ivrPanel","remain","container","root","panelRoot","endCall","summaryRoot","content","summaryContent","size","arrowDownSvg","ivrMainSubject","subject","length","count","detailsRoot","map","i","body","item"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAMA;;AACA;;AACA;;AAMA;;;;;;;;;;;;;;;;;;;;AAMO,IAAMA,OAAwC,GAAG,SAA3CA,OAA2C,OAGlD;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADJC,YACI,QADJA,YACI;;AAAA,kBAC4B,qBAAS,KAAT,CAD5B;AAAA;AAAA,MACGC,QADH;AAAA,MACaC,WADb;;AAGJ,wBAAU,YAAM;AACd,QAAIH,SAAJ,EAAe;AACbG,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GAJD,EAIG,CAACH,SAAD,CAJH;AAMA,sBACE;AAAK,IAAA,SAAS,EAAEI,mBAAOC;AAAvB,kBACE;AAAG,IAAA,SAAS,EAAED,mBAAOE;AAArB,IADF,eAEE;AAAK,IAAA,SAAS,EAAEF,mBAAOG;AAAvB,kBACE,gCAAC,sBAAD;AACE,IAAA,MAAM,MADR;AAEE,IAAA,QAAQ,EAAE;AAAA,aAAMJ,WAAW,CAAC,CAACD,QAAF,CAAjB;AAAA,KAFZ;AAGE,IAAA,QAAQ,EAAEA,QAHZ;AAIE,IAAA,OAAO,EAAE;AACPM,MAAAA,IAAI,EAAE,4BAAWJ,mBAAOK,SAAlB,EAA6BT,SAAS,IAAII,mBAAOM,OAAjD,CADC;AAEPR,MAAAA,QAAQ,EAAEE,mBAAOF;AAFV;AAJX,kBASE,gCAAC,6BAAD;AACE,IAAA,OAAO,EAAE;AACPM,MAAAA,IAAI,EAAEJ,mBAAOO,WADN;AAEPC,MAAAA,OAAO,EAAER,mBAAOS;AAFT,KADX;AAKE,IAAA,eAAe,EAAE;AACfC,MAAAA,IAAI,EAAE;AADS,KALnB;AAQE,IAAA,UAAU,eAAE,gCAAC,YAAD;AAAQ,MAAA,MAAM,EAAEC,0BAAhB;AAA8B,MAAA,KAAK,EAAE,CAAC,MAAD,EAAS,GAAT;AAArC;AARd,kBAUE;AAAM,IAAA,SAAS,EAAEX,mBAAOY;AAAxB,KACGf,YAAY,CAAC,CAAD,CAAZ,CAAgBgB,OAAhB,IAA2B,EAD9B,CAVF,EAaGhB,YAAY,CAACiB,MAAb,GAAsB,CAAtB,gBACC;AAAM,IAAA,SAAS,EAAEd,mBAAOe;AAAxB,WAAkClB,YAAY,CAACiB,MAAb,GAAsB,CAAxD,CADD,GAEG,IAfN,CATF,eA0BE,gCAAC,6BAAD;AACE,IAAA,OAAO,EAAE;AACPV,MAAAA,IAAI,EAAEJ,mBAAOgB;AADN;AADX,KAKGnB,YAAY,CAACoB,GAAb,CAAiB,iBAA8BC,CAA9B,EAAoC;AAAA,8BAAjCL,OAAiC;AAAA,QAAjCA,OAAiC,8BAAvB,EAAuB;AAAA,2BAAnBM,IAAmB;AAAA,QAAnBA,IAAmB,2BAAZ,EAAY;AACpD,wBACE;AAAK,MAAA,SAAS,EAAEnB,mBAAOoB,IAAvB;AAA6B,MAAA,GAAG,EAAEF;AAAlC,OACGA,CAAC,KAAK,CAAN,IAAWL,OAAO,CAACC,MAAR,GAAiB,CAA5B,iBACC;AAAK,MAAA,SAAS,EAAEd,mBAAOa;AAAvB,OAAiCA,OAAjC,CAFJ,EAIGM,IAAI,CAACL,MAAL,GAAc,CAAd,iBAAmB;AAAK,MAAA,SAAS,EAAEd,mBAAOmB;AAAvB,OAA8BA,IAA9B,CAJtB,CADF;AAQD,GATA,CALH,CA1BF,CADF,CAFF,CADF;AAkDD,CA9DM","sourcesContent":["import {\n  RcExpansionPanel,\n  RcExpansionPanelDetails,\n  RcExpansionPanelSummary,\n  RcIcon,\n} from '@ringcentral-integration/rcui';\nimport arrowDownSvg from '@ringcentral-integration/rcui/icons/icon-arrow_down.svg';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport {\n  EvActivityCallUIFunctions,\n  EvActivityCallUIProps,\n} from '../../../interfaces';\nimport styles from './styles.scss';\n\nexport type IvrInfoProps = { isCallEnd: boolean } & Pick<\n  EvActivityCallUIProps & EvActivityCallUIFunctions,\n  'ivrAlertData'\n>;\nexport const IvrInfo: FunctionComponent<IvrInfoProps> = ({\n  isCallEnd,\n  ivrAlertData,\n}) => {\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isCallEnd) {\n      setExpanded(false);\n    }\n  }, [isCallEnd]);\n\n  return (\n    <div className={styles.ivrPanel}>\n      <i className={styles.remain} />\n      <div className={styles.container}>\n        <RcExpansionPanel\n          square\n          onChange={() => setExpanded(!expanded)}\n          expanded={expanded}\n          classes={{\n            root: classNames(styles.panelRoot, isCallEnd && styles.endCall),\n            expanded: styles.expanded,\n          }}\n        >\n          <RcExpansionPanelSummary\n            classes={{\n              root: styles.summaryRoot,\n              content: styles.summaryContent,\n            }}\n            IconButtonProps={{\n              size: 'small',\n            }}\n            expandIcon={<RcIcon symbol={arrowDownSvg} color={['grey', 500]} />}\n          >\n            <span className={styles.ivrMainSubject}>\n              {ivrAlertData[0].subject || ''}\n            </span>\n            {ivrAlertData.length > 1 ? (\n              <span className={styles.count}> +{ivrAlertData.length - 1}</span>\n            ) : null}\n          </RcExpansionPanelSummary>\n          <RcExpansionPanelDetails\n            classes={{\n              root: styles.detailsRoot,\n            }}\n          >\n            {ivrAlertData.map(({ subject = '', body = '' }, i) => {\n              return (\n                <div className={styles.item} key={i}>\n                  {i !== 0 && subject.length > 0 && (\n                    <div className={styles.subject}>{subject}</div>\n                  )}\n                  {body.length > 0 && <div className={styles.body}>{body}</div>}\n                </div>\n              );\n            })}\n          </RcExpansionPanelDetails>\n        </RcExpansionPanel>\n      </div>\n    </div>\n  );\n};\n"],"file":"IvrInfo.js"}