{"version":3,"sources":["components/BasicSessionPanel/BasicSessionPanel.spec.tsx"],"names":["wrapper","currentLocale","defaultSkillProfileList","profileId","profileName","isDefault","profileDesc","defaultLoginTypeList","label","id","setup","selectedSkillProfileId","skillProfileList","setSkillProfileId","loginTypeList","loginType","setLoginType","extensionNumber","setExtensionNumber","resetFormGroup","inboundQueuesFieldText","isExtensionNumber","searchOption","inboundQueues","submitInboundQueues","getAssignedInboundQueues","isAllAssign","isSeveralAssign","checkBoxOnChange","allCheckBoxOnChange","afterEach","unmount","describe","it","jest","fn","extensionNumberFieldFn","find","at","extensionNumberField","expect","prop","toEqual","newExtensionNumber","simulate","target","value","toBeCalledWith","extensionNumberField2","toHaveLength","skillProfilePickList","toBe","text","x","length","userSelectedSkillProfileId","document","body","querySelector","click","loginTypePickList","changeLoginType","menuItems","querySelectorAll"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { RcThemeProvider } from '@ringcentral-integration/rcui';\nimport { mount } from 'enzyme';\nimport { BasicSessionPanel, BasicSessionPanelProps } from './BasicSessionPanel';\n\nlet wrapper;\nconst currentLocale = 'en-US';\nconst defaultSkillProfileList = [\n  {\n    profileId: '1001',\n    profileName: 'Work',\n    isDefault: '1',\n    profileDesc: 'like to work',\n  },\n  {\n    profileId: '1002',\n    profileName: 'eat',\n    isDefault: '1',\n    profileDesc: 'fat man',\n  },\n  {\n    profileId: '1003',\n    profileName: 'play',\n    isDefault: '1',\n    profileDesc: 'like to work',\n  },\n];\nconst defaultLoginTypeList = [\n  {\n    label: 'externalPhone',\n    id: '101',\n  },\n  {\n    label: 'externalPhone2',\n    id: '102',\n  },\n];\n\nfunction setup({\n  selectedSkillProfileId = '1002',\n  skillProfileList = defaultSkillProfileList,\n  setSkillProfileId = () => {},\n  loginTypeList = defaultLoginTypeList,\n  loginType = '102',\n  setLoginType = () => {},\n  extensionNumber = '',\n  setExtensionNumber = () => {},\n  // takingCall = false,\n  // setTakingCall = () => {},\n  // autoAnswer = true,\n  // setAutoAnswer = () => {},\n  resetFormGroup = () => {},\n  inboundQueuesFieldText = '',\n  isExtensionNumber = false,\n  searchOption,\n  inboundQueues = [],\n  submitInboundQueues,\n  getAssignedInboundQueues = () => [],\n  isAllAssign = () => true,\n  isSeveralAssign = () => false,\n  checkBoxOnChange,\n  allCheckBoxOnChange,\n}: Partial<BasicSessionPanelProps>) {\n  return mount(\n    <RcThemeProvider>\n      <BasicSessionPanel\n        currentLocale={currentLocale}\n        selectedSkillProfileId={selectedSkillProfileId}\n        skillProfileList={skillProfileList}\n        setSkillProfileId={setSkillProfileId}\n        loginTypeList={loginTypeList}\n        loginType={loginType}\n        setLoginType={setLoginType}\n        extensionNumber={extensionNumber}\n        setExtensionNumber={setExtensionNumber}\n        // takingCall={takingCall}\n        // setTakingCall={setTakingCall}\n        // autoAnswer={autoAnswer}\n        // setAutoAnswer={setAutoAnswer}\n        inboundQueuesFieldText={inboundQueuesFieldText}\n        isExtensionNumber={isExtensionNumber}\n        searchOption={searchOption}\n        inboundQueues={inboundQueues}\n        submitInboundQueues={submitInboundQueues}\n        getAssignedInboundQueues={getAssignedInboundQueues}\n        isAllAssign={isAllAssign}\n        isSeveralAssign={isSeveralAssign}\n        checkBoxOnChange={checkBoxOnChange}\n        allCheckBoxOnChange={allCheckBoxOnChange}\n        resetFormGroup={resetFormGroup}\n      />\n    </RcThemeProvider>,\n  );\n}\n\nafterEach(async () => {\n  wrapper.unmount();\n});\n\ndescribe('<BasicSessionPanel />', async () => {\n  // TODO\n\n  // it(\"Page display user's selected Inbound queue, and navigate to InboundQueuesPage when click the field.\", () => {\n  //   const gotoInboundQueuesPage = jest.fn();\n  //   const inboundQueuesFieldText = 'AmyTestQueue';\n  //   wrapper = setup({\n  //     inboundQueuesFieldText,\n  //     gotoInboundQueuesPage,\n  //   });\n  //   const inboundQueuesField = wrapper\n  //     .find('RcTextField[data-sign=\"inboundQueues\"]')\n  //     .at(0)\n  //     .find('input')\n  //     .at(0);\n\n  //   expect(inboundQueuesField.prop('value')).toEqual(inboundQueuesFieldText);\n  //   inboundQueuesField.simulate('click');\n  //   expect(gotoInboundQueuesPage).toBeCalled();\n  // });\n\n  it('Can display extensionNumber correctly, and can be changed.', () => {\n    const setExtensionNumber = jest.fn();\n    const extensionNumber = '65787344333';\n    wrapper = setup({\n      setExtensionNumber,\n      extensionNumber,\n      isExtensionNumber: true,\n    });\n\n    const extensionNumberFieldFn = () =>\n      wrapper\n        .find('RcTextField[data-sign=\"extensionNumber\"]')\n        .at(0)\n        .find('input')\n        .at(0);\n    const extensionNumberField = extensionNumberFieldFn();\n\n    expect(extensionNumberField.prop('value')).toEqual(extensionNumber);\n\n    const newExtensionNumber = '65787344366';\n    extensionNumberField.simulate('change', {\n      target: { value: newExtensionNumber },\n    });\n    expect(setExtensionNumber).toBeCalledWith(newExtensionNumber);\n\n    wrapper = setup({\n      setExtensionNumber,\n      extensionNumber,\n      isExtensionNumber: false,\n    });\n    const extensionNumberField2 = extensionNumberFieldFn();\n\n    expect(extensionNumberField2).toHaveLength(0);\n  });\n\n  // [true, false].forEach((takingCall) => {\n  //   it(`When click the takingCall, setTakingCall to be called. (with initial state: ${takingCall})`, () => {\n  //     const setTakingCall = jest.fn();\n  //     wrapper = setup({\n  //       takingCall,\n  //       setTakingCall,\n  //     });\n  //     const takingCallToggle = wrapper\n  //       .find('ToggleButton[data-sign=\"takingCall\"]')\n  //       .at(0)\n  //       .find('input[type=\"checkbox\"]')\n  //       .at(0);\n  //     expect(takingCallToggle.prop('checked')).toEqual(takingCall);\n  //     takingCallToggle.simulate('change', { target: { value: !takingCall } });\n  //     expect(setTakingCall).toBeCalledWith(!takingCall);\n  //   });\n  // });\n\n  // [true, false].forEach((autoAnswer) => {\n  //   it(`When click the autoAnswer, setAutoAnswer to be called. (with initial state: ${autoAnswer})`, () => {\n  //     const setAutoAnswer = jest.fn();\n  //     wrapper = setup({\n  //       autoAnswer,\n  //       setAutoAnswer,\n  //     });\n  //     const autoAnswerToggle = wrapper\n  //       .find('ToggleButton[data-sign=\"autoAnswer\"]')\n  //       .at(0)\n  //       .find('input[type=\"checkbox\"]')\n  //       .at(0);\n  //     expect(autoAnswerToggle.prop('checked')).toEqual(autoAnswer);\n  //     autoAnswerToggle.simulate('change', { target: { value: !autoAnswer } });\n  //     expect(setAutoAnswer).toBeCalledWith(!autoAnswer);\n  //   });\n  // });\n\n  it('Can display skillProfile correctly, and can be changed.', () => {\n    const setSkillProfileId = jest.fn();\n    const selectedSkillProfileId = '1002';\n    wrapper = setup({\n      setSkillProfileId,\n      selectedSkillProfileId,\n    });\n    const skillProfilePickList = wrapper.find(\n      'PickList[data-sign=\"skillProfile\"]',\n    );\n\n    expect(skillProfilePickList.prop('value')).toBe(selectedSkillProfileId);\n    expect(skillProfilePickList.find('[role=\"button\"]').text()).toBe(\n      defaultSkillProfileList.find(\n        (x) => x.profileId === selectedSkillProfileId,\n      ).profileName,\n    );\n    expect(skillProfilePickList.prop('options')).toHaveLength(\n      defaultSkillProfileList.length,\n    );\n    const userSelectedSkillProfileId = '1003';\n\n    skillProfilePickList.find('[role=\"button\"]').simulate('click');\n    document.body\n      .querySelector<HTMLButtonElement>(\n        `li[data-value=\"${userSelectedSkillProfileId}\"]`,\n      )\n      .click();\n    expect(setSkillProfileId).toBeCalledWith(userSelectedSkillProfileId);\n  });\n\n  it('Can display loginType correctly, and can be changed.', () => {\n    const setLoginType = jest.fn();\n    const loginType = '102';\n    wrapper = setup({\n      setLoginType,\n      loginType,\n    });\n    const loginTypePickList = wrapper.find('PickList[data-sign=\"loginType\"]');\n\n    expect(loginTypePickList.prop('value')).toBe(loginType);\n    expect(loginTypePickList.find('[role=\"button\"]').text()).toBe(\n      defaultLoginTypeList.find((x) => x.id === loginType).label,\n    );\n    const changeLoginType = '101';\n    loginTypePickList.find('[role=\"button\"]').simulate('click');\n    const menuItems = document.body.querySelectorAll(\n      '[role=\"presentation\"] li[role=\"option\"]',\n    );\n    expect(menuItems).toHaveLength(defaultLoginTypeList.length);\n    document.body\n      .querySelector<HTMLButtonElement>(`li[data-value=\"${changeLoginType}\"]`)\n      .click();\n    expect(setLoginType).toBeCalledWith(changeLoginType);\n  });\n});\n"],"file":"BasicSessionPanel.spec.js"}