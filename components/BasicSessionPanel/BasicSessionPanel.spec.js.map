{"version":3,"sources":["components/BasicSessionPanel/BasicSessionPanel.spec.tsx"],"names":["wrapper","currentLocale","defaultSkillProfileList","profileId","profileName","isDefault","profileDesc","defaultLoginTypeList","label","id","setup","selectedSkillProfileId","skillProfileList","setSkillProfileId","loginTypeList","loginType","setLoginType","extensionNumber","setExtensionNumber","autoAnswer","setAutoAnswer","inboundQueuesFieldText","isExtensionNumber","searchOption","inboundQueues","submitInboundQueues","getAssignedInboundQueues","isAllAssign","isSeveralAssign","checkBoxOnChange","allCheckBoxOnChange","showInboundQueues","showSkillProfile","showAutoAnswer","afterEach","unmount","describe","it","jest","fn","extensionNumberFieldFn","find","at","extensionNumberField","expect","prop","toEqual","newExtensionNumber","simulate","target","value","toBeCalledWith","extensionNumberField2","toHaveLength","skillProfilePickList","toBe","text","x","length","skip","loginTypePickList","changeLoginType","menuItems","document","body","querySelectorAll","querySelector","click"],"mappings":"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","sourcesContent":["import { RcThemeProvider } from '@ringcentral/juno';\nimport { mount } from 'enzyme';\nimport React from 'react';\n\nimport { BasicSessionPanel, BasicSessionPanelProps } from './BasicSessionPanel';\n\nlet wrapper;\nconst currentLocale = 'en-US';\nconst defaultSkillProfileList = [\n  {\n    profileId: '1001',\n    profileName: 'Work',\n    isDefault: '1',\n    profileDesc: 'like to work',\n  },\n  {\n    profileId: '1002',\n    profileName: 'eat',\n    isDefault: '1',\n    profileDesc: 'fat man',\n  },\n  {\n    profileId: '1003',\n    profileName: 'play',\n    isDefault: '1',\n    profileDesc: 'like to work',\n  },\n];\nconst defaultLoginTypeList = [\n  {\n    label: 'externalPhone',\n    id: '101',\n  },\n  {\n    label: 'externalPhone2',\n    id: '102',\n  },\n];\n\nfunction setup({\n  selectedSkillProfileId = '1002',\n  skillProfileList = defaultSkillProfileList,\n  setSkillProfileId = () => {},\n  loginTypeList = defaultLoginTypeList,\n  loginType = '102',\n  setLoginType = () => {},\n  extensionNumber = '',\n  setExtensionNumber = () => {},\n  // takingCall = false,\n  // setTakingCall = () => {},\n  autoAnswer = true,\n  setAutoAnswer = () => {},\n  inboundQueuesFieldText = '',\n  isExtensionNumber = false,\n  searchOption,\n  inboundQueues = [],\n  submitInboundQueues,\n  getAssignedInboundQueues = () => [],\n  isAllAssign = () => true,\n  isSeveralAssign = () => false,\n  checkBoxOnChange,\n  allCheckBoxOnChange,\n  showInboundQueues = true,\n  showSkillProfile = true,\n  showAutoAnswer = true,\n}: Partial<BasicSessionPanelProps>) {\n  return mount(\n    <RcThemeProvider>\n      <BasicSessionPanel\n        currentLocale={currentLocale}\n        selectedSkillProfileId={selectedSkillProfileId}\n        skillProfileList={skillProfileList}\n        setSkillProfileId={setSkillProfileId}\n        loginTypeList={loginTypeList}\n        loginType={loginType}\n        setLoginType={setLoginType}\n        extensionNumber={extensionNumber}\n        setExtensionNumber={setExtensionNumber}\n        // takingCall={takingCall}\n        // setTakingCall={setTakingCall}\n        autoAnswer={autoAnswer}\n        setAutoAnswer={setAutoAnswer}\n        inboundQueuesFieldText={inboundQueuesFieldText}\n        isExtensionNumber={isExtensionNumber}\n        searchOption={searchOption}\n        inboundQueues={inboundQueues}\n        submitInboundQueues={submitInboundQueues}\n        getAssignedInboundQueues={getAssignedInboundQueues}\n        isAllAssign={isAllAssign}\n        isSeveralAssign={isSeveralAssign}\n        checkBoxOnChange={checkBoxOnChange}\n        allCheckBoxOnChange={allCheckBoxOnChange}\n        showInboundQueues={showInboundQueues}\n        showSkillProfile={showSkillProfile}\n        showAutoAnswer={showAutoAnswer}\n      />\n    </RcThemeProvider>,\n  );\n}\n\nafterEach(async () => {\n  wrapper.unmount();\n});\n\ndescribe('<BasicSessionPanel />', async () => {\n  // TODO\n\n  // it(\"Page display user's selected Inbound queue, and navigate to InboundQueuesPage when click the field.\", () => {\n  //   const gotoInboundQueuesPage = jest.fn();\n  //   const inboundQueuesFieldText = 'AmyTestQueue';\n  //   wrapper = setup({\n  //     inboundQueuesFieldText,\n  //     gotoInboundQueuesPage,\n  //   });\n  //   const inboundQueuesField = wrapper\n  //     .find('RcTextField[data-sign=\"inboundQueues\"]')\n  //     .at(0)\n  //     .find('input')\n  //     .at(0);\n\n  //   expect(inboundQueuesField.prop('value')).toEqual(inboundQueuesFieldText);\n  //   inboundQueuesField.simulate('click');\n  //   expect(gotoInboundQueuesPage).toBeCalled();\n  // });\n\n  it('Can display extensionNumber correctly, and can be changed.', () => {\n    const setExtensionNumber = jest.fn();\n    const extensionNumber = '65787344333';\n    wrapper = setup({\n      setExtensionNumber,\n      extensionNumber,\n      isExtensionNumber: true,\n    });\n\n    const extensionNumberFieldFn = () =>\n      wrapper.find('input[data-sign=\"extensionNumber\"]').at(0);\n\n    const extensionNumberField = extensionNumberFieldFn();\n\n    expect(extensionNumberField.prop('value')).toEqual(extensionNumber);\n\n    const newExtensionNumber = '65787344366';\n    extensionNumberField.simulate('change', {\n      target: { value: newExtensionNumber },\n    });\n    expect(setExtensionNumber).toBeCalledWith(newExtensionNumber);\n\n    wrapper = setup({\n      setExtensionNumber,\n      extensionNumber,\n      isExtensionNumber: false,\n    });\n    const extensionNumberField2 = extensionNumberFieldFn();\n\n    expect(extensionNumberField2).toHaveLength(0);\n  });\n\n  // [true, false].forEach((takingCall) => {\n  //   it(`When click the takingCall, setTakingCall to be called. (with initial state: ${takingCall})`, () => {\n  //     const setTakingCall = jest.fn();\n  //     wrapper = setup({\n  //       takingCall,\n  //       setTakingCall,\n  //     });\n  //     const takingCallToggle = wrapper\n  //       .find('ToggleButton[data-sign=\"takingCall\"]')\n  //       .at(0)\n  //       .find('input[type=\"checkbox\"]')\n  //       .at(0);\n  //     expect(takingCallToggle.prop('checked')).toEqual(takingCall);\n  //     takingCallToggle.simulate('change', { target: { value: !takingCall } });\n  //     expect(setTakingCall).toBeCalledWith(!takingCall);\n  //   });\n  // });\n\n  // [true, false].forEach((autoAnswer) => {\n  //   it(`When click the autoAnswer, setAutoAnswer to be called. (with initial state: ${autoAnswer})`, () => {\n  //     const setAutoAnswer = jest.fn();\n  //     wrapper = setup({\n  //       autoAnswer,\n  //       setAutoAnswer,\n  //     });\n  //     const autoAnswerToggle = wrapper\n  //       .find('ToggleButton[data-sign=\"autoAnswer\"]')\n  //       .at(0)\n  //       .find('input[type=\"checkbox\"]')\n  //       .at(0);\n  //     expect(autoAnswerToggle.prop('checked')).toEqual(autoAnswer);\n  //     autoAnswerToggle.simulate('change', { target: { value: !autoAnswer } });\n  //     expect(setAutoAnswer).toBeCalledWith(!autoAnswer);\n  //   });\n  // });\n\n  it('Can display skillProfile correctly, and can be changed.', () => {\n    const setSkillProfileId = jest.fn();\n    const selectedSkillProfileId = '1002';\n    wrapper = setup({\n      setSkillProfileId,\n      selectedSkillProfileId,\n    });\n    const skillProfilePickList = wrapper.find(\n      'PickList[data-sign=\"skillProfile\"]',\n    );\n\n    expect(skillProfilePickList.prop('value')).toBe(selectedSkillProfileId);\n    expect(skillProfilePickList.find('.RcLineSelect-select').text()).toBe(\n      defaultSkillProfileList.find(\n        (x) => x.profileId === selectedSkillProfileId,\n      ).profileName,\n    );\n    expect(skillProfilePickList.prop('options')).toHaveLength(\n      defaultSkillProfileList.length,\n    );\n  });\n\n  it.skip('Can display loginType correctly, and can be changed.', () => {\n    const setLoginType = jest.fn();\n    const loginType = '102';\n    wrapper = setup({\n      setLoginType,\n      loginType,\n    });\n    const loginTypePickList = wrapper.find('PickList[data-sign=\"loginType\"]');\n\n    expect(loginTypePickList.prop('value')).toBe(loginType);\n    expect(loginTypePickList.find('[role=\"button\"]').text()).toBe(\n      defaultLoginTypeList.find((x) => x.id === loginType).label,\n    );\n    const changeLoginType = '101';\n    loginTypePickList.find('[role=\"button\"]').simulate('click');\n    const menuItems = document.body.querySelectorAll(\n      '[role=\"presentation\"] li[role=\"option\"]',\n    );\n    expect(menuItems).toHaveLength(defaultLoginTypeList.length);\n    document.body\n      .querySelector<HTMLButtonElement>(`li[data-value=\"${changeLoginType}\"]`)\n      .click();\n    expect(setLoginType).toBeCalledWith(changeLoginType);\n  });\n});\n"],"file":"BasicSessionPanel.spec.js"}