{"version":3,"sources":["components/BasicSessionPanel/BasicSessionPanel.tsx"],"names":["BasicSessionPanel","currentLocale","selectedSkillProfileId","skillProfileList","setSkillProfileId","loginTypeList","loginType","setLoginType","extensionNumber","setExtensionNumber","inboundQueuesFieldText","isExtensionNumber","searchOption","inboundQueues","submitInboundQueues","getAssignedInboundQueues","isAllAssign","isSeveralAssign","checkBoxOnChange","allCheckBoxOnChange","classes","resetFormGroup","showWarning","isWide","inboundQueuesPageShow","setInboundQueuesPageShow","root","i18n","getString","styles","customSelect","readOnly","endAdornment","length","maxLength","value","target","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AAEA;;AAIA;;AACA;;;;;;;;;;;;;;;;;;;;AAUO,IAAMA,iBAA4D,GAAG,SAA/DA,iBAA+D,OAwBtE;AAAA,MAvBJC,aAuBI,QAvBJA,aAuBI;AAAA,MAtBJC,sBAsBI,QAtBJA,sBAsBI;AAAA,MArBJC,gBAqBI,QArBJA,gBAqBI;AAAA,MApBJC,iBAoBI,QApBJA,iBAoBI;AAAA,MAnBJC,aAmBI,QAnBJA,aAmBI;AAAA,MAlBJC,SAkBI,QAlBJA,SAkBI;AAAA,MAjBJC,YAiBI,QAjBJA,YAiBI;AAAA,MAhBJC,eAgBI,QAhBJA,eAgBI;AAAA,MAfJC,kBAeI,QAfJA,kBAeI;AAAA,MAdJC,sBAcI,QAdJA,sBAcI;AAAA,MAbJC,iBAaI,QAbJA,iBAaI;AAAA,MAZJC,YAYI,QAZJA,YAYI;AAAA,MAXJC,aAWI,QAXJA,aAWI;AAAA,MAVJC,mBAUI,QAVJA,mBAUI;AAAA,MATJC,wBASI,QATJA,wBASI;AAAA,MARJC,WAQI,QARJA,WAQI;AAAA,MAPJC,eAOI,QAPJA,eAOI;AAAA,MANJC,gBAMI,QANJA,gBAMI;AAAA,MALJC,mBAKI,QALJA,mBAKI;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,cAGI,QAHJA,cAGI;AAAA,MAFJC,WAEI,QAFJA,WAEI;AAAA,MADJC,MACI,QADJA,MACI;;AAAA,kBACsD,qBAAS,KAAT,CADtD;AAAA;AAAA,MACGC,qBADH;AAAA,MAC0BC,wBAD1B;;AAEJ,wBAAU;AAAA,WAAMJ,cAAc,EAApB;AAAA,GAAV,EAAkC,EAAlC;AAEA,sBACE,+EACE,gCAAC,8BAAD;AAAgB,IAAA,IAAI,EAAEG;AAAtB,kBACE,gCAAC,sCAAD;AACE,IAAA,YAAY,EAAEZ,YADhB;AAEE,IAAA,aAAa,EAAEX,aAFjB;AAGE,IAAA,aAAa,EAAEY,aAHjB;AAIE,IAAA,mBAAmB,EAAEC,mBAJvB;AAKE,IAAA,wBAAwB,EAAEC,wBAL5B;AAME,IAAA,WAAW,EAAEC,WANf;AAOE,IAAA,eAAe,EAAEC,eAPnB;AAQE,IAAA,gBAAgB,EAAEC,gBARpB;AASE,IAAA,mBAAmB,EAAEC,mBATvB;AAUE,IAAA,MAAM,EAAE;AAAA,aAAMM,wBAAwB,CAAC,KAAD,CAA9B;AAAA;AAVV,IADF,CADF,eAeE;AAAK,IAAA,SAAS,EAAEL,OAAO,CAACM;AAAxB,kBACE,gCAAC,iBAAD;AACE,iBAAU,eADZ;AAEE,IAAA,KAAK,EAAEC,iBAAKC,SAAL,CAAe,eAAf,EAAgC3B,aAAhC,CAFT;AAGE,IAAA,KAAK,EAAES,sBAHT;AAIE,IAAA,KAAK,EAAEA,sBAJT;AAKE,IAAA,SAAS,MALX;AAME,IAAA,OAAO,EAAE;AACPgB,MAAAA,IAAI,EAAEG,mBAAOC;AADN,KANX;AASE,IAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,IADA;AAEVC,MAAAA,YAAY,eAAE,gCAAC,oCAAD;AAFJ,KATd;AAaE,IAAA,QAAQ,EAAE,KAbZ;AAcE,IAAA,OAAO,EAAE;AAAA,aAAMP,wBAAwB,CAAC,IAAD,CAA9B;AAAA;AAdX,IADF,EAiBGtB,gBAAgB,CAAC8B,MAAjB,GAA0B,CAA1B,iBACC,gCAAC,kBAAD;AACE,iBAAU,cADZ;AAEE,IAAA,OAAO,EAAE9B,gBAFX;AAGE,IAAA,KAAK,EAAEwB,iBAAKC,SAAL,CAAe,cAAf,EAA+B3B,aAA/B,CAHT;AAIE,IAAA,KAAK,EAAEC,sBAJT;AAKE,IAAA,cAAc,EAAC,WALjB;AAME,IAAA,cAAc,EAAC,aANjB;AAOE,IAAA,QAAQ,EAAEE;AAPZ,IAlBJ,eA4BE,gCAAC,kBAAD;AACE,iBAAU,WADZ;AAEE,IAAA,OAAO,EAAEC,aAFX;AAGE,IAAA,KAAK,EAAEsB,iBAAKC,SAAL,CAAe,iBAAf,EAAkC3B,aAAlC,CAHT;AAIE,IAAA,KAAK,EAAEK,SAJT;AAKE,IAAA,QAAQ,EAAEC;AALZ,IA5BF,EAmCGI,iBAAiB,iBAChB,gCAAC,iBAAD;AACE,iBAAU,iBADZ;AAEE,IAAA,KAAK,EAAEgB,iBAAKC,SAAL,CAAe,iBAAf,EAAkC3B,aAAlC,CAFT;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,KAAK,EAAEO,eAJT;AAKE,IAAA,WAAW,EAAEmB,iBAAKC,SAAL,CAAe,sBAAf,EAAuC3B,aAAvC,CALf;AAME,IAAA,UAAU,EAAE;AACViC,MAAAA,SAAS,EAAE;AADD,KANd;AASE,IAAA,QAAQ,EAAE,KATZ;AAUE,IAAA,OAAO,EAAE;AACPR,MAAAA,IAAI,EAAEG,mBAAOC;AADN,KAVX;AAaE,IAAA,QAAQ,EAAE,yBAA2B;AAAA,UAAdK,KAAc,SAAxBC,MAAwB,CAAdD,KAAc;AACnC1B,MAAAA,kBAAkB,CAAC0B,KAAD,CAAlB;AACD;AAfH,IApCJ,EAsDGb,WAAW,iBACV,gCAAC,gBAAD;AAAS,IAAA,MAAM,EAAEC;AAAjB,KACGI,iBAAKC,SAAL,CAAe,SAAf,EAA0B3B,aAA1B,CADH,CAvDJ,CAfF,CADF;AAiGD,CA7HM;;;AA+HPD,iBAAiB,CAACqC,YAAlB,GAAiC;AAC/BjB,EAAAA,OAAO,EAAE,EADsB;AAE/BE,EAAAA,WAAW,EAAE;AAFkB,CAAjC","sourcesContent":["import { RcTextField } from '@ringcentral-integration/rcui';\nimport React, { FunctionComponent, useState, useEffect } from 'react';\nimport { CustomArrowButton } from 'ringcentral-widgets/components/Rcui/CustomArrowButton';\nimport { AnimationPanel } from 'ringcentral-widgets/components/AnimationPanel';\n\nimport { BasicSessionProps } from '../../interfaces/EvAgentSessionUI.interface';\nimport { PickList } from '../PickList';\nimport { Warning, WarningProps } from './Warning';\n\nimport {\n  InboundQueuesPanel,\n  InboundQueuesPanelProps,\n} from '../InboundQueuesPanel';\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\nexport type BasicSessionPanelProps = BasicSessionProps &\n  Omit<InboundQueuesPanelProps, 'goBack'> & {\n    classes?: {\n      root?: string;\n    };\n    showWarning?: boolean;\n  } & Pick<WarningProps, 'isWide'>;\n\nexport const BasicSessionPanel: FunctionComponent<BasicSessionPanelProps> = ({\n  currentLocale,\n  selectedSkillProfileId,\n  skillProfileList,\n  setSkillProfileId,\n  loginTypeList,\n  loginType,\n  setLoginType,\n  extensionNumber,\n  setExtensionNumber,\n  inboundQueuesFieldText,\n  isExtensionNumber,\n  searchOption,\n  inboundQueues,\n  submitInboundQueues,\n  getAssignedInboundQueues,\n  isAllAssign,\n  isSeveralAssign,\n  checkBoxOnChange,\n  allCheckBoxOnChange,\n  classes,\n  resetFormGroup,\n  showWarning,\n  isWide,\n}) => {\n  const [inboundQueuesPageShow, setInboundQueuesPageShow] = useState(false);\n  useEffect(() => resetFormGroup(), []);\n\n  return (\n    <>\n      <AnimationPanel open={inboundQueuesPageShow}>\n        <InboundQueuesPanel\n          searchOption={searchOption}\n          currentLocale={currentLocale}\n          inboundQueues={inboundQueues}\n          submitInboundQueues={submitInboundQueues}\n          getAssignedInboundQueues={getAssignedInboundQueues}\n          isAllAssign={isAllAssign}\n          isSeveralAssign={isSeveralAssign}\n          checkBoxOnChange={checkBoxOnChange}\n          allCheckBoxOnChange={allCheckBoxOnChange}\n          goBack={() => setInboundQueuesPageShow(false)}\n        />\n      </AnimationPanel>\n      <div className={classes.root}>\n        <RcTextField\n          data-sign=\"inboundQueues\"\n          label={i18n.getString('inboundQueues', currentLocale)}\n          title={inboundQueuesFieldText}\n          value={inboundQueuesFieldText}\n          fullWidth\n          classes={{\n            root: styles.customSelect,\n          }}\n          InputProps={{\n            readOnly: true,\n            endAdornment: <CustomArrowButton />,\n          }}\n          clearBtn={false}\n          onClick={() => setInboundQueuesPageShow(true)}\n        />\n        {skillProfileList.length > 0 && (\n          <PickList\n            data-sign=\"skillProfile\"\n            options={skillProfileList}\n            label={i18n.getString('skillProfile', currentLocale)}\n            value={selectedSkillProfileId}\n            optionValueKey=\"profileId\"\n            optionLabelKey=\"profileName\"\n            onChange={setSkillProfileId}\n          />\n        )}\n        <PickList\n          data-sign=\"loginType\"\n          options={loginTypeList}\n          label={i18n.getString('voiceConnection', currentLocale)}\n          value={loginType}\n          onChange={setLoginType}\n        />\n        {isExtensionNumber && (\n          <RcTextField\n            data-sign=\"extensionNumber\"\n            label={i18n.getString('extensionNumber', currentLocale)}\n            fullWidth\n            value={extensionNumber}\n            placeholder={i18n.getString('enterYourPhoneNumber', currentLocale)}\n            inputProps={{\n              maxLength: 255,\n            }}\n            clearBtn={false}\n            classes={{\n              root: styles.customSelect,\n            }}\n            onChange={({ target: { value } }) => {\n              setExtensionNumber(value);\n            }}\n          />\n        )}\n        {showWarning && (\n          <Warning isWide={isWide}>\n            {i18n.getString('warning', currentLocale)}\n          </Warning>\n        )}\n        {/* <ToggleButton\n        data-sign=\"takingCall\"\n        label={i18n.getString('takingCall', currentLocale)}\n        onChange={() => {\n          setTakingCall(!takingCall);\n        }}\n        classes={{\n          root: styles.takingCall,\n        }}\n        checked={takingCall}\n      />\n      <ToggleButton\n        data-sign=\"autoAnswer\"\n        label={i18n.getString('answerCalls', currentLocale)}\n        onChange={() => {\n          setAutoAnswer(!autoAnswer);\n        }}\n        checked={autoAnswer}\n      /> */}\n      </div>\n    </>\n  );\n};\n\nBasicSessionPanel.defaultProps = {\n  classes: {},\n  showWarning: false,\n};\n"],"file":"BasicSessionPanel.js"}