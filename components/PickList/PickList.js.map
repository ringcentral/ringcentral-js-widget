{"version":3,"sources":["components/PickList/PickList.tsx"],"names":["PickList","options","optionValueKey","optionLabelKey","label","value","required","onChange","dataSign","renderItem","renderValue","InputProps","target","map","item","i","styles","menuItem"],"mappings":";;;;;;;;;;;AAAA;;AAOA;;AAEA;;;;AAqBO,IAAMA,QAA0C,GAAG,SAA7CA,QAA6C,OAYpD;AAAA,MAXJC,OAWI,QAXJA,OAWI;AAAA,iCAVJC,cAUI;AAAA,MAVJA,cAUI,oCAVa,IAUb;AAAA,iCATJC,cASI;AAAA,MATJA,cASI,oCATa,OASb;AAAA,MARJC,KAQI,QARJA,KAQI;AAAA,MAPJC,KAOI,QAPJA,KAOI;AAAA,MANJC,QAMI,QANJA,QAMI;AAAA,MALJC,SAKI,QALJA,QAKI;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,UAGI,QAHJA,UAGI;AAAA,MAFJC,WAEI,QAFJA,WAEI;AAAA,MADJC,UACI,QADJA,UACI;AACJ,sBACE,gCAAC,kBAAD;AACE,iBAAWH,QADb;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,QAAQ,EAAEF,QAHZ;AAIE,IAAA,KAAK,EAAEF,KAJT;AAKE,IAAA,KAAK,EAAEC,KALT;AAME,IAAA,UAAU,EAAEM,UANd;AAOE,IAAA,QAAQ,EAAE,yBAA2B;AAAA,UAAdN,KAAc,SAAxBO,MAAwB,CAAdP,KAAc;;AACnCE,MAAAA,SAAQ,CAACF,KAAD,CAAR;AACD,KATH;AAUE,IAAA,WAAW,EAAEK;AAVf,KAYGT,OAAO,CAACY,GAAR,CAAY,UAACC,IAAD,EAAOC,CAAP,EAAa;AACxB,QAAMX,KAAK,GAAGU,IAAI,CAACX,cAAD,CAAlB;AACA,wBACE,gCAAC,gBAAD;AACE,MAAA,GAAG,EAAEY,CADP;AAEE,MAAA,KAAK,EAAED,IAAI,CAACZ,cAAD,CAFb;AAGE,mCAAoBa,CAApB;AAHF,OAKGN,UAAU,GACTA,UAAU,CAACK,IAAD,CADD,gBAGT;AAAK,MAAA,SAAS,EAAEE,mBAAOC,QAAvB;AAAiC,MAAA,KAAK,EAAEb;AAAxC,OACGA,KADH,CARJ,CADF;AAeD,GAjBA,CAZH,CADF;AAiCD,CA9CM","sourcesContent":["import {\n  combineProps,\n  RcLineSelect,\n  RcLineSelectProps,\n  RcMenuItem,\n} from '@ringcentral-integration/rcui';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport styles from './styles.scss';\n\nexport interface PickListProps extends Pick<RcLineSelectProps, 'InputProps'> {\n  options: any[];\n  /**\n   * the option value with key of options, default is 'id'\n   */\n  optionValueKey?: string;\n  /**\n   * the option show label with the key of options, default is 'label'\n   */\n  optionLabelKey?: string;\n  label: string;\n  value: string;\n  required?: boolean;\n  onChange: (e: any) => void;\n  dataSign?: string;\n  renderItem?: (...args: any[]) => ReactNode;\n  renderValue?: (...args: any[]) => ReactNode;\n}\n\nexport const PickList: FunctionComponent<PickListProps> = ({\n  options,\n  optionValueKey = 'id',\n  optionLabelKey = 'label',\n  label,\n  value,\n  required,\n  onChange,\n  dataSign,\n  renderItem,\n  renderValue,\n  InputProps,\n}) => {\n  return (\n    <RcLineSelect\n      data-sign={dataSign}\n      fullWidth\n      required={required}\n      label={label}\n      value={value}\n      InputProps={InputProps}\n      onChange={({ target: { value } }) => {\n        onChange(value);\n      }}\n      renderValue={renderValue}\n    >\n      {options.map((item, i) => {\n        const label = item[optionLabelKey];\n        return (\n          <RcMenuItem\n            key={i}\n            value={item[optionValueKey]}\n            data-sign={`option${i}`}\n          >\n            {renderItem ? (\n              renderItem(item)\n            ) : (\n              <div className={styles.menuItem} title={label}>\n                {label}\n              </div>\n            )}\n          </RcMenuItem>\n        );\n      })}\n    </RcLineSelect>\n  );\n};\n"],"file":"PickList.js"}