{"version":3,"sources":["index.js"],"names":["DEFAULT_LOCALE","PSEUDO_LOCALE","RUNTIME","locale","defaultLocale","instances","Set","padRatio","setLocale","i","load","I18n","loadLocale","Error","_loadLocale","_cache","add","data","_load","key","Object","prototype","hasOwnProperty","call","str","_getString","ratio","Number","isNaN","console","log","parseFloat"],"mappings":"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","sourcesContent":["import toPseudoString from './lib/toPseudoString';\n\nexport const DEFAULT_LOCALE = 'en-US';\nexport const PSEUDO_LOCALE = 'en-ZZ';\nexport const RUNTIME = {\n  locale: DEFAULT_LOCALE,\n  defaultLocale: DEFAULT_LOCALE,\n  instances: new Set(),\n  padRatio: 0.3,\n};\n\n/**\n * @function\n * @description Set currrent runtime locale and load the locale files accordingly\n * @param {String} locale - The desired locale.\n * @return Promise<undefined>\n */\nasync function setLocale(locale) {\n  RUNTIME.locale = locale;\n  for (const i of RUNTIME.instances) {\n    await i.load();\n  }\n}\n\n/**\n * @class\n * @description I18n is a simple localizations helper class that represents a set of locale files.\n */\nexport default class I18n {\n  /**\n   * @constructor\n   * @description Accepts a loadLocale function that should be async and resolve to the locale\n   *  object when invoked.\n   * @param {String => Promise<Object>} loadLocale - Asynchronous locale loader function.\n   */\n  constructor(loadLocale) {\n    if (typeof loadLocale !== 'function') {\n      throw new Error('loadLocale must be a function');\n    }\n    this._loadLocale = loadLocale;\n    this._cache = {};\n    RUNTIME.instances.add(this);\n    this.load();\n  }\n  async _load(locale) {\n    if (locale !== PSEUDO_LOCALE && !this._cache[locale]) {\n      let data;\n      try {\n        data = await (async () => this._loadLocale(locale))();\n      } catch (error) {\n        /* ignore error */\n        data = {};\n      }\n      this._cache[locale] = data;\n    }\n  }\n  async load() {\n    await this._load(RUNTIME.defaultLocale);\n    await this._load(RUNTIME.locale);\n  }\n  _getString(key, locale) {\n    if (\n      this._cache[locale] &&\n      Object.prototype.hasOwnProperty.call(this._cache[locale], key)\n    ) {\n      return this._cache[locale][key];\n    }\n    if (\n      this._cache[RUNTIME.defaultLocale] &&\n      Object.prototype.hasOwnProperty.call(this._cache[RUNTIME.defaultLocale], key)\n    ) {\n      return this._cache[RUNTIME.defaultLocale][key];\n    }\n    return key;\n  }\n  getString(key, locale = RUNTIME.locale) {\n    if (locale === PSEUDO_LOCALE) {\n      return toPseudoString({\n        str: this._getString(key, RUNTIME.defaultLocale),\n        padRatio: RUNTIME.padRatio,\n      });\n    }\n    return this._getString(key, locale);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get currentLocale() {\n    return RUNTIME.locale;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  get setLocale() {\n    return setLocale;\n  }\n\n  static get currentLocale() {\n    return RUNTIME.locale;\n  }\n\n  static get setLocale() {\n    return setLocale;\n  }\n\n  static get padRatio() {\n    return RUNTIME.padRatio;\n  }\n\n  static set padRatio(ratio) {\n    if (Number.isNaN(ratio)) {\n      console.log('ratio must be a number');\n      return;\n    }\n    RUNTIME.padRatio = Number.parseFloat(ratio);\n  }\n\n  static setDefaultLocale(locale) {\n    RUNTIME.defaultLocale = locale;\n  }\n}\n"],"file":"index.js"}