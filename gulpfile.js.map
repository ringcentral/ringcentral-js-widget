{"version":3,"sources":["gulpfile.js"],"names":["getVersionFromTag","tag","process","env","TRAVIS_TAG","test","execa","shell","replace","console","error","BUILD_PATH","path","resolve","__dirname","clean","fs","remove","copy","gulp","src","pipe","dest","compile","localeLoader","transformLoader","localeSettings","sourcemaps","init","write","build","series","parallel","RELEASE_PATH","releaseClean","exists","readdir","file","files","filter","releaseCopy","generatePackage","JSON","readFile","packageInfo","parse","scripts","jest","version","log","name","writeFile","stringify","release","exportLocale","exportFullLocale","exportType","exportTranslatedLocale","importLocale","consolidateLocale","sourceFolder"],"mappings":"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","sourcesContent":["import gulp from 'gulp';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport babel from 'gulp-babel';\nimport sourcemaps from 'gulp-sourcemaps';\nimport execa from 'execa';\nimport * as localeLoader from '@ringcentral-integration/locale-loader';\nimport localeSettings from '@ringcentral-integration/locale-settings';\n\nasync function getVersionFromTag() {\n  let tag = process.env.TRAVIS_TAG;\n  if (tag && /^\\d+.\\d+.\\d+/.test(tag)) {\n    return tag;\n  }\n  try {\n    tag = await execa.shell(\n      'git describe --exact-match --tags $(git rev-parse HEAD)',\n    );\n    tag = tag.replace(/\\r?\\n|\\r/g, '');\n    if (/^\\d+.\\d+.\\d+/.test(tag)) {\n      return tag;\n    }\n  } catch (e) {\n    console.error(e);\n  }\n  return null;\n}\n\nconst BUILD_PATH = path.resolve(__dirname, '../../build/glip-widgets');\n\nexport function clean() {\n  return fs.remove(BUILD_PATH);\n}\nexport function copy() {\n  return gulp\n    .src([\n      './**',\n      '!./**/*.js',\n      '!./test{/**,}',\n      '!./coverage{/**,}',\n      '!./node_modules{/**,}',\n      '!package-lock.json',\n    ])\n    .pipe(gulp.dest(BUILD_PATH));\n}\nexport function compile() {\n  return gulp\n    .src([\n      './**/*.js',\n      '!./**/*.test.js',\n      '!./coverage{/**,}',\n      '!./node_modules{/**,}',\n      '!gulpfile.babel.js',\n    ])\n    .pipe(\n      localeLoader.transformLoader({\n        ...localeSettings,\n      }),\n    )\n    .pipe(sourcemaps.init())\n    .pipe(babel())\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest(BUILD_PATH));\n}\n\nexport const build = gulp.series(clean, gulp.parallel(copy, compile));\n\nconst RELEASE_PATH = path.resolve(__dirname, '../../release/glip-widgets');\n\nexport async function releaseClean() {\n  if (!(await fs.exists(RELEASE_PATH))) {\n    await execa.shell(`mkdir -p ${RELEASE_PATH}`);\n  }\n  const files = (await fs.readdir(RELEASE_PATH)).filter(\n    (file) => !/^\\./.test(file),\n  );\n  for (const file of files) {\n    await fs.remove(path.resolve(RELEASE_PATH, file));\n  }\n}\n\nexport function releaseCopy() {\n  return gulp\n    .src([`${BUILD_PATH}/**`, `${__dirname}/README.md`, `${__dirname}/LICENSE`])\n    .pipe(gulp.dest(RELEASE_PATH));\n}\n\nexport async function generatePackage() {\n  const packageInfo = JSON.parse(\n    await fs.readFile(path.resolve(BUILD_PATH, 'package.json')),\n  );\n  delete packageInfo.scripts;\n  delete packageInfo.jest;\n  const version = await getVersionFromTag();\n  console.log('version:', version);\n  if (version) {\n    packageInfo.version = version;\n    packageInfo.name = 'ringcentral-widgets';\n  }\n  await fs.writeFile(\n    path.resolve(RELEASE_PATH, 'package.json'),\n    JSON.stringify(packageInfo, null, 2),\n  );\n}\n\nexport const release = gulp.series(\n  gulp.parallel(build, releaseClean),\n  gulp.parallel(releaseCopy, generatePackage),\n);\n\nexport function exportLocale() {\n  return localeLoader.exportLocale({\n    ...localeSettings,\n  });\n}\nexport function exportFullLocale() {\n  return localeLoader.exportLocale({\n    ...localeSettings,\n    exportType: 'full',\n  });\n}\n\nexport function exportTranslatedLocale() {\n  return localeLoader.exportLocale({\n    ...localeSettings,\n    exportType: 'translated',\n  });\n}\nexport function importLocale() {\n  return localeLoader.importLocale({\n    ...localeSettings,\n  });\n}\nexport function consolidateLocale() {\n  return localeLoader.consolidateLocale({\n    ...localeSettings,\n    sourceFolder: path.resolve(__dirname, 'lib/countryNames'),\n  });\n}\n"],"file":"gulpfile.js"}