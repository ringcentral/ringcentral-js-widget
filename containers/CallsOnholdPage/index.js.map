{"version":3,"sources":["containers/CallsOnholdPage/index.js"],"names":["CallsOnholdContainer","props","getCalls","calls","fromSessionId","call","webphoneSession","isConferenceSession","id","Component","propTypes","PropTypes","arrayOf","object","isRequired","string","func","mapToProps","_","phone","callMonitor","params","baseProps","activeCallsUI","getUIProps","mapToFunctions","webphone","conferenceCall","routerInteraction","getAvatarUrl","getUIFunctions","onMerge","sessionId","callsOnHoldClickMergeTrack","parseMergingSessions","sessionIdToMergeWith","sessions","confId","conferences","Object","keys","confSessionId","push","goBack","mergeSessions","onBackButtonClick","length","go","onAdd","callsOnHoldClickAddTrack","fromNumber","webphoneHangup","callsOnHoldClickHangupTrack","hangup","CallsOnholdPage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { filter } from 'ramda';\n\nimport withPhone from '../../lib/withPhone';\nimport CallsOnholdPanel from '../../components/CallsOnholdPanel';\n\nclass CallsOnholdContainer extends Component {\n  static propTypes = {\n    calls: PropTypes.arrayOf(PropTypes.object).isRequired,\n    fromSessionId: PropTypes.string.isRequired,\n    isConferenceSession: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.getCalls = createSelector(\n      () => this.props.calls,\n      () => this.props.fromSessionId,\n      (calls, fromSessionId) =>\n        filter(\n          (call) =>\n            call.webphoneSession &&\n            !this.props.isConferenceSession(call.webphoneSession) &&\n            call.webphoneSession.id !== fromSessionId,\n          calls,\n        ),\n    );\n  }\n\n  render() {\n    return <CallsOnholdPanel {...this.props} calls={this.getCalls()} />;\n  }\n}\n\nfunction mapToProps(_, { phone, phone: { callMonitor }, params, ...props }) {\n  const { fromSessionId } = params;\n  const baseProps = phone.activeCallsUI.getUIProps({\n    ...props,\n  });\n\n  return {\n    ...baseProps,\n    calls: callMonitor.calls,\n    fromSessionId,\n  };\n}\n\nfunction mapToFunctions(\n  _,\n  {\n    params,\n    phone,\n    phone: { webphone, conferenceCall, routerInteraction, callMonitor },\n    getAvatarUrl,\n    ...props\n  },\n) {\n  const { fromSessionId } = params;\n\n  const baseProps = phone.activeCallsUI.getUIFunctions({\n    params,\n    ...props,\n  });\n\n  return {\n    ...baseProps,\n    async onMerge(sessionId) {\n      // to track user click merge\n      callMonitor.callsOnHoldClickMergeTrack();\n\n      const sessions = await conferenceCall.parseMergingSessions({\n        sessionId,\n        sessionIdToMergeWith: fromSessionId,\n      });\n      if (sessions) {\n        const confId =\n          conferenceCall.conferences &&\n          Object.keys(conferenceCall.conferences)[0];\n        if (confId) {\n          const confSessionId = conferenceCall.conferences[confId].sessionId;\n          routerInteraction.push(`/calls/active/${confSessionId}`);\n        } else {\n          routerInteraction.goBack();\n        }\n        await conferenceCall.mergeSessions(sessions);\n      }\n    },\n    onBackButtonClick() {\n      if (webphone.sessions.length) {\n        routerInteraction.goBack();\n        return;\n      }\n      phone.routerInteraction.go(-2);\n    },\n    onAdd() {\n      // to track use click add button\n      callMonitor.callsOnHoldClickAddTrack();\n      routerInteraction.push(\n        `/conferenceCall/dialer/${params.fromNumber}/${params.fromSessionId}`,\n      );\n    },\n    getAvatarUrl,\n    isConferenceSession: (...args) =>\n      conferenceCall.isConferenceSession(...args),\n    async webphoneHangup(...args) {\n      // track user click hangup on calls onhold page\n      callMonitor.callsOnHoldClickHangupTrack();\n      return webphone && webphone.hangup(...args);\n    },\n  };\n}\n\nconst CallsOnholdPage = withPhone(\n  connect(\n    mapToProps,\n    mapToFunctions,\n  )(CallsOnholdContainer),\n);\n\nexport default CallsOnholdPage;\n"],"file":"index.js"}