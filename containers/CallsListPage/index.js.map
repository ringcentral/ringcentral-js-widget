{"version":3,"sources":["containers/CallsListPage/index.js"],"names":["mapToProps","_","phone","brand","callLogger","callMonitor","locale","regionSettings","rolesAndPermissions","callHistory","connectivityMonitor","rateLimiter","dateTimeFormat","call","composeText","showContactDisplayPlaceholder","enableContactFallback","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","fullName","autoLog","calls","latestCalls","disableLinks","connectivity","throttling","disableClickToDial","isIdle","loggingMap","showSpinner","ready","readTextPermission","readTextPermissions","mapToFunctions","contactMatcher","contactSearch","routerInteraction","webphone","dialerUI","composeTextRoute","callCtrlRoute","onCreateContact","onLogCall","isLoggedContact","onViewContact","dateTimeFormatter","utcTimestamp","formatDateTime","dialerRoute","formatPhone","phoneNumber","webphoneAnswer","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","currentPath","push","name","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","contact","redirect","logCall","type","id","onClickToDial","recipient","onClickToCall","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","onClickToSMS","CallsListPage","CallsListPanel"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport { withPhone } from '../../lib/phoneContext';\n\nimport CallsListPanel from '../../components/CallsListPanel';\n\nfunction mapToProps(\n  _,\n  {\n    phone: {\n      brand,\n      callLogger,\n      callMonitor,\n      locale,\n      regionSettings,\n      rolesAndPermissions,\n      callHistory,\n      connectivityMonitor,\n      rateLimiter,\n      dateTimeFormat,\n      call,\n      composeText,\n    },\n    showContactDisplayPlaceholder = false,\n    enableContactFallback = false,\n  },\n) {\n  return {\n    currentLocale: locale.currentLocale,\n    activeRingCalls: callMonitor.activeRingCalls,\n    activeOnHoldCalls: callMonitor.activeOnHoldCalls,\n    activeCurrentCalls: callMonitor.activeCurrentCalls,\n    otherDeviceCalls: callMonitor.otherDeviceCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    // showSpinner: false,\n    brand: brand.fullName,\n    showContactDisplayPlaceholder,\n    autoLog: !!(callLogger && callLogger.autoLog),\n    enableContactFallback,\n    calls: callHistory.latestCalls,\n    disableLinks: !connectivityMonitor.connectivity || rateLimiter.throttling,\n    disableClickToDial: !(call && call.isIdle),\n    loggingMap: callLogger && callLogger.loggingMap,\n    showSpinner: !(\n      callHistory.ready &&\n      locale.ready &&\n      regionSettings.ready &&\n      dateTimeFormat.ready &&\n      connectivityMonitor.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!call || call.ready) &&\n      (!composeText || composeText.ready) &&\n      (!callLogger || callLogger.ready)\n    ),\n    readTextPermission: rolesAndPermissions.readTextPermissions,\n  };\n}\n\nfunction mapToFunctions(\n  _,\n  {\n    phone: {\n      callLogger,\n      composeText,\n      contactMatcher,\n      contactSearch,\n      regionSettings,\n      routerInteraction,\n      webphone,\n      dateTimeFormat,\n      call,\n      dialerUI,\n      callHistory,\n    },\n    composeTextRoute = '/composeText',\n    callCtrlRoute = '/calls/active',\n    onCreateContact,\n    onLogCall,\n    isLoggedContact,\n    onViewContact,\n    dateTimeFormatter = ({ utcTimestamp }) =>\n      dateTimeFormat.formatDateTime({\n        utcTimestamp,\n      }),\n    dialerRoute = '/dialer',\n  },\n) {\n  return {\n    formatPhone: (phoneNumber) =>\n      formatNumber({\n        phoneNumber,\n        areaCode: regionSettings.areaCode,\n        countryCode: regionSettings.countryCode,\n      }),\n    webphoneAnswer: (...args) => webphone && webphone.answer(...args),\n    webphoneToVoicemail: (...args) => webphone && webphone.toVoiceMail(...args),\n    webphoneReject: (...args) => webphone && webphone.reject(...args),\n    webphoneHangup: (...args) => webphone && webphone.hangup(...args),\n    async webphoneResume(...args) {\n      if (!webphone) {\n        return;\n      }\n      await webphone.resume(...args);\n      if (routerInteraction.currentPath !== callCtrlRoute) {\n        routerInteraction.push(callCtrlRoute);\n      }\n    },\n    onCreateContact: onCreateContact\n      ? async ({ phoneNumber, name, entityType }) => {\n          const hasMatchNumber = await contactMatcher.hasMatchNumber({\n            phoneNumber,\n            ignoreCache: true,\n          });\n          if (!hasMatchNumber) {\n            await onCreateContact({ phoneNumber, name, entityType });\n            await contactMatcher.forceMatchNumber({ phoneNumber });\n          }\n        }\n      : undefined,\n    isLoggedContact,\n    onLogCall:\n      onLogCall ||\n      (callLogger &&\n        (async ({ call, contact, redirect = true }) => {\n          await callLogger.logCall({\n            call,\n            contact,\n            redirect,\n          });\n        })),\n\n    dateTimeFormatter,\n    onViewContact:\n      onViewContact ||\n      (({ contact: { type, id } }) => {\n        routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n      }),\n    onClickToDial: dialerUI\n      ? (recipient) => {\n          if (call.isIdle) {\n            routerInteraction.push(dialerRoute);\n            dialerUI.call({ recipient });\n            callHistory.onClickToCall();\n          }\n        }\n      : undefined,\n    onClickToSms: composeText\n      ? async (contact, isDummyContact = false) => {\n          if (routerInteraction) {\n            routerInteraction.push(composeTextRoute);\n          }\n          // if contact autocomplete, if no match fill the number only\n          if (contact.name && contact.phoneNumber && isDummyContact) {\n            composeText.updateTypingToNumber(contact.name);\n            contactSearch.search({ searchString: contact.name });\n          } else {\n            composeText.addToNumber(contact);\n            if (composeText.typingToNumber === contact.phoneNumber) {\n              composeText.cleanTypingToNumber();\n            }\n          }\n          callHistory.onClickToSMS();\n        }\n      : undefined,\n  };\n}\n\nconst CallsListPage = withPhone(\n  connect(\n    mapToProps,\n    mapToFunctions,\n  )(CallsListPanel),\n);\n\nexport default CallsListPage;\n"],"file":"index.js"}