{"version":3,"sources":["containers/CallsListPage/index.js"],"names":["mapToProps","_","phone","brand","callLogger","callMonitor","locale","regionSettings","rolesAndPermissions","callHistory","connectivityMonitor","rateLimiter","dateTimeFormat","call","composeText","extensionInfo","showContactDisplayPlaceholder","enableContactFallback","currentSiteCode","site","code","isMultipleSiteEnabled","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","fullName","autoLog","calls","latestCalls","disableLinks","connectivity","throttling","disableClickToDial","isIdle","loggingMap","showSpinner","ready","readTextPermission","readTextPermissions","mapToFunctions","contactMatcher","contactSearch","contactDetailsUI","routerInteraction","webphone","dialerUI","composeTextRoute","callCtrlRoute","onCreateContact","onLogCall","isLoggedContact","onViewContact","dateTimeFormatter","utcTimestamp","formatDateTime","dialerRoute","formatPhone","phoneNumber","webphoneAnswer","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","currentPath","push","name","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","contact","redirect","logCall","type","id","showContactDetails","direct","onClickToDial","recipient","onClickToCall","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","onClickToSMS","CallsListPage","CallsListPanel"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport { withPhone } from '../../lib/phoneContext';\n\nimport CallsListPanel from '../../components/CallsListPanel';\n\nfunction mapToProps(\n  _,\n  {\n    phone: {\n      brand,\n      callLogger,\n      callMonitor,\n      locale,\n      regionSettings,\n      rolesAndPermissions,\n      callHistory,\n      connectivityMonitor,\n      rateLimiter,\n      dateTimeFormat,\n      call,\n      composeText,\n      extensionInfo,\n    },\n    showContactDisplayPlaceholder = false,\n    enableContactFallback = false,\n  },\n) {\n  return {\n    currentSiteCode: extensionInfo?.site?.code ?? '',\n    isMultipleSiteEnabled: extensionInfo?.isMultipleSiteEnabled ?? false,\n    currentLocale: locale.currentLocale,\n    activeRingCalls: callMonitor.activeRingCalls,\n    activeOnHoldCalls: callMonitor.activeOnHoldCalls,\n    activeCurrentCalls: callMonitor.activeCurrentCalls,\n    otherDeviceCalls: callMonitor.otherDeviceCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    // showSpinner: false,\n    brand: brand.fullName,\n    showContactDisplayPlaceholder,\n    autoLog: !!(callLogger && callLogger.autoLog),\n    enableContactFallback,\n    calls: callHistory.latestCalls,\n    disableLinks: !connectivityMonitor.connectivity || rateLimiter.throttling,\n    disableClickToDial: !(call && call.isIdle),\n    loggingMap: callLogger && callLogger.loggingMap,\n    showSpinner: !(\n      callHistory.ready &&\n      locale.ready &&\n      regionSettings.ready &&\n      dateTimeFormat.ready &&\n      connectivityMonitor.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!call || call.ready) &&\n      (!composeText || composeText.ready) &&\n      (!callLogger || callLogger.ready)\n    ),\n    readTextPermission: rolesAndPermissions.readTextPermissions,\n  };\n}\n\nfunction mapToFunctions(\n  _,\n  {\n    phone: {\n      callLogger,\n      composeText,\n      contactMatcher,\n      contactSearch,\n      regionSettings,\n      contactDetailsUI,\n      routerInteraction,\n      webphone,\n      dateTimeFormat,\n      call,\n      dialerUI,\n      callHistory,\n    },\n    composeTextRoute = '/composeText',\n    callCtrlRoute = '/calls/active',\n    onCreateContact,\n    onLogCall,\n    isLoggedContact,\n    onViewContact,\n    dateTimeFormatter = ({ utcTimestamp }) =>\n      dateTimeFormat.formatDateTime({\n        utcTimestamp,\n      }),\n    dialerRoute = '/dialer',\n  },\n) {\n  return {\n    formatPhone: (phoneNumber) =>\n      formatNumber({\n        phoneNumber,\n        areaCode: regionSettings.areaCode,\n        countryCode: regionSettings.countryCode,\n      }),\n    webphoneAnswer: (...args) => webphone && webphone.answer(...args),\n    webphoneToVoicemail: (...args) => webphone && webphone.toVoiceMail(...args),\n    webphoneReject: (...args) => webphone && webphone.reject(...args),\n    webphoneHangup: (...args) => webphone && webphone.hangup(...args),\n    async webphoneResume(...args) {\n      if (!webphone) {\n        return;\n      }\n      await webphone.resume(...args);\n      if (routerInteraction.currentPath !== callCtrlRoute) {\n        routerInteraction.push(callCtrlRoute);\n      }\n    },\n    onCreateContact: onCreateContact\n      ? async ({ phoneNumber, name, entityType }) => {\n          const hasMatchNumber = await contactMatcher.hasMatchNumber({\n            phoneNumber,\n            ignoreCache: true,\n          });\n          if (!hasMatchNumber) {\n            await onCreateContact({ phoneNumber, name, entityType });\n            await contactMatcher.forceMatchNumber({ phoneNumber });\n          }\n        }\n      : undefined,\n    isLoggedContact,\n    onLogCall:\n      onLogCall ||\n      (callLogger &&\n        (async ({ call, contact, redirect = true }) => {\n          await callLogger.logCall({\n            call,\n            contact,\n            redirect,\n          });\n        })),\n\n    dateTimeFormatter,\n    onViewContact:\n      onViewContact ||\n      (({ contact: { type, id } }) => {\n        if (contactDetailsUI) {\n          contactDetailsUI.showContactDetails({ type, id, direct: true });\n        }\n      }),\n    onClickToDial: dialerUI\n      ? (recipient) => {\n          if (call.isIdle) {\n            routerInteraction.push(dialerRoute);\n            dialerUI.call({ recipient });\n            callHistory.onClickToCall();\n          }\n        }\n      : undefined,\n    onClickToSms: composeText\n      ? async (contact, isDummyContact = false) => {\n          if (routerInteraction) {\n            routerInteraction.push(composeTextRoute);\n          }\n          // if contact autocomplete, if no match fill the number only\n          if (contact.name && contact.phoneNumber && isDummyContact) {\n            composeText.updateTypingToNumber(contact.name);\n            contactSearch.search({ searchString: contact.name });\n          } else {\n            composeText.addToNumber(contact);\n            if (composeText.typingToNumber === contact.phoneNumber) {\n              composeText.cleanTypingToNumber();\n            }\n          }\n          callHistory.onClickToSMS();\n        }\n      : undefined,\n  };\n}\n\nconst CallsListPage = withPhone(\n  connect(mapToProps, mapToFunctions)(CallsListPanel),\n);\n\nexport default CallsListPage;\n"],"file":"index.js"}