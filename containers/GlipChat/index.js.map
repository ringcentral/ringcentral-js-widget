{"version":3,"sources":["containers/GlipChat/index.js"],"names":["getAtRender","glipGroups","glipPersons","onViewPersonProfile","onViewGroup","AtRender","id","type","name","group","allGroups","find","g","person","personsMap","firstName","lastName","onClickAtLink","e","preventDefault","propTypes","PropTypes","string","isRequired","mapToProps","_","params","phone","glipPosts","groupId","currentGroup","posts","currentGroupPosts","textValue","postInputs","text","mapToFunctions","dateTimeFormat","dateTimeFormatter","time","formatDateTime","utcTimestamp","mobile","loadGroup","updateCurrentGroupId","loadNextPage","currentGroupId","createPost","create","updateText","mentions","updatePostInput","uploadFile","fileName","rawFile","sendFile","atRender","viewProfile","personId","GlipChatPage","GlipChatPanel"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport withPhone from '@ringcentral-integration/widgets/lib/withPhone';\n\nimport GlipChatPanel from '../../components/GlipChatPanel';\n\nfunction getAtRender({\n  glipGroups,\n  glipPersons,\n  onViewPersonProfile,\n  onViewGroup,\n}) {\n  const AtRender = ({ id, type }) => {\n    let name = id;\n    if (type === 'Team') {\n      const group = glipGroups.allGroups.find((g) => g.id === id);\n      name = group && group.name;\n    } else {\n      const person = glipPersons.personsMap[id];\n      name =\n        (person &&\n          `${person.firstName}${\n            person.lastName ? ` ${person.lastName}` : ''\n          }`) ||\n        id;\n    }\n    const onClickAtLink = (e) => {\n      e.preventDefault();\n      if (type === 'Person') {\n        onViewPersonProfile(id);\n      } else if (type === 'Team') {\n        onViewGroup(id);\n      }\n    };\n    return (\n      <a href={`#${id}`} onClick={onClickAtLink}>\n        @{name}\n      </a>\n    );\n  };\n  AtRender.propTypes = {\n    id: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n  };\n  return AtRender;\n}\n\nfunction mapToProps(_, { params, phone: { glipGroups, glipPosts } }) {\n  return {\n    groupId: params.groupId,\n    group: glipGroups.currentGroup,\n    posts: glipGroups.currentGroupPosts,\n    textValue:\n      glipPosts.postInputs[params.groupId] &&\n      glipPosts.postInputs[params.groupId].text,\n  };\n}\n\nfunction mapToFunctions(\n  _,\n  {\n    phone: { glipGroups, glipPosts, glipPersons, dateTimeFormat },\n    dateTimeFormatter = (time) =>\n      dateTimeFormat.formatDateTime({ utcTimestamp: time }),\n    onViewPersonProfile,\n    onViewGroup,\n    mobile = true,\n  },\n) {\n  return {\n    mobile,\n    loadGroup(groupId) {\n      glipGroups.updateCurrentGroupId(groupId);\n    },\n    async loadNextPage() {\n      await glipPosts.loadNextPage(glipGroups.currentGroupId);\n    },\n    async createPost() {\n      await glipPosts.create({\n        groupId: glipGroups.currentGroupId,\n      });\n    },\n    updateText(text, mentions) {\n      glipPosts.updatePostInput({\n        text,\n        groupId: glipGroups.currentGroupId,\n        mentions,\n      });\n    },\n    uploadFile: (fileName, rawFile) =>\n      glipPosts.sendFile({\n        fileName,\n        rawFile,\n        groupId: glipGroups.currentGroupId,\n      }),\n    atRender: getAtRender({\n      glipGroups,\n      glipPersons,\n      onViewPersonProfile,\n      onViewGroup,\n    }),\n    viewProfile(personId) {\n      if (personId) {\n        onViewPersonProfile(personId);\n      }\n    },\n    dateTimeFormatter,\n  };\n}\n\nconst GlipChatPage = withPhone(\n  connect(\n    mapToProps,\n    mapToFunctions,\n  )(GlipChatPanel),\n);\n\nexport default GlipChatPage;\n"],"file":"index.js"}