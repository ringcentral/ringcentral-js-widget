{"version":3,"sources":["containers/CallLogPage/CallLogPage.tsx"],"names":["mapToProps","_","phone","callLogger","locale","regionSettings","rolesAndPermissions","dateTimeFormat","callLogSection","routerInteraction","activeCallControl","connectivityMonitor","rateLimiter","environmentOptions","currentNotificationIdentify","currentIdentify","isInTransferPage","currentPath","match","currentLocale","header","showSpinner","ready","disableLinks","connectivity","throttling","isWide","app","isLightning","currentSession","getActiveSession","sessionIdToTelephonySessionIdMapping","mapToFunctions","formatPhone","phoneNumber","areaCode","countryCode","goBack","closeLogSection","renderCallLogCallControl","status","currentTelephonySessionId","onSaveNotification","saveAndHandleNotification","onDiscardNotification","discardAndHandleNotification","onCloseNotification","closeLogNotification","onExpandNotification","expandLogNotification","onReject","sessionId","telephonySessionId","reject","onHangup","hangUp","CallLogPage","CallLogPanel"],"mappings":"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","sourcesContent":["/**\n * Call log enhancement\n */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport CallLogPanel, { CallLogPanelProps } from '../../components/CallLogPanel';\nimport withPhone from '../../lib/withPhone';\nimport { CallLogCallCtrl } from '../CallLogCallCtrl';\n\nfunction mapToProps(\n  _,\n  {\n    phone: {\n      callLogger,\n      locale,\n      regionSettings,\n      rolesAndPermissions,\n      dateTimeFormat,\n      callLogSection,\n      routerInteraction,\n      activeCallControl,\n      connectivityMonitor,\n      rateLimiter,\n      environmentOptions,\n    },\n  },\n): Partial<CallLogPanelProps> {\n  const { currentNotificationIdentify, currentIdentify } = callLogSection;\n  const isInTransferPage =\n    routerInteraction.currentPath.match('^/transfer/') !== null;\n\n  return {\n    currentLocale: locale.currentLocale,\n    header: true,\n    showSpinner: !(\n      locale.ready &&\n      regionSettings.ready &&\n      dateTimeFormat.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!callLogger || callLogger.ready)\n    ),\n    isInTransferPage,\n    disableLinks: !connectivityMonitor.connectivity || rateLimiter.throttling,\n    isWide:\n      environmentOptions &&\n      environmentOptions.app &&\n      environmentOptions.app.isLightning,\n    currentIdentify,\n    // notification props\n    currentNotificationIdentify,\n    currentSession: activeCallControl.getActiveSession(\n      activeCallControl.sessionIdToTelephonySessionIdMapping[\n        currentNotificationIdentify\n      ],\n    ),\n  };\n}\nfunction mapToFunctions(_, { phone }) {\n  const { regionSettings, callLogSection, locale, activeCallControl } = phone;\n  return {\n    formatPhone: (phoneNumber: string) =>\n      formatNumber({\n        phoneNumber,\n        areaCode: regionSettings.areaCode,\n        countryCode: regionSettings.countryCode,\n      }) || 'Unknown',\n    goBack: () => callLogSection.closeLogSection(),\n    renderCallLogCallControl: (status, currentTelephonySessionId, isWide) => (\n      <CallLogCallCtrl\n        currentLocale={locale.currentLocale}\n        status={status}\n        telephonySessionId={currentTelephonySessionId}\n        isWide={isWide}\n      />\n    ),\n    // notification props\n    onSaveNotification: () => callLogSection.saveAndHandleNotification(),\n    onDiscardNotification: () => callLogSection.discardAndHandleNotification(),\n    onCloseNotification: () => callLogSection.closeLogNotification(),\n    onExpandNotification: () => callLogSection.expandLogNotification(),\n    onReject(sessionId) {\n      const telephonySessionId =\n        activeCallControl.sessionIdToTelephonySessionIdMapping[sessionId];\n      return activeCallControl.reject(telephonySessionId);\n    },\n    onHangup(sessionId) {\n      const telephonySessionId =\n        activeCallControl.sessionIdToTelephonySessionIdMapping[sessionId];\n      return activeCallControl.hangUp(telephonySessionId);\n    },\n  };\n}\nconst CallLogPage = withPhone(\n  connect(\n    mapToProps,\n    mapToFunctions,\n  )(CallLogPanel),\n);\nexport { mapToProps, mapToFunctions, CallLogPanel, CallLogPage as default };\n"],"file":"CallLogPage.js"}