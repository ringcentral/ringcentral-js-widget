{"version":3,"sources":["integration-test/mock/pubnub.js"],"names":["RealPubnub","jest","requireActual","subscriptionBody","require","pubnubCache","MockedPubNub","subscribeKey","_subscribeKey","_realPubnub","encrypt","decrypt","_channels","_listeners","push","channels","listener","setTimeout","mockedConnected","listen","status","category","operation","activeCallsBody","encrypted","JSON","stringify","uuid","event","timestamp","Date","toISOString","subscriptionId","body","allowSeeMyPresence","dndStatus","extensionId","meetingsStatus","pickUpCallsOnHold","presenceStatus","ringOnMonitoredCall","sequence","telephonyStatus","userStatus","activeCalls","totalActiveCalls","length","deliveryMode","encryptionKey","encryptKey","keyEncoding","keyLength","mode","mockMessage","msg","pubnubMsg","channel","subscription","undefined","actualChannel","subscribedChannel","timetoken","publisher","message","forEach","l","OPERATIONS","CATEGORIES","getLastPubnub","module","exports"],"mappings":"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","sourcesContent":["const RealPubnub = jest.requireActual('pubnub');\nconst subscriptionBody = require('./data/subscription.json');\n\nconst pubnubCache = [];\n\nclass MockedPubNub {\n  constructor({ subscribeKey }) {\n    this._subscribeKey = subscribeKey;\n    this._realPubnub = new RealPubnub({ subscribeKey });\n    this.encrypt = this._realPubnub.encrypt;\n    this.decrypt = this._realPubnub.decrypt;\n    this._channels = [];\n    this._listeners = [];\n    pubnubCache.push(this);\n  }\n\n  subscribe({ channels }) {\n    this._channels = channels;\n  }\n\n  addListener(listener) {\n    this._listeners.push(listener);\n    setTimeout(() => this.mockedConnected(), 0);\n  }\n\n  removeAllListeners() {\n    this._listeners = [];\n  }\n\n  unsubscribeAll() {}\n\n  destroy() {\n    this._realPubnub = null;\n  }\n\n  // Methods to do mocking operations\n  mockedConnected() {\n    for (const listen of this._listeners) {\n      listen.status({\n        category: 'PNConnectedCategory',\n        operation: 'PNSubscribeOperation',\n      });\n    }\n  }\n\n  mockCallMessage(activeCallsBody) {\n    const encrypted = this._realPubnub.encrypt(\n      JSON.stringify({\n        uuid: '1088719898803550582-8036702296129764',\n        event:\n          '/restapi/v1.0/account/160746006/extension/160751006/presence?detailedTelephonyState=true&sipData=true',\n        timestamp: new Date().toISOString(),\n        subscriptionId: '24dcfdcf-e7d0-4930-9edb-555ec11843b9',\n        body: {\n          allowSeeMyPresence: true,\n          dndStatus: 'TakeAllCalls',\n          extensionId: 160751006,\n          meetingsStatus: 'Disconnected',\n          pickUpCallsOnHold: false,\n          presenceStatus: 'Busy',\n          ringOnMonitoredCall: false,\n          sequence: 368997,\n          telephonyStatus: 'OnHold',\n          userStatus: 'Available',\n          activeCalls: activeCallsBody,\n          totalActiveCalls: activeCallsBody.length,\n        },\n      }),\n      subscriptionBody.deliveryMode.encryptionKey,\n      {\n        encryptKey: false,\n        keyEncoding: 'base64',\n        keyLength: 128,\n        mode: 'ecb',\n      },\n    );\n    this.mockMessage(encrypted);\n  }\n\n  mockMessage(msg) {\n    const pubnubMsg = {\n      channel: this._channels[0],\n      subscription: undefined,\n      actualChannel: null,\n      subscribedChannel: this._channels[0],\n      timetoken: '14933652238078468',\n      publisher: undefined,\n      message: msg,\n    };\n    this._listeners.forEach((l) => l.message(pubnubMsg));\n  }\n\n  mockPresence(msg) {\n    const pubnubMsg = {\n      channel: this._channels[0],\n      subscription: undefined,\n      actualChannel: null,\n      subscribedChannel: this._channels[0],\n      timetoken: '14933652238078468',\n      publisher: undefined,\n      message: msg,\n    };\n    this._listeners.forEach((l) => l.message(pubnubMsg));\n  }\n}\n\nMockedPubNub.OPERATIONS = RealPubnub.OPERATIONS;\nMockedPubNub.CATEGORIES = RealPubnub.CATEGORIES;\nMockedPubNub.getLastPubnub = function getLastPubnub() {\n  return pubnubCache[pubnubCache.length - 1];\n};\n\nmodule.exports = MockedPubNub;\n"],"file":"pubnub.js"}