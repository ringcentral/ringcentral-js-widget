{"version":3,"sources":["integration-test/mock/pubnub.js"],"names":["pubnubs","MockedPubNub","subscribeKey","_subscribeKey","_realPubnub","RealPubnub","encrypt","decrypt","_channels","_listeners","push","channels","listener","setTimeout","mockedConnected","listen","status","category","operation","msg","pubnubMsg","channel","subscription","undefined","actualChannel","subscribedChannel","timetoken","publisher","message","forEach","l","OPERATIONS","CATEGORIES","getLastPubnub","length","mockPubnub","id","require","resolve","cache","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAG,EAAhB;;IAEaC,Y;AACX,8BAA8B;AAAA,QAAhBC,YAAgB,QAAhBA,YAAgB;;AAAA;;AAC5B,SAAKC,aAAL,GAAqBD,YAArB;AACA,SAAKE,WAAL,GAAmB,IAAIC,kBAAJ,CAAe;AAAEH,MAAAA,YAAY,EAAZA;AAAF,KAAf,CAAnB;AACA,SAAKI,OAAL,GAAe,KAAKF,WAAL,CAAiBE,OAAhC;AACA,SAAKC,OAAL,GAAe,KAAKH,WAAL,CAAiBG,OAAhC;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACAT,IAAAA,OAAO,CAACU,IAAR,CAAa,IAAb;AACD;;;;qCAEuB;AAAA,UAAZC,QAAY,SAAZA,QAAY;AACtB,WAAKH,SAAL,GAAiBG,QAAjB;AACD;;;gCAEWC,Q,EAAU;AAAA;;AACpB,WAAKH,UAAL,CAAgBC,IAAhB,CAAqBE,QAArB;;AACAC,MAAAA,UAAU,CAAC;AAAA,eAAM,KAAI,CAACC,eAAL,EAAN;AAAA,OAAD,EAA+B,CAA/B,CAAV;AACD;;;yCAEoB;AACnB,WAAKL,UAAL,GAAkB,EAAlB;AACD;;;8BAES;AACR,WAAKL,WAAL,GAAmB,IAAnB;AACD,K,CAED;;;;sCACkB;AAAA,iDACK,KAAKK,UADV;AAAA;;AAAA;AAChB,4DAAsC;AAAA,cAA3BM,MAA2B;AACpCA,UAAAA,MAAM,CAACC,MAAP,CAAc;AACZC,YAAAA,QAAQ,EAAE,qBADE;AAEZC,YAAAA,SAAS,EAAE;AAFC,WAAd;AAID;AANe;AAAA;AAAA;AAAA;AAAA;AAOjB;;;gCAEWC,G,EAAK;AACf,UAAMC,SAAS,GAAG;AAChBC,QAAAA,OAAO,EAAE,KAAKb,SAAL,CAAe,CAAf,CADO;AAEhBc,QAAAA,YAAY,EAAEC,SAFE;AAGhBC,QAAAA,aAAa,EAAE,IAHC;AAIhBC,QAAAA,iBAAiB,EAAE,KAAKjB,SAAL,CAAe,CAAf,CAJH;AAKhBkB,QAAAA,SAAS,EAAE,mBALK;AAMhBC,QAAAA,SAAS,EAAEJ,SANK;AAOhBK,QAAAA,OAAO,EAAET;AAPO,OAAlB;;AASA,WAAKV,UAAL,CAAgBoB,OAAhB,CAAwB,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACF,OAAF,CAAUR,SAAV,CAAP;AAAA,OAAxB;AACD;;;;;;;AAGHnB,YAAY,CAAC8B,UAAb,GAA0B1B,mBAAW0B,UAArC;AACA9B,YAAY,CAAC+B,UAAb,GAA0B3B,mBAAW2B,UAArC;;AAEO,SAASC,aAAT,GAAyB;AAC9B,SAAOjC,OAAO,CAACA,OAAO,CAACkC,MAAR,GAAiB,CAAlB,CAAd;AACD;;AAED,SAASC,UAAT,GAAsB;AACpB,MAAMC,EAAE,GAAGC,OAAO,CAACC,OAAR,CAAgB,QAAhB,CAAX;;AACA,MAAID,OAAO,CAACE,KAAR,CAAcH,EAAd,CAAJ,EAAuB;AACrBC,IAAAA,OAAO,CAACE,KAAR,CAAcH,EAAd,EAAkBI,OAAlB,GAA4BvC,YAA5B;AACD;AACF;;AAEDkC,UAAU","sourcesContent":["import RealPubnub from 'pubnub';\n\nconst pubnubs = [];\n\nexport class MockedPubNub {\n  constructor({ subscribeKey }) {\n    this._subscribeKey = subscribeKey;\n    this._realPubnub = new RealPubnub({ subscribeKey });\n    this.encrypt = this._realPubnub.encrypt;\n    this.decrypt = this._realPubnub.decrypt;\n    this._channels = [];\n    this._listeners = [];\n    pubnubs.push(this);\n  }\n\n  subscribe({ channels }) {\n    this._channels = channels;\n  }\n\n  addListener(listener) {\n    this._listeners.push(listener);\n    setTimeout(() => this.mockedConnected(), 0);\n  }\n\n  removeAllListeners() {\n    this._listeners = [];\n  }\n\n  destroy() {\n    this._realPubnub = null;\n  }\n\n  // Methods to do mocking operations\n  mockedConnected() {\n    for (const listen of this._listeners) {\n      listen.status({\n        category: 'PNConnectedCategory',\n        operation: 'PNSubscribeOperation',\n      });\n    }\n  }\n\n  mockMessage(msg) {\n    const pubnubMsg = {\n      channel: this._channels[0],\n      subscription: undefined,\n      actualChannel: null,\n      subscribedChannel: this._channels[0],\n      timetoken: '14933652238078468',\n      publisher: undefined,\n      message: msg,\n    };\n    this._listeners.forEach((l) => l.message(pubnubMsg));\n  }\n}\n\nMockedPubNub.OPERATIONS = RealPubnub.OPERATIONS;\nMockedPubNub.CATEGORIES = RealPubnub.CATEGORIES;\n\nexport function getLastPubnub() {\n  return pubnubs[pubnubs.length - 1];\n}\n\nfunction mockPubnub() {\n  const id = require.resolve('pubnub');\n  if (require.cache[id]) {\n    require.cache[id].exports = MockedPubNub;\n  }\n}\n\nmockPubnub();\n"],"file":"pubnub.js"}