{"version":3,"sources":["integration-test/spec-modules/rolesAndPermissions.js"],"names":["authzProfileBody","require","auth","client","rolesAndPermissions","account","alert","describe","timeout","mock","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","Map","afterEach","loggedIn","logout","it","restore","mockForLogin","console","error","skip","retries","expect","permissions","ReadUserInfo","equal","mockAuthzProfile","authzProfile","filter","p","permission","id","ReadExtensions","undefined","mockForbidden","path","login","state","messages","permissionsMessages","insufficientPrivilege","to","not"],"mappings":"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","sourcesContent":["import { ensureLogin, containsErrorMessage } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\n\nimport { permissionsMessages } from '../../enums/permissionsMessages';\n\nconst authzProfileBody = require('../mock/data/authzProfile');\n\nexport default (auth, client, rolesAndPermissions, account, alert) => {\n  describe('RolesAndPermissions:', () => {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    afterEach(async () => {\n      if (auth.loggedIn) {\n        await auth.logout();\n      }\n      await waitInSeconds(1);\n    });\n\n    it('Should load permissions successfully', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error(\n          'Skip test case as failed to login with credential ',\n          account,\n        );\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(rolesAndPermissions.permissions.ReadUserInfo).equal(true);\n    });\n\n    it('Should not include ReadExtensions permission', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(\n          (p) => p.permission.id !== 'ReadExtensions',\n        ),\n      });\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error(\n          'Skip test case as failed to login with credential ',\n          account,\n        );\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(rolesAndPermissions.permissions.ReadExtensions).equal(undefined);\n    });\n\n    it('Should show insufficientPrivilege when get 403', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.mockForbidden({\n        path: '/restapi/v1.0/account/~/extension/~/authz-profile',\n      });\n      await auth.login({\n        ...account,\n      });\n      await waitInSeconds(3);\n      expect(auth.loggedIn).equal(false);\n      expect(\n        containsErrorMessage(\n          alert.state.messages,\n          permissionsMessages.insufficientPrivilege,\n        ),\n      ).to.not.equal(undefined);\n    });\n  });\n};\n"],"file":"rolesAndPermissions.js"}