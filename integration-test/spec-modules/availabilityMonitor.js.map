{"version":3,"sources":["integration-test/spec-modules/availabilityMonitor.js"],"names":["auth","alert","client","presence","availabilityMonitor","messageStore","callLog","account","describe","timeout","mock","mockClient","isLoginSuccess","beforeEach","restore","mockForLogin","console","error","skip","afterEach","_switchToNormalMode","logout","localStorage","clear","it","mockLimited","method","path","setBusy","expect","isLimitedAvailabilityMode","equal","url","_sync","mockApi"],"mappings":"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","sourcesContent":["import { ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds, waitUntilEqual } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\n\n/** global describe */\n\nexport default ({\n  auth,\n  alert,\n  client,\n  presence,\n  availabilityMonitor,\n  messageStore,\n  callLog,\n  account,\n}) => {\n  describe('AvailabilityMonitor:', () => {\n    this.timeout(20000);\n    mock.mockClient(client);\n    let isLoginSuccess;\n\n    beforeEach(async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error(\n          'Skip test case as failed to login with credential ',\n          account,\n        );\n        this.skip();\n      }\n    });\n\n    afterEach(async () => {\n      availabilityMonitor._switchToNormalMode();\n      mock.logout();\n      await auth.logout();\n      localStorage.clear();\n      await waitInSeconds(1);\n    });\n\n    it('should switch to limited availability mode when user action occurs limited availability error', async () => {\n      mock.mockLimited({\n        method: 'PUT',\n        path: '/restapi/v1.0/account/~/extension/~/presence',\n      });\n      // expect(presence.setBusy).to.throw();\n      await presence.setBusy();\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(true);\n    });\n\n    it('should switch to limited availability mode when background long polling occurs limited availability error', async () => {\n      mock.restore();\n      mock.mockLimited({\n        method: 'GET',\n        url:\n          'begin:http://whatever/restapi/v1.0/account/~/extension/~/call-log-sync',\n      });\n      await callLog._sync('ISync');\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(true);\n    });\n\n    it('should stay in limited availability mode when health check returns 5xx', async () => {\n      mock.restore();\n      mock.mockLimited({\n        method: 'GET',\n        url:\n          'begin:http://whatever/restapi/v1.0/account/~/extension/~/call-log-sync',\n      });\n      mock.mockLimited({\n        method: 'GET',\n        path: '/restapi/v1.0/status',\n      });\n      await callLog._sync('ISync');\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(true);\n      await waitInSeconds(15);\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(true);\n    });\n\n    it('should switch to normal mode when health check returns 200', async () => {\n      // this.timeout(20000);\n      mock.restore();\n      mock.mockLimited({\n        method: 'GET',\n        url:\n          'begin:http://whatever/restapi/v1.0/account/~/extension/~/call-log-sync',\n      });\n      mock.mockApi({\n        method: 'GET',\n        path: '/restapi/v1.0/status',\n      });\n      await callLog._sync('ISync');\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(true);\n      await waitInSeconds(15);\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(false);\n    });\n  });\n};\n"],"file":"availabilityMonitor.js"}