{"version":3,"sources":["integration-test/commons/Phone/index.js"],"names":["BasePhone","providers","provide","useFactory","sdkConfig","RingCentralClient","SDK","deps","dep","useParam","useClass","Alert","Brand","Softphone","Locale","DateTimeFormat","TabManager","GlobalStorage","LocaleSettings","Environment","Auth","Ringout","ConnectivityMonitor","RateLimiter","Storage","AudioSettings","CompanyContacts","AccountInfo","ExtensionDevice","ExtensionInfo","RolesAndPermissions","DialingPlan","ExtensionPhoneNumber","ForwardingNumber","RegionSettings","NumberValidate","CallingSettings","Call","Subscription","Presence","MessageSender","ComposeText","MessageStore","Conversations","Conference","CallLog","CallHistory","AccountContacts","AddressBook","Contacts","QuickAccess","addressBook","accountContacts","ContactMatcher","RecentMessages","RecentCalls","Meeting","Webphone","ContactSearch","CallMonitor","UserGuide","ActiveCallControl","useValue","disableAllowInactiveTabsWrite","spread","daySpan","conversationsLoadLength","conversationLoadLength","enableLoadOldMessages","showMMSAttachment","ConferenceCall","AvailabilityMonitor","enabled","BlockedNumber","options","ringout","webphone","callingSettings","routerInteraction","callMonitor","contactSearch","contacts","contactMatcher","conferenceCall","phoneNumber","countryCode","regionSettings","areaCode","RcModule","createPhone","prefix","version","apiConfig","brandConfig","Phone","cachePrefix","clearCacheOnRefreshError","appKey","appName","appVersion","create"],"mappings":"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","sourcesContent":["import { SDK } from '@ringcentral/sdk';\nimport { RingCentralClient } from '../../../lib/RingCentralClient';\n\nimport { ModuleFactory } from '../../../lib/di';\nimport RcModule from '../../../lib/RcModule';\n\nimport AccountContacts from '../../../modules/AccountContacts';\nimport CompanyContacts from '../../../modules/CompanyContacts';\nimport AccountInfo from '../../../modules/AccountInfo';\nimport AddressBook from '../../../modules/AddressBook';\nimport Alert from '../../../modules/Alert';\nimport Auth from '../../../modules/Auth';\nimport Brand from '../../../modules/Brand';\nimport Call from '../../../modules/Call';\nimport CallingSettings from '../../../modules/CallingSettings';\nimport Contacts from '../../../modules/Contacts';\nimport ConnectivityMonitor from '../../../modules/ConnectivityMonitor';\nimport DialingPlan from '../../../modules/DialingPlan';\nimport ExtensionDevice from '../../../modules/ExtensionDevice';\nimport Environment from '../../../modules/Environment';\nimport ExtensionInfo from '../../../modules/ExtensionInfo';\nimport ExtensionPhoneNumber from '../../../modules/ExtensionPhoneNumber';\nimport ForwardingNumber from '../../../modules/ForwardingNumber';\nimport GlobalStorage from '../../../modules/GlobalStorage';\nimport Locale from '../../../modules/Locale';\nimport RateLimiter from '../../../modules/RateLimiter';\nimport RegionSettings from '../../../modules/RegionSettings';\nimport Ringout from '../../../modules/Ringout';\nimport Webphone from '../../../modules/Webphone';\nimport RolesAndPermissions from '../../../modules/RolesAndPermissions';\nimport Softphone from '../../../modules/Softphone';\nimport Storage from '../../../modules/Storage';\nimport Subscription from '../../../modules/Subscription';\nimport TabManager from '../../../modules/TabManager';\nimport NumberValidate from '../../../modules/NumberValidate';\nimport MessageSender from '../../../modules/MessageSender';\nimport ComposeText from '../../../modules/ComposeText';\nimport MessageStore from '../../../modules/MessageStore';\nimport Conversations from '../../../modules/Conversations';\nimport ContactSearch from '../../../modules/ContactSearch';\nimport DateTimeFormat from '../../../modules/DateTimeFormat';\nimport Conference from '../../../modules/Conference';\nimport ConferenceCall from '../../../modules/ConferenceCall';\nimport QuickAccess from '../../../modules/QuickAccess';\nimport ActiveCallControl from '../../../modules/ActiveCallControl';\n\nimport Presence from '../../../modules/Presence';\nimport CallLog from '../../../modules/CallLog';\nimport CallMonitor from '../../../modules/CallMonitor';\nimport CallHistory from '../../../modules/CallHistory';\nimport RecentMessages from '../../../modules/RecentMessages';\nimport RecentCalls from '../../../modules/RecentCalls';\nimport AudioSettings from '../../../modules/AudioSettings';\nimport Meeting from '../../../modules/Meeting';\nimport LocaleSettings from '../../../modules/LocaleSettings';\nimport ContactMatcher from '../../../modules/ContactMatcher';\nimport UserGuide from '../../../modules/UserGuide';\n\nimport normalizeNumber from '../../../lib/normalizeNumber';\nimport ringoutStatus from '../../../modules/Ringout/ringoutStatus';\nimport softphoneStatus from '../../../modules/Softphone/softphoneStatus';\nimport callingModes from '../../../modules/CallingSettings/callingModes';\nimport AvailabilityMonitor from '../../../modules/AvailabilityMonitor';\nimport BlockedNumber from '../../../modules/BlockedNumber';\n\n@ModuleFactory({\n  providers: [\n    {\n      provide: 'Client',\n      useFactory: ({ sdkConfig }) => new RingCentralClient(new SDK(sdkConfig)),\n      deps: [{ dep: 'SdkConfig', useParam: true }],\n    },\n    { provide: 'Alert', useClass: Alert },\n    { provide: 'Brand', useClass: Brand },\n    { provide: 'Softphone', useClass: Softphone },\n    { provide: 'Locale', useClass: Locale },\n    { provide: 'DateTimeFormat', useClass: DateTimeFormat },\n    { provide: 'TabManager', useClass: TabManager },\n    { provide: 'GlobalStorage', useClass: GlobalStorage },\n    { provide: 'LocaleSettings', useClass: LocaleSettings },\n    { provide: 'Environment', useClass: Environment },\n    { provide: 'Auth', useClass: Auth },\n    { provide: 'Ringout', useClass: Ringout },\n    { provide: 'ConnectivityMonitor', useClass: ConnectivityMonitor },\n    { provide: 'RateLimiter', useClass: RateLimiter },\n    { provide: 'Storage', useClass: Storage },\n    { provide: 'AudioSettings', useClass: AudioSettings },\n    { provide: 'CompanyContacts', useClass: CompanyContacts },\n    { provide: 'AccountInfo', useClass: AccountInfo },\n    { provide: 'ExtensionDevice', useClass: ExtensionDevice },\n    { provide: 'ExtensionInfo', useClass: ExtensionInfo },\n    { provide: 'RolesAndPermissions', useClass: RolesAndPermissions },\n    { provide: 'DialingPlan', useClass: DialingPlan },\n    { provide: 'ExtensionPhoneNumber', useClass: ExtensionPhoneNumber },\n    { provide: 'ForwardingNumber', useClass: ForwardingNumber },\n    { provide: 'RegionSettings', useClass: RegionSettings },\n    { provide: 'NumberValidate', useClass: NumberValidate },\n    { provide: 'CallingSettings', useClass: CallingSettings },\n    { provide: 'Call', useClass: Call },\n    { provide: 'Subscription', useClass: Subscription },\n    { provide: 'Presence', useClass: Presence },\n    { provide: 'MessageSender', useClass: MessageSender },\n    { provide: 'ComposeText', useClass: ComposeText },\n    { provide: 'MessageStore', useClass: MessageStore },\n    { provide: 'Conversations', useClass: Conversations },\n    { provide: 'Conference', useClass: Conference },\n    { provide: 'CallLog', useClass: CallLog },\n    { provide: 'CallHistory', useClass: CallHistory },\n    { provide: 'AccountContacts', useClass: AccountContacts },\n    { provide: 'AddressBook', useClass: AddressBook },\n    { provide: 'Contacts', useClass: Contacts },\n    { provide: 'QuickAccess', useClass: QuickAccess },\n    {\n      provide: 'ContactSources',\n      deps: ['AddressBook', 'AccountContacts'],\n      useFactory: ({ addressBook, accountContacts }) => [\n        addressBook,\n        accountContacts,\n      ],\n    },\n    { provide: 'ContactMatcher', useClass: ContactMatcher },\n    { provide: 'RecentMessages', useClass: RecentMessages },\n    { provide: 'RecentCalls', useClass: RecentCalls },\n    { provide: 'Meeting', useClass: Meeting },\n    { provide: 'Webphone', useClass: Webphone },\n    { provide: 'ContactSearch', useClass: ContactSearch },\n    { provide: 'CallMonitor', useClass: CallMonitor },\n    { provide: 'UserGuide', useClass: UserGuide },\n    { provide: 'ActiveCallControl', useClass: ActiveCallControl },\n    {\n      provide: 'StorageOptions',\n      useValue: {\n        // StorageProvider: LocalForageStorage, // IndexedDB\n        disableAllowInactiveTabsWrite: true,\n      },\n      spread: true,\n    },\n    {\n      provide: 'MessageStoreOptions',\n      useValue: {\n        daySpan: 90,\n        conversationsLoadLength: 10,\n        conversationLoadLength: 15,\n      },\n      spread: true,\n    },\n    {\n      provide: 'ConversationsOptions',\n      useValue: {\n        enableLoadOldMessages: true,\n        showMMSAttachment: true,\n      },\n      spread: true,\n    },\n    { provide: 'ConferenceCall', useClass: ConferenceCall },\n    // {\n    // provide: 'ConferenceCallOptions',\n    // useValue: {\n    // pulling: false,\n    // },\n    // spread: true,\n    // },\n    { provide: 'AvailabilityMonitor', useClass: AvailabilityMonitor },\n    {\n      provide: 'AvailabilityMonitorOptions',\n      useValue: {\n        enabled: true,\n      },\n      spread: true,\n    },\n    { provide: 'BlockedNumber', useClass: BlockedNumber },\n  ],\n})\nexport default class BasePhone extends RcModule {\n  constructor(options) {\n    super(options);\n    const {\n      ringout,\n      webphone,\n      callingSettings,\n      routerInteraction,\n      callMonitor,\n      contactSearch,\n      contacts,\n      contactMatcher,\n      conferenceCall,\n    } = options;\n\n    //     contactSearch.addSearchSource({\n    //       sourceName: 'contacts',\n    //       searchFn({ searchString }) {\n    //         const items = contacts.allContacts;\n    //         if (!searchString) {\n    //           return items;\n    //         }\n    //         const searchText = searchString.toLowerCase();\n    //         const result = [];\n    //         items.forEach((item) => {\n    //           const name = item.name || `${item.firstName} ${item.lastName}`;\n    //           item.phoneNumbers.forEach((p) => {\n    //             if (\n    //               name.toLowerCase().indexOf(searchText) >= 0 ||\n    // p.phoneNumber.indexOf(searchText) >= 0\n    //             ) {\n    //               result.push({\n    //                 id: `${item.id}${p.phoneNumber}`,\n    //                 name,\n    //                 type: item.type,\n    //                 phoneNumber: p.phoneNumber,\n    //                 phoneType: p.phoneType.replace('Phone', ''),\n    //                 entityType: 'contact',\n    //               });\n    //             }\n    //           });\n    //         });\n    //         return result;\n    //       },\n    //       formatFn: entities => entities,\n    //       readyCheckFn: () => contacts.ready,\n    //     });\n    //     contactMatcher.addSearchProvider({\n    //       name: 'contacts',\n    //       async searchFn({ queries }) {\n    //         const items = await contacts.matchContacts({ phoneNumbers: queries });\n    //         return items;\n    //       },\n    //       readyCheckFn() {\n    //         return contacts.ready;\n    //       },\n    //     });\n\n    //     // Webphone configuration\n    //     webphone.onCallEnd((session, currentSession, ringSession) => {\n    //       const callsOnholdReg = /^\\/conferenceCall\\/callsOnhold\\/(.+)\\/(.+)$/;\n    //       const execCallsOnhold = callsOnholdReg.exec(routerInteraction.currentPath);\n\n    //       if (execCallsOnhold) {\n    //         const fromSessionIdOfCallsOnhold = execCallsOnhold[2];\n    //         if (!currentSession || session.id === currentSession.id) {\n    //           routerInteraction.go(-2);\n    //           return;\n    //         }\n    //         if (session.id === fromSessionIdOfCallsOnhold) {\n    //           routerInteraction.replace('/calls/active');\n    //           return;\n    //         }\n    //       }\n\n    //       const withinCallCtrl = !![\n    //         '/calls/active',\n    //         '/conferenceCall/dialer/',\n    //         '/conferenceCall/callsOnhold',\n    //         '/conferenceCall/participants',\n    //       ].find(path => routerInteraction.currentPath.indexOf(path) === 0);\n\n    //       if (\n    //         withinCallCtrl\n    // && (!currentSession || session.id === currentSession.id)\n    // && !ringSession\n    //       ) {\n    //         if (!currentSession) {\n    //           routerInteraction.replace('/dialer');\n    //           return;\n    //         }\n    //         if (routerInteraction.currentPath.indexOf('/calls/active') === -1) {\n    //           routerInteraction.replace('/calls/active');\n    //           return;\n    //         }\n    //         if (conferenceCall.isMerging) {\n    //           // Do nothing, let the merge() to do the jump\n    //           return;\n    //         }\n    //         routerInteraction.goBack();\n    //         return;\n    //       }\n\n    //       if (\n    //         currentSession\n    // && currentSession.id !== session.id\n    // && routerInteraction.currentPath === `/calls/active/${session.id}`\n    //       ) {\n    //         routerInteraction.replace(`/calls/active/${currentSession.id}`);\n    //         return;\n    //       }\n\n    //       if (!currentSession && ringSession) {\n    //         routerInteraction.push('/calls');\n    //       }\n    //     });\n\n    //     webphone.onCallStart((session) => {\n    //       const path = `/calls/active/${session.id}`;\n    //       if (routerInteraction.currentPath !== path) {\n    //         if (routerInteraction.currentPath.indexOf('/calls/active') === 0) {\n    //           routerInteraction.replace(path);\n    //         } else {\n    //           routerInteraction.push(path);\n    //         }\n    //       }\n    //     });\n\n    //     webphone.onCallRing(() => {\n    //       if (webphone.ringSessions.length > 1) {\n    //         if (routerInteraction.currentPath !== '/calls') {\n    //           routerInteraction.push('/calls');\n    //         }\n    //         webphone.ringSessions.forEach((session) => {\n    //           if (!session.minimized) {\n    //             webphone.toggleMinimized(session.id);\n    //           }\n    //         });\n    //       }\n    //     });\n\n    //     webphone.onBeforeCallResume((session) => {\n    //       const sessionId = session && session.id;\n    //       const mergingPair = conferenceCall && conferenceCall.mergingPair;\n    //       if (mergingPair && sessionId !== mergingPair.toSessionId) {\n    //         // close merging pair to close the merge call.\n    //         conferenceCall.closeMergingPair();\n    //       }\n    //     });\n\n    //     webphone.onBeforeCallEnd((session) => {\n    //       const mergingPair = conferenceCall && conferenceCall.mergingPair;\n    //       if (\n    //         session\n    // && mergingPair\n    // && (Object.values(mergingPair).indexOf(session.id) !== -1)\n    //       ) {\n    //         // close merging pair to close the merge call.\n    //         conferenceCall.closeMergingPair();\n    //       }\n    //     });\n\n    //     conferenceCall.onMergeSuccess((conferenceData) => {\n    //       routerInteraction.push(`/calls/active/${conferenceData.sessionId}`);\n    //     });\n\n    //     // CallMonitor configuration\n    //     this._softphoneConnectTime = null;\n    //     this._softphoneConnectNumber = null;\n\n    //     callMonitor._onRinging = (call) => {\n    //       // auto nav rules\n    //       if (\n    //         callingSettings.callingMode !== callingModes.webphone // not webRTC mode\n    // && routerInteraction.currentPath === '/dialer'\n    // && (\n    // // for ringout\n    //   ringout.ringoutStatus === ringoutStatus.connecting\n    // // for softphone\n    // || (\n    //   this._softphoneConnectTime && call && call.to\n    // && (new Date() - this._softphoneConnectTime) < 1 * 60 * 1000 // in 1 minute\n    // && this._normalizeNumber(call.to.phoneNumber)\n    // === this._normalizeNumber(this._softphoneConnectNumber)\n    // )\n    // )\n    //       ) {\n    //         routerInteraction.push('/calls');\n    //         this._softphoneConnectTime = null;\n    //         this._softphoneConnectNumber = null;\n    //       }\n    //     };\n\n    //     const phone = this;\n    //     callMonitor._onCallEnded = () => {\n    //       if (\n    //         routerInteraction.currentPath === '/calls'\n    // && !hasActiveCalls(phone)\n    //       ) {\n    //         routerInteraction.replace('/dialer');\n    //       }\n    //     };\n  }\n\n  _normalizeNumber(phoneNumber) {\n    return normalizeNumber({\n      phoneNumber,\n      countryCode: this.regionSettings.countryCode,\n      areaCode: this.regionSettings.areaCode,\n    });\n  }\n\n  //   initialize() {\n  //     const { rolesAndPermissions } = this;\n  //     this.store.subscribe(() => {\n  //       if (this.auth.ready) {\n  //         if (\n  //           this.routerInteraction.currentPath !== '/'\n  // && !this.auth.loggedIn\n  //         ) {\n  //           this.routerInteraction.push('/');\n  //         } else if (\n  //           this.routerInteraction.currentPath === '/'\n  // && this.auth.loggedIn\n  // && rolesAndPermissions.ready\n  //         ) {\n  //           // Determine default tab\n  //           const showDialPad = rolesAndPermissions.callingEnabled;\n  //           const showCalls = (\n  //             rolesAndPermissions.callingEnabled\n  // && this.callingSettings.ready\n  // && this.callingSettings.callWith !== callingOptions.browser\n  //           );\n  //           const showHistory = rolesAndPermissions.permissions.ReadCallLog;\n  //           const showContact = rolesAndPermissions.callingEnabled;\n  //           const showComposeText = rolesAndPermissions.hasComposeTextPermission;\n  //           const showMessages = rolesAndPermissions.hasReadMessagesPermission;\n  //           const showConference = rolesAndPermissions.permissions.OrganizeConference;\n  //           const showMeeting = rolesAndPermissions.hasMeetingsPermission;\n  //           if (showDialPad) {\n  //             this.routerInteraction.push('/dialer');\n  //           } else if (showCalls) {\n  //             this.routerInteraction.push('/calls');\n  //           } else if (showHistory) {\n  //             this.routerInteraction.push('/history');\n  //           } else if (showMessages) {\n  //             this.routerInteraction.push('/messages');\n  //           } else if (showComposeText) {\n  //             this.routerInteraction.push('/composeText');\n  //           } else if (showContact) {\n  //             this.routerInteraction.push('/contacts');\n  //           } else if (showMeeting) {\n  //             this.routerInteraction.push('/meeting');\n  //           } else if (showConference) {\n  //             this.routerInteraction.push('/conference');\n  //           } else {\n  //             this.routerInteraction.push('/settings');\n  //           }\n  //         } else if (\n  //           this.routerInteraction.currentPath === '/dialer'\n  // && this.softphone.softphoneStatus === softphoneStatus.connecting\n  //         ) {\n  //           this._softphoneConnectTime = new Date();\n  //           this._softphoneConnectNumber = this.softphone.connectingPhoneNumber;\n  //         }\n  //       }\n  //     });\n  //   }\n\n  get _actionTypes() {\n    /* no action types */\n    return null;\n  }\n}\n\nexport function createPhone({\n  prefix = 'rc',\n  version = '0.1.0',\n  apiConfig,\n  brandConfig,\n}) {\n  @ModuleFactory({\n    providers: [\n      {\n        provide: 'ModuleOptions',\n        useValue: {\n          prefix,\n        },\n        spread: true,\n      },\n      {\n        provide: 'SdkConfig',\n        useValue: {\n          ...apiConfig,\n          cachePrefix: 'sdk-rc',\n          clearCacheOnRefreshError: false,\n        },\n      },\n      {\n        provide: 'EnvironmentOptions',\n        useValue: {\n          sdkConfig: {\n            ...apiConfig,\n            cachePrefix: 'sdk-rc',\n            clearCacheOnRefreshError: false,\n          },\n        },\n        spread: true,\n      },\n      {\n        provide: 'BrandOptions',\n        spread: true,\n        useValue: brandConfig,\n      },\n      {\n        provide: 'WebphoneOptions',\n        spread: true,\n        useValue: {\n          // appKey: apiConfig.appKey,\n          appKey:\n            'eac8797af1b3502F2CEAAEECAC3Ed378AA7858A386656f28A008b0c638A754B1',\n          appName: brandConfig.appName,\n          appVersion: version,\n        },\n      },\n      {\n        provide: 'Version',\n        useFactory: () => version,\n      },\n    ],\n  })\n  class Phone extends BasePhone {}\n  return Phone.create();\n}\n"],"file":"index.js"}