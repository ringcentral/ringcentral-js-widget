{"version":3,"sources":["lib/SingleTabBroadcastChannel/SingleTabBroadcastChannel.ts"],"names":["SingleTabBroadcastChannel","sessionStorage","getItem","key","option","checkTime","_req","_res","Promise","resolve","intervalId","setInterval","tabId","clearInterval","init","BroadcastChannel","_createKey","from","to","message","listener","data","value","_resolve","addEventListener","_makeRequest","timeout","onTimeout","finalize","removeEventListener","result","cb","onmessage","postMessage"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;IAIaA,yB;;;wBAIC;AACV,aAAOC,cAAc,CAACC,OAAf,CAAuB,KAAKC,GAA5B,KAAoC,EAA3C;AACD;;;AAED,qCACUA,GADV,EAEUC,MAFV,EAIE;AAAA,QADQC,SACR,uEAD4B,IAC5B;;AAAA;;AAAA,SAHQF,GAGR,GAHQA,GAGR;AAAA,SAFQC,MAER,GAFQA,MAER;AAAA,SADQC,SACR,GADQA,SACR;AAAA,SAXMC,IAWN;AAAA,SAVMC,IAUN;AAAE;;;;mCAEW;AAAA;;AACb,aAAO,IAAIC,OAAJ,CAAuC,UAACC,OAAD,EAAa;AACzD,YAAMC,UAAU,GAAGC,WAAW,CAAC,YAAM;AACnC,cAAI,KAAI,CAACC,KAAT,EAAgB;AACdC,YAAAA,aAAa,CAACH,UAAD,CAAb;;AACA,YAAA,KAAI,CAACI,IAAL;;AACAL,YAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,SAN6B,EAM3B,GAN2B,CAA9B;AAOD,OARM,CAAP;AASD;;;2BAEM;AACL,WAAKH,IAAL,GAAY,IAAIS,gBAAJ,CAAqB,KAAKC,UAAL,CAAgB,KAAKZ,MAAL,CAAYa,IAA5B,CAArB,CAAZ;AACA,WAAKV,IAAL,GAAY,IAAIQ,gBAAJ,CAAqB,KAAKC,UAAL,CAAgB,KAAKZ,MAAL,CAAYc,EAA5B,CAArB,CAAZ;AAEA,aAAO,IAAP;AACD;;;;8FAEaC,O;;;;;;;;;AAGNC,gBAAAA,Q,GAAW,SAAXA,QAAW,OAA4B;AAAA,sBAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,sBACnClB,GADmC,GACpBkB,IADoB,CACnClB,GADmC;AAAA,sBAC9BmB,KAD8B,GACpBD,IADoB,CAC9BC,KAD8B;;AAE3C,0BAAQnB,GAAR;AACE,yBAAKgB,OAAO,CAAChB,GAAb;AACEoB,sBAAAA,QAAQ,CAACD,KAAD,CAAR;;AACA;;AACF;AACE;AALJ;AAOD,iB;;;uBAEoB,8BACnB,IAAId,OAAJ,CAAY,UAACC,OAAD,EAAa;AACvBc,kBAAAA,QAAQ,GAAGd,OAAX;;AAEA,kBAAA,MAAI,CAACF,IAAL,CAAUiB,gBAAV,CAA2B,SAA3B,EAAsCJ,QAAtC;;AACA,kBAAA,MAAI,CAACK,YAAL,CAAkBN,OAAlB;AACD,iBALD,CADmB,EAOnB;AACEO,kBAAAA,OAAO,EAAE,KAAKrB,SADhB;AAEEsB,kBAAAA,SAAS,EAAE,mBAAClB,OAAD;AAAA,2BAAaA,OAAO,CAAC,IAAD,CAApB;AAAA,mBAFb;AAGEmB,kBAAAA,QAAQ,EAAE,oBAAM;AACdL,oBAAAA,QAAQ;;AACR,oBAAA,MAAI,CAAChB,IAAL,CAAUsB,mBAAV,CAA8B,SAA9B,EAAyCT,QAAzC;AACD;AANH,iBAPmB,C;;;AAAfU,gBAAAA,M;iDAiBCA,M;;;;;;;;;;;;;;;;;;yBAGJX,O,EAAc;AACjB,WAAKM,YAAL,CAAkBN,OAAlB;AACD;;;qCAEgBY,E,EAA6B;AAC5C,WAAKxB,IAAL,CAAUyB,SAAV,GAAsBD,EAAtB;AACA,aAAO,IAAP;AACD;;;iCAEoBZ,O,EAAc;AACjC,WAAKb,IAAL,CAAU2B,WAAV,CAAsBd,OAAtB;AACD;;;+BAEkBhB,G,EAAa;AAC9B,uBAAU,KAAKA,GAAf,cAAsBA,GAAtB,wBAAuC,KAAKS,KAA5C;AACD","sourcesContent":["import { raceTimeout } from '../raceTimeout';\n\ntype BroadcastChannelMessage = (ev: MessageEvent) => any;\n\nexport class SingleTabBroadcastChannel {\n  private _req: BroadcastChannel;\n  private _res: BroadcastChannel;\n\n  get tabId() {\n    return sessionStorage.getItem(this.key) || '';\n  }\n\n  constructor(\n    private key: string,\n    private option: { from: string; to: string },\n    private checkTime: number = 3000,\n  ) {}\n\n  onTabIdExist() {\n    return new Promise<SingleTabBroadcastChannel>((resolve) => {\n      const intervalId = setInterval(() => {\n        if (this.tabId) {\n          clearInterval(intervalId);\n          this.init();\n          resolve(this);\n        }\n      }, 300);\n    });\n  }\n\n  init() {\n    this._req = new BroadcastChannel(this._createKey(this.option.from));\n    this._res = new BroadcastChannel(this._createKey(this.option.to));\n\n    return this;\n  }\n\n  async request(message: { key: string; [key: string]: any }) {\n    let _resolve: (value?: any) => void;\n\n    const listener = ({ data }: MessageEvent) => {\n      const { key, value } = data;\n      switch (key) {\n        case message.key:\n          _resolve(value);\n          break;\n        default:\n          break;\n      }\n    };\n\n    const result = await raceTimeout<any>(\n      new Promise((resolve) => {\n        _resolve = resolve;\n\n        this._res.addEventListener('message', listener);\n        this._makeRequest(message);\n      }),\n      {\n        timeout: this.checkTime,\n        onTimeout: (resolve) => resolve(null),\n        finalize: () => {\n          _resolve();\n          this._res.removeEventListener('message', listener);\n        },\n      },\n    );\n\n    return result;\n  }\n\n  send(message: any) {\n    this._makeRequest(message);\n  }\n\n  addEventListener(cb: BroadcastChannelMessage) {\n    this._res.onmessage = cb;\n    return this;\n  }\n\n  private _makeRequest(message: any) {\n    this._req.postMessage(message);\n  }\n\n  private _createKey(key: string) {\n    return `${this.key}_${key}_channel$$_${this.tabId}`;\n  }\n}\n"],"file":"SingleTabBroadcastChannel.js"}