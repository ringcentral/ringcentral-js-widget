{"version":3,"sources":["lib/usm/utils/event.ts"],"names":["Event","_events","eventType","callback","once","priority","listeners","isExist","filter","listener","length","Error","unshift","push","index","findIndex","splice","args","Array","isArray","forEach","apply","event"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaMA,K;AAGJ,mBAAc;AAAA;;AAAA,SAFPC,OAEO;AACZ,SAAKA,OAAL,GAAe,EAAf;AACD;;;;uBAGCC,S,EACAC,Q,EAEA;AAAA,qFADqC,EACrC;AAAA,2BADEC,IACF;AAAA,UADEA,IACF,0BADS,KACT;AAAA,+BADgBC,QAChB;AAAA,UADgBA,QAChB,8BAD2B,KAC3B;;AACA,UAAMC,SAAS,GAAG,KAAKL,OAAL,CAAaC,SAAb,KAA2B,EAA7C;AACA,UAAMK,OAAO,GACXD,SAAS,CAACE,MAAV,CAAiB,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACN,QAAT,KAAsBA,QAApC;AAAA,OAAjB,EAA+DO,MAA/D,GAAwE,CAD1E;AAEA,UAAMD,QAAQ,GAAG;AAAEN,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,IAAI,EAAJA;AAAZ,OAAjB;;AACA,UAAIG,OAAJ,EAAa;AACX,cAAM,IAAII,KAAJ,uBACWT,SADX,mDAAN;AAGD;;AACD,UAAIG,QAAJ,EAAc;AACZC,QAAAA,SAAS,CAACM,OAAV,CAAkBH,QAAlB;AACD,OAFD,MAEO;AACLH,QAAAA,SAAS,CAACO,IAAV,CAAeJ,QAAf;AACD;;AACD,WAAKR,OAAL,CAAaC,SAAb,IAA0BI,SAA1B;AACD;;;wBAEGJ,S,EAAsBC,Q,EAAoB;AAC5C,UAAMG,SAAS,GAAG,KAAKL,OAAL,CAAaC,SAAb,CAAlB;;AACA,UAAII,SAAJ,EAAe;AACb,YAAMQ,KAAK,GAAGR,SAAS,CAACS,SAAV,CACZ,UAACN,QAAD;AAAA,iBAAcA,QAAQ,CAACN,QAAT,KAAsBA,QAApC;AAAA,SADY,CAAd;AAGA,YAAMI,OAAO,GAAGO,KAAK,GAAG,CAAC,CAAzB;;AACA,YAAIP,OAAJ,EAAa;AACXD,UAAAA,SAAS,CAACU,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AACD;AACF;AACF;;;2BAEMZ,S,EAAsB;AAC3B,UAAI,KAAKD,OAAL,CAAaC,SAAb,CAAJ,EAA6B;AAC3B,eAAO,KAAKD,OAAL,CAAaC,SAAb,CAAP;AACD;AACF;;;yBAEIA,S,EAAsC;AAAA;;AAAA,wCAAbe,IAAa;AAAbA,QAAAA,IAAa;AAAA;;AACzC,UAAMX,SAAS,GAAG,KAAKL,OAAL,CAAaC,SAAb,CAAlB;;AACA,UAAI,CAACgB,KAAK,CAACC,OAAN,CAAcb,SAAd,CAAL,EAA+B;AAC7B,cAAM,IAAIK,KAAJ,uBACWT,SADX,4CAAN;AAGD,OAJD,MAIO,IAAII,SAAS,CAACI,MAAV,KAAqB,CAAzB,EAA4B;AACjC,cAAM,IAAIC,KAAJ,uBAAyBT,SAAzB,6BAAN;AACD;;AACD,yBAAII,SAAJ,EAAec,OAAf,CAAuB,iBAAqBN,KAArB,EAA+B;AAAA,YAA5BX,QAA4B,SAA5BA,QAA4B;AAAA,YAAlBC,IAAkB,SAAlBA,IAAkB;;AACpD,YAAIA,IAAJ,EAAU;AACRE,UAAAA,SAAS,CAACU,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AACD;;AACD,YAAII,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyBd,QAAQ,CAACkB,KAAT,CAAe,KAAf,EAAqBJ,IAArB;AAC1B,OALD;AAMD;;;;;;;AAGH,IAAMK,KAAK,GAAG,IAAItB,KAAJ,EAAd","sourcesContent":["type Callback = {\n  (...args: any[]): void;\n};\n\ntype Subscription = {\n  callback: Callback;\n  once: boolean;\n};\ntype EventType = string;\ntype EventMapping<T = Subscription> = {\n  [P in EventType]: T[];\n};\n\nclass Event {\n  public _events: EventMapping;\n\n  constructor() {\n    this._events = {};\n  }\n\n  on(\n    eventType: EventType,\n    callback: Callback,\n    { once = false, priority = false } = {},\n  ) {\n    const listeners = this._events[eventType] || [];\n    const isExist =\n      listeners.filter((listener) => listener.callback === callback).length > 0;\n    const listener = { callback, once };\n    if (isExist) {\n      throw new Error(\n        `Event type '${eventType}' has been registered, please re-register it.`,\n      );\n    }\n    if (priority) {\n      listeners.unshift(listener);\n    } else {\n      listeners.push(listener);\n    }\n    this._events[eventType] = listeners;\n  }\n\n  off(eventType: EventType, callback: Callback) {\n    const listeners = this._events[eventType];\n    if (listeners) {\n      const index = listeners.findIndex(\n        (listener) => listener.callback === callback,\n      );\n      const isExist = index > -1;\n      if (isExist) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  remove(eventType: EventType) {\n    if (this._events[eventType]) {\n      delete this._events[eventType];\n    }\n  }\n\n  emit(eventType: EventType, ...args: any[]) {\n    const listeners = this._events[eventType];\n    if (!Array.isArray(listeners)) {\n      throw new Error(\n        `Event type '${eventType}' should be registered before emit it.`,\n      );\n    } else if (listeners.length === 0) {\n      throw new Error(`Event type '${eventType}' has not any listener.`);\n    }\n    [...listeners].forEach(({ callback, once }, index) => {\n      if (once) {\n        listeners.splice(index, 1);\n      }\n      if (Array.isArray(args)) callback.apply(this, args);\n    });\n  }\n}\n\nconst event = new Event();\n\nexport { event as default, Event };\n"],"file":"event.js"}