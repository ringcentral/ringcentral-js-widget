{"version":3,"sources":["lib/MeetingCalendarHelper/index.ts"],"names":["f1","str","length","slice","formatMeetingId","delimeter","current","nextSlices","getPasswordTpl","meetingPassword","currentLocale","passwordLiteral","i18n","getString","replaceTextLinksToAnchors","input","pattern","replace","$0","htmlNewLine","htmlIndentation","htmlTabIndentation","repeat","formatTextToHtml","plantText","options","links","searchLinks","newLine","indentation","tabIndentation","htmlContent","split","map","line","join","forEach","uri","getRcvPstnPasswordTpl","meetingPasswordPSTN","passwordPstnLiteral","getBaseRcmTpl","brand","meeting","serviceInfo","extensionInfo","invitationInfo","accountName","name","meetingId","id","joinUri","password","mobileDialingNumberTpl","phoneDialingNumberTpl","passwordTpl","teleconference","brandConfig","formattedMsg","invitation","brandName","getRcmEventTpl","mainInfo","tplResult","getRcmHtmlEventTpl","getBaseRcvTpl","dialInNumber","isMeetingSecret","pinNumber","shortId","productName","meetingContent","push","isATT","code","rcvAttTeleconference","rcvTeleconference","smartphones","dialNumber","getRcvEventTpl","getRcvHtmlEventTpl","getMeetingId","meetingUri","regs","MEETING_URI_REGEXP","RCM","RCV","i","matches","exec","match0","link","indexOf","substring"],"mappings":"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","sourcesContent":["import formatMessage from 'format-message';\nimport i18n from './i18n';\nimport {\n  RcmMainParams,\n  RcvMainParams,\n  CommonBrand,\n  TplResult,\n  FormatToHtmlOptions,\n} from './index.interface';\nimport {\n  MEETING_URI_REGEXP,\n  rcvAttTeleconference,\n  rcvTeleconference,\n} from './config';\n\nfunction f1(str: string): Array<string> {\n  if (str.length > 8 || str.length % 3 !== 2) {\n    return [str.slice(0, 3), str.slice(3)];\n  }\n  return [str.slice(0, 4), str.slice(4)];\n}\n\nexport function formatMeetingId(str: string, delimeter: string = ' '): string {\n  if (!str) {\n    return '';\n  }\n  const [current, nextSlices] = f1(str);\n  if (!nextSlices) {\n    return current;\n  }\n  if (nextSlices.length === 1) {\n    return `${current}${nextSlices}`;\n  }\n  return `${current}${delimeter}${formatMeetingId(nextSlices, delimeter)}`;\n}\n\nfunction getPasswordTpl(\n  meetingPassword: string,\n  currentLocale: string,\n): string {\n  const passwordLiteral = i18n.getString('password', currentLocale);\n  return meetingPassword ? `${passwordLiteral}: ${meetingPassword}` : '';\n}\n\n/**\n * replace all text link into anchor link\n * Should match: http://www.example.com\n * Should not match: <a href=\"http://www.example.com\">http://www.example.com </a>\n * Then replace it into <a href=\"http://www.example.com\">http://www.example.com </a>\n * @param input\n */\nexport function replaceTextLinksToAnchors(input: string): string {\n  /**\n   * [^<>\\]]+ means should match any characters except < or > or ]\n   * (?!\\s*<\\/a>) means url should not be followed by either \"</a>\" or \"     </a>\"\n   * (?!\"[^>]*>) means url should not followed by \">\n   * further explanation: origin string: <a href=\"http://www.example.com\">http://www.example.com </a> should not match\n   * (?=[\\s!,?\\]]|$) means url can be followed by punctuations or whitespace or nothing\n   */\n  // https://stackoverflow.com/questions/19060460/url-replace-with-anchor-not-replacing-existing-anchors\n\n  const pattern: RegExp = /(?:(?:ht|f)tps?:\\/\\/|www)[^<>\\]]+(?!\\s*<\\/a>)(?!\"[^>]*>)(?=[\\s!,?\\]<]|$)/gim;\n\n  return input.replace(pattern, ($0: string): string => {\n    return `<a target=\"_blank\" href=\"${$0}\">${$0}</a>`;\n  });\n}\n\nexport const htmlNewLine: string = '<br>';\nexport const htmlIndentation: string = '&nbsp;';\nexport const htmlTabIndentation: string = htmlIndentation.repeat(4);\n\nexport function formatTextToHtml(\n  plantText: string,\n  options: FormatToHtmlOptions = {},\n): string {\n  const {\n    links = [],\n    searchLinks = false,\n    newLine = htmlNewLine,\n    indentation = htmlIndentation,\n    tabIndentation = htmlTabIndentation,\n  } = options;\n\n  let htmlContent = plantText\n    .replace(/\\r\\n|\\n|\\r/g, '\\n') // formalize newline\n    .split('\\n') // split with formalized newline\n    .map((line) => {\n      return line\n        .replace(/\\t/g, tabIndentation) // replace all Tab with 4 indentations\n        .replace(/^\\s*/, ($0) => indentation.repeat($0.length)); // replace leading whtespaces with indentations\n    })\n    .join(newLine);\n\n  links.forEach((uri) => {\n    if (uri) {\n      htmlContent = htmlContent.replace(\n        uri,\n        `<a target=\"_blank\" href=\"${uri}\">${uri}</a>`,\n      );\n    }\n  });\n\n  if (searchLinks) {\n    htmlContent = replaceTextLinksToAnchors(htmlContent);\n  }\n\n  return htmlContent;\n}\n\n/**\n * Dial-in password: ${passwordPstn}\n */\nfunction getRcvPstnPasswordTpl(\n  meetingPasswordPSTN: string,\n  currentLocale: string,\n): string {\n  const passwordPstnLiteral = i18n.getString('passwordPstn', currentLocale);\n  return `${passwordPstnLiteral} ${meetingPasswordPSTN}`;\n}\n\nfunction getBaseRcmTpl(\n  { meeting, serviceInfo, extensionInfo, invitationInfo }: RcmMainParams,\n  brand: CommonBrand,\n  currentLocale: string,\n): TplResult {\n  const accountName = extensionInfo.name;\n  const meetingId = meeting.id;\n  const joinUri = meeting.links.joinUri;\n  const password = meeting.password;\n\n  const mobileDialingNumberTpl = serviceInfo.mobileDialingNumberTpl;\n  const phoneDialingNumberTpl = serviceInfo.phoneDialingNumberTpl;\n  const passwordTpl = getPasswordTpl(password, currentLocale);\n  const teleconference = brand.brandConfig.teleconference;\n\n  let formattedMsg = invitationInfo?.invitation;\n  if (!formattedMsg) {\n    formattedMsg = formatMessage(\n      i18n.getString('inviteMeetingContent', currentLocale),\n      {\n        accountName,\n        brandName: brand.name,\n        joinUri,\n        passwordTpl,\n        mobileDialingNumberTpl,\n        phoneDialingNumberTpl,\n        meetingId: formatMeetingId(meetingId),\n        teleconference,\n      },\n    );\n  }\n\n  return {\n    formattedMsg,\n    links: {\n      joinUri,\n      teleconference,\n    },\n  };\n}\n\nexport function getRcmEventTpl(\n  mainInfo: RcmMainParams,\n  brand: CommonBrand,\n  currentLocale: string,\n): string {\n  const tplResult = getBaseRcmTpl(mainInfo, brand, currentLocale);\n  return tplResult.formattedMsg;\n}\n\nexport function getRcmHtmlEventTpl(\n  mainInfo: RcmMainParams,\n  brand: CommonBrand,\n  currentLocale: string,\n): string {\n  const tplResult = getBaseRcmTpl(mainInfo, brand, currentLocale);\n  return formatTextToHtml(tplResult.formattedMsg, {\n    links: [tplResult.links.joinUri, tplResult.links.teleconference],\n  });\n}\n\nfunction getBaseRcvTpl(\n  { meeting, extensionInfo, dialInNumber }: RcvMainParams,\n  brand: CommonBrand,\n  currentLocale: string,\n): TplResult {\n  const accountName = extensionInfo.name;\n  const { meetingPassword, meetingPasswordPSTN, isMeetingSecret } = meeting;\n  const joinUri = meeting.joinUri;\n  const pinNumber = meeting.shortId;\n  let productName;\n  const meetingContent: Array<string> = [];\n  if (brand.name === 'RingCentral') {\n    productName = 'RingCentral Video';\n    meetingContent.push(\n      i18n.getString('rcvRCBrandInviteMeetingContent', currentLocale),\n    );\n  } else {\n    productName = brand.name;\n    meetingContent.push(\n      i18n.getString('rcvInviteMeetingContent', currentLocale),\n    );\n  }\n  if (dialInNumber) {\n    meetingContent.push(\n      i18n.getString('rcvInviteMeetingContentDial', currentLocale),\n    );\n    if (isMeetingSecret && meetingPasswordPSTN) {\n      meetingContent.push(\n        getRcvPstnPasswordTpl(meetingPasswordPSTN, currentLocale),\n      );\n    }\n  }\n  meetingContent.push(`${i18n.getString('rcvTeleconference', currentLocale)}`);\n  const passwordTpl = isMeetingSecret\n    ? getPasswordTpl(meetingPassword, currentLocale)\n    : '';\n\n  const isATT = brand.code === 'att';\n  const teleconference = isATT ? rcvAttTeleconference : rcvTeleconference;\n  const brandName = isATT ? `AT&T ${brand.name}` : brand.name;\n\n  const formattedMsg = formatMessage(meetingContent.join(''), {\n    accountName,\n    brandName,\n    joinUri,\n    passwordTpl,\n    smartphones: `${dialInNumber},,${pinNumber}#`,\n    dialNumber: dialInNumber,\n    pinNumber: formatMeetingId(pinNumber),\n    teleconference,\n    productName,\n  });\n\n  return {\n    formattedMsg,\n    links: {\n      joinUri,\n      teleconference,\n    },\n  };\n}\n\nexport function getRcvEventTpl(\n  mainInfo: RcvMainParams,\n  brand: CommonBrand,\n  currentLocale: string,\n): string {\n  const tplResult = getBaseRcvTpl(mainInfo, brand, currentLocale);\n  return tplResult.formattedMsg;\n}\n\nexport function getRcvHtmlEventTpl(\n  mainInfo: RcvMainParams,\n  brand: CommonBrand,\n  currentLocale: string,\n): string {\n  const tplResult = getBaseRcvTpl(mainInfo, brand, currentLocale);\n  return formatTextToHtml(tplResult.formattedMsg, {\n    links: [tplResult.links.joinUri, tplResult.links.teleconference],\n  });\n}\n\nexport function getMeetingId(meetingUri: string): string {\n  if (meetingUri) {\n    const regs = [MEETING_URI_REGEXP.RCM, MEETING_URI_REGEXP.RCV];\n    for (let i = 0; i < regs.length; i += 1) {\n      const matches = regs[i].exec(meetingUri);\n      if (matches && matches.length > 0) {\n        const match0 = matches[0];\n        const link = (match0.indexOf('?') > -1\n          ? matches[0].substring(0, matches[0].indexOf('?'))\n          : match0\n        ).split('/');\n\n        const id = link[link.length - 1];\n        return id;\n      }\n    }\n  }\n\n  return null;\n}\n"],"file":"index.js"}