{"version":3,"sources":["lib/usm-redux/createStore.ts"],"names":["enablePatches","getPatchesToggle","setPatchesToggle","toggle","createStore","options","preloadedState","config","reduxEnhancer","handleReducers","reducers","Array","isArray","modules","Error","enableAutoFreeze","strict","process","env","NODE_ENV","identifiers","Set","subscriptions","store","forEach","module","index","service","className","Object","getPrototypeOf","constructor","name","stateKey","bootstrappedKey","console","warn","identifier","identifierKey","Math","random","toString","error","has","add","descriptors","enumerable","configurable","value","key","descriptor","getOwnPropertyDescriptor","assign","get","set","initState","serviceReducers","entries","reduce","serviceReducersMapObject","reducer","state","action","_usm","usm","_state","_reducers","stagedState","currentState","storeKey","getState","isFrozen","freeze","defineProperties","subscriptionsKey","prototype","push","apply","storeWithRedux","dispatch","subscribe"],"mappings":"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","sourcesContent":["import produce, {\n  setAutoFreeze,\n  enablePatches as enablePatchesWithImmer,\n} from 'immer';\nimport {\n  createStore as createStoreWithRedux,\n  combineReducers,\n  ReducersMapObject,\n  PreloadedState,\n  Store as ReduxStore,\n} from 'redux';\nimport {\n  stateKey,\n  storeKey,\n  bootstrappedKey,\n  identifierKey,\n  subscriptionsKey,\n  usm,\n} from './constant';\nimport { getStagedState } from './utils/index';\nimport {\n  Action,\n  StoreOptions,\n  Store,\n  Subscription,\n  Config,\n  Service,\n} from './interface';\n\nlet enablePatches: boolean;\n\nexport const getPatchesToggle = () => enablePatches;\n\nexport const setPatchesToggle = (toggle: boolean) => {\n  enablePatches = toggle;\n};\n\nexport const createStore = (\n  options: StoreOptions,\n  preloadedState?: PreloadedState<any>,\n  config: Config = {},\n) => {\n  const {\n    reduxEnhancer,\n    handleReducers = (reducers) => combineReducers(reducers),\n  } = config;\n  if (typeof options !== 'object' || !Array.isArray(options.modules)) {\n    throw new Error(\n      `'createStore' options should be a object with a property 'modules'`,\n    );\n  }\n  const enableAutoFreeze =\n    options.strict ?? process.env.NODE_ENV === 'development';\n  enablePatches = config.enablePatches ?? false;\n  if (enablePatches) enablePatchesWithImmer();\n  setAutoFreeze(enableAutoFreeze);\n  const identifiers = new Set<string>();\n  const reducers: ReducersMapObject = {};\n  const subscriptions: Subscription[] = [];\n  let store: Store;\n  options.modules.forEach((module, index) => {\n    if (typeof module !== 'object' || module === null) return;\n    const service: Service = module;\n    const className = Object.getPrototypeOf(service).constructor.name;\n    if (typeof service[stateKey] === 'undefined' || service[bootstrappedKey]) {\n      if (process.env.NODE_ENV === 'development') {\n        if (service[bootstrappedKey]) {\n          console.warn(\n            `The module with an index of ${index} and a name of ${className} in the module list is a duplicate module.`,\n          );\n        }\n      }\n    }\n    let identifier = service[identifierKey] ?? service.name;\n    if (identifier === null || typeof identifier === 'undefined') {\n      identifier = `@@usm-redux/${className}/${Math.random().toString(36)}`;\n    }\n    if (typeof identifier !== 'string') {\n      if (process.env.NODE_ENV === 'development') {\n        console.error(`\n          Since '${className}' module has set the module state, '${className}' module must set a unique and valid class property 'name' to be used as the module index.\n          Example:\n            class FooBar {\n              name = 'FooBar'; // <- add the 'name' property.\n            }\n        `);\n      } else {\n        throw new Error(\n          `'${className}' module 'name' property should be defined as a valid 'string'.`,\n        );\n      }\n    }\n    if (identifiers.has(identifier)) {\n      identifier += `${index}`;\n    }\n    identifiers.add(identifier);\n    const descriptors: Record<string, PropertyDescriptor> = {\n      [bootstrappedKey]: {\n        enumerable: false,\n        configurable: false,\n        value: true,\n      },\n    };\n    if (service[stateKey]) {\n      // eslint-disable-next-line guard-for-in\n      for (const key in service[stateKey]) {\n        const descriptor = Object.getOwnPropertyDescriptor(service, key);\n        // eslint-disable-next-line no-continue\n        if (typeof descriptor === 'undefined') continue;\n        Object.assign(service[stateKey], {\n          [key]: descriptor.value,\n        });\n        Object.assign(descriptors, {\n          [key]: {\n            enumerable: true,\n            configurable: false,\n            get(this: typeof service) {\n              return this[stateKey][key];\n            },\n            set(this: typeof service, value: unknown) {\n              this[stateKey][key] = value;\n            },\n          },\n        });\n      }\n      const initState = enableAutoFreeze\n        ? produce({ ...service[stateKey] }, () => {})\n        : service[stateKey];\n\n      const serviceReducers = Object.entries(initState).reduce(\n        (serviceReducersMapObject: ReducersMapObject, [key, value]) => {\n          // support pure reducer\n          if (typeof value === 'function') {\n            return Object.assign(serviceReducersMapObject, {\n              [key]: value,\n            });\n          }\n          const reducer = (state = value, action: Action) => {\n            return action._usm === usm ? action._state[identifier][key] : state;\n          };\n          return Object.assign(serviceReducersMapObject, {\n            [key]: reducer,\n          });\n        },\n        {},\n      );\n      // support custom reducers\n      service._reducers = serviceReducers;\n      const reducer = combineReducers(serviceReducers);\n      Object.assign(reducers, {\n        [identifier]: reducer,\n      });\n\n      Object.assign(descriptors, {\n        [stateKey]: {\n          enumerable: false,\n          configurable: false,\n          get(this: typeof service) {\n            const stagedState = getStagedState();\n            if (stagedState) return stagedState[identifier];\n            const currentState = this[storeKey]?.getState()[identifier];\n            if (enableAutoFreeze && !Object.isFrozen(currentState)) {\n              return Object.freeze(currentState);\n            }\n            return currentState;\n          },\n        },\n      });\n    }\n    Object.assign(descriptors, {\n      [identifierKey]: {\n        configurable: false,\n        enumerable: false,\n        value: identifier,\n      },\n      [storeKey]: {\n        configurable: false,\n        enumerable: false,\n        get() {\n          return store;\n        },\n      },\n    });\n    Object.defineProperties(service, descriptors);\n    if (Array.isArray(service[subscriptionsKey])) {\n      Array.prototype.push.apply(subscriptions, service[subscriptionsKey]);\n    }\n  });\n  const storeWithRedux = createStoreWithRedux(\n    handleReducers(reducers),\n    preloadedState,\n    reduxEnhancer,\n  );\n  store = {\n    dispatch: storeWithRedux.dispatch,\n    getState: storeWithRedux.getState,\n    subscribe: storeWithRedux.subscribe,\n  };\n  for (const subscribe of subscriptions) {\n    subscribe();\n  }\n  return store as ReduxStore;\n};\n"],"file":"createStore.js"}