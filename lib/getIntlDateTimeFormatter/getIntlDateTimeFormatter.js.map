{"version":3,"sources":["lib/getIntlDateTimeFormatter/getIntlDateTimeFormatter.ts"],"names":["formatterCache","getFormatter","locale","options","key","JSON","stringify","Intl","DateTimeFormat","DEFAULT_DATE_TIME_OPTIONS","year","month","day","hour","minute","hour12","DEFAULT_DATE_OPTIONS","DEFAULT_TIME_OPTIONS","getIntlDateTimeFormatter","dateTimeOptions","dateOptions","timeOptions","utcTimestamp","type","format","Date","replace","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AAEO,IAAMA,cAAc,GAAG,EAAvB;;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,OAA9B,EAAuC;AAC5C,MAAMC,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAe,CAACJ,MAAD,EAASC,OAAT,CAAf,CAAZ;;AACA,MAAI,CAACH,cAAc,CAACI,GAAD,CAAnB,EAA0B;AACxBJ,IAAAA,cAAc,CAACI,GAAD,CAAd,GAAsB,IAAIG,IAAI,CAACC,cAAT,CAAwBN,MAAxB,oBAAqCC,OAArC,EAAtB;AACD;;AACD,SAAOH,cAAc,CAACI,GAAD,CAArB;AACD;;AAEM,IAAMK,yBAAyB,GAAG;AACvCC,EAAAA,IAAI,EAAE,SADiC;AAEvCC,EAAAA,KAAK,EAAE,SAFgC;AAGvCC,EAAAA,GAAG,EAAE,SAHkC;AAIvCC,EAAAA,IAAI,EAAE,SAJiC;AAKvCC,EAAAA,MAAM,EAAE,SAL+B;AAMvCC,EAAAA,MAAM,EAAE;AAN+B,CAAlC;;AASA,IAAMC,oBAAoB,GAAG;AAClCN,EAAAA,IAAI,EAAE,SAD4B;AAElCC,EAAAA,KAAK,EAAE,SAF2B;AAGlCC,EAAAA,GAAG,EAAE;AAH6B,CAA7B;;AAMA,IAAMK,oBAAoB,GAAG;AAClCJ,EAAAA,IAAI,EAAE,SAD4B;AAElCC,EAAAA,MAAM,EAAE,SAF0B;AAGlCC,EAAAA,MAAM,EAAE;AAH0B,CAA7B;;;AAMQ,SAASG,wBAAT,GAIP;AAAA,iFAAJ,EAAI;AAAA,kCAHNC,eAGM;AAAA,MAHNA,eAGM,qCAHYV,yBAGZ;AAAA,8BAFNW,WAEM;AAAA,MAFNA,WAEM,iCAFQJ,oBAER;AAAA,8BADNK,WACM;AAAA,MADNA,WACM,iCADQJ,oBACR;;AACN,SAAO,iBAIwB;AAAA,QAH7BK,YAG6B,SAH7BA,YAG6B;AAAA,QAF7BpB,MAE6B,SAF7BA,MAE6B;AAAA,2BAD7BqB,IAC6B;AAAA,QAD7BA,IAC6B,2BADtB,yBAAQD,YAAR,IAAwB,MAAxB,GAAiC,MACX;;AAC7B,YAAQC,IAAR;AACE,WAAK,MAAL;AACE,eAAOtB,YAAY,CAACC,MAAD,EAASkB,WAAT,CAAZ,CACJI,MADI,CACG,IAAIC,IAAJ,CAASH,YAAT,CADH,EAEJI,OAFI,CAEI,gBAFJ,EAEsB,EAFtB,CAAP;AAEkC;;AACpC,WAAK,MAAL;AACE,eAAOzB,YAAY,CAACC,MAAD,EAASmB,WAAT,CAAZ,CAAkCG,MAAlC,CAAyC,IAAIC,IAAJ,CAASH,YAAT,CAAzC,CAAP;;AACF;AACEK,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,eAAO3B,YAAY,CAACC,MAAD,EAASiB,eAAT,CAAZ,CAAsCK,MAAtC,CACL,IAAIC,IAAJ,CAASH,YAAT,CADK,CAAP;AATJ;AAaD,GAlBD;AAmBD","sourcesContent":["import isToday from '../isToday';\n\nexport const formatterCache = {};\n\nexport function getFormatter(locale, options) {\n  const key = JSON.stringify([locale, options]);\n  if (!formatterCache[key]) {\n    formatterCache[key] = new Intl.DateTimeFormat(locale, { ...options });\n  }\n  return formatterCache[key];\n}\n\nexport const DEFAULT_DATE_TIME_OPTIONS = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  hour12: false,\n};\n\nexport const DEFAULT_DATE_OPTIONS = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n};\n\nexport const DEFAULT_TIME_OPTIONS = {\n  hour: 'numeric',\n  minute: 'numeric',\n  hour12: false,\n};\n\nexport default function getIntlDateTimeFormatter({\n  dateTimeOptions = DEFAULT_DATE_TIME_OPTIONS,\n  dateOptions = DEFAULT_DATE_OPTIONS,\n  timeOptions = DEFAULT_TIME_OPTIONS,\n} = {}) {\n  return ({\n    utcTimestamp,\n    locale,\n    type = isToday(utcTimestamp) ? 'time' : 'date',\n  }: DateTimeFormatterParams) => {\n    switch (type) {\n      case 'date':\n        return getFormatter(locale, dateOptions)\n          .format(new Date(utcTimestamp))\n          .replace(/\\u200E|\\u200F/g, ''); // FIX: https://github.com/tc39/ecma402/issues/28\n      case 'time':\n        return getFormatter(locale, timeOptions).format(new Date(utcTimestamp));\n      default:\n        console.log('data time');\n        return getFormatter(locale, dateTimeOptions).format(\n          new Date(utcTimestamp),\n        );\n    }\n  };\n}\n\nexport type DateTimeFormatter = ReturnType<typeof getIntlDateTimeFormatter>;\n\nexport type DateTimeFormatterParams = {\n  utcTimestamp: any;\n  locale: string;\n  type?: 'datetime' | 'time' | 'date';\n};\n"],"file":"getIntlDateTimeFormatter.js"}