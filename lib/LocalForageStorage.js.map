{"version":3,"sources":["lib/LocalForageStorage.js"],"names":["LocalforageStorage","storageKey","Error","_storageKey","_storageSyncKey","_ready","_id","uuid","v4","localStorage","window","localforage","config","name","_localforage","createInstance","_tabSyncHandler","event","key","substring","length","JSON","parse","newValue","setter","id","getItem","value","emit","addEventListener","MemoryStorage","syncKey","setItem","stringify","timestamp","Date","now","keys","ready","output","getLocalStorageKeys","promises","map","then","data","Promise","all","originalData","undefined","_updateStorageSyncData","error","console","removeItem","removeEventListener","EventEmitter"],"mappings":"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","sourcesContent":["import uuid from 'uuid';\nimport EventEmitter from 'events';\nimport localforage from 'localforage';\n\nimport MemoryStorage from './MemoryStorage';\n\nexport default class LocalforageStorage extends EventEmitter {\n  constructor({ storageKey }) {\n    super();\n    if (!storageKey) {\n      throw Error('SynchronizedStorage must be created with a storage key');\n    }\n    this._storageKey = storageKey;\n    this._storageSyncKey = `${storageKey}-sync`;\n    this._ready = false;\n    this._id = uuid.v4();\n    if (typeof localStorage !== 'undefined' && typeof window !== 'undefined') {\n      localforage.config({ name: this._storageKey });\n      this._localforage = localforage.createInstance({\n        name: this._storageKey,\n      });\n      this._tabSyncHandler = async (event) => {\n        if (\n          event.key !== null &&\n          typeof event.key !== 'undefined' &&\n          event.key.substring(0, this._storageSyncKey.length) ===\n            this._storageSyncKey\n        ) {\n          try {\n            const { setter } = JSON.parse(event.newValue);\n            if (!setter || setter === this.id) {\n              return;\n            }\n            const key = event.key.substring(this._storageSyncKey.length + 1);\n            const value = await this.getItem(key);\n            this.emit('storage', {\n              key,\n              value,\n            });\n          } catch (e) {\n            /* ignore error */\n          }\n        }\n      };\n      window.addEventListener('storage', this._tabSyncHandler);\n    } else {\n      this._localforage = new MemoryStorage();\n    }\n  }\n\n  _updateStorageSyncData(key) {\n    if (typeof localStorage !== 'undefined') {\n      const syncKey = `${this._storageSyncKey}-${key}`;\n      localStorage.setItem(\n        syncKey,\n        JSON.stringify({\n          timestamp: Date.now(),\n          setter: this.id,\n        }),\n      );\n    }\n  }\n\n  async getLocalStorageKeys() {\n    const keys = await this._localforage.keys();\n    return keys;\n  }\n\n  async getData() {\n    await this.ready();\n    const output = {};\n    const keys = await this.getLocalStorageKeys();\n    const promises = keys.map((key) =>\n      this.getItem(key).then((data) => {\n        output[key] = data;\n      }),\n    );\n    await Promise.all(promises);\n    return output;\n  }\n\n  async getItem(key) {\n    const originalData = await this._localforage.getItem(key);\n    try {\n      const { value } = originalData;\n      return value;\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  async setItem(key, value) {\n    await this._localforage.setItem(key, { value, setter: this.id });\n    try {\n      this._updateStorageSyncData(key);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async removeItem(key) {\n    await this._localforage.removeItem(key);\n  }\n\n  destroy() {\n    if (this._tabSyncHandler) {\n      window.removeEventListener('storage', this._tabSyncHandler);\n    }\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  async ready() {\n    if (this._ready) {\n      return;\n    }\n    if (typeof this._localforage.ready === 'function') {\n      await this._localforage.ready();\n    }\n    this._ready = true;\n  }\n}\n"],"file":"LocalForageStorage.js"}