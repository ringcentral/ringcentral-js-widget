{"version":3,"sources":["lib/time.ts"],"names":["handleToClockTime","time","rest","minute","parseInt","second","map","String","length","join","raceTimeout","fn","timeout","callback","timeoutId","timeoutResolve","Promise","race","resolve","reject","setTimeout","result","clearTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAkB;AACjD;AACA,MAAMC,IAAI,GAAID,IAAI,GAAG,IAAR,GAAgB,IAA7B;AACA,MAAME,MAAM,GAAGC,QAAQ,WAAIF,IAAI,GAAG,EAAX,GAAiB,EAAjB,CAAvB;AACA,MAAMG,MAAM,GAAGD,QAAQ,WAAIF,IAAI,GAAG,EAAX,GAAiB,EAAjB,CAAvB;AACA,SAAO,CAACC,MAAD,EAASE,MAAT,EACJC,GADI,CACA,UAACL,IAAD;AAAA,qBAAaM,MAAM,CAACN,IAAD,CAAN,CAAaO,MAAb,GAAsB,CAAtB,GAA0B,GAA1B,GAAgC,EAA7C,SAAkDP,IAAlD;AAAA,GADA,EAEJQ,IAFI,CAEC,GAFD,CAAP;AAGD,CARM;;;;AAUA,IAAMC,WAAW;AAAA,qEAAG,iBACzBC,EADyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4EAEsB,EAFtB,wBAEvBC,OAFuB,EAEvBA,OAFuB,8BAEb,KAAK,IAFQ,yCAEFC,QAFE,EAEFA,QAFE,+BAES,YAAM,CAAE,CAFjB;AAIrBC,YAAAA,SAJqB,GAIT,IAJS;AAKrBC,YAAAA,cALqB,GAKJ,IALI;AAAA;AAAA,mBAMJC,OAAO,CAACC,IAAR,CAAgB,CACnCN,EADmC,EAEnC,IAAIK,OAAJ,CAAiB,UAACE,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,cAAAA,cAAc,GAAGG,OAAjB;AACAJ,cAAAA,SAAS,GAAGM,UAAU,CAAC;AAAA,uBAAMD,MAAM,CAACN,QAAQ,EAAT,CAAZ;AAAA,eAAD,EAA2BD,OAA3B,CAAtB;AACD,aAHD,CAFmC,CAAhB,CANI;;AAAA;AAMnBS,YAAAA,MANmB;AAazBN,YAAAA,cAAc;AACdO,YAAAA,YAAY,CAACR,SAAD,CAAZ;AAdyB,6CAelBO,MAfkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXX,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["export const handleToClockTime = (time: number) => {\n  // const hour = Math.floor(time / 1000 / 3600);\n  const rest = (time / 1000) % 3600;\n  const minute = parseInt(`${rest / 60}`, 10);\n  const second = parseInt(`${rest % 60}`, 10);\n  return [minute, second]\n    .map((time) => `${String(time).length < 2 ? '0' : ''}${time}`)\n    .join(':');\n};\n\nexport const raceTimeout = async <T>(\n  fn: Promise<T>,\n  { timeout = 30 * 1000, callback = () => {} } = {},\n) => {\n  let timeoutId = null;\n  let timeoutResolve = null;\n  const result = await Promise.race<T>([\n    fn,\n    new Promise<any>((resolve, reject) => {\n      timeoutResolve = resolve;\n      timeoutId = setTimeout(() => reject(callback()), timeout);\n    }),\n  ]);\n  timeoutResolve();\n  clearTimeout(timeoutId);\n  return result;\n};\n"],"file":"time.js"}