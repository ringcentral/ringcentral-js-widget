{"version":3,"sources":["lib/ChromeTransport/ServerTransport.js"],"names":["ServerTransport","options","name","_ports","Set","_requests","Map","_activeTabs","_getActiveTabs","chrome","tabs","onActivated","addListener","runtime","onConnect","port","add","onMessage","type","requestId","payload","_events","request","set","emit","onDisconnect","result","error","get","Error","message","postMessage","response","push","isOnActiveTabs","sender","tab","find","id","Array","from","filter","forEach","query","active","console","log","TransportBase"],"mappings":"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","sourcesContent":["import TransportBase from '../TransportBase';\n\n/* global chrome */\n\nexport default class ServerTransport extends TransportBase {\n  constructor(options) {\n    super({\n      ...options,\n      name: 'ChromeTransport',\n    });\n    this._ports = new Set();\n    this._requests = new Map();\n\n    // Keep active tabs up to date\n    this._activeTabs = [];\n    this._getActiveTabs();\n    chrome.tabs.onActivated.addListener(() => {\n      this._getActiveTabs();\n    });\n    chrome.runtime.onConnect.addListener((port) => {\n      if (port.name === 'transport') {\n        this._ports.add(port);\n        port.onMessage.addListener(({ type, requestId, payload }) => {\n          if (type === this._events.request && requestId && payload) {\n            this._requests.set(requestId, port);\n            this.emit(this._events.request, {\n              requestId,\n              payload,\n            });\n          }\n        });\n        port.onDisconnect.addListener(() => {\n          this._ports.delete(port);\n        });\n      }\n    });\n  }\n\n  response({ requestId, result, error }) {\n    const port = this._requests.get(requestId);\n    if (port) {\n      this._requests.delete(requestId);\n      if (error instanceof Error) {\n        error = error.message;\n      }\n      port.postMessage({\n        type: this._events.response,\n        requestId,\n        result,\n        error,\n      });\n    }\n  }\n\n  push({ payload }) {\n    const message = { type: this._events.push, payload };\n    const isOnActiveTabs = (port) => {\n      // Ensure tabs are still accessible (may be closed)\n      // otherwise, give up pushing messages to that tab at this point\n      if (port.sender && port.sender.tab) {\n        return !!this._activeTabs.find(\n          (tab) => tab && tab.id === port.sender.tab.id,\n        );\n      }\n      return false;\n    };\n    // Since postMessage is really expensive,\n    // we only send messages to those ports on active tabs.\n    Array.from(this._ports)\n      .filter((port) => isOnActiveTabs(port))\n      .forEach((port) => port.postMessage(message));\n  }\n\n  _getActiveTabs() {\n    try {\n      chrome.tabs.query({ active: true }, (tabs) => {\n        this._activeTabs = tabs;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n"],"file":"ServerTransport.js"}