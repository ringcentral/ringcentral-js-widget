{"version":3,"sources":["lib/ChromeTransport/ServerTransport.js"],"names":["ServerTransport","options","name","_ports","Set","_requests","Map","_activeTabs","_getActiveTabs","chrome","tabs","onActivated","addListener","ensureActiveTabs","runtime","onConnect","port","add","onMessage","type","requestId","payload","_events","request","set","emit","onDisconnect","result","error","get","Error","message","postMessage","response","push","isOnActiveTabs","sender","tab","find","id","Array","from","filter","forEach","checkTime","isValid","Promise","resolve","query","active","isArray","console","log","TransportBase"],"mappings":"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","sourcesContent":["import TransportBase from '../TransportBase';\nimport sleep from '../sleep';\n\n/* global chrome */\n\nexport default class ServerTransport extends TransportBase {\n  constructor(options) {\n    super({\n      ...options,\n      name: 'ChromeTransport',\n    });\n    this._ports = new Set();\n    this._requests = new Map();\n\n    // Keep active tabs up to date\n    this._activeTabs = [];\n    this._getActiveTabs();\n    chrome.tabs.onActivated.addListener(async () => {\n      // execute `chrome.tabs.query` synchronously in callback of this event from Chrome v91,\n      // it will probably get unexpected tabs data.\n      await this.ensureActiveTabs(5);\n    });\n    chrome.runtime.onConnect.addListener((port) => {\n      if (port.name === 'transport') {\n        this._ports.add(port);\n        port.onMessage.addListener(({ type, requestId, payload }) => {\n          if (type === this._events.request && requestId && payload) {\n            this._requests.set(requestId, port);\n            this.emit(this._events.request, {\n              requestId,\n              payload,\n            });\n          }\n        });\n        port.onDisconnect.addListener(() => {\n          this._ports.delete(port);\n        });\n      }\n    });\n  }\n\n  response({ requestId, result, error }) {\n    const port = this._requests.get(requestId);\n    if (port) {\n      this._requests.delete(requestId);\n      if (error instanceof Error) {\n        error = error.message;\n      }\n      port.postMessage({\n        type: this._events.response,\n        requestId,\n        result,\n        error,\n      });\n    }\n  }\n\n  push({ payload }) {\n    const message = { type: this._events.push, payload };\n    const isOnActiveTabs = (port) => {\n      // Ensure tabs are still accessible (may be closed)\n      // otherwise, give up pushing messages to that tab at this point\n      if (port.sender && port.sender.tab) {\n        return !!this._activeTabs?.find(\n          (tab) => tab && tab.id === port.sender.tab.id,\n        );\n      }\n      return false;\n    };\n    // Since postMessage is really expensive,\n    // we only send messages to those ports on active tabs.\n    Array.from(this._ports)\n      .filter((port) => isOnActiveTabs(port))\n      .forEach((port) => port.postMessage(message));\n  }\n\n  async ensureActiveTabs(checkTime = 1) {\n    if (checkTime > 0) {\n      await sleep(100);\n      const isValid = await this._getActiveTabs();\n      if (!isValid) {\n        await this.ensureActiveTabs(checkTime - 1);\n      }\n    }\n  }\n\n  _getActiveTabs() {\n    return new Promise((resolve) => {\n      try {\n        chrome.tabs.query({ active: true }, (tabs) => {\n          this._activeTabs = tabs;\n          resolve(Array.isArray(tabs));\n        });\n      } catch (error) {\n        console.log(error);\n        resolve(false);\n      }\n    });\n  }\n}\n"],"file":"ServerTransport.js"}