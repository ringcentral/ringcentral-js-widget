{"version":3,"sources":["lib/subscribe/watch.ts"],"names":["watch","service","selector","watcher","Error","oldValue","newValue","lastOldValue"],"mappings":";;;;;;;;;AAAA;;AACA;;AAGA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CACZC,OADY,EAEZC,QAFY,EAGZC,OAHY,EAIT;AACH,MAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjC,UAAM,IAAIC,KAAJ,uCAAN;AACD;;AACD,MAAIC,QAAW,GAAGH,QAAQ,EAA1B;AACA,SAAO,0BAAUD,OAAV,EAAmB,YAAM;AAC9B,QAAMK,QAAQ,GAAGJ,QAAQ,EAAzB;;AACA,QAAI,CAAC,oBAAQI,QAAR,EAAkBD,QAAlB,CAAL,EAAkC;AAChC,UAAME,YAAY,GAAGF,QAArB;AACAA,MAAAA,QAAQ,GAAGC,QAAX;AACAH,MAAAA,OAAO,CAACG,QAAD,EAAWC,YAAX,CAAP;AACD;AACF,GAPM,CAAP;AAQD,CAjBD","sourcesContent":["import { subscribe } from './subscribe';\nimport { isEqual } from '../utils';\nimport { RcModuleV2 } from '../RcModule';\n\nconst watch = <T>(\n  service: RcModuleV2,\n  selector: () => T,\n  watcher: (newValue: T, oldValue: T) => void,\n) => {\n  if (typeof watcher !== 'function') {\n    throw new Error(`The 'watcher' should be a function.`);\n  }\n  let oldValue: T = selector();\n  return subscribe(service, () => {\n    const newValue = selector();\n    if (!isEqual(newValue, oldValue)) {\n      const lastOldValue = oldValue;\n      oldValue = newValue;\n      watcher(newValue, lastOldValue);\n    }\n  });\n};\n\nexport { watch };\n"],"file":"watch.js"}