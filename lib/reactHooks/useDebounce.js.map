{"version":3,"sources":["lib/reactHooks/useDebounce.ts"],"names":["useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AAEA;AAEe,SAASA,WAAT,CAAwBC,KAAxB,EAAkCC,KAAlC,EAAoD;AACjE;AADiE,kBAErB,qBAAYD,KAAZ,CAFqB;AAAA;AAAA,MAE1DE,cAF0D;AAAA,MAE1CC,iBAF0C;;AAIjE,wBACE,YAAM;AACJ;AACA,QAAMC,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD,KAFyB,EAEvBC,KAFuB,CAA1B,CAFI,CAMJ;AACA;AACA;;AACA,WAAO,YAAM;AACXK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAbH,EAcE,CAACJ,KAAD,EAAQC,KAAR,CAdF,CAckB;AAdlB;AAiBA,SAAOC,cAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\n// https://usehooks.com/useDebounce/\n\nexport default function useDebounce<T>(value: T, delay: number): T {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n"],"file":"useDebounce.js"}