{"version":3,"sources":["lib/callLogHelpers.js"],"names":["isInbound","call","direction","callDirections","inbound","isOutbound","outbound","isRinging","telephonyStatus","telephonyStatuses","ringing","isRingingInboundCall","callResultsToMissedMap","HashMap","fromSet","set","Object","keys","callResults","map","key","getValue","result","missed","hangUp","busy","voicemail","rejected","indexOf","isMissed","hasRingingCalls","calls","find","isEnded","noCall","terminationType","terminationTypes","hasEndedCalls","isOnHold","onHold","isIntermediateCall","intermediate","isSelfCall","to","from","phoneNumber","sortBySessionId","a","b","sessionId","sortByStartTime","startTime","normalizeStartTime","valueOf","normalizeFromTo","areTwoLegs","Math","abs","action","callActions","phoneCall","ringOutWeb","ringOutPC","ringOutMobile","extensionNumber","removeInboundRingOutLegs","output","outbounds","filter","forEach","outboundIndex","findIndex","splice","outboundLeg","inboundLeg","push","concat","removeDuplicateIntermediateCalls","resultCalls","indexMap","isIntermediate","sessionid","index","length","removeDuplicateSelfCalls","isSelf","getPhoneNumberMatches","toMatches","fromMatches","R","isEmpty","isOutboundCall","isInboundCall","matches"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AACA;;AAEA;AACO,SAASA,SAAT,GAA8B;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACnC,SAAOA,IAAI,CAACC,SAAL,KAAmBC,2BAAeC,OAAzC;AACD;;AAEM,SAASC,UAAT,GAA+B;AAAA,MAAXJ,IAAW,uEAAJ,EAAI;AACpC,SAAOA,IAAI,CAACC,SAAL,KAAmBC,2BAAeG,QAAzC;AACD;AAED;;;AACO,SAASC,SAAT,GAA8B;AAAA,MAAXN,IAAW,uEAAJ,EAAI;AACnC,SAAOA,IAAI,CAACO,eAAL,KAAyBC,4BAAkBC,OAAlD;AACD;;AACM,SAASC,oBAAT,CAA8BV,IAA9B,EAAoC;AACzC,SAAOM,SAAS,CAACN,IAAD,CAAT,IAAmBD,SAAS,CAACC,IAAD,CAAnC;AACD;;AAED,IAAMW,sBAAsB,GAAGC,oBAAQC,OAAR,CAAgB;AAC7CC,EAAAA,GAAG,EAAEC,MAAM,CAACC,IAAP,CAAYC,uBAAZ,EAAyBC,GAAzB,CAA6B,UAACC,GAAD;AAAA,WAASF,wBAAYE,GAAZ,CAAT;AAAA,GAA7B,CADwC;AAE7CC,EAAAA,QAAQ,EAAE,kBAACC,MAAD;AAAA,WACR,CACEJ,wBAAYK,MADd,EAEEL,wBAAYM,MAFd,EAGEN,wBAAYO,IAHd,EAIEP,wBAAYQ,SAJd,EAKER,wBAAYS,QALd,EAMEC,OANF,CAMUN,MANV,IAMoB,CAAC,CAPb;AAAA;AAFmC,CAAhB,CAA/B;;AAWO,SAASO,QAAT,GAA6B;AAAA,MAAX5B,IAAW,uEAAJ,EAAI;AAClC,SAAO,CAAC,CAACW,sBAAsB,CAACX,IAAI,CAACqB,MAAN,CAA/B;AACD;;AAEM,SAASQ,eAAT,GAAqC;AAAA,MAAZC,KAAY,uEAAJ,EAAI;AAC1C,SAAO,CAAC,CAACA,KAAK,CAACC,IAAN,CAAWzB,SAAX,CAAT;AACD;;AAEM,SAAS0B,OAAT,GAA4B;AAAA,MAAXhC,IAAW,uEAAJ,EAAI;AACjC,SACEA,IAAI,CAACO,eAAL,KAAyBC,4BAAkByB,MAA3C,IACAjC,IAAI,CAACkC,eAAL,KAAyBC,qCAF3B;AAID;;AAEM,SAASC,aAAT,CAAuBN,KAAvB,EAA8B;AACnC,SAAO,CAAC,CAACA,KAAK,CAACC,IAAN,CAAWC,OAAX,CAAT;AACD;;AAEM,SAASK,QAAT,GAA6B;AAAA,MAAXrC,IAAW,uEAAJ,EAAI;AAClC,SAAOA,IAAI,CAACO,eAAL,KAAyBC,4BAAkB8B,MAAlD;AACD;;AAEM,SAASC,kBAAT,GAAuC;AAAA,MAAXvC,IAAW,uEAAJ,EAAI;AAC5C,SAAOA,IAAI,CAACkC,eAAL,KAAyBC,6BAAiBK,YAAjD;AACD;;AAEM,SAASC,UAAT,GAA+B;AAAA,MAAXzC,IAAW,uEAAJ,EAAI;;AACpC,MAAIA,IAAI,CAAC0C,EAAL,IAAW1C,IAAI,CAAC2C,IAApB,EAA0B;AACxB,WAAO3C,IAAI,CAAC0C,EAAL,CAAQE,WAAR,KAAwB5C,IAAI,CAAC2C,IAAL,CAAUC,WAAzC;AACD;;AACD,SAAO,KAAP;AACD;AAED;;;AAEO,SAASC,eAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AACpC,MAAID,CAAC,CAACE,SAAF,KAAgBD,CAAC,CAACC,SAAtB,EAAiC,OAAO,CAAP;AACjC,SAAOF,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAAhB,GAA4B,CAA5B,GAAgC,CAAC,CAAxC;AACD;;AACM,SAASC,eAAT,CAAyBH,CAAzB,EAA4BC,CAA5B,EAA+B;AACpC,MAAID,CAAC,CAACI,SAAF,KAAgBH,CAAC,CAACG,SAAtB,EAAiC,OAAO,CAAP;AACjC,SAAOJ,CAAC,CAACI,SAAF,GAAcH,CAAC,CAACG,SAAhB,GAA4B,CAAC,CAA7B,GAAiC,CAAxC;AACD;;AAEM,SAASC,kBAAT,CAA4BnD,IAA5B,EAAkC;AACvC,MAAMqB,MAAM,qBACPrB,IADO,CAAZ;;AAGA,MAAIA,IAAI,CAACkD,SAAT,EAAoB;AAClB;AACA;AACA;AACA7B,IAAAA,MAAM,CAAC6B,SAAP,GAAmB,wBAAOlD,IAAI,CAACkD,SAAZ,EAAuBE,OAAvB,EAAnB;AACD;;AACD,SAAO/B,MAAP;AACD;;AAEM,SAASgC,eAAT,CAAyBrD,IAAzB,EAA+B;AACpC,2BACKA,IADL;AAEE2C,IAAAA,IAAI,EACF,QAAO3C,IAAI,CAAC2C,IAAZ,MAAqB,QAArB,GAAgC3C,IAAI,CAAC2C,IAArC,GAA4C;AAAEC,MAAAA,WAAW,EAAE5C,IAAI,CAAC2C;AAApB,KAHhD;AAIED,IAAAA,EAAE,EAAE,QAAO1C,IAAI,CAAC0C,EAAZ,MAAmB,QAAnB,GAA8B1C,IAAI,CAAC0C,EAAnC,GAAwC;AAAEE,MAAAA,WAAW,EAAE5C,IAAI,CAAC0C;AAApB;AAJ9C;AAMD;AAED;;;AACO,SAASY,UAAT,CAAoBnD,OAApB,EAA6BE,QAA7B,EAAuC;AAC5C,MAAIN,SAAS,CAACI,OAAD,CAAT,IAAsBC,UAAU,CAACC,QAAD,CAApC,EAAgD;AAC9C,YAAQkD,IAAI,CAACC,GAAL,CAASrD,OAAO,CAAC6C,SAAR,GAAoB3C,QAAQ,CAAC2C,SAAtC,CAAR;AACE,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AAAW;AACT;AACA,cACE7C,OAAO,CAACwC,IAAR,IACAxC,OAAO,CAACuC,EADR,IAEArC,QAAQ,CAACsC,IAFT,IAGAtC,QAAQ,CAACqC,EAHT,IAIA,oCACEvC,OAAO,CAACwC,IAAR,CAAaC,WADf,EAEEvC,QAAQ,CAACqC,EAAT,CAAYE,WAFd,CAJA,IAQA,oCAAkBzC,OAAO,CAACuC,EAAR,CAAWE,WAA7B,EAA0CvC,QAAQ,CAACsC,IAAT,CAAcC,WAAxD,CATF,EAUE;AACA,mBAAO,IAAP;AACD,WAdQ,CAeT;;;AACA,cACEzC,OAAO,CAACwC,IAAR,IACAxC,OAAO,CAACuC,EADR,IAEArC,QAAQ,CAACsC,IAFT,IAGAtC,QAAQ,CAACqC,EAHT,IAIAvC,OAAO,CAACsD,MAAR,KAAmBC,wBAAYC,SAJ/B,KAKCtD,QAAQ,CAACoD,MAAT,KAAoBC,wBAAYE,UAAhC,IACCvD,QAAQ,CAACoD,MAAT,KAAoBC,wBAAYG,SADjC,IAECxD,QAAQ,CAACoD,MAAT,KAAoBC,wBAAYI,aAPlC,MAQC3D,OAAO,CAACwC,IAAR,CAAaC,WAAb,KAA6BvC,QAAQ,CAACsC,IAAT,CAAcC,WAA3C,IACCzC,OAAO,CAACwC,IAAR,CAAaoB,eAAb,KAAiC1D,QAAQ,CAACsC,IAAT,CAAcoB,eATjD,KAUA5D,OAAO,CAACuC,EAAR,CAAWE,WAAX,KAA2BvC,QAAQ,CAACqC,EAAT,CAAYE,WAXzC,EAYE;AACA,mBAAO,IAAP;AACD;;AACD;AACD;;AACD;AACE,eAAO,KAAP;AAtCJ;AAwCD;;AACD,SAAO,KAAP;AACD;;AAEM,SAASoB,wBAAT,CAAkClC,KAAlC,EAAyC;AAC9C,MAAMmC,MAAM,GAAG,EAAf;AACA,MAAMC,SAAS,GAAGpC,KAAK,CAACqC,MAAN,CAAa/D,UAAb,CAAlB;AACA0B,EAAAA,KAAK,CAACqC,MAAN,CAAapE,SAAb,EAAwBqE,OAAxB,CAAgC,UAACjE,OAAD,EAAa;AAC3C,QAAMkE,aAAa,GAAGH,SAAS,CAACI,SAAV,CAAoB,UAACtE,IAAD;AAAA,aACxCsD,UAAU,CAACnD,OAAD,EAAUH,IAAV,CAD8B;AAAA,KAApB,CAAtB;;AAGA,QAAIqE,aAAa,GAAG,CAAC,CAArB,EAAwB;AACtB,UAAMhE,QAAQ,GAAG6D,SAAS,CAACK,MAAV,CAAiBF,aAAjB,EAAgC,CAAhC,EAAmC,CAAnC,CAAjB;;AAEA,UAAIlE,OAAO,CAACsD,MAAR,IAAkBpD,QAAQ,CAACoD,MAA/B,EAAuC;AACrC;AACA,YAAMzD,IAAI,qBACLK,QADK;AAERmE,UAAAA,WAAW,EAAEnE,QAFL;AAGRoE,UAAAA,UAAU,EAAEtE,OAHJ;AAIRwC,UAAAA,IAAI,oBACCxC,OAAO,CAACwC,IADT,CAJI;AAORD,UAAAA,EAAE,oBACGvC,OAAO,CAACuC,EADX,CAPM;AAURrB,UAAAA,MAAM,EAAElB,OAAO,CAACkB;AAVR,UAAV;;AAYA4C,QAAAA,MAAM,CAACS,IAAP,CAAY1E,IAAZ;AACD,OAfD,MAeO;AACL,YAAMA,KAAI,qBACLK,QADK;AAERmE,UAAAA,WAAW,EAAEnE,QAFL;AAGRoE,UAAAA,UAAU,EAAEtE;AAHJ,UAAV,CADK,CAML;AACA;;;AACA,YACE,gCAAcA,OAAO,CAACwC,IAAR,IAAgBxC,OAAO,CAACwC,IAAR,CAAaC,WAA3C,KACA,oCACEzC,OAAO,CAACwC,IAAR,CAAaC,WADf,EAEEvC,QAAQ,CAACqC,EAAT,IAAerC,QAAQ,CAACqC,EAAT,CAAYE,WAF7B,CAFF,EAME;AACA5C,UAAAA,KAAI,CAAC0C,EAAL,qBACKrC,QAAQ,CAACqC,EADd;AAEEE,YAAAA,WAAW,EAAEzC,OAAO,CAACwC,IAAR,CAAaC;AAF5B;AAIAvC,UAAAA,QAAQ,CAACqC,EAAT,CAAYE,WAAZ,GAA0BzC,OAAO,CAACwC,IAAR,CAAaC,WAAvC;AACD;;AACD,YAAIP,QAAQ,CAAClC,OAAD,CAAZ,EAAuB;AACrBH,UAAAA,KAAI,CAACO,eAAL,GAAuBC,4BAAkB8B,MAAzC;AACD;;AACD2B,QAAAA,MAAM,CAACS,IAAP,CAAY1E,KAAZ;AACD,OA3CqB,CA6CtB;;AACD,KA9CD,MA8CO;AACLiE,MAAAA,MAAM,CAACS,IAAP,CAAYvE,OAAZ;AACD;AACF,GArDD;AAsDA,SAAO8D,MAAM,CAACU,MAAP,CAAcT,SAAd,CAAP;AACD;;AAEM,SAASU,gCAAT,CAA0C9C,KAA1C,EAAiD;AACtD,MAAM+C,WAAW,GAAG,EAApB;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACAhD,EAAAA,KAAK,CAACsC,OAAN,CAAc,UAACpE,IAAD,EAAU;AACtB,QAAM+E,cAAc,GAAGxC,kBAAkB,CAACvC,IAAD,CAAzC;;AACA,QAAI,CAAC8E,QAAQ,CAAC9E,IAAI,CAACgD,SAAN,CAAb,EAA+B;AAC7B8B,MAAAA,QAAQ,CAAC9E,IAAI,CAACgF,SAAN,CAAR,GAA2B;AACzBC,QAAAA,KAAK,EAAEJ,WAAW,CAACK,MADM;AAEzBH,QAAAA,cAAc,EAAdA;AAFyB,OAA3B;AAIAF,MAAAA,WAAW,CAACH,IAAZ,CAAiB1E,IAAjB;AACD,KAND,MAMO,IAAI,CAAC+E,cAAL,EAAqB;AAC1BD,MAAAA,QAAQ,CAAC9E,IAAI,CAACgD,SAAN,CAAR,CAAyB+B,cAAzB,GAA0C,KAA1C;AACAF,MAAAA,WAAW,CAACC,QAAQ,CAAC9E,IAAI,CAACgD,SAAN,CAAR,CAAyBiC,KAA1B,CAAX,GAA8CjF,IAA9C;AACD;AACF,GAZD;AAaA,SAAO6E,WAAP;AACD,C,CAED;;;AACO,SAASM,wBAAT,CAAkCrD,KAAlC,EAAyC;AAC9C,MAAM+C,WAAW,GAAG,EAApB;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACAhD,EAAAA,KAAK,CAACsC,OAAN,CAAc,UAACpE,IAAD,EAAU;AACtB,QAAMoF,MAAM,GAAG3C,UAAU,CAACzC,IAAD,CAAzB;;AACA,QAAI,CAAC8E,QAAQ,CAAC9E,IAAI,CAACgD,SAAN,CAAb,EAA+B;AAC7B8B,MAAAA,QAAQ,CAAC9E,IAAI,CAACgF,SAAN,CAAR,GAA2B;AACzBC,QAAAA,KAAK,EAAEJ,WAAW,CAACK,MADM;AAEzBE,QAAAA,MAAM,EAANA;AAFyB,OAA3B;AAIAP,MAAAA,WAAW,CAACH,IAAZ,CAAiB1E,IAAjB;AACD,KAND,MAMO,IAAI,CAACoF,MAAL,EAAa;AAClBN,MAAAA,QAAQ,CAAC9E,IAAI,CAACgD,SAAN,CAAR,CAAyBoC,MAAzB,GAAkC,KAAlC;AACAP,MAAAA,WAAW,CAACC,QAAQ,CAAC9E,IAAI,CAACgD,SAAN,CAAR,CAAyBiC,KAA1B,CAAX,GAA8CjF,IAA9C;AACD;AACF,GAZD;AAaA,SAAO6E,WAAP;AACD,C,CAED;;;AACO,SAASQ,qBAAT,GAA0C;AAAA,MAAXrF,IAAW,uEAAJ,EAAI;AAAA,iBAO3CA,IAP2C,CAE7C0C,EAF6C;AAAA,MAE7CA,EAF6C,yBAExC,EAFwC;AAAA,mBAO3C1C,IAP2C,CAG7C2C,IAH6C;AAAA,MAG7CA,IAH6C,2BAGtC,EAHsC;AAAA,MAK7C2C,SAL6C,GAO3CtF,IAP2C,CAK7CsF,SAL6C;AAAA,MAM7CC,WAN6C,GAO3CvF,IAP2C,CAM7CuF,WAN6C;;AAQ/C,MAAIC,CAAC,CAACC,OAAF,CAAUzF,IAAV,CAAJ,EAAqB;AACnB,WAAO,EAAP;AACD;;AACD,MAAM0F,cAAc,GAAGtF,UAAU,CAACJ,IAAD,CAAjC;AACA,MAAM2F,aAAa,GAAG5F,SAAS,CAACC,IAAD,CAA/B;AACA,MAAI4C,WAAW,GAAG,IAAlB;AACA,MAAIgD,OAAO,GAAG,IAAd;;AACA,MAAIF,cAAJ,EAAoB;AAClB9C,IAAAA,WAAW,GAAGF,EAAE,CAACE,WAAH,IAAkBF,EAAE,CAACqB,eAAnC;AACA6B,IAAAA,OAAO,GAAGN,SAAV;AACD,GAHD,MAGO,IAAIK,aAAJ,EAAmB;AACxB/C,IAAAA,WAAW,GAAGD,IAAI,CAACC,WAAL,IAAoBD,IAAI,CAACoB,eAAvC;AACA6B,IAAAA,OAAO,GAAGL,WAAV;AACD,GArB8C,CAsB/C;AACA;AACA;;;AACA,SAAO;AACL3C,IAAAA,WAAW,EAAXA,WADK;AAELgD,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID","sourcesContent":["import * as R from 'ramda';\nimport moment from 'moment';\nimport {\n  isValidNumber,\n  isSameLocalNumber,\n} from '@ringcentral-integration/phone-number';\nimport HashMap from './HashMap';\nimport callActions from '../enums/callActions';\nimport callDirections from '../enums/callDirections';\nimport callResults from '../enums/callResults';\nimport telephonyStatuses from '../enums/telephonyStatus';\nimport terminationTypes from '../enums/terminationTypes';\n// import i18n from './i18n';\n\n/* call direction helpers */\nexport function isInbound(call = {}) {\n  return call.direction === callDirections.inbound;\n}\n\nexport function isOutbound(call = {}) {\n  return call.direction === callDirections.outbound;\n}\n\n/* status helpers */\nexport function isRinging(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.ringing;\n}\nexport function isRingingInboundCall(call) {\n  return isRinging(call) && isInbound(call);\n}\n\nconst callResultsToMissedMap = HashMap.fromSet({\n  set: Object.keys(callResults).map((key) => callResults[key]),\n  getValue: (result) =>\n    [\n      callResults.missed,\n      callResults.hangUp,\n      callResults.busy,\n      callResults.voicemail,\n      callResults.rejected,\n    ].indexOf(result) > -1,\n});\nexport function isMissed(call = {}) {\n  return !!callResultsToMissedMap[call.result];\n}\n\nexport function hasRingingCalls(calls = []) {\n  return !!calls.find(isRinging);\n}\n\nexport function isEnded(call = {}) {\n  return (\n    call.telephonyStatus === telephonyStatuses.noCall &&\n    call.terminationType === terminationTypes.final\n  );\n}\n\nexport function hasEndedCalls(calls) {\n  return !!calls.find(isEnded);\n}\n\nexport function isOnHold(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.onHold;\n}\n\nexport function isIntermediateCall(call = {}) {\n  return call.terminationType === terminationTypes.intermediate;\n}\n\nexport function isSelfCall(call = {}) {\n  if (call.to && call.from) {\n    return call.to.phoneNumber === call.from.phoneNumber;\n  }\n  return false;\n}\n\n/* sort functions */\n\nexport function sortBySessionId(a, b) {\n  if (a.sessionId === b.sessionId) return 0;\n  return a.sessionId > b.sessionId ? 1 : -1;\n}\nexport function sortByStartTime(a, b) {\n  if (a.startTime === b.startTime) return 0;\n  return a.startTime > b.startTime ? -1 : 1;\n}\n\nexport function normalizeStartTime(call) {\n  const result = {\n    ...call,\n  };\n  if (call.startTime) {\n    // Fix: Safari doesn't support timezone offset\n    // `startTime` might switch between `2019-10-18T08:18:47.972+0000`\n    // and `2019-10-18T08:18:47.972Z`\n    result.startTime = moment(call.startTime).valueOf();\n  }\n  return result;\n}\n\nexport function normalizeFromTo(call) {\n  return {\n    ...call,\n    from:\n      typeof call.from === 'object' ? call.from : { phoneNumber: call.from },\n    to: typeof call.to === 'object' ? call.to : { phoneNumber: call.to },\n  };\n}\n\n/* ringout leg helpers */\nexport function areTwoLegs(inbound, outbound) {\n  if (isInbound(inbound) && isOutbound(outbound)) {\n    switch (Math.abs(inbound.sessionId - outbound.sessionId)) {\n      case 1000:\n      case 2000:\n      case 3000:\n      case 4000: {\n        // presence\n        if (\n          inbound.from &&\n          inbound.to &&\n          outbound.from &&\n          outbound.to &&\n          isSameLocalNumber(\n            inbound.from.phoneNumber,\n            outbound.to.phoneNumber,\n          ) &&\n          isSameLocalNumber(inbound.to.phoneNumber, outbound.from.phoneNumber)\n        ) {\n          return true;\n        }\n        // call-log\n        if (\n          inbound.from &&\n          inbound.to &&\n          outbound.from &&\n          outbound.to &&\n          inbound.action === callActions.phoneCall &&\n          (outbound.action === callActions.ringOutWeb ||\n            outbound.action === callActions.ringOutPC ||\n            outbound.action === callActions.ringOutMobile) &&\n          (inbound.from.phoneNumber === outbound.from.phoneNumber ||\n            inbound.from.extensionNumber === outbound.from.extensionNumber) &&\n          inbound.to.phoneNumber === outbound.to.phoneNumber\n        ) {\n          return true;\n        }\n        break;\n      }\n      default:\n        return false;\n    }\n  }\n  return false;\n}\n\nexport function removeInboundRingOutLegs(calls) {\n  const output = [];\n  const outbounds = calls.filter(isOutbound);\n  calls.filter(isInbound).forEach((inbound) => {\n    const outboundIndex = outbounds.findIndex((call) =>\n      areTwoLegs(inbound, call),\n    );\n    if (outboundIndex > -1) {\n      const outbound = outbounds.splice(outboundIndex, 1)[0];\n\n      if (inbound.action && outbound.action) {\n        // from call-log\n        const call = {\n          ...outbound,\n          outboundLeg: outbound,\n          inboundLeg: inbound,\n          from: {\n            ...inbound.from,\n          },\n          to: {\n            ...inbound.to,\n          },\n          result: inbound.result,\n        };\n        output.push(call);\n      } else {\n        const call = {\n          ...outbound,\n          outboundLeg: outbound,\n          inboundLeg: inbound,\n        };\n        // Handle inboundLeg.from is '+19072028624', but outboundLeg.to is '9072028624'\n        // https://jira.ringcentral.com/browse/RCINT-3127\n        if (\n          isValidNumber(inbound.from && inbound.from.phoneNumber) &&\n          isSameLocalNumber(\n            inbound.from.phoneNumber,\n            outbound.to && outbound.to.phoneNumber,\n          )\n        ) {\n          call.to = {\n            ...outbound.to,\n            phoneNumber: inbound.from.phoneNumber,\n          };\n          outbound.to.phoneNumber = inbound.from.phoneNumber;\n        }\n        if (isOnHold(inbound)) {\n          call.telephonyStatus = telephonyStatuses.onHold;\n        }\n        output.push(call);\n      }\n\n      // output.push(outbound);\n    } else {\n      output.push(inbound);\n    }\n  });\n  return output.concat(outbounds);\n}\n\nexport function removeDuplicateIntermediateCalls(calls) {\n  const resultCalls = [];\n  const indexMap = {};\n  calls.forEach((call) => {\n    const isIntermediate = isIntermediateCall(call);\n    if (!indexMap[call.sessionId]) {\n      indexMap[call.sessionid] = {\n        index: resultCalls.length,\n        isIntermediate,\n      };\n      resultCalls.push(call);\n    } else if (!isIntermediate) {\n      indexMap[call.sessionId].isIntermediate = false;\n      resultCalls[indexMap[call.sessionId].index] = call;\n    }\n  });\n  return resultCalls;\n}\n\n// there are two active calls with same sessionId when user call self.\nexport function removeDuplicateSelfCalls(calls) {\n  const resultCalls = [];\n  const indexMap = {};\n  calls.forEach((call) => {\n    const isSelf = isSelfCall(call);\n    if (!indexMap[call.sessionId]) {\n      indexMap[call.sessionid] = {\n        index: resultCalls.length,\n        isSelf,\n      };\n      resultCalls.push(call);\n    } else if (!isSelf) {\n      indexMap[call.sessionId].isSelf = false;\n      resultCalls[indexMap[call.sessionId].index] = call;\n    }\n  });\n  return resultCalls;\n}\n\n// Get phone number and matches.\nexport function getPhoneNumberMatches(call = {}) {\n  const {\n    to = {},\n    from = {},\n    // sessionId,\n    toMatches,\n    fromMatches,\n  } = call;\n  if (R.isEmpty(call)) {\n    return {};\n  }\n  const isOutboundCall = isOutbound(call);\n  const isInboundCall = isInbound(call);\n  let phoneNumber = null;\n  let matches = null;\n  if (isOutboundCall) {\n    phoneNumber = to.phoneNumber || to.extensionNumber;\n    matches = toMatches;\n  } else if (isInboundCall) {\n    phoneNumber = from.phoneNumber || from.extensionNumber;\n    matches = fromMatches;\n  }\n  // if (!phoneNumber || !matches) {\n  //   console.warn(`Call sessionId: ${sessionId} is abnormal data.`);\n  // }\n  return {\n    phoneNumber,\n    matches,\n  };\n}\n"],"file":"callLogHelpers.js"}