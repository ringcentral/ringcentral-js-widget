{"version":3,"sources":["lib/fetchList.js"],"names":["parallelFetch","fn","perPage","params","page","data","list","records","slice","paging","totalPages","promises","i","push","Promise","all","reduce","output","item","serialFetch","fetchedPages","fetchList","parallel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAAeA,a;;;;;2EAAf,iBAA6BC,EAA7B,EAAiCC,OAAjC,EAA0CC,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqBF,EAAE,iCAChBE,MADgB;AAEnBD,cAAAA,OAAO,EAAPA,OAFmB;AAGnBE,cAAAA,IAAI,EAAE;AAHa,eADvB;;AAAA;AACQC,YAAAA,IADR;AAMQC,YAAAA,IANR,GAMeD,IAAI,CAACE,OAAL,CAAaC,KAAb,EANf;;AAAA,kBAOMH,IAAI,CAACI,MAAL,CAAYC,UAAZ,GAAyB,CAP/B;AAAA;AAAA;AAAA;;AAQUC,YAAAA,QARV,GAQqB,EARrB;;AASI,iBAASC,CAAT,GAAaP,IAAI,CAACI,MAAL,CAAYC,UAAzB,EAAqCE,CAAC,GAAG,CAAzC,EAA4CA,CAAC,IAAI,CAAjD,EAAoD;AAClDD,cAAAA,QAAQ,CAACE,IAAT,CACEZ,EAAE,iCACGE,MADH;AAEAD,gBAAAA,OAAO,EAAPA,OAFA;AAGAE,gBAAAA,IAAI,EAAEQ;AAHN,iBADJ;AAOD;;AAjBL;AAAA,mBAkBWE,OAAO,CAACC,GAAR,CAAYJ,QAAZ,CAlBX;;AAAA;AAAA,0BAkBkCK,MAlBlC,CAkByC,UAACC,MAAD,EAASC,IAAT,EAAkB;AACrDD,cAAAA,MAAM,CAACJ,IAAP,OAAAI,MAAM,qBAASC,IAAI,CAACX,OAAd,EAAN;AACA,qBAAOU,MAAP;AACD,aArBL,EAqBOX,IArBP;;AAAA;AAAA,6CAuBSA,IAvBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA0Bea,W;;;;;yEAAf,kBAA2BlB,EAA3B,EAA+BC,OAA/B,EAAwCC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AACMiB,YAAAA,YADN,GACqB,CADrB;AAEMV,YAAAA,UAFN,GAEmB,CAFnB;AAGQJ,YAAAA,IAHR,GAGe,EAHf;;AAAA;AAAA,kBAKSc,YAAY,GAAGV,UALxB;AAAA;AAAA;AAAA;;AAMIU,YAAAA,YAAY,IAAI,CAAhB;AANJ;AAAA,mBAOuBnB,EAAE,iCAChBE,MADgB;AAEnBD,cAAAA,OAAO,EAAPA,OAFmB;AAGnBE,cAAAA,IAAI,EAAEgB;AAHa,eAPzB;;AAAA;AAOUf,YAAAA,IAPV;;AAYI;AACAK,YAAAA,UAAU,GAAGL,IAAI,CAACI,MAAL,CAAYC,UAAzB;AACAJ,YAAAA,IAAI,CAACO,IAAL,OAAAP,IAAI,qBAASD,IAAI,CAACE,OAAd,EAAJ;AAdJ;AAAA;;AAAA;AAAA,8CAgBSD,IAhBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAmB8Be,S;;;;;uEAAf,kBACbpB,EADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8EAEqC,EAFrC;AAAA,gCAEXC,OAFW,EAEXA,OAFW,6BAED,KAFC,sCAEMoB,QAFN,EAEMA,QAFN,8BAEiB,IAFjB,kBAE0BnB,MAF1B;AAAA,8CAINmB,QAAQ,GACXtB,aAAa,CAACC,EAAD,EAAKC,OAAL,EAAcC,MAAd,CADF,GAEXgB,WAAW,CAAClB,EAAD,EAAKC,OAAL,EAAcC,MAAd,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["async function parallelFetch(fn, perPage, params) {\n  const data = await fn({\n    ...params,\n    perPage,\n    page: 1,\n  });\n  const list = data.records.slice();\n  if (data.paging.totalPages > 1) {\n    const promises = [];\n    for (let i = data.paging.totalPages; i > 1; i -= 1) {\n      promises.push(\n        fn({\n          ...params,\n          perPage,\n          page: i,\n        }),\n      );\n    }\n    (await Promise.all(promises)).reduce((output, item) => {\n      output.push(...item.records);\n      return output;\n    }, list);\n  }\n  return list;\n}\n\nasync function serialFetch(fn, perPage, params) {\n  let fetchedPages = 0;\n  let totalPages = 1;\n  const list = [];\n\n  while (fetchedPages < totalPages) {\n    fetchedPages += 1;\n    const data = await fn({\n      ...params,\n      perPage,\n      page: fetchedPages,\n    });\n    /* eslint { \"prefer-destructuring\": 0 } */\n    totalPages = data.paging.totalPages;\n    list.push(...data.records);\n  }\n  return list;\n}\n\nexport default async function fetchList(\n  fn,\n  { perPage = 'MAX', parallel = true, ...params } = {},\n) {\n  return parallel\n    ? parallelFetch(fn, perPage, params)\n    : serialFetch(fn, perPage, params);\n}\n"],"file":"fetchList.js"}