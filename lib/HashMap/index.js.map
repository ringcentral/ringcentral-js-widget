{"version":3,"sources":["lib/HashMap/index.ts"],"names":["sDefinition","Symbol","sValueMap","defaultGetFunction","item","HashMap","definition","Map","key","Object","prototype","hasOwnProperty","call","defineProperty","get","enumerable","set","freeze","map","value","has","getKey","getValue","forEach","createHashMap"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,WAAW,GAAGC,MAAM,CAAC,YAAD,CAA1B;AACA,IAAMC,SAAS,GAAGD,MAAM,CAAC,UAAD,CAAxB;;AAEO,SAASE,kBAAT,CAA4BC,IAA5B,EAAkC;AACvC,SAAOA,IAAP;AACD;AAED;;;;;;IAIqBC,O;;;AACnB;;;;AAIA,mBAAYC,UAAZ,EAAgC;AAAA;;AAAA;;AAC9B,SAAKN,WAAL,sBAAyBM,UAAzB;AACA,SAAKJ,SAAL,IAAkB,IAAIK,GAAJ,EAAlB;;AAF8B,+BAInBC,GAJmB;AAK5B;AACA,UAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,UAArC,EAAiDE,GAAjD,CAAJ,EAA2D;AACzDC,QAAAA,MAAM,CAACI,cAAP,CAAsB,KAAtB,EAA4BL,GAA5B,EAAiC;AAC/BM,UAAAA,GAD+B,iBACzB;AACJ,mBAAO,KAAKd,WAAL,EAAkBQ,GAAlB,CAAP;AACD,WAH8B;AAI/BO,UAAAA,UAAU,EAAE;AAJmB,SAAjC;;AAMA,QAAA,KAAI,CAACb,SAAD,CAAJ,CAAgBc,GAAhB,CAAoB,KAAI,CAAChB,WAAD,CAAJ,CAAkBQ,GAAlB,CAApB,EAA4CA,GAA5C;AACD;AAd2B;;AAI9B,SAAK,IAAMA,GAAX,IAAkBF,UAAlB,EAA8B;AAAA,YAAnBE,GAAmB;AAW7B;;AACDC,IAAAA,MAAM,CAACQ,MAAP,CAAc,IAAd;AACD;;;;2BAEaC,G,EAAKC,K,EAAO;AACxB,aAAOD,GAAG,CAAChB,SAAD,CAAH,CAAeY,GAAf,CAAmBK,KAAnB,CAAP;AACD;;;6BAEeD,G,EAAKC,K,EAAO;AAC1B,aAAOD,GAAG,CAAChB,SAAD,CAAH,CAAekB,GAAf,CAAmBD,KAAnB,CAAP;AACD;;;kCAME;AAAA,UAHDH,GAGC,QAHDA,GAGC;AAAA,6BAFDK,MAEC;AAAA,UAFDA,MAEC,4BAFQlB,kBAER;AAAA,+BADDmB,QACC;AAAA,UADDA,QACC,8BADUnB,kBACV;AACD,UAAMG,UAAU,GAAG,EAAnB;;AACA,yBAAIU,GAAJ,EAASO,OAAT,CAAiB,UAACnB,IAAD,EAAU;AACzB,YAAMI,GAAG,GAAGa,MAAM,CAACjB,IAAD,CAAlB;AACA,YAAMe,KAAK,GAAGG,QAAQ,CAAClB,IAAD,CAAtB;;AACA,YAAI,OAAOI,GAAP,KAAe,WAAf,IAA8BA,GAAG,KAAK,IAAtC,IAA8CA,GAAG,KAAK,EAA1D,EAA8D;AAC5DF,UAAAA,UAAU,CAACE,GAAD,CAAV,GAAkBW,KAAlB;AACD;AACF,OAND;;AAOA,aAAO,IAAId,OAAJ,CAAYC,UAAZ,CAAP;AACD;;;;;;;;AAGI,SAASkB,aAAT,CACLlB,UADK,EAE8C;AACnD,SAAO,IAAID,OAAJ,CAAYC,UAAZ,CAAP;AACD","sourcesContent":["const sDefinition = Symbol('definition');\nconst sValueMap = Symbol('valueMap');\n\nexport function defaultGetFunction(item) {\n  return item;\n}\n\n/**\n * @class HashMap\n * @description Simple hash map class\n */\nexport default class HashMap {\n  /**\n   * @constructor\n   * @param {Object} definition\n   */\n  constructor(definition: object) {\n    this[sDefinition] = { ...definition };\n    this[sValueMap] = new Map();\n\n    for (const key in definition) {\n      /* istanbul ignore else */\n      if (Object.prototype.hasOwnProperty.call(definition, key)) {\n        Object.defineProperty(this, key, {\n          get() {\n            return this[sDefinition][key];\n          },\n          enumerable: true,\n        });\n        this[sValueMap].set(this[sDefinition][key], key);\n      }\n    }\n    Object.freeze(this);\n  }\n\n  static getKey(map, value) {\n    return map[sValueMap].get(value);\n  }\n\n  static hasValue(map, value) {\n    return map[sValueMap].has(value);\n  }\n\n  static fromSet({\n    set,\n    getKey = defaultGetFunction,\n    getValue = defaultGetFunction,\n  }) {\n    const definition = {};\n    [...set].forEach((item) => {\n      const key = getKey(item);\n      const value = getValue(item);\n      if (typeof key !== 'undefined' && key !== null && key !== '') {\n        definition[key] = value;\n      }\n    });\n    return new HashMap(definition);\n  }\n}\n\nexport function createHashMap<V extends string, P>(\n  definition: { [K in V]: string },\n): { [K in V]: string } & { [K in keyof P]: string } {\n  return new HashMap(definition) as any;\n}\n"],"file":"index.js"}