{"version":3,"sources":["lib/rateLimitThrottle/rateLimitThrottle.ts"],"names":["rateLimitThrottle","fn","pool","poolWindow","resetPromise","count","getResetPromise","Promise","resolve","setTimeout","throttled","args","apply"],"mappings":";;;;;;;;;;;;;;;;;;;AAKO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,OAIW;AAAA,MAH1CC,EAG0C,QAH1CA,EAG0C;AAAA,MAF1CC,IAE0C,QAF1CA,IAE0C;AAAA,MAD1CC,UAC0C,QAD1CA,UAC0C;AAC1C,MAAIC,YAA2B,GAAG,IAAlC;AACA,MAAIC,KAAa,GAAG,CAApB;;AAEA,WAASC,eAAT,GAA2B;AACzB,QAAI,CAACF,YAAL,EAAmB;AACjBA,MAAAA,YAAY,GAAG,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAa;AACtCC,QAAAA,UAAU,CAAC,YAAM;AACfL,UAAAA,YAAY,GAAG,IAAf;AACAC,UAAAA,KAAK,GAAG,CAAR;AACAG,UAAAA,OAAO;AACR,SAJS,EAIPL,UAJO,CAAV;AAKD,OANc,CAAf;AAOD;;AACD,WAAOC,YAAP;AACD;;AAfyC,WAiB3BM,SAjB2B;AAAA;AAAA;;AAAA;AAAA,yEAiB1C;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAIMN,cAAAA,YAJN,GAIqBE,eAAe,EAJpC;;AAAA;AAAA,oBAKSD,KAAK,IAAIH,IALlB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAMUE,YANV;;AAAA;AAOIA,cAAAA,YAAY,GAAGE,eAAe,EAA9B;AAPJ;AAAA;;AAAA;AASED,cAAAA,KAAK,IAAI,CAAT;;AATF,wCAEKM,IAFL;AAEKA,gBAAAA,IAFL;AAAA;;AAAA,+CAUSV,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeD,IAAf,CAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjB0C;AAAA;AAAA;;AA6B1C,SAAOD,SAAP;AACD,CAlCM","sourcesContent":["export interface RateLimitThrottleOptions {\n  pool: number;\n  poolWindow: number;\n}\n\nexport const rateLimitThrottle = <F extends (...args: any) => Promise<any>>({\n  fn,\n  pool,\n  poolWindow,\n}: RateLimitThrottleOptions & { fn: F }) => {\n  let resetPromise: Promise<void> = null;\n  let count: number = 0;\n\n  function getResetPromise() {\n    if (!resetPromise) {\n      resetPromise = new Promise((resolve) => {\n        setTimeout(() => {\n          resetPromise = null;\n          count = 0;\n          resolve();\n        }, poolWindow);\n      });\n    }\n    return resetPromise;\n  }\n\n  async function throttled(\n    this: any,\n    ...args: Parameters<F>\n  ): Promise<ReturnType<F>> {\n    let resetPromise = getResetPromise();\n    while (count >= pool) {\n      await resetPromise;\n      resetPromise = getResetPromise();\n    }\n    count += 1;\n    return fn.apply(this, args);\n  }\n  return throttled;\n};\n"],"file":"rateLimitThrottle.js"}