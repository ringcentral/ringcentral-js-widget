{"version":3,"sources":["lib/EvClient/EvClient.ts"],"names":["EvClient","name","deps","_sdk","_onOpen","_onClose","_Sdk","AgentLibrary","_options","_encodeSymbol","_eventEmitter","EventEmitter","_callbacks","_deps","evClientOptions","options","callbacks","closeResponse","openResponse","res","setStatus","evStatus","CONNECTED","emit","EvCallbackTypes","OPEN_SOCKET","terminateStats","CLOSED","CLOSE_SOCKET","window","localStorage","authHost","getItem","type","listener","addListener","once","removeListener","Promise","resolve","loadCurrentCall","status","setItem","location","reload","console","log","Sdk","ACK","eventType","callback","_callback","setCallbacks","getCallback","engageAccessToken","LOGIN","authenticateAgentWithEngageAccessToken","response","dialDest","queueIds","chatIds","skillProfileId","dialGroupId","updateFromAdminUI","isForce","loginAgent","messageTypes","CONFIGURE_AGENT","data","dispId","notes","callbackDTS","leadId","requestId","externId","dispositionManualPass","uii","contactForwardNumber","survey","dispositionCall","decodeUii","rcAccessToken","tokenType","authenticateAgentWithRcAccessToken","accessToken","LOGINED","_agents","agents","map","agent","agentId","addListenerByOnce","openSocket","getAgentConfig","authenticateAgent","timeout","authenticateResponse","EvTypeError","CONNECT_TIMEOUT","message","CONNECT_ERROR","length","NO_AGENT","UNEXPECTED_AGENT","hasSupportWebSocket","INVALID_BROWSER","on","LOGIN_PHASE_1","openSocketResult","error","OPEN_SOCKET_ERROR","agentConfig","AGENT_LOGIN","closeSocket","sessionId","resetPendingDisp","hangup","logoutAgent","result","destination","callerId","ringTime","countryId","queueId","manualOutdial","offhookInit","offhookTerm","holdState","hold","state","holdSession","sipHeaders","reject","coldXfer","warmXfer","internationalColdXfer","internationalWarmXfer","warmXferCancel","skillId","maintain","requeueCall","directAgentXferList","split","encodeUii","rejectDirectAgentXfer","targetAgentId","coldDirectAgentXfer","warmDirectAgentXfer","voicemailDirectAgentXfer","cancelDirectAgentXfer","agentState","agentAuxState","setAgentState","multiLoginRequest","GENERIC_NOTIFICATION","messageCode","_multiLoginRequest","Error","sipInit","sipAnswer","sipRegister","sipTerminate","sipHangUp","sipReject","dtmf","sipSendDTMF","sipToggleMute","scriptId","version","getScript","jsonResult","saveScriptResult","fn","e","EvMessageTypes","SCRIPT_RESULT","getCurrentCall","RcModuleV2","START","action"],"mappings":"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","sourcesContent":["import { action, RcModuleV2, state } from '@ringcentral-integration/core';\n// eslint-disable-next-line import/no-unresolved\nimport AgentLibrary from '@SDK';\nimport EventEmitter from 'events';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport sleep from 'ringcentral-integration/lib/sleep';\n\nimport { messageTypes } from '../../enums';\nimport { EvTypeError } from '../EvTypeError';\nimport { raceTimeout } from '../time';\nimport { EvMessageTypes, evStatus } from './enums';\nimport { EvCallbackTypes } from './enums/callbackTypes';\nimport {\n  Deps,\n  EvACKResponse,\n  EvAddSessionNotification,\n  EvAgentConfig,\n  EvAgentInfo,\n  EvAgentOptions,\n  EvAgentScriptResult,\n  EvAuthenticateAgentWithEngageAccessTokenRes,\n  EvAuthenticateAgentWithRcAccessTokenRes,\n  EvBaseCall,\n  EvClientCallMapping,\n  EvColdTransferCallResponse,\n  EvColdTransferIntlCallResponse,\n  EvConfigureAgentOptions,\n  EvDirectAgentListResponse,\n  EvDispositionCallOptions,\n  EvDispositionManualPassOptions,\n  EvLogoutAgentResponse,\n  EvMessageRes,\n  EvOpenSocketResult,\n  EvRequeueCallResponse,\n  EvRequeueOption,\n  EvScriptResponse,\n  EvTokenType,\n  EvWarmTransferCallResponse,\n  EvWarmTransferIntlCallResponse,\n} from './interfaces';\n\ntype ListenerType = typeof EvCallbackTypes['OPEN_SOCKET' | 'CLOSE_SOCKET'];\n\ntype Listener<\n  T extends keyof EvClientCallMapping,\n  U extends EvClientCallMapping = EvClientCallMapping\n> = (res: U[T]) => void;\n\nexport type EvClientTransferParams = {\n  dialDest: string;\n  callerId?: string;\n  sipHeaders?: string[];\n  countryId?: string;\n};\n\nexport type EvClientHandUpParams = {\n  sessionId: string;\n  resetPendingDisp?: boolean;\n};\n\nexport type EvClientHoldSessionParams = {\n  state: boolean;\n  sessionId: string;\n};\n\nexport type EvClientManualOutdialParams = {\n  destination: string;\n  callerId: string;\n  ringTime: number;\n  queueId: string;\n  countryId: string;\n};\n\n@Module({\n  name: 'EvClient',\n  deps: ['EvClientOptions'],\n})\nclass EvClient extends RcModuleV2<Deps> {\n  /** SDK instance */\n  private _sdk: any;\n\n  private _onOpen: (response: EvClientCallMapping['openResponse']) => void;\n\n  private _onClose: () => void;\n\n  private _Sdk = AgentLibrary;\n\n  private _options: EvAgentOptions;\n\n  private _encodeSymbol = '$';\n\n  private _eventEmitter = new EventEmitter();\n\n  private _callbacks: Record<string, Function> = {};\n\n  @state\n  status: string = evStatus.START;\n\n  constructor(deps: Deps) {\n    super({ deps });\n    this._options = this._deps.evClientOptions.options;\n    const {\n      closeResponse,\n      openResponse,\n    } = this._deps.evClientOptions.callbacks;\n    this._onOpen = (res) => {\n      this.setStatus(evStatus.CONNECTED);\n      openResponse(res);\n      this._eventEmitter.emit(EvCallbackTypes.OPEN_SOCKET, res);\n      // ensure for WebSocket keep-alive connection\n      this._sdk.terminateStats();\n    };\n    this._onClose = () => {\n      this.setStatus(evStatus.CLOSED);\n      closeResponse();\n      this._eventEmitter.emit(EvCallbackTypes.CLOSE_SOCKET);\n    };\n    // Used for toggle auth host about Engage Voice backend.\n    if (window.localStorage) {\n      const authHost = window.localStorage.getItem('__authHost__');\n      if (authHost) {\n        this._options.authHost = authHost;\n      }\n    }\n  }\n\n  addListener<T extends ListenerType>(type: T, listener: Listener<T>) {\n    this._eventEmitter.addListener(type, listener);\n  }\n\n  addListenerByOnce<T extends ListenerType>(type: T, listener: Listener<T>) {\n    this._eventEmitter.once(type, listener);\n  }\n\n  removeListener<T extends ListenerType>(\n    type: ListenerType,\n    listener: Listener<T>,\n  ) {\n    this._eventEmitter.removeListener(type, listener);\n  }\n\n  loadCurrentCall() {\n    return new Promise<EvBaseCall | void>((resolve) => {\n      this._sdk.loadCurrentCall(resolve);\n    });\n  }\n\n  get currentCall() {\n    return this._sdk.getCurrentCall();\n  }\n\n  @action\n  setStatus(status: string) {\n    this.status = status;\n  }\n\n  setEnv(authHost: string) {\n    if (window.localStorage) {\n      window.localStorage.setItem('__authHost__', authHost);\n      window.location.reload();\n    }\n  }\n\n  initSDK() {\n    console.log('initSDK');\n    const { _Sdk: Sdk } = this;\n    this._sdk = new Sdk({\n      callbacks: {\n        ...this._callbacks,\n        [EvCallbackTypes.CLOSE_SOCKET]: this._onClose,\n        [EvCallbackTypes.OPEN_SOCKET]: this._onOpen,\n        [EvCallbackTypes.ACK]: (res: EvACKResponse) => {\n          this._eventEmitter.emit(EvCallbackTypes.ACK, res);\n        },\n      },\n      ...this._options,\n    });\n  }\n\n  on(eventType: string, callback: (...args: any[]) => void) {\n    const _callback = {\n      [eventType]: (...args: any[]) => callback(...args),\n    };\n\n    this._sdk.setCallbacks(_callback);\n    this._callbacks = {\n      ...this._callbacks,\n      ..._callback,\n    };\n  }\n\n  getEventCallback(eventType: string) {\n    return this._sdk.getCallback(eventType);\n  }\n\n  authenticateAgentWithEngageAccessToken(engageAccessToken: string) {\n    return new Promise<EvAuthenticateAgentWithEngageAccessTokenRes>(\n      (resolve) => {\n        this.setStatus(evStatus.LOGIN);\n        this._sdk.authenticateAgentWithEngageAccessToken(\n          engageAccessToken,\n          (response: EvAuthenticateAgentWithEngageAccessTokenRes) => {\n            resolve(response);\n          },\n        );\n      },\n    );\n  }\n\n  configureAgent({\n    dialDest,\n    queueIds,\n    chatIds,\n    skillProfileId,\n    dialGroupId,\n    updateFromAdminUI = false,\n    isForce = false,\n  }: EvConfigureAgentOptions) {\n    return new Promise<EvMessageRes>((resolve) => {\n      this._sdk.loginAgent(\n        dialDest,\n        queueIds,\n        chatIds,\n        skillProfileId,\n        dialGroupId,\n        updateFromAdminUI,\n        isForce,\n        (res: any) => {\n          resolve({\n            type: messageTypes.CONFIGURE_AGENT,\n            data: res,\n          });\n        },\n      );\n    });\n  }\n\n  dispositionManualPass({\n    dispId,\n    notes,\n    callbackDTS,\n    leadId,\n    requestId,\n    externId,\n  }: EvDispositionManualPassOptions) {\n    return new Promise<EvDispositionManualPassOptions>((resolve) => {\n      this._sdk.dispositionManualPass(\n        dispId,\n        notes,\n        (response: EvDispositionManualPassOptions) => {\n          resolve(response);\n        },\n        callbackDTS,\n        leadId,\n        requestId,\n        externId,\n      );\n    });\n  }\n\n  dispositionCall({\n    uii,\n    dispId = '',\n    notes = '',\n    callback,\n    callbackDTS,\n    contactForwardNumber,\n    survey,\n    externId,\n    leadId,\n    requestId = '',\n  }: EvDispositionCallOptions) {\n    return this._sdk.dispositionCall(\n      this.decodeUii(uii),\n      dispId,\n      notes,\n      callback,\n      callbackDTS,\n      contactForwardNumber,\n      survey,\n      externId,\n      leadId,\n      requestId,\n    );\n  }\n\n  authenticateAgent(rcAccessToken: string, tokenType: EvTokenType) {\n    return new Promise<EvAuthenticateAgentWithRcAccessTokenRes>((resolve) => {\n      this.setStatus(evStatus.LOGIN);\n      this._sdk.authenticateAgentWithRcAccessToken(\n        rcAccessToken,\n        tokenType,\n        async (res: EvAuthenticateAgentWithRcAccessTokenRes) => {\n          // here just auth with engage access token, not need handle response data, that handle by Agent SDK.\n          await this.authenticateAgentWithEngageAccessToken(res.accessToken);\n\n          this.setStatus(evStatus.LOGINED);\n          const _agents = (res || {}).agents || [];\n          const agents = _agents.map((agent) => ({\n            ...agent,\n            agentId: agent && agent.agentId ? `${agent.agentId}` : '',\n          }));\n          resolve({\n            ...res,\n            agents,\n          });\n        },\n      );\n    });\n  }\n\n  openSocket(agentId: string) {\n    return new Promise<EvOpenSocketResult>((resolve) => {\n      this.addListenerByOnce(EvCallbackTypes.OPEN_SOCKET, (res) => {\n        resolve(res);\n      });\n      this._sdk.openSocket(agentId);\n    });\n  }\n\n  getAgentConfig() {\n    return new Promise<EvAgentConfig>((resolve) => {\n      this._sdk.getAgentConfig((res: EvAgentConfig) => {\n        resolve(res);\n      });\n    });\n  }\n\n  async loginAgent(\n    rcAccessToken: string,\n    tokenType: EvTokenType,\n  ): Promise<EvAgentInfo> {\n    const authenticateResponse = await raceTimeout(\n      this.authenticateAgent(rcAccessToken, tokenType),\n      {\n        timeout: 120 * 1000,\n        callback: () => null,\n      },\n    );\n    if (!authenticateResponse) {\n      throw new EvTypeError({\n        type: messageTypes.CONNECT_TIMEOUT,\n      });\n    }\n    if (\n      authenticateResponse.type === 'Authenticate Error' ||\n      authenticateResponse.message\n    ) {\n      throw new EvTypeError({\n        type: messageTypes.CONNECT_ERROR,\n        data: authenticateResponse.message,\n      });\n    }\n    if (\n      !authenticateResponse ||\n      !authenticateResponse.agents ||\n      !authenticateResponse.agents.length\n    ) {\n      throw new EvTypeError({\n        type: messageTypes.NO_AGENT,\n      });\n    }\n    if (\n      !authenticateResponse.agents[0] ||\n      !authenticateResponse.agents[0].agentId\n    ) {\n      throw new EvTypeError({\n        type: messageTypes.UNEXPECTED_AGENT,\n      });\n    }\n    const agentId = authenticateResponse.agents[0].agentId;\n    const hasSupportWebSocket = 'WebSocket' in window;\n    if (!hasSupportWebSocket) {\n      throw new EvTypeError({\n        type: messageTypes.INVALID_BROWSER,\n      });\n    }\n\n    // TODO: here need check time when no message come back, that will block app.\n    const getAgentConfig = new Promise<EvAgentConfig>((resolve) => {\n      this.on(EvCallbackTypes.LOGIN_PHASE_1, (...args) => resolve(...args));\n    });\n    const openSocketResult = await this.openSocket(agentId);\n    // wait for socketOpened\n    // Because instance.socket Opened(); was performed after callback.\n    await sleep(0);\n    if (openSocketResult.error) {\n      throw new EvTypeError({\n        type: messageTypes.OPEN_SOCKET_ERROR,\n      });\n    }\n\n    const agentConfig = await getAgentConfig;\n    // prevent that the WebSocket instance disconnects by server side.\n    return {\n      type: messageTypes.AGENT_LOGIN,\n      data: {\n        authenticateResponse,\n        agentConfig,\n      },\n    };\n  }\n\n  /**\n   * That closeSocket will auto reconnected by agent SDK\n   */\n  closeSocket() {\n    this._sdk.closeSocket();\n  }\n\n  hangup({ sessionId, resetPendingDisp = false }: EvClientHandUpParams) {\n    return this._sdk.hangup(sessionId, resetPendingDisp);\n  }\n\n  logoutAgent(agentId: string) {\n    return new Promise<EvLogoutAgentResponse>((resolve) => {\n      this._sdk.logoutAgent(agentId, (result: EvLogoutAgentResponse) => {\n        resolve(result);\n      });\n    });\n  }\n\n  manualOutdial({\n    destination,\n    callerId,\n    ringTime,\n    countryId,\n    queueId,\n  }: EvClientManualOutdialParams) {\n    return this._sdk.manualOutdial(\n      destination,\n      callerId,\n      ringTime,\n      countryId,\n      queueId,\n    );\n  }\n\n  offhookInit() {\n    // we using EvCallbackTypes.OFFHOOK_INIT to catch data, do not pass callback,\n    // that will make the message not come back\n    this._sdk.offhookInit();\n  }\n\n  offhookTerm() {\n    this._sdk.offhookTerm();\n  }\n\n  hold(holdState: boolean) {\n    this._sdk.hold(holdState);\n  }\n\n  holdSession({ state, sessionId }: EvClientHoldSessionParams) {\n    this._sdk.holdSession(state, sessionId);\n  }\n\n  coldTransferCall({\n    dialDest,\n    callerId = '',\n    sipHeaders = [],\n  }: EvClientTransferParams) {\n    return new Promise<EvColdTransferCallResponse>((resolve, reject) => {\n      this._sdk.coldXfer(\n        dialDest,\n        callerId,\n        sipHeaders,\n        (data: EvColdTransferCallResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  warmTransferCall({\n    dialDest,\n    callerId = '',\n    sipHeaders = [],\n  }: EvClientTransferParams) {\n    return new Promise<EvWarmTransferCallResponse>((resolve, reject) => {\n      this._sdk.warmXfer(\n        dialDest,\n        callerId,\n        sipHeaders,\n        (data: EvWarmTransferCallResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  coldTransferIntlCall({\n    dialDest,\n    callerId = '',\n    sipHeaders = [],\n    countryId = '',\n  }: EvClientTransferParams) {\n    return new Promise<EvColdTransferIntlCallResponse>((resolve, reject) => {\n      this._sdk.internationalColdXfer(\n        dialDest,\n        callerId,\n        sipHeaders,\n        countryId,\n        (data: EvColdTransferIntlCallResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  warmTransferIntlCall({\n    dialDest,\n    callerId = '',\n    sipHeaders = [],\n    countryId = '',\n  }: EvClientTransferParams) {\n    return new Promise<EvWarmTransferIntlCallResponse>((resolve, reject) => {\n      this._sdk.internationalWarmXfer(\n        dialDest,\n        callerId,\n        sipHeaders,\n        countryId,\n        (data: EvWarmTransferIntlCallResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  cancelWarmTransferCall(dialDest: string) {\n    this._sdk.warmXferCancel(dialDest);\n  }\n\n  requeueCall({ queueId, skillId = '', maintain = false }: EvRequeueOption) {\n    return new Promise<EvRequeueCallResponse>((resolve, reject) => {\n      this._sdk.requeueCall(\n        queueId,\n        skillId,\n        maintain,\n        (data: EvRequeueCallResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  fetchDirectAgentList() {\n    return new Promise<EvDirectAgentListResponse>((resolve) => {\n      this._sdk.directAgentXferList((data: EvDirectAgentListResponse) => {\n        resolve(data);\n      });\n    });\n  }\n\n  encodeUii({ uii, sessionId }: Partial<EvAddSessionNotification>) {\n    return `${uii}${this._encodeSymbol}${sessionId}`;\n  }\n\n  decodeUii(uii: string) {\n    return uii.split(this._encodeSymbol)[0];\n  }\n\n  /**\n   * get a main call session in some call session with some uii\n   * @param uii call uii\n   */\n  getMainId(uii: string) {\n    return this.encodeUii({\n      sessionId: '1',\n      uii,\n    });\n  }\n\n  rejectDirectAgentTransferCall(uii: string) {\n    this._sdk.rejectDirectAgentXfer(this.decodeUii(uii));\n  }\n\n  coldDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.coldDirectAgentXfer(targetAgentId);\n  }\n\n  warmDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.warmDirectAgentXfer(targetAgentId);\n  }\n\n  sendVoicemailDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.voicemailDirectAgentXfer(targetAgentId);\n  }\n\n  cancelDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.cancelDirectAgentXfer(targetAgentId);\n  }\n\n  setAgentState(agentState: string, agentAuxState: string) {\n    return this._sdk.setAgentState(agentState, agentAuxState);\n  }\n\n  private _multiLoginRequest() {\n    return new Promise<any>((resolve, reject) => {\n      this._sdk.multiLoginRequest();\n      this.on(EvCallbackTypes.LOGIN, (data) => {\n        if (data.status === 'SUCCESS') {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n      this.on(EvCallbackTypes.GENERIC_NOTIFICATION, (data) => {\n        if (data.messageCode === '-99') {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  async multiLoginRequest() {\n    // temp solution, and wait for ev backend enhancement.\n    try {\n      await raceTimeout(this._multiLoginRequest());\n    } catch (error) {\n      throw new Error('_multiLoginRequest fail or 30s timeout');\n    }\n  }\n\n  /**\n   * WebRTC related method\n   */\n  sipInit() {\n    this._sdk.sipInit();\n  }\n\n  sipAnswer() {\n    this._sdk.sipAnswer();\n  }\n\n  sipRegister() {\n    this._sdk.sipRegister();\n  }\n\n  sipTerminate() {\n    this._sdk.sipTerminate();\n  }\n\n  sipHangUp() {\n    this._sdk.sipHangUp();\n  }\n\n  sipReject() {\n    this._sdk.sipReject();\n  }\n\n  sipSendDTMF(dtmf: string) {\n    this._sdk.sipSendDTMF(dtmf);\n  }\n\n  sipToggleMute(state: boolean) {\n    this._sdk.sipToggleMute(state);\n  }\n\n  /**\n   * AgentScript related method\n   */\n  getScript(scriptId: string, version: string) {\n    return new Promise<EvScriptResponse>((resolve, reject) => {\n      this._sdk.getScript(scriptId, version, (res: EvScriptResponse) => {\n        if (res.status) {\n          resolve(res);\n        }\n      });\n    });\n  }\n\n  async saveScriptResult(\n    uii: string,\n    scriptId: string,\n    jsonResult: EvAgentScriptResult,\n  ) {\n    let fn: (e: EvACKResponse) => void;\n\n    const res = await raceTimeout(\n      new Promise<EvACKResponse>((resolve) => {\n        this._sdk.saveScriptResult(uii, scriptId, jsonResult);\n\n        fn = (e: EvACKResponse) => {\n          if (e.type === EvMessageTypes.SCRIPT_RESULT) {\n            resolve(e);\n            this._eventEmitter.removeListener(EvCallbackTypes.ACK, fn);\n          }\n        };\n        this._eventEmitter.on(EvCallbackTypes.ACK, fn);\n      }),\n      {\n        timeout: 5 * 1000,\n        callback: () => null,\n      },\n    );\n\n    if (!res) {\n      this._eventEmitter.removeListener(EvCallbackTypes.ACK, fn);\n      throw new Error('saveScriptResult fail');\n    }\n    return res;\n  }\n}\n\nexport { EvClient };\n"],"file":"EvClient.js"}