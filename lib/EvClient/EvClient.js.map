{"version":3,"sources":["lib/EvClient/EvClient.ts"],"names":["EvClient","name","deps","dep","optional","spread","evClientOptions","options","callbacks","_sdk","_onOpen","_onClose","_Sdk","AgentLibrary","_options","_encodeSymbol","_eventEmitter","EventEmitter","_callbacks","closeResponse","openResponse","res","setStatus","evStatus","CONNECTED","emit","EvCallbackTypes","OPEN_SOCKET","terminateStats","CLOSED","CLOSE_SOCKET","window","localStorage","authHost","getItem","type","listener","addListener","once","removeListener","Promise","resolve","loadCurrentCall","status","state","setItem","location","reload","Sdk","eventType","callback","_callback","setCallbacks","getCallback","engageAccessToken","LOGIN","authenticateAgentWithEngageAccessToken","response","dialDest","queueIds","chatIds","skillProfileId","dialGroupId","updateFromAdminUI","isForce","loginAgent","messageTypes","CONFIGURE_AGENT","data","dispId","notes","callbackDTS","leadId","requestId","externId","dispositionManualPass","uii","contactForwardNumber","survey","dispositionCall","decodeUii","rcAccessToken","tokenType","authenticateAgentWithRcAccessToken","accessToken","LOGINED","_agents","agents","map","agent","agentId","addListenerByOnce","openSocket","getAgentConfig","authenticateAgent","timeout","authenticateResponse","EvTypeError","CONNECT_TIMEOUT","message","CONNECT_ERROR","length","NO_AGENT","UNEXPECTED_AGENT","hasSupportWebSocket","INVALID_BROWSER","on","LOGIN_PHASE_1","openSocketResult","error","OPEN_SOCKET_ERROR","agentConfig","AGENT_LOGIN","inboundSettings","availableQueues","availableSkillProfiles","queues","skillProfile","availableRequeueQueues","agentSettings","autoAnswerCalls","agentPermissions","defaultAutoAnswerOn","closeSocket","sessionId","resetPendingDisp","hangup","logoutAgent","result","destination","callerId","ringTime","countryId","queueId","manualOutdial","offhookInit","offhookTerm","holdState","hold","holdSession","sipHeaders","reject","coldXfer","warmXfer","internationalColdXfer","internationalWarmXfer","warmXferCancel","skillId","maintain","requeueCall","directAgentXferList","split","encodeUii","rejectDirectAgentXfer","targetAgentId","coldDirectAgentXfer","warmDirectAgentXfer","voicemailDirectAgentXfer","cancelDirectAgentXfer","agentState","agentAuxState","setAgentState","multiLoginRequest","GENERIC_NOTIFICATION","messageCode","_multiLoginRequest","Error","sipInit","sipAnswer","sipRegister","sipHangUp","sipReject","dtmf","sipSendDTMF","sipToggleMute","getCurrentCall","getAgentSettings","RcModuleV2","START","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleState,\n  RcModuleV2,\n  state,\n} from '@ringcentral-integration/core';\n// eslint-disable-next-line import/no-unresolved\nimport AgentLibrary from '@SDK';\nimport EventEmitter from 'events';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport sleep from 'ringcentral-integration/lib/sleep';\n\nimport { messageTypes } from '../../enums';\nimport { EvTypeError } from '../EvTypeError';\nimport { evStatus } from './enums';\nimport { EvCallbackTypes } from './enums/callbackTypes';\nimport {\n  EvAddSessionNotification,\n  EvAgentConfig,\n  EvAgentInfo,\n  EvAgentOptions,\n  EvAuthenticateAgentWithRcAccessTokenRes,\n  EvBaseCall,\n  EvClientCallMapping,\n  EvClientParams,\n  EvColdTransferCallResponse,\n  EvColdTransferIntlCallResponse,\n  EvConfigureAgentOptions,\n  EvDirectAgentListResponse,\n  EvDispositionCallOptions,\n  EvDispositionManualPassOptions,\n  EvLogoutAgentResponse,\n  EvMessageRes,\n  EvOpenSocketResult,\n  EvRequeueCallResponse,\n  EvRequeueOption,\n  EvTokenType,\n  EvWarmTransferCallResponse,\n  EvWarmTransferIntlCallResponse,\n  EvAuthenticateAgentWithEngageAccessTokenRes,\n} from './interfaces';\nimport { raceTimeout } from '../time';\n\ninterface State {\n  status: string;\n}\n\ntype ListenerType = typeof EvCallbackTypes['OPEN_SOCKET' | 'CLOSE_SOCKET'];\n\ntype Listener<\n  T extends keyof EvClientCallMapping,\n  U extends EvClientCallMapping = EvClientCallMapping\n> = (res: U[T]) => void;\n\ntype EvClientState = RcModuleState<EvClient, State>;\n\n@Module({\n  name: 'EvClient',\n  deps: [{ dep: 'EvClientOptions', optional: true, spread: true }],\n})\nclass EvClient extends RcModuleV2<{}, EvClientState> {\n  /** SDK instance */\n  private _sdk: any;\n\n  private _onOpen: (response: EvClientCallMapping['openResponse']) => void;\n\n  private _onClose: () => void;\n\n  private _Sdk = AgentLibrary;\n\n  private _options: EvAgentOptions;\n\n  private _encodeSymbol = '$';\n\n  private _eventEmitter = new EventEmitter();\n\n  private _callbacks: Record<string, Function> = {};\n\n  @state\n  status: string = evStatus.START;\n\n  constructor({ evClientOptions: { options, callbacks } }: EvClientParams) {\n    super();\n    this._options = options;\n    const { closeResponse, openResponse } = callbacks;\n    this._onOpen = (res) => {\n      this.setStatus(evStatus.CONNECTED);\n      openResponse(res);\n      this._eventEmitter.emit(EvCallbackTypes.OPEN_SOCKET, res);\n      // ensure for WebSocket keep-alive connection\n      this._sdk.terminateStats();\n    };\n    this._onClose = () => {\n      this.setStatus(evStatus.CLOSED);\n      closeResponse();\n      this._eventEmitter.emit(EvCallbackTypes.CLOSE_SOCKET);\n    };\n    // Used for toggle auth host about Engage Voice backend.\n    if (window.localStorage) {\n      const authHost = window.localStorage.getItem('__authHost__');\n      if (authHost) {\n        options.authHost = authHost;\n      }\n    }\n  }\n\n  addListener<T extends ListenerType>(type: T, listener: Listener<T>) {\n    this._eventEmitter.addListener(type, listener);\n  }\n\n  addListenerByOnce<T extends ListenerType>(type: T, listener: Listener<T>) {\n    this._eventEmitter.once(type, listener);\n  }\n\n  removeListener<T extends ListenerType>(\n    type: ListenerType,\n    listener: Listener<T>,\n  ) {\n    this._eventEmitter.removeListener(type, listener);\n  }\n\n  loadCurrentCall() {\n    return new Promise<EvBaseCall | void>((resolve) => {\n      this._sdk.loadCurrentCall(resolve);\n    });\n  }\n\n  get currentCall() {\n    return this._sdk.getCurrentCall();\n  }\n\n  @action\n  setStatus(status: string) {\n    this.state.status = status;\n  }\n\n  setEnv(authHost: string) {\n    if (window.localStorage) {\n      window.localStorage.setItem('__authHost__', authHost);\n      window.location.reload();\n    }\n  }\n\n  onInit() {\n    const { _Sdk: Sdk } = this;\n    this._sdk = new Sdk({\n      callbacks: {\n        ...this._callbacks,\n        closeResponse: this._onClose,\n        openResponse: this._onOpen,\n      },\n      ...this._options,\n    });\n  }\n\n  on(eventType: string, callback: (...args: any[]) => void) {\n    const _callback = {\n      [eventType]: (...args: any[]) => callback(...args),\n    };\n\n    this._sdk.setCallbacks(_callback);\n    this._callbacks = {\n      ...this._callbacks,\n      ..._callback,\n    };\n  }\n\n  getEventCallback(eventType: string) {\n    return this._sdk.getCallback(eventType);\n  }\n\n  authenticateAgentWithEngageAccessToken(engageAccessToken: string) {\n    return new Promise<EvAuthenticateAgentWithEngageAccessTokenRes>(\n      (resolve) => {\n        this.setStatus(evStatus.LOGIN);\n        this._sdk.authenticateAgentWithEngageAccessToken(\n          engageAccessToken,\n          (response: EvAuthenticateAgentWithEngageAccessTokenRes) => {\n            resolve(response);\n          },\n        );\n      },\n    );\n  }\n\n  configureAgent({\n    dialDest,\n    queueIds,\n    chatIds,\n    skillProfileId,\n    dialGroupId,\n    updateFromAdminUI = false,\n    isForce = false,\n  }: EvConfigureAgentOptions) {\n    return new Promise<EvMessageRes>((resolve) => {\n      this._sdk.loginAgent(\n        dialDest,\n        queueIds,\n        chatIds,\n        skillProfileId,\n        dialGroupId,\n        updateFromAdminUI,\n        isForce,\n        (res: any) => {\n          resolve({\n            type: messageTypes.CONFIGURE_AGENT,\n            data: res,\n          });\n        },\n      );\n    });\n  }\n\n  dispositionManualPass({\n    dispId,\n    notes,\n    callbackDTS,\n    leadId,\n    requestId,\n    externId,\n  }: EvDispositionManualPassOptions) {\n    // TODO: Promise type\n    return new Promise((resolve) => {\n      this._sdk.dispositionManualPass(\n        dispId,\n        notes,\n        (response) => {\n          resolve(response);\n        },\n        callbackDTS,\n        leadId,\n        requestId,\n        externId,\n      );\n    });\n  }\n\n  dispositionCall({\n    uii,\n    dispId = '',\n    notes = '',\n    callback,\n    callbackDTS,\n    contactForwardNumber,\n    survey,\n    externId,\n    leadId,\n    requestId = '',\n  }: EvDispositionCallOptions) {\n    return this._sdk.dispositionCall(\n      this.decodeUii(uii),\n      dispId,\n      notes,\n      callback,\n      callbackDTS,\n      contactForwardNumber,\n      survey,\n      externId,\n      leadId,\n      requestId,\n    );\n  }\n\n  authenticateAgent(rcAccessToken: string, tokenType: EvTokenType) {\n    return new Promise<EvAuthenticateAgentWithRcAccessTokenRes>((resolve) => {\n      this.setStatus(evStatus.LOGIN);\n      this._sdk.authenticateAgentWithRcAccessToken(\n        rcAccessToken,\n        tokenType,\n        async (res: EvAuthenticateAgentWithRcAccessTokenRes) => {\n          // here just auth with engage access token, not need handle response data, that handle by Agent SDK.\n          await this.authenticateAgentWithEngageAccessToken(res.accessToken);\n\n          this.setStatus(evStatus.LOGINED);\n          const _agents = (res || {}).agents || [];\n          const agents = _agents.map((agent) => ({\n            ...agent,\n            agentId: agent && agent.agentId ? `${agent.agentId}` : '',\n          }));\n          resolve({\n            ...res,\n            agents,\n          });\n        },\n      );\n    });\n  }\n\n  openSocket(agentId: string) {\n    return new Promise<EvOpenSocketResult>((resolve) => {\n      this.addListenerByOnce(EvCallbackTypes.OPEN_SOCKET, (res) => {\n        resolve(res);\n      });\n      this._sdk.openSocket(agentId);\n    });\n  }\n\n  getAgentConfig() {\n    return new Promise<EvAgentConfig>((resolve) => {\n      this._sdk.getAgentConfig((res) => {\n        resolve(res);\n      });\n    });\n  }\n\n  async loginAgent(\n    rcAccessToken: string,\n    tokenType: EvTokenType,\n  ): Promise<EvAgentInfo> {\n    const authenticateResponse = await raceTimeout(\n      this.authenticateAgent(rcAccessToken, tokenType),\n      {\n        timeout: 120 * 1000,\n        callback: () => null,\n      },\n    );\n    if (!authenticateResponse) {\n      throw new EvTypeError({\n        type: messageTypes.CONNECT_TIMEOUT,\n      });\n    }\n    if (\n      authenticateResponse.type === 'Authenticate Error' ||\n      authenticateResponse.message\n    ) {\n      throw new EvTypeError({\n        type: messageTypes.CONNECT_ERROR,\n        data: authenticateResponse.message,\n      });\n    }\n    if (\n      !authenticateResponse ||\n      !authenticateResponse.agents ||\n      !authenticateResponse.agents.length\n    ) {\n      throw new EvTypeError({\n        type: messageTypes.NO_AGENT,\n      });\n    }\n    if (\n      !authenticateResponse.agents[0] ||\n      !authenticateResponse.agents[0].agentId\n    ) {\n      throw new EvTypeError({\n        type: messageTypes.UNEXPECTED_AGENT,\n      });\n    }\n    const agentId = authenticateResponse.agents[0].agentId;\n    const hasSupportWebSocket = 'WebSocket' in window;\n    if (!hasSupportWebSocket) {\n      throw new EvTypeError({\n        type: messageTypes.INVALID_BROWSER,\n      });\n    }\n\n    // TODO: here need check time when no message come back, that will block app.\n    const getAgentConfig = new Promise<EvAgentConfig>((resolve) => {\n      this.on(EvCallbackTypes.LOGIN_PHASE_1, (...args) => resolve(...args));\n    });\n    const openSocketResult = await this.openSocket(agentId);\n    // wait for socketOpened\n    // Because instance.socket Opened(); was performed after callback.\n    await sleep(0);\n    if (openSocketResult.error) {\n      throw new EvTypeError({\n        type: messageTypes.OPEN_SOCKET_ERROR,\n      });\n    }\n\n    const agentConfig = await getAgentConfig;\n    // prevent that the WebSocket instance disconnects by server side.\n    return {\n      type: messageTypes.AGENT_LOGIN,\n      data: {\n        ...authenticateResponse,\n        inboundSettings: (agentConfig && agentConfig.inboundSettings) || {\n          availableQueues: [],\n          availableSkillProfiles: [],\n          queues: [],\n          skillProfile: {},\n          availableRequeueQueues: [],\n        },\n      },\n      agentConfig: {\n        ...agentConfig,\n        agentSettings: {\n          ...agentConfig.agentSettings,\n          autoAnswerCalls: agentConfig.agentPermissions.defaultAutoAnswerOn,\n        },\n      },\n    };\n  }\n\n  closeSocket() {\n    this._sdk.closeSocket();\n  }\n\n  hangup({\n    sessionId,\n    resetPendingDisp = false,\n  }: {\n    sessionId: string;\n    resetPendingDisp?: boolean;\n  }) {\n    return this._sdk.hangup(sessionId, resetPendingDisp);\n  }\n\n  logoutAgent(agentId: string) {\n    return new Promise<EvLogoutAgentResponse>((resolve) => {\n      this._sdk.logoutAgent(agentId, (result) => {\n        resolve(result);\n      });\n    });\n  }\n\n  // TODO: type\n  manualOutdial({ destination, callerId, ringTime, countryId, queueId }) {\n    return this._sdk.manualOutdial(\n      destination,\n      callerId,\n      ringTime,\n      countryId,\n      queueId,\n    );\n  }\n\n  offhookInit() {\n    // we using EvCallbackTypes.OFFHOOK_INIT to catch data, do not pass callback,\n    // that will make the message not come back\n    this._sdk.offhookInit();\n  }\n\n  offhookTerm() {\n    this._sdk.offhookTerm();\n  }\n\n  hold(holdState: boolean) {\n    this._sdk.hold(holdState);\n  }\n\n  // TODO: type\n  holdSession({ state, sessionId }) {\n    this._sdk.holdSession(state, sessionId);\n  }\n\n  // TODO: type\n  coldTransferCall({ dialDest, callerId = '', sipHeaders = [] }) {\n    return new Promise<EvColdTransferCallResponse>((resolve, reject) => {\n      this._sdk.coldXfer(dialDest, callerId, sipHeaders, (data) => {\n        if (data.status === 'OK') {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  // TODO: type\n  warmTransferCall({ dialDest, callerId = '', sipHeaders = [] }) {\n    return new Promise<EvWarmTransferCallResponse>((resolve, reject) => {\n      this._sdk.warmXfer(dialDest, callerId, sipHeaders, (data) => {\n        if (data.status === 'OK') {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  // TODO: type\n  coldTransferIntlCall({\n    dialDest,\n    callerId = '',\n    sipHeaders = [],\n    countryId = '',\n  }) {\n    return new Promise<EvColdTransferIntlCallResponse>((resolve, reject) => {\n      this._sdk.internationalColdXfer(\n        dialDest,\n        callerId,\n        sipHeaders,\n        countryId,\n        (data) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  // TODO: type\n  warmTransferIntlCall({\n    dialDest,\n    callerId = '',\n    sipHeaders = [],\n    countryId = '',\n  }) {\n    return new Promise<EvWarmTransferIntlCallResponse>((resolve, reject) => {\n      this._sdk.internationalWarmXfer(\n        dialDest,\n        callerId,\n        sipHeaders,\n        countryId,\n        (data) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  cancelWarmTransferCall(dialDest: string) {\n    // TODO callback\n    this._sdk.warmXferCancel(dialDest);\n  }\n\n  requeueCall({ queueId, skillId = '', maintain = false }: EvRequeueOption) {\n    return new Promise<EvRequeueCallResponse>((resolve, reject) => {\n      this._sdk.requeueCall(queueId, skillId, maintain, (data) => {\n        if (data.status === 'OK') {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  fetchDirectAgentList() {\n    return new Promise<EvDirectAgentListResponse>((resolve) => {\n      this._sdk.directAgentXferList((data) => {\n        resolve(data);\n      });\n    });\n  }\n\n  encodeUii({ uii, sessionId }: Partial<EvAddSessionNotification>) {\n    return `${uii}${this._encodeSymbol}${sessionId}`;\n  }\n\n  decodeUii(uii: string) {\n    return uii.split(this._encodeSymbol)[0];\n  }\n\n  /**\n   * get a main call session in some call session with some uii\n   * @param uii call uii\n   */\n  getMainId(uii: string) {\n    return this.encodeUii({\n      sessionId: '1',\n      uii,\n    });\n  }\n\n  rejectDirectAgentTransferCall(uii: string) {\n    this._sdk.rejectDirectAgentXfer(this.decodeUii(uii));\n  }\n\n  coldDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.coldDirectAgentXfer(targetAgentId);\n  }\n\n  warmDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.warmDirectAgentXfer(targetAgentId);\n  }\n\n  sendVoicemailDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.voicemailDirectAgentXfer(targetAgentId);\n  }\n\n  cancelDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.cancelDirectAgentXfer(targetAgentId);\n  }\n\n  get agentSettings() {\n    return this._sdk.getAgentSettings();\n  }\n\n  setAgentState(agentState: string, agentAuxState: string) {\n    return this._sdk.setAgentState(agentState, agentAuxState);\n  }\n\n  private _multiLoginRequest() {\n    return new Promise<any>((resolve, reject) => {\n      this._sdk.multiLoginRequest();\n      this.on(EvCallbackTypes.LOGIN, (data) => {\n        if (data.status === 'SUCCESS') {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n      this.on(EvCallbackTypes.GENERIC_NOTIFICATION, (data) => {\n        if (data.messageCode === '-99') {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  async multiLoginRequest() {\n    // temp solution, and wait for ev backend enhancement.\n    try {\n      await raceTimeout(this._multiLoginRequest());\n    } catch (error) {\n      throw new Error('30s timeout');\n    }\n  }\n\n  /**\n   * WebRTC related method\n   */\n  sipInit() {\n    this._sdk.sipInit();\n  }\n\n  sipAnswer() {\n    this._sdk.sipAnswer();\n  }\n\n  sipRegister() {\n    this._sdk.sipRegister();\n  }\n\n  sipHangUp() {\n    this._sdk.sipHangUp();\n  }\n\n  sipReject() {\n    this._sdk.sipReject();\n  }\n\n  sipSendDTMF(dtmf: string) {\n    this._sdk.sipSendDTMF(dtmf);\n  }\n\n  sipToggleMute(state: boolean) {\n    this._sdk.sipToggleMute(state);\n  }\n}\n\nexport { EvClient };\n"],"file":"EvClient.js"}