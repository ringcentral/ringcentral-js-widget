{"version":3,"sources":["lib/EvClient/EvClient.ts"],"names":["EvClient","name","deps","_sdk","_onOpen","_onClose","_Sdk","AgentLibrary","_options","_eventEmitter","EventEmitter","_callbacks","_deps","evClientOptions","options","callbacks","closeResponse","openResponse","res","setAppStatus","evStatus","CONNECTED","emit","EvCallbackTypes","OPEN_SOCKET","terminateStats","console","log","CLOSED","CLOSE_SOCKET","window","localStorage","authHost","getItem","type","listener","addListener","once","removeListener","Promise","resolve","loadCurrentCall","status","appStatus","setItem","location","reload","Sdk","ACK","eventType","callback","_callback","setCallbacks","getCallback","getRefreshedToken","engageAccessToken","LOGIN","authenticateAgentWithEngageAccessToken","response","dialDest","queueIds","chatIds","skillProfileId","dialGroupId","updateFromAdminUI","isForce","loginAgent","messageTypes","CONFIGURE_AGENT","data","dispId","notes","callbackDTS","leadId","requestId","externId","dispositionManualPass","uii","contactForwardNumber","survey","dispositionCall","decodeUii","rcAccessToken","tokenType","authenticateAgentWithRcAccessToken","accessToken","LOGINED","_agents","agents","map","agent","agentId","agentType","AGENT_TYPES","hasSupportWebSocket","EvTypeError","INVALID_BROWSER","addListenerByOnce","openSocket","getAgentConfig","authenticateAgent","timeout","onTimeout","authenticateResponse","CONNECT_TIMEOUT","message","CONNECT_ERROR","length","NO_AGENT","UNEXPECTED_AGENT","closeSocket","sessionId","resetPendingDisp","hangup","logoutAgent","result","destination","callerId","ringTime","countryId","queueId","manualOutdial","offhookInit","offhookTerm","holdState","hold","state","holdSession","sipHeaders","reject","coldXfer","warmXfer","internationalColdXfer","internationalWarmXfer","warmXferCancel","skillId","maintain","requeueCall","directAgentXferList","_encodeSymbol","encodeUii","split","rejectDirectAgentXfer","targetAgentId","coldDirectAgentXfer","warmDirectAgentXfer","voicemailDirectAgentXfer","cancelDirectAgentXfer","agentState","agentAuxState","setAgentState","multiLoginRequest","on","GENERIC_NOTIFICATION","messageCode","_multiLoginRequest","rej","Error","sipInit","sipAnswer","sipRegister","sipTerminate","sipHangUp","sipReject","dtmf","sipSendDTMF","sipToggleMute","scriptId","version","getScript","jsonResult","saveScriptResult","knowledgeBaseGroupIds","uiModel","_getUIModel","getInstance","HttpService","_HttpService","agentSettings","getAgentSettings","authenticateRequest","httpGet","accountId","headers","Authorization","queryParams","guid","JSON","parse","getCurrentCall","socket","RcModuleV2","START","action"],"mappings":"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","sourcesContent":["import { action, RcModuleV2, state } from '@ringcentral-integration/core';\n// eslint-disable-next-line import/no-unresolved\nimport AgentLibrary from '@SDK';\nimport { EventEmitter } from 'events';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { raceTimeout } from 'ringcentral-integration/lib/raceTimeout';\n\nimport { AGENT_TYPES, messageTypes } from '../../enums';\nimport { _encodeSymbol } from '../constant';\nimport { EvTypeError } from '../EvTypeError';\nimport { evStatus } from './enums';\nimport { EvCallbackTypes } from './enums/callbackTypes';\nimport {\n  Deps,\n  EvACKResponse,\n  EvAddSessionNotification,\n  EvAgentConfig,\n  EvAgentOptions,\n  EvAgentScriptResult,\n  EvAgentSettings,\n  EvAuthenticateAgentWithEngageAccessTokenRes,\n  EvAuthenticateAgentWithRcAccessTokenRes,\n  EvBaseCall,\n  EvClientCallMapping,\n  EvColdTransferCallResponse,\n  EvColdTransferIntlCallResponse,\n  EvConfigureAgentOptions,\n  EvDirectAgentListResponse,\n  EvDispositionCallOptions,\n  EvDispositionManualPassOptions,\n  EvLogoutAgentResponse,\n  EvMessageRes,\n  EvOpenSocketResult,\n  EvRequeueCallResponse,\n  EvRequeueOption,\n  EvScriptResponse,\n  EvTokenType,\n  EvWarmTransferCallResponse,\n  EvWarmTransferIntlCallResponse,\n  RawEvAuthenticateAgentWithRcAccessTokenRes,\n} from './interfaces';\n\ntype ListenerType = typeof EvCallbackTypes['OPEN_SOCKET' | 'CLOSE_SOCKET'];\n\ntype Listener<\n  T extends keyof EvClientCallMapping,\n  U extends EvClientCallMapping = EvClientCallMapping\n> = (res: U[T]) => void;\n\nexport type EvClientTransferParams = {\n  dialDest: string;\n  callerId?: string;\n  sipHeaders?: string[];\n  countryId?: string;\n};\n\nexport type EvClientHandUpParams = {\n  sessionId: string;\n  resetPendingDisp?: boolean;\n};\n\nexport type EvClientHoldSessionParams = {\n  state: boolean;\n  sessionId: string;\n};\n\nexport type EvClientManualOutdialParams = {\n  destination: string;\n  callerId: string;\n  ringTime: number;\n  queueId: string;\n  countryId: string;\n};\n\n@Module({\n  name: 'EvClient',\n  deps: ['EvClientOptions'],\n})\nclass EvClient extends RcModuleV2<Deps> {\n  /** SDK instance */\n  private _sdk: any;\n\n  private _onOpen: (response: EvClientCallMapping['openResponse']) => void;\n\n  private _onClose: () => void;\n\n  private _Sdk = AgentLibrary;\n\n  private _options: EvAgentOptions;\n\n  private _eventEmitter = new EventEmitter();\n\n  private _callbacks: Record<string, Function> = {};\n\n  @state\n  appStatus: string = evStatus.START;\n\n  constructor(deps: Deps) {\n    super({ deps });\n    this._options = this._deps.evClientOptions.options;\n    const {\n      closeResponse,\n      openResponse,\n    } = this._deps.evClientOptions.callbacks;\n    this._onOpen = (res) => {\n      this.setAppStatus(evStatus.CONNECTED);\n      openResponse(res);\n      this._eventEmitter.emit(EvCallbackTypes.OPEN_SOCKET, res);\n      // ensure for WebSocket keep-alive connection\n      this._sdk.terminateStats();\n    };\n    this._onClose = () => {\n      console.log('EvCallbackTypes.CLOSE_SOCKET~');\n      this.setAppStatus(evStatus.CLOSED);\n      closeResponse();\n      this._eventEmitter.emit(EvCallbackTypes.CLOSE_SOCKET);\n    };\n    // Used for toggle auth host about Engage Voice backend.\n    if (window.localStorage) {\n      const authHost = window.localStorage.getItem('__authHost__');\n      if (authHost) {\n        this._options.authHost = authHost;\n      }\n    }\n  }\n\n  addListener<T extends ListenerType>(type: T, listener: Listener<T>) {\n    this._eventEmitter.addListener(type, listener);\n  }\n\n  addListenerByOnce<T extends ListenerType>(type: T, listener: Listener<T>) {\n    this._eventEmitter.once(type, listener);\n  }\n\n  removeListener<T extends ListenerType>(\n    type: ListenerType,\n    listener: Listener<T>,\n  ) {\n    this._eventEmitter.removeListener(type, listener);\n  }\n\n  loadCurrentCall() {\n    return new Promise<EvBaseCall | void>((resolve) => {\n      this._sdk.loadCurrentCall(resolve);\n    });\n  }\n\n  get currentCall(): EvBaseCall {\n    return this._sdk.getCurrentCall();\n  }\n\n  @action\n  setAppStatus(status: string) {\n    this.appStatus = status;\n  }\n\n  setEnv(authHost: string) {\n    if (window.localStorage) {\n      window.localStorage.setItem('__authHost__', authHost);\n      window.location.reload();\n    }\n  }\n\n  setSIPNoLog(authHost: string) {\n    if (window.localStorage) {\n      window.localStorage.setItem('__SIP_NO_LOG__', authHost);\n      window.location.reload();\n    }\n  }\n\n  initSDK() {\n    console.log('initSDK');\n    const { _Sdk: Sdk } = this;\n    this._sdk = new Sdk({\n      callbacks: {\n        ...this._callbacks,\n        [EvCallbackTypes.CLOSE_SOCKET]: this._onClose,\n        [EvCallbackTypes.OPEN_SOCKET]: this._onOpen,\n        [EvCallbackTypes.ACK]: (res: EvACKResponse) => {\n          this._eventEmitter.emit(EvCallbackTypes.ACK, res);\n        },\n      },\n      ...this._options,\n    });\n  }\n\n  on(eventType: string, callback: (...args: any[]) => void) {\n    const _callback = {\n      [eventType]: (...args: any[]) => callback(...args),\n    };\n\n    this._sdk.setCallbacks(_callback);\n    this._callbacks = {\n      ...this._callbacks,\n      ..._callback,\n    };\n  }\n\n  getEventCallback(eventType: string) {\n    return this._sdk.getCallback(eventType);\n  }\n\n  getRefreshedToken() {\n    this._sdk.getRefreshedToken();\n  }\n\n  authenticateAgentWithEngageAccessToken(engageAccessToken: string) {\n    return new Promise<EvAuthenticateAgentWithEngageAccessTokenRes>(\n      (resolve) => {\n        this.setAppStatus(evStatus.LOGIN);\n        this._sdk.authenticateAgentWithEngageAccessToken(\n          engageAccessToken,\n          (response: EvAuthenticateAgentWithEngageAccessTokenRes) => {\n            resolve(response);\n          },\n        );\n      },\n    );\n  }\n\n  configureAgent({\n    dialDest,\n    queueIds,\n    chatIds,\n    skillProfileId,\n    dialGroupId,\n    updateFromAdminUI = false,\n    isForce = false,\n  }: EvConfigureAgentOptions) {\n    return new Promise<EvMessageRes>((resolve) => {\n      this._sdk.loginAgent(\n        dialDest,\n        queueIds,\n        chatIds,\n        skillProfileId,\n        dialGroupId,\n        updateFromAdminUI,\n        isForce,\n        (res: any) => {\n          resolve({\n            type: messageTypes.CONFIGURE_AGENT,\n            data: res,\n          });\n        },\n      );\n    });\n  }\n\n  dispositionManualPass({\n    dispId,\n    notes,\n    callbackDTS,\n    leadId,\n    requestId,\n    externId,\n  }: EvDispositionManualPassOptions) {\n    return new Promise<EvDispositionManualPassOptions>((resolve) => {\n      this._sdk.dispositionManualPass(\n        dispId,\n        notes,\n        (response: EvDispositionManualPassOptions) => {\n          resolve(response);\n        },\n        callbackDTS,\n        leadId,\n        requestId,\n        externId,\n      );\n    });\n  }\n\n  dispositionCall({\n    uii,\n    dispId = '',\n    notes = '',\n    callback,\n    callbackDTS,\n    contactForwardNumber,\n    survey,\n    externId,\n    leadId,\n    requestId = '',\n  }: EvDispositionCallOptions) {\n    return this._sdk.dispositionCall(\n      this.decodeUii(uii),\n      dispId,\n      notes,\n      callback,\n      callbackDTS,\n      contactForwardNumber,\n      survey,\n      externId,\n      leadId,\n      requestId,\n    );\n  }\n\n  authenticateAgent(rcAccessToken: string, tokenType: EvTokenType) {\n    return new Promise<EvAuthenticateAgentWithRcAccessTokenRes>((resolve) => {\n      this.setAppStatus(evStatus.LOGIN);\n      this._sdk.authenticateAgentWithRcAccessToken(\n        rcAccessToken,\n        tokenType,\n        async (res: RawEvAuthenticateAgentWithRcAccessTokenRes) => {\n          // here just auth with engage access token, not need handle response data, that handle by Agent SDK.\n          await this.authenticateAgentWithEngageAccessToken(res.accessToken);\n\n          this.setAppStatus(evStatus.LOGINED);\n          const _agents = (res || {}).agents || [];\n          const agents = _agents.map((agent) => ({\n            ...agent,\n            agentId: agent && agent.agentId ? `${agent.agentId}` : '',\n            agentType: AGENT_TYPES[agent.agentType],\n          }));\n          resolve({\n            ...res,\n            agents,\n          });\n        },\n      );\n    });\n  }\n\n  openSocket(agentId: string) {\n    const hasSupportWebSocket = 'WebSocket' in window;\n    if (!hasSupportWebSocket) {\n      throw new EvTypeError({\n        type: messageTypes.INVALID_BROWSER,\n      });\n    }\n    return new Promise<EvOpenSocketResult>((resolve) => {\n      this.addListenerByOnce(EvCallbackTypes.OPEN_SOCKET, (res) => {\n        resolve(res);\n      });\n      this._sdk.openSocket(agentId);\n    });\n  }\n\n  getAgentConfig() {\n    return new Promise<EvAgentConfig>((resolve) => {\n      this._sdk.getAgentConfig((res: EvAgentConfig) => {\n        resolve(res);\n      });\n    });\n  }\n\n  async getAndHandleAuthenticateResponse(\n    rcAccessToken: string,\n    tokenType: EvTokenType,\n  ) {\n    const authenticateResponse = await raceTimeout(\n      this.authenticateAgent(rcAccessToken, tokenType),\n      {\n        timeout: 120 * 1000,\n        onTimeout: (resolve) => resolve(null),\n      },\n    );\n    if (!authenticateResponse) {\n      throw new EvTypeError({\n        type: messageTypes.CONNECT_TIMEOUT,\n      });\n    }\n    if (\n      authenticateResponse.type === 'Authenticate Error' ||\n      authenticateResponse.message\n    ) {\n      throw new EvTypeError({\n        type: messageTypes.CONNECT_ERROR,\n        data: authenticateResponse.message,\n      });\n    }\n    if (\n      !authenticateResponse ||\n      !authenticateResponse.agents ||\n      !authenticateResponse.agents.length\n    ) {\n      throw new EvTypeError({\n        type: messageTypes.NO_AGENT,\n      });\n    }\n    if (\n      !authenticateResponse.agents[0] ||\n      !authenticateResponse.agents[0].agentId\n    ) {\n      throw new EvTypeError({\n        type: messageTypes.UNEXPECTED_AGENT,\n      });\n    }\n    return authenticateResponse;\n  }\n\n  /**\n   * when manual close socket, that closeSocket will auto reconnected by agent SDK\n   */\n  closeSocket() {\n    this._sdk.closeSocket();\n  }\n\n  get ifSocketExist() {\n    return !!this._sdk.socket;\n  }\n\n  hangup({ sessionId, resetPendingDisp = false }: EvClientHandUpParams) {\n    return this._sdk.hangup(sessionId, resetPendingDisp);\n  }\n\n  logoutAgent(agentId: string) {\n    return new Promise<EvLogoutAgentResponse>((resolve) => {\n      this._sdk.logoutAgent(agentId, (result: EvLogoutAgentResponse) => {\n        resolve(result);\n      });\n    });\n  }\n\n  manualOutdial({\n    destination,\n    callerId,\n    ringTime,\n    countryId,\n    queueId,\n  }: EvClientManualOutdialParams) {\n    return this._sdk.manualOutdial(\n      destination,\n      callerId,\n      ringTime,\n      countryId,\n      queueId,\n    );\n  }\n\n  offhookInit() {\n    // we using EvCallbackTypes.OFFHOOK_INIT to catch data, do not pass callback,\n    // that will make the message not come back\n    this._sdk.offhookInit();\n  }\n\n  offhookTerm() {\n    this._sdk.offhookTerm();\n  }\n\n  hold(holdState: boolean) {\n    this._sdk.hold(holdState);\n  }\n\n  holdSession({ state, sessionId }: EvClientHoldSessionParams) {\n    this._sdk.holdSession(state, sessionId);\n  }\n\n  coldTransferCall({\n    dialDest,\n    callerId = '',\n    sipHeaders = [],\n  }: EvClientTransferParams) {\n    return new Promise<EvColdTransferCallResponse>((resolve, reject) => {\n      this._sdk.coldXfer(\n        dialDest,\n        callerId,\n        sipHeaders,\n        (data: EvColdTransferCallResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  warmTransferCall({\n    dialDest,\n    callerId = '',\n    sipHeaders = [],\n  }: EvClientTransferParams) {\n    return new Promise<EvWarmTransferCallResponse>((resolve, reject) => {\n      this._sdk.warmXfer(\n        dialDest,\n        callerId,\n        sipHeaders,\n        (data: EvWarmTransferCallResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  coldTransferIntlCall({\n    dialDest,\n    callerId = '',\n    sipHeaders = [],\n    countryId = '',\n  }: EvClientTransferParams) {\n    return new Promise<EvColdTransferIntlCallResponse>((resolve, reject) => {\n      this._sdk.internationalColdXfer(\n        dialDest,\n        callerId,\n        sipHeaders,\n        countryId,\n        (data: EvColdTransferIntlCallResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  warmTransferIntlCall({\n    dialDest,\n    callerId = '',\n    sipHeaders = [],\n    countryId = '',\n  }: EvClientTransferParams) {\n    return new Promise<EvWarmTransferIntlCallResponse>((resolve, reject) => {\n      this._sdk.internationalWarmXfer(\n        dialDest,\n        callerId,\n        sipHeaders,\n        countryId,\n        (data: EvWarmTransferIntlCallResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  cancelWarmTransferCall(dialDest: string) {\n    this._sdk.warmXferCancel(dialDest);\n  }\n\n  requeueCall({ queueId, skillId = '', maintain = false }: EvRequeueOption) {\n    return new Promise<EvRequeueCallResponse>((resolve, reject) => {\n      this._sdk.requeueCall(\n        queueId,\n        skillId,\n        maintain,\n        (data: EvRequeueCallResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  fetchDirectAgentList() {\n    return new Promise<EvDirectAgentListResponse>((resolve) => {\n      this._sdk.directAgentXferList((data: EvDirectAgentListResponse) => {\n        resolve(data);\n      });\n    });\n  }\n\n  encodeUii({ uii, sessionId }: Partial<EvAddSessionNotification>) {\n    return `${uii}${_encodeSymbol}${sessionId}`;\n  }\n\n  /**\n   * replace sessionId with _encodeSymbol when ringing\n   * @param _encodeSymbol '$'\n   */\n  encodeRingingUii({ uii }: EvBaseCall) {\n    return this.encodeUii({\n      uii: this.decodeUii(uii),\n      sessionId: _encodeSymbol,\n    });\n  }\n\n  decodeUii(uii: string) {\n    return uii.split(_encodeSymbol)[0];\n  }\n\n  /**\n   * get a main call session in some call session with some uii\n   * @param uii call uii\n   */\n  getMainId(uii: string) {\n    return this.encodeUii({\n      sessionId: '1',\n      uii,\n    });\n  }\n\n  rejectDirectAgentTransferCall(uii: string) {\n    this._sdk.rejectDirectAgentXfer(this.decodeUii(uii));\n  }\n\n  coldDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.coldDirectAgentXfer(targetAgentId);\n  }\n\n  warmDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.warmDirectAgentXfer(targetAgentId);\n  }\n\n  sendVoicemailDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.voicemailDirectAgentXfer(targetAgentId);\n  }\n\n  cancelDirectAgentTransfer(targetAgentId: string) {\n    this._sdk.cancelDirectAgentXfer(targetAgentId);\n  }\n\n  setAgentState(agentState: string, agentAuxState: string) {\n    return this._sdk.setAgentState(agentState, agentAuxState);\n  }\n\n  private _multiLoginRequest() {\n    return new Promise<any>((resolve, reject) => {\n      this._sdk.multiLoginRequest();\n      this.on(EvCallbackTypes.LOGIN, (data) => {\n        if (data.status === 'SUCCESS') {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n      this.on(EvCallbackTypes.GENERIC_NOTIFICATION, (data) => {\n        if (data.messageCode === '-99') {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  async multiLoginRequest() {\n    // temp solution, and wait for ev backend enhancement.\n    try {\n      await raceTimeout(this._multiLoginRequest(), {\n        onTimeout: (res, rej) => rej(),\n      });\n    } catch (error) {\n      throw new Error('_multiLoginRequest fail or 30s timeout');\n    }\n  }\n\n  /**\n   * WebRTC related method\n   */\n  sipInit() {\n    this._sdk.sipInit();\n  }\n\n  sipAnswer() {\n    this._sdk.sipAnswer();\n  }\n\n  sipRegister() {\n    this._sdk.sipRegister();\n  }\n\n  sipTerminate() {\n    this._sdk.sipTerminate();\n  }\n\n  sipHangUp() {\n    this._sdk.sipHangUp();\n  }\n\n  sipReject() {\n    this._sdk.sipReject();\n  }\n\n  sipSendDTMF(dtmf: string) {\n    this._sdk.sipSendDTMF(dtmf);\n  }\n\n  sipToggleMute(state: boolean) {\n    this._sdk.sipToggleMute(state);\n  }\n\n  /**\n   * AgentScript related method\n   */\n  getScript(scriptId: string, version: string) {\n    return new Promise<EvScriptResponse>((resolve, reject) => {\n      this._sdk.getScript(scriptId, version, (res: EvScriptResponse) => {\n        if (res.status) {\n          resolve(res);\n        }\n      });\n    });\n  }\n\n  async saveScriptResult(\n    uii: string,\n    scriptId: string,\n    jsonResult: EvAgentScriptResult,\n  ) {\n    this._sdk.saveScriptResult(uii, scriptId, jsonResult);\n\n    return jsonResult;\n  }\n\n  /**\n   * GET - /voice/api/v1/agent/:accountId/knowledgeBaseGroups\n      params:\n      accountId: AgentSvc.agentSettings.accountId,\n      guid: AgentSvc.agentSettings.guid,\n      knowledgeBaseGroupIds: knowledgeBaseGroupIds\n\n      knowledgeBaseGroupIds = comma list of all groups you care about\n   */\n  async getKnowledgeBaseGroups(knowledgeBaseGroupIds: number[]) {\n    this.getRefreshedToken();\n\n    const uiModel = this._sdk._getUIModel().getInstance();\n    const HttpService = this._sdk._HttpService;\n\n    const agentSettings: EvAgentSettings = this._sdk.getAgentSettings();\n    const engageAccessToken = `Bearer ${uiModel.authenticateRequest.engageAccessToken}`;\n\n    try {\n      const { status, response } = await new HttpService(\n        `${uiModel.authHost}/voice/api/v1/`,\n      ).httpGet(`agent/${agentSettings.accountId}/knowledgeBaseGroups`, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: engageAccessToken,\n        },\n        queryParams: {\n          guid: agentSettings.guid,\n          knowledgeBaseGroupIds,\n        },\n      });\n\n      if (status === 200) {\n        return JSON.parse(response);\n      }\n    } catch (error) {\n      console.log('getKnowledgeBaseGroups fail');\n    }\n    return null;\n  }\n}\n\nexport { EvClient };\n"],"file":"EvClient.js"}