{"version":3,"sources":["lib/AdapterModuleCore/index.js"],"names":["ALL_CALL_PATH","ACTIVE_CALL_PATH","AdapterModuleCore","deps","dep","optional","prefix","storageKey","actionTypes","baseActionTypes","callingSettings","globalStorage","locale","presence","routerInteraction","webphone","callMonitor","userGuide","quickAccess","messageTransport","IframeMessageTransport","targetWindow","window","parent","options","_callingSettings","_webphone","_callMonitor","_userGuide","_quickAccess","_pushRingState","forcePush","ready","_postMessage","type","_messageTypes","pushLocale","strings","localeStrings","callingMode","callingModes","Error","ringSession","ringSessionId","_ringSessionId","pushRingState","ringing","ringingSessions","sessions","filter","session","callStatus","direction","length","ringingCallsLength","activeRingCalls","onHoldCallsLength","activeOnHoldCalls","currentStartTime","activeCurrentCalls","startTime","_lastRingCallsLength","_lastOnHoldCallsLength","_lastCurrentStartTime","pushCalls","_showIncomingCallPage","minimized","_lastPath","_router","currentPath","_lastShowIncomingCallPage","onCurrentCallPath","activeSessionId","pushOnCurrentCallPath","onAllCallsPath","pushOnAllCallsPath","status","_presence","telephonyStatus","_telephonyStatus","currentSession","activeSession","currentCallPath","id","push","started","dismiss","entered","exit","toggleMinimized","AdapterModuleCoreBase","selector","_locale","currentLocale","localeReady","ringCallsInfo","headerI18n","getString","numberOf","onHoldCallsInfo","availableBtn","presenceItemI18n","presenceStatus","available","busyBtn","busy","offlineBtn","offline","doNotAcceptAnyCallsBtn","dndStatus","doNotAcceptAnyCalls","currentCallBtn","viewCallsBtn","proxify"],"mappings":"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","sourcesContent":["import formatMessage from 'format-message';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport proxify from 'ringcentral-integration/lib/proxy/proxify';\nimport presenceStatus from 'ringcentral-integration/modules/Presence/presenceStatus';\nimport dndStatus from 'ringcentral-integration/modules/Presence/dndStatus';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport { selector } from 'ringcentral-integration/lib/selector';\n\nimport IframeMessageTransport from '../IframeMessageTransport';\nimport headerI18n from '../../components/CallMonitorBar/i18n';\nimport presenceItemI18n from '../../components/PresenceItem/i18n';\nimport AdapterModuleCoreBase from '../AdapterModuleCoreBase';\nimport baseActionTypes from '../AdapterModuleCoreBase/baseActionTypes';\n\nconst ALL_CALL_PATH = '/calls';\nconst ACTIVE_CALL_PATH = '/calls/active';\n\n@Module({\n  deps: [\n    'CallingSettings',\n    'GlobalStorage',\n    'Locale',\n    'Presence',\n    'RouterInteraction',\n    'Storage',\n    'Webphone',\n    'CallMonitor',\n    { dep: 'UserGuide', optional: true },\n    { dep: 'QuickAccess', optional: true },\n  ],\n})\nexport default class AdapterModuleCore extends AdapterModuleCoreBase {\n  constructor({\n    prefix,\n    storageKey = 'adapterCore',\n    actionTypes = baseActionTypes,\n    callingSettings,\n    globalStorage,\n    locale,\n    presence,\n    routerInteraction,\n    webphone,\n    callMonitor,\n    userGuide,\n    quickAccess,\n    messageTransport = new IframeMessageTransport({\n      targetWindow: window.parent,\n    }),\n    ...options\n  }) {\n    super({\n      prefix,\n      actionTypes,\n      locale,\n      messageTransport,\n      presence,\n      routerInteraction,\n      globalStorage,\n      storageKey,\n      ...options,\n    });\n\n    this._callingSettings = callingSettings;\n    this._webphone = webphone;\n    this._callMonitor = callMonitor;\n    this._userGuide = userGuide;\n    this._quickAccess = quickAccess;\n  }\n\n  _pushOtherStateChanges() {\n    this._pushRingState();\n  }\n\n  _pushRingState({ forcePush = false } = {}) {\n    if (!this.ready) return;\n\n    // TODO: we should refactor the entire sync logic to be more\n    // declarative and straightforward\n    if (forcePush) {\n      this._postMessage({\n        type: this._messageTypes.pushLocale,\n        strings: this.localeStrings,\n      });\n    }\n\n    if (!this._callingSettings) return;\n\n    const { callingMode } = this._callingSettings;\n    if (callingMode === callingModes.webphone) {\n      const webphone = this._webphone;\n      if (!webphone) {\n        throw new Error(\n          'webphone is a required dependency for monitoring WebRTC call',\n        );\n      }\n      if (\n        webphone.ringSession &&\n        (webphone.ringSessionId !== this._ringSessionId || forcePush)\n      ) {\n        this._ringSessionId = webphone.ringSessionId;\n        this._postMessage({\n          type: this._messageTypes.pushRingState,\n          ringing: true,\n        });\n      }\n      // Check if ringing is over\n      if (this._ringSessionId) {\n        const ringingSessions = webphone.sessions.filter(\n          (session) =>\n            session.callStatus === 'webphone-session-connecting' &&\n            session.direction === 'Inbound',\n        );\n        if (ringingSessions.length <= 0) {\n          this._postMessage({\n            type: this._messageTypes.pushRingState,\n            ringing: false,\n          });\n          this._ringSessionId = null;\n        }\n      }\n      const ringingCallsLength = this._callMonitor.activeRingCalls.length;\n      const onHoldCallsLength = this._callMonitor.activeOnHoldCalls.length;\n      const currentStartTime =\n        (this._callMonitor.activeCurrentCalls &&\n          this._callMonitor.activeCurrentCalls.length > 0 &&\n          this._callMonitor.activeCurrentCalls[0].startTime) ||\n        0;\n      if (\n        forcePush ||\n        this._lastRingCallsLength !== ringingCallsLength ||\n        this._lastOnHoldCallsLength !== onHoldCallsLength ||\n        this._lastCurrentStartTime !== currentStartTime\n      ) {\n        this._lastRingCallsLength = ringingCallsLength;\n        this._lastOnHoldCallsLength = onHoldCallsLength;\n        this._lastCurrentStartTime = currentStartTime;\n        this._postMessage({\n          type: this._messageTypes.pushCalls,\n          ringingCallsLength,\n          onHoldCallsLength,\n          currentStartTime,\n        });\n        this._postMessage({\n          type: this._messageTypes.pushLocale,\n          strings: this.localeStrings,\n        });\n      }\n      this._showIncomingCallPage = !!(\n        this._webphone &&\n        this._webphone.ringSession &&\n        !this._webphone.ringSession.minimized\n      );\n      if (\n        forcePush ||\n        this._lastPath !== this._router.currentPath ||\n        this._lastShowIncomingCallPage !== this._showIncomingCallPage\n      ) {\n        this._lastPath = this._router.currentPath;\n        this._lastShowIncomingCallPage = this._showIncomingCallPage;\n        const onCurrentCallPath =\n          (this._router.currentPath === ACTIVE_CALL_PATH ||\n            this._router.currentPath ===\n              `${ACTIVE_CALL_PATH}/${this._webphone.activeSessionId}`) &&\n          !this._showIncomingCallPage;\n        if (\n          forcePush ||\n          this.onCurrentCallPath !== onCurrentCallPath ||\n          this._lastShowIncomingCallPage !== this._showIncomingCallPage\n        ) {\n          this.onCurrentCallPath = onCurrentCallPath;\n          this._lastShowIncomingCallPage = this._showIncomingCallPage;\n          this._postMessage({\n            type: this._messageTypes.pushOnCurrentCallPath,\n            onCurrentCallPath,\n          });\n        }\n        const onAllCallsPath =\n          this._router.currentPath === ALL_CALL_PATH &&\n          !this._showIncomingCallPage;\n        if (forcePush || this.onAllCallsPath !== onAllCallsPath) {\n          this.onAllCallsPath = onAllCallsPath;\n          this._postMessage({\n            type: this._messageTypes.pushOnAllCallsPath,\n            onAllCallsPath,\n          });\n        }\n      }\n    } else {\n      const status = this._presence.telephonyStatus;\n      if (this._presence.telephonyStatus !== this._telephonyStatus) {\n        this._postMessage({\n          type: this._messageTypes.pushRingState,\n          ringing: status === 'Ringing',\n        });\n        this._telephonyStatus = status;\n      }\n    }\n  }\n\n  @selector\n  localeStrings = [\n    () => this._locale.ready,\n    () => this._locale.currentLocale,\n    () => this._callMonitor.activeRingCalls.length,\n    () => this._callMonitor.activeOnHoldCalls.length,\n    (localeReady, currentLocale, ringingCallsLength, onHoldCallsLength) => {\n      const ringCallsInfo =\n        ringingCallsLength === 1\n          ? formatMessage(headerI18n.getString('incomingCall', currentLocale), {\n              numberOf: ringingCallsLength,\n            })\n          : formatMessage(\n              headerI18n.getString('incomingCalls', currentLocale),\n              { numberOf: ringingCallsLength },\n            );\n      const onHoldCallsInfo =\n        onHoldCallsLength === 1\n          ? formatMessage(headerI18n.getString('callOnHold', currentLocale), {\n              numberOf: onHoldCallsLength,\n            })\n          : formatMessage(headerI18n.getString('callsOnHold', currentLocale), {\n              numberOf: onHoldCallsLength,\n            });\n      const availableBtn = presenceItemI18n.getString(\n        presenceStatus.available,\n        currentLocale,\n      );\n      const busyBtn = presenceItemI18n.getString(\n        presenceStatus.busy,\n        currentLocale,\n      );\n      const offlineBtn = presenceItemI18n.getString(\n        presenceStatus.offline,\n        currentLocale,\n      );\n      const doNotAcceptAnyCallsBtn = presenceItemI18n.getString(\n        dndStatus.doNotAcceptAnyCalls,\n        currentLocale,\n      );\n      return {\n        currentCallBtn: headerI18n.getString('currentCall', currentLocale),\n        viewCallsBtn: headerI18n.getString('viewCalls', currentLocale),\n        ringCallsInfo,\n        onHoldCallsInfo,\n        availableBtn,\n        busyBtn,\n        offlineBtn,\n        doNotAcceptAnyCallsBtn,\n      };\n    },\n  ];\n\n  @proxify\n  async _onNavigateToCurrentCall() {\n    const currentSession = this._webphone.activeSession;\n    if (currentSession) {\n      const currentCallPath = `${ACTIVE_CALL_PATH}/${currentSession.id}`;\n      this._router.push(currentCallPath);\n    }\n    if (this._userGuide && this._userGuide.started) {\n      this._userGuide.dismiss();\n    }\n    if (this._quickAccess && this._quickAccess.entered) {\n      this._quickAccess.exit();\n    }\n    if (\n      this._webphone &&\n      this._webphone.ringSession &&\n      !this._webphone.ringSession.minimized\n    ) {\n      this._webphone.toggleMinimized(this._webphone.ringSession.id);\n    }\n  }\n\n  @proxify\n  async _onNavigateToViewCalls() {\n    this._router.push(ALL_CALL_PATH);\n    if (this._userGuide && this._userGuide.started) {\n      this._userGuide.dismiss();\n    }\n    if (this._quickAccess && this._quickAccess.entered) {\n      this._quickAccess.exit();\n    }\n    if (\n      this._webphone &&\n      this._webphone.ringSession &&\n      !this._webphone.ringSession.minimized\n    ) {\n      this._webphone.toggleMinimized(this._webphone.ringSession.id);\n    }\n  }\n}\n"],"file":"index.js"}