{"version":3,"sources":["lib/contactMatchIdentify.ts"],"names":["separator","contactMatchIdentifyEncode","phoneNumber","callType","toLocaleLowerCase","contactMatchIdentifyDecode","identify","split"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAMA,SAAS,GAAG,GAAlB;;AAEO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B;AAAA,MACxCC,WADwC,QACxCA,WADwC;AAAA,MAExCC,QAFwC,QAExCA,QAFwC;AAAA,SAIxC,UAAGD,WAAH,SAAiBF,SAAjB,SAA6BG,QAA7B,EAAwCC,iBAAxC,EAJwC;AAAA,CAAnC;;;;AAMA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,QAAD,EAAsB;AAAA,cAC9BA,QAAQ,CAACC,KAAT,CAAeP,SAAf,CAD8B;AAAA;AAAA,MACvDE,WADuD;AAAA,MAC1CC,QAD0C;;AAK9D,SAAO;AAAED,IAAAA,WAAW,EAAXA,WAAF;AAAeC,IAAAA,QAAQ,EAARA;AAAf,GAAP;AACD,CANM","sourcesContent":["interface ContactMatchQuery<T> {\n  phoneNumber: string;\n  callType: T;\n}\n\ntype CallTypeRaw = 'INBOUND' | 'OUTBOUND' | 'INTERNAL';\n\ntype CallType = 'inbound' | 'outbound' | 'internal';\n\nconst separator = '_';\n\nexport const contactMatchIdentifyEncode = ({\n  phoneNumber,\n  callType,\n}: ContactMatchQuery<CallTypeRaw | CallType>) =>\n  `${phoneNumber}${separator}${callType}`.toLocaleLowerCase();\n\nexport const contactMatchIdentifyDecode = (identify: string) => {\n  const [phoneNumber, callType] = identify.split(separator) as [\n    ContactMatchQuery<CallType>['phoneNumber'],\n    ContactMatchQuery<CallType>['callType'],\n  ];\n  return { phoneNumber, callType };\n};\n"],"file":"contactMatchIdentify.js"}