{"version":3,"sources":["lib/StorageBaseV2/StorageBase.ts"],"names":["StorageBase","name","deps","dep","optional","storageBaseOptions","_storage","_storageReducers","_storageReducer","_StorageProvider","_storageActionTypes","Error","StorageProvider","SynchronizedStorage","ObjectMap","prefixKeys","keys","actionTypesBase","types","reducers","actionTypes","data","__status__","key","reducer","_store","getState","__key__","ready","driver","_deps","prefix","RcModuleV2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMsBA,W,WAJrB,gBAAO;AACNC,EAAAA,IAAI,EAAE,aADA;AAENC,EAAAA,IAAI,EAAE,CAAC;AAAEC,IAAAA,GAAG,EAAE,QAAP;AAAiBC,IAAAA,QAAQ,EAAE;AAA3B,GAAD;AAFA,CAAP,C;;;;;AAWC,uBAAYF,IAAZ,EAAwBG,kBAAxB,EAAgE;AAAA;;AAAA;;AAAA;;AAC9D,8BAAM;AACJH,MAAAA,IAAI,EAAJA;AADI,KAAN;AAD8D,UAN7CI,QAM6C;AAAA,UALtDC,gBAKsD,GALhB,EAKgB;AAAA,UAJtDC,eAIsD;AAAA,UAHtDC,gBAGsD;AAAA,UAFtDC,mBAEsD;;AAI9D,QAAI,CAACL,kBAAkB,CAACJ,IAAxB,EAA8B;AAC5B,YAAM,IAAIU,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,UAAKF,gBAAL,4BACEJ,kBAAkB,CAACO,eADrB,yEACwCC,wCADxC;AAEA,UAAKH,mBAAL,GAA2BI,qBAAUC,UAAV,oBACrBD,qBAAUE,IAAV,CAAeC,gCAAf,CADqB,GAEzBZ,kBAAkB,CAACJ,IAFM,CAA3B;AAIA,UAAKO,eAAL,GAAuB,uCAAe;AACpCU,MAAAA,KAAK,EAAE,MAAKR,mBADwB;AAEpCS,MAAAA,QAAQ,EAAE,MAAKZ;AAFqB,KAAf,CAAvB;AAb8D;AAiB/D;;;;gCAEkBa,W,EAAqC;AACtD,0HACuBA,WADvB;AAEEC,QAAAA,IAAI,EAAE,KAAKb,eAFb;AAGEc,QAAAA,UAAU,EAAE,wCAAuB,KAAKZ,mBAA5B;AAHd;AAKD;;;;AAMD;AACF;AACA;0CACuE;AAAA,UAAnDa,GAAmD,QAAnDA,GAAmD;AAAA,UAA9CC,OAA8C,QAA9CA,OAA8C;;AACnE,UAAI,KAAKjB,gBAAL,CAAsBgB,GAAtB,CAAJ,EAAgC;AAC9B,cAAM,IAAIZ,KAAJ,4BAA8BY,GAA9B,sBAAN;AACD;;AACD,WAAKhB,gBAAL,CAAsBgB,GAAtB,IAA6BC,OAA7B;AACD;;;4BAEOD,G,EAAa;AACnB,aAAO,KAAKF,IAAL,CAAUE,GAAV,CAAP;AACD;;;wBAhBmC;AAClC,aAAO,KAAKE,MAAL,CAAYC,QAAZ,GAAuB,KAAKC,OAA5B,EAAqCN,IAA5C;AACD;;;wBAgBY;AACX,UAAI,KAAKO,KAAT,EAAgB;AACd,eAAO,KAAKtB,QAAL,CAAcuB,MAArB;AACD;;AACD,aAAO,IAAP;AACD;;;wBAEY;AACX,aAAO,KAAKC,KAAL,CAAWC,MAAlB;AACD;;;;EA7D0CC,gB","sourcesContent":["import { ObjectMap } from '@ringcentral-integration/core/lib/ObjectMap';\nimport { Reducer, ReducersMapObject } from 'redux';\nimport { RcModuleV2, state } from '@ringcentral-integration/core';\nimport { SynchronizedStorage } from '../SynchronizedStorage';\nimport { actionTypesBase, ActionTypesBase } from './actionTypesBase';\nimport { getDataReducer } from './getStorageReducer';\nimport { Module } from '../di';\nimport {\n  Deps,\n  IStorage,\n  StorageBaseOptions,\n  IStorageBaseOptions,\n} from './StorageBase.interface';\nimport getModuleStatusReducer from '../getModuleStatusReducer';\n\n@Module({\n  name: 'StorageBase',\n  deps: [{ dep: 'Prefix', optional: true }],\n})\nexport abstract class StorageBase<T> extends RcModuleV2<Deps & T> {\n  protected abstract _storage: IStorage;\n  protected _storageReducers: ReducersMapObject = {};\n  protected _storageReducer: Reducer;\n  protected _StorageProvider: IStorageBaseOptions['StorageProvider'];\n  protected _storageActionTypes: ActionTypesBase;\n\n  constructor(deps: Deps, storageBaseOptions: StorageBaseOptions) {\n    super({\n      deps,\n    });\n    if (!storageBaseOptions.name) {\n      throw new Error('name must be defined');\n    }\n    this._StorageProvider =\n      storageBaseOptions.StorageProvider ?? SynchronizedStorage;\n    this._storageActionTypes = ObjectMap.prefixKeys(\n      [...ObjectMap.keys(actionTypesBase)],\n      storageBaseOptions.name,\n    );\n    this._storageReducer = getDataReducer({\n      types: this._storageActionTypes,\n      reducers: this._storageReducers,\n    });\n  }\n\n  public getReducers(actionTypes: Record<string, string>) {\n    return {\n      ...super.getReducers(actionTypes),\n      data: this._storageReducer,\n      __status__: getModuleStatusReducer(this._storageActionTypes),\n    };\n  }\n\n  get data(): Record<string, unknown> {\n    return this._store.getState()[this.__key__].data;\n  }\n\n  /**\n   * register storage reducer\n   */\n  registerReducer({ key, reducer }: { key: string; reducer: Reducer }) {\n    if (this._storageReducers[key]) {\n      throw new Error(`Reducer of key: '${key}' already exists`);\n    }\n    this._storageReducers[key] = reducer;\n  }\n\n  getItem(key: string) {\n    return this.data[key];\n  }\n\n  get driver() {\n    if (this.ready) {\n      return this._storage.driver;\n    }\n    return null;\n  }\n\n  get prefix() {\n    return this._deps.prefix;\n  }\n}\n"],"file":"StorageBase.js"}