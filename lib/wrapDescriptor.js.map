{"version":3,"sources":["lib/wrapDescriptor.ts"],"names":["wrapDescriptor","descriptor","fn","wrappedDescriptor","get","call","set","value","args","initializer","target"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AAMe,SAASA,cAAT,CACbC,UADa,EAEbC,EAFa,EAGb;AACA,MAAMC,iBAAiB,qBAClBF,UADkB,CAAvB;;AAGA,MAAIA,UAAU,CAACG,GAAf,EAAoB;AAClBD,IAAAA,iBAAiB,CAACC,GAAlB,GAAwB,SAASA,GAAT,GAAe;AACrCF,MAAAA,EAAE,CAACG,IAAH,CAAQ,IAAR;AACA,aAAOJ,UAAU,CAACG,GAAX,CAAeC,IAAf,CAAoB,IAApB,CAAP;AACD,KAHD;AAID;;AACD,MAAIJ,UAAU,CAACK,GAAf,EAAoB;AAClBH,IAAAA,iBAAiB,CAACG,GAAlB,GAAwB,SAASA,GAAT,CAAaC,KAAb,EAAoB;AAC1CL,MAAAA,EAAE,CAACG,IAAH,CAAQ,IAAR;AACA,aAAOJ,UAAU,CAACK,GAAX,CAAeD,IAAf,CAAoB,IAApB,EAA0BE,KAA1B,CAAP;AACD,KAHD;AAID;;AACD,MAAIN,UAAU,CAACM,KAAf,EAAsB;AACpBJ,IAAAA,iBAAiB,CAACI,KAAlB,GAA0B,SAASA,KAAT,GAA+B;AAAA;;AACvDL,MAAAA,EAAE,CAACG,IAAH,CAAQ,IAAR;;AADuD,wCAAbG,IAAa;AAAbA,QAAAA,IAAa;AAAA;;AAEvD,aAAO,qBAAAP,UAAU,CAACM,KAAX,EAAiBF,IAAjB,2BAAsB,IAAtB,SAA+BG,IAA/B,EAAP;AACD,KAHD;AAID;;AACD,MAAIP,UAAU,CAACQ,WAAf,EAA4B;AAC1BN,IAAAA,iBAAiB,CAACM,WAAlB,GAAgC,SAASA,WAAT,GAAuB;AAAA;;AACrD,UAAMC,MAAM,GAAGT,UAAU,CAACQ,WAAX,CAAuBJ,IAAvB,CAA4B,IAA5B,CAAf;AACA,aAAO,YAAoB;AACzBH,QAAAA,EAAE,CAACG,IAAH,CAAQ,KAAR;;AADyB,2CAAhBG,IAAgB;AAAhBA,UAAAA,IAAgB;AAAA;;AAEzB,eAAOE,MAAM,CAACL,IAAP,OAAAK,MAAM,GAAM,KAAN,SAAeF,IAAf,EAAb;AACD,OAHD;AAID,KAND;AAOD;;AACD,SAAOL,iBAAP;AACD","sourcesContent":["interface Descriptor<T> extends TypedPropertyDescriptor<T> {\n  initializer?(): T;\n}\n/**\n * @function\n * @description helper function to wrap property descriptors with fn\n * @param {Object} descriptor\n * @param {function} fn\n */\nexport default function wrapDescriptor(\n  descriptor: Descriptor<any>,\n  fn: (...args: any[]) => any,\n) {\n  const wrappedDescriptor = {\n    ...descriptor,\n  };\n  if (descriptor.get) {\n    wrappedDescriptor.get = function get() {\n      fn.call(this);\n      return descriptor.get.call(this);\n    };\n  }\n  if (descriptor.set) {\n    wrappedDescriptor.set = function set(value) {\n      fn.call(this);\n      return descriptor.set.call(this, value);\n    };\n  }\n  if (descriptor.value) {\n    wrappedDescriptor.value = function value(...args: any[]) {\n      fn.call(this);\n      return descriptor.value.call(this, ...args);\n    };\n  }\n  if (descriptor.initializer) {\n    wrappedDescriptor.initializer = function initializer() {\n      const target = descriptor.initializer.call(this);\n      return (...args: any[]) => {\n        fn.call(this);\n        return target.call(this, ...args);\n      };\n    };\n  }\n  return wrappedDescriptor;\n}\n"],"file":"wrapDescriptor.js"}