{"version":3,"sources":["lib/getWebpackConfig/index.js"],"names":["getBaseConfig","cacheDirectory","hashPrefix","supportedLocales","themeFolder","fontFileSizeLimit","resolve","extensions","module","rules","enforce","test","exclude","loader","use","options","jsx","svgo","plugins","removeViewBox","modules","localIdentName","autoprefixer","includePaths","path","process","cwd","outputStyle","getWebpackConfig","env","base","mode","webpack","DefinePlugin","NODE_ENV","JSON","stringify","devtool"],"mappings":"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","sourcesContent":["import autoprefixer from 'autoprefixer';\nimport path from 'path';\nimport webpack from 'webpack';\n\nfunction getBaseConfig({\n  cacheDirectory = false,\n  hashPrefix = '',\n  supportedLocales = [],\n  themeFolder,\n  fontFileSizeLimit = 15000,\n}) {\n  return {\n    resolve: {\n      extensions: ['.ts', '.tsx', '.js', '.jsx'],\n    },\n    module: {\n      rules: [\n        {\n          enforce: 'pre',\n          test: /\\.(js|jsx|ts|tsx)$/,\n          exclude: /node_modules/,\n          loader: 'source-map-loader',\n        },\n        {\n          test: /\\.(js|jsx|ts|tsx)$/,\n          use: [\n            {\n              loader: 'babel-loader',\n              options: {\n                cacheDirectory,\n              },\n            },\n            {\n              loader: '@ringcentral-integration/locale-loader',\n              options: {\n                supportedLocales,\n              },\n            },\n          ],\n          exclude: /node_modules/,\n        },\n        {\n          test: /\\.css$/i,\n          use: ['style-loader', 'css-loader'],\n        },\n        {\n          test: /\\.woff|\\.woff2|.eot|\\.ttf/,\n          use: `url-loader?limit=${fontFileSizeLimit}&name=fonts/[name]_[hash].[ext]`,\n        },\n        {\n          test: /\\.svg/,\n          exclude: /fonts/,\n          use: [\n            'babel-loader',\n            {\n              loader: 'react-svg-loader',\n              options: {\n                jsx: true,\n                svgo: {\n                  plugins: [\n                    {\n                      removeViewBox: false,\n                    },\n                  ],\n                },\n              },\n            },\n          ],\n        },\n        {\n          test: /\\.png|\\.jpg|\\.gif|fonts(\\/|\\\\).*\\.svg/,\n          use: 'url-loader?limit=20000&name=images/[name]_[hash].[ext]',\n        },\n        {\n          test: /\\.sass|\\.scss/,\n          use: [\n            {\n              loader: 'style-loader',\n            },\n            {\n              loader: 'css-loader',\n              options: {\n                modules: true,\n                localIdentName: `${hashPrefix}_[path]_[name]_[local]_[hash:base64:5]`,\n              },\n            },\n            {\n              loader: 'postcss-loader',\n              options: {\n                plugins: () => [autoprefixer],\n              },\n            },\n            {\n              loader: 'sass-loader',\n              options: {\n                includePaths: [\n                  themeFolder,\n                  path.resolve(process.cwd(), 'node_modules'),\n                ],\n                outputStyle: 'expanded',\n              },\n            },\n          ],\n        },\n        {\n          test: /\\.ogg$/,\n          use: 'file-loader?name=audio/[name]_[hash].[ext]',\n        },\n      ],\n    },\n    plugins: [],\n  };\n}\n\nexport default function getWebpackConfig({ env = 'development', ...options }) {\n  const base = getBaseConfig({\n    ...options,\n  });\n  if (env === 'production') {\n    return {\n      ...base,\n      mode: 'production',\n      plugins: [\n        ...base.plugins,\n        new webpack.DefinePlugin({\n          'process.env': {\n            NODE_ENV: JSON.stringify('production'),\n          },\n        }),\n      ],\n    };\n  }\n  return {\n    ...base,\n    mode: 'development',\n    devtool: 'inline-source-map',\n    plugins: [\n      ...base.plugins,\n      new webpack.DefinePlugin({\n        'process.env': {\n          NODE_ENV: JSON.stringify('development'),\n        },\n      }),\n    ],\n  };\n}\n"],"file":"index.js"}