{"version":3,"sources":["lib/DataMatcherV2/DataMatcher.ts"],"names":["DEFAULT_TTL","DEFAULT_NO_MATCH_TTL","DataMatcher","name","deps","dep","optional","data","ready","_searchProviders","size","storageKey","enableCache","dataMatcherOptions","disableCache","_ttl","_deps","ttl","_noMatchTtl","noMatchTtl","_querySources","Map","_matchPromises","_matchQueues","_lastCleanUp","output","Set","forEach","readyCheckFn","getQueriesFn","query","add","queries","timestamp","Date","now","_t","Object","keys","searchProvidersReady","searchFn","Error","constructor","has","set","ignoreCache","ignoreQueue","_cleanUp","match","_getQueries","Promise","all","map","_matchSource","provider","get","promise","resolve","insertMatchEntries","queuedItems","promises","matching","push","item","queue","newQueries","length","_fetchMatchResult","concat","values","dataMap","queryResult","matchesList","providerName","RcModuleV2","storage","state","action","proxify"],"mappings":"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","sourcesContent":["import { all, filter, forEach } from 'ramda';\nimport {\n  RcModuleV2,\n  state,\n  action,\n  storage,\n  computed,\n} from '@ringcentral-integration/core';\nimport { Library } from '../di';\nimport proxify from '../proxy/proxify';\nimport {\n  Deps,\n  MatchData,\n  QuerySourceOptions,\n  SearchProviderOptions,\n  SearchProvider,\n  TriggerMatchOptions,\n  MatchOptions,\n  FetchMatchResultOptions,\n  MatchSourceOptions,\n  InsertMatchEntriesOptions,\n  MatchQueue,\n  MatchPromises,\n} from './DataMatcher.interfaces';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_NO_MATCH_TTL = 30 * 1000;\n\n@Library({\n  name: 'DataMatcher',\n  deps: [\n    { dep: 'Storage', optional: true },\n    { dep: 'DataMatcherOptions', optional: true },\n  ],\n})\nexport class DataMatcher<T> extends RcModuleV2<Deps> {\n  protected _ttl = this._deps.dataMatcherOptions?.ttl ?? DEFAULT_TTL;\n\n  protected _noMatchTtl =\n    this._deps.dataMatcherOptions?.noMatchTtl ?? DEFAULT_NO_MATCH_TTL;\n\n  protected _querySources = new Map<\n    QuerySourceOptions['getQueriesFn'],\n    QuerySourceOptions['readyCheckFn']\n  >();\n\n  protected _searchProviders = new Map<\n    SearchProviderOptions<T>['name'],\n    SearchProvider<T>\n  >();\n\n  protected _matchPromises = new Map<string, MatchPromises<T>>();\n\n  protected _matchQueues = new Map<string, MatchQueue>();\n\n  protected _lastCleanUp = 0;\n\n  constructor(deps: Deps, storageKey: string) {\n    super({\n      deps,\n      enableCache: !(deps.dataMatcherOptions?.disableCache ?? false),\n      storageKey,\n    });\n  }\n\n  @storage\n  @state\n  data: MatchData<T> = {};\n\n  onReset() {\n    this.data = {};\n    this._lastCleanUp = 0;\n  }\n\n  _getQueries() {\n    const output = new Set<string>();\n    this._querySources.forEach((readyCheckFn, getQueriesFn) => {\n      if (readyCheckFn()) {\n        getQueriesFn().forEach((query) => {\n          output.add(query);\n        });\n      }\n    });\n    return [...output];\n  }\n\n  @action\n  insertMatchEntries({ name, queries, data }: InsertMatchEntriesOptions<T>) {\n    const timestamp = Date.now();\n    queries.forEach((query) => {\n      this.data[query] = this.data[query] ?? {};\n      this.data[query][name] = {\n        _t: timestamp, // for noMatchTtl check\n        data: data[query] ?? [],\n      };\n    });\n  }\n\n  @action\n  _cleanUp() {\n    // throttle clean up to only run once every 100ms\n    const now = Date.now();\n    if (now - this._lastCleanUp > 100) {\n      this._lastCleanUp = now;\n      Object.keys(this.data).forEach((query) => {\n        Object.keys(this.data[query]).forEach((name) => {\n          if (!this.data[query][name]._t) {\n            // mark for deletion\n            this.data[query][name]._t = now;\n          } else if (now - this.data[query][name]._t > this._ttl) {\n            // expired yet\n            // entry is removed\n            delete this.data[query][name];\n          }\n        });\n      });\n    }\n  }\n\n  _shouldInit() {\n    return !!(super._shouldInit() && this.searchProvidersReady);\n  }\n\n  _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this.searchProvidersReady)\n    );\n  }\n\n  get searchProvidersReady() {\n    return all(({ readyCheckFn }) => readyCheckFn(), [\n      ...this._searchProviders.values(),\n    ]);\n  }\n\n  addSearchProvider({\n    name,\n    searchFn,\n    readyCheckFn,\n  }: SearchProviderOptions<T>) {\n    if (!name) {\n      throw new Error(`${this.constructor.name}: \"name\" is required.`);\n    }\n    if (this._searchProviders.has(name)) {\n      throw new Error(\n        `${this.constructor.name}: A provider named \"${name}\" already exists.`,\n      );\n    }\n    if (typeof searchFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"searchFn\" must be a function.`,\n      );\n    }\n    if (typeof readyCheckFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"readyCheckFn\" must be a function.`,\n      );\n    }\n    this._searchProviders.set(name, {\n      searchFn,\n      readyCheckFn,\n    });\n  }\n\n  addQuerySource({ getQueriesFn, readyCheckFn }: QuerySourceOptions) {\n    if (typeof getQueriesFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"getQueriesFn\" must be a function.`,\n      );\n    }\n    if (typeof readyCheckFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"readyCheckFn\" must be a function.`,\n      );\n    }\n    if (this._querySources.has(getQueriesFn)) {\n      throw new Error(\n        `${this.constructor.name}: this getQueryFn has already been added.`,\n      );\n    }\n    this._querySources.set(getQueriesFn, readyCheckFn);\n  }\n\n  @proxify\n  async triggerMatch({\n    ignoreCache = false,\n    ignoreQueue = false,\n  }: TriggerMatchOptions = {}) {\n    if (this.ready) {\n      this._cleanUp();\n      await this.match({\n        queries: this._getQueries(),\n        ignoreCache,\n        ignoreQueue,\n      });\n    }\n  }\n\n  @proxify\n  async match({\n    queries,\n    ignoreCache = false,\n    ignoreQueue = false,\n  }: MatchOptions) {\n    await Promise.all(\n      [...this._searchProviders.keys()].map((name) =>\n        this._matchSource({\n          name,\n          queries,\n          ignoreCache,\n          ignoreQueue,\n        }),\n      ),\n    );\n  }\n\n  async _fetchMatchResult({ name, queries }: FetchMatchResultOptions) {\n    try {\n      const provider = this._searchProviders.get(name);\n      if (!provider) {\n        throw new Error(\n          `${this.constructor.name}: provider named \"${name} does not exist`,\n        );\n      }\n      const promise = Promise.resolve(\n        provider.searchFn({\n          queries,\n        }),\n      );\n      this._matchPromises.set(name, {\n        promise,\n        queries,\n      });\n      const data = await promise;\n      this._matchPromises.delete(name);\n      this.insertMatchEntries({\n        name,\n        queries,\n        data,\n      });\n    } catch (error) {\n      this._matchPromises.delete(name);\n      throw error;\n    }\n  }\n\n  @proxify\n  async _matchSource({\n    name,\n    queries,\n    ignoreCache,\n    ignoreQueue,\n  }: MatchSourceOptions) {\n    const now = Date.now();\n    const data = this.data;\n    const queuedItems: Record<string, boolean> = {};\n    const promises: Promise<void | Record<string, T[]>>[] = [];\n\n    let matching: MatchPromises<T> | MatchQueue;\n    if (!ignoreQueue && this._matchPromises.has(name)) {\n      matching = this._matchPromises.get(name);\n      promises.push(matching.promise);\n      matching.queries.forEach((item) => {\n        queuedItems[item] = true;\n      });\n    }\n\n    let queue: MatchQueue;\n    if (!ignoreQueue && this._matchQueues.has(name)) {\n      queue = this._matchQueues.get(name);\n      promises.push(queue.promise);\n      queue.queries.forEach((item) => {\n        queuedItems[item] = true;\n      });\n    }\n\n    const newQueries = ignoreCache\n      ? queries\n      : filter(\n          (query) =>\n            !queuedItems[query] &&\n            (!data[query] ||\n              !data[query][name] ||\n              now - data[query][name]._t > this._noMatchTtl),\n          queries,\n        );\n\n    if (newQueries.length) {\n      if (ignoreQueue) {\n        promises.push(\n          this._fetchMatchResult({\n            name,\n            queries: newQueries,\n          }),\n        );\n      } else if (!matching) {\n        matching = {\n          promise: this._fetchMatchResult({\n            name,\n            queries: newQueries,\n          }),\n          queries: newQueries,\n        };\n        promises.push(matching.promise);\n      } else if (!queue) {\n        const promise = (async () => {\n          await matching.promise;\n          const promise = this._fetchMatchResult({\n            name,\n            queries: queue.queries,\n          });\n          this._matchQueues.delete(name);\n          await promise;\n        })();\n        queue = {\n          queries: newQueries,\n          promise,\n        };\n        queue;\n        this._matchQueues.set(name, queue);\n        promises.push(queue.promise);\n      } else {\n        queue.queries = queue.queries.concat(newQueries);\n      }\n    }\n    await Promise.all(promises);\n  }\n\n  /**\n   * insert matching result directly\n   */\n  @proxify\n  async insertMatching({ name, data, queries }: InsertMatchEntriesOptions<T>) {\n    this.insertMatchEntries({\n      data,\n      queries,\n      name,\n    });\n  }\n\n  @computed<DataMatcher<T>>(({ data, ready, _searchProviders }) => [\n    data,\n    ready,\n    _searchProviders.size,\n  ])\n  get dataMapping() {\n    if (!this.ready || !this._searchProviders.size) return {};\n    const dataMap: Record<string, T[]> = {};\n    forEach((query) => {\n      const queryResult = this.data[query];\n      if (!queryResult) {\n        return;\n      }\n      let matchesList: T[] = [];\n      for (const [providerName] of this._searchProviders) {\n        if (\n          queryResult[providerName] &&\n          queryResult[providerName].data.length > 0\n        ) {\n          matchesList = matchesList.concat(queryResult[providerName].data);\n        }\n      }\n      if (matchesList.length > 0) {\n        dataMap[query] = matchesList;\n      }\n    }, Object.keys(this.data));\n    return dataMap;\n  }\n}\n"],"file":"DataMatcher.js"}