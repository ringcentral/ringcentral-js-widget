{"version":3,"sources":["lib/raceTimeout.ts"],"names":["raceTimeout","fn","timeout","onTimeout","_","reject","finalize","timeoutId","hasError","Promise","race","resolve","timeoutResolve","setTimeout","result","err","clearTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAQO,IAAMA,WAAW;AAAA,qEAAG,iBACzBC,EADyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4EAQF,EARE,wBAGvBC,OAHuB,EAGvBA,OAHuB,8BAGb,KAAK,IAHQ,0CAIvBC,SAJuB,EAIvBA,SAJuB,gCAIX,UAACC,CAAD,EAAIC,MAAJ,EAAe;AACzBA,cAAAA,MAAM,CAAC,IAAD,CAAN;AACD,aANsB,2CAOvBC,QAPuB,EAOvBA,QAPuB,+BAOZ,YAAM,CAAE,CAPI;AAUrBC,YAAAA,SAVqB,GAUT,IAVS;AAcrBC,YAAAA,QAdqB,GAcV,KAdU;AAAA;AAAA;AAAA,mBAiBRC,OAAO,CAACC,IAAR,CAAgB,CAC7BT,EAD6B,EAE7B,IAAIQ,OAAJ,CAAiB,UAACE,OAAD,EAAUN,MAAV,EAAqB;AACpCO,cAAAA,cAAc,GAAGD,OAAjB,CADoC,CAEpC;;AAAA;AACAJ,cAAAA,SAAS,GAAGM,UAAU,CAAC;AAAA,uBAAMV,SAAS,CAACQ,OAAD,EAAUN,MAAV,CAAf;AAAA,eAAD,EAAmCH,OAAnC,CAAtB;AACD,aAJD,CAF6B,CAAhB,CAjBQ;;AAAA;AAiBvBY,YAAAA,MAjBuB;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0BvBN,YAAAA,QAAQ,GAAG,IAAX;AACAO,YAAAA,GAAG,cAAH;;AA3BuB;AAAA;AA6BvBH,YAAAA,cAAc;AACdI,YAAAA,YAAY,CAACT,SAAD,CAAZ;AACAD,YAAAA,QAAQ;AA/Be;;AAAA;AAAA,iBAkCrBE,QAlCqB;AAAA;AAAA;AAAA;;AAAA,kBAmCjBO,GAnCiB;;AAAA;AAAA,6CAqClBD,MArCkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXd,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["type ResolveType = (value?: any) => void;\n\ntype RaceTimeoutParams = {\n  timeout?: number;\n  onTimeout?: (resolve: ResolveType, reject: ResolveType) => any;\n  finalize?: () => any;\n};\n\nexport const raceTimeout = async <T>(\n  fn: Promise<T>,\n  {\n    timeout = 30 * 1000,\n    onTimeout = (_, reject) => {\n      reject(null);\n    },\n    finalize = () => {},\n  }: RaceTimeoutParams = {},\n): Promise<T> => {\n  let timeoutId = null;\n  let result: any;\n  let timeoutResolve: ResolveType;\n  let err: any;\n  let hasError = false;\n\n  try {\n    result = await Promise.race<T>([\n      fn,\n      new Promise<any>((resolve, reject) => {\n        timeoutResolve = resolve;\n        // here use resolve for easy to use.\n        timeoutId = setTimeout(() => onTimeout(resolve, reject), timeout);\n      }),\n    ]);\n  } catch (error) {\n    hasError = true;\n    err = error;\n  } finally {\n    timeoutResolve();\n    clearTimeout(timeoutId);\n    finalize();\n  }\n\n  if (hasError) {\n    throw err;\n  }\n  return result;\n};\n"],"file":"raceTimeout.js"}