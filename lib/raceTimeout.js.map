{"version":3,"sources":["lib/raceTimeout.ts"],"names":["raceTimeout","fn","timeout","onTimeout","reject","finalize","timeoutId","hasError","Promise","race","resolve","timeoutResolve","setTimeout","result","err","clearTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAQO,IAAMA,WAAW;AAAA,qEAAG,iBACzBC,EADyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4EAQF,EARE,wBAGvBC,OAHuB,EAGvBA,OAHuB,8BAGb,KAAK,IAHQ,0CAIvBC,SAJuB,EAIvBA,SAJuB,gCAIX,UAACC,MAAD,EAAY;AACtBA,cAAAA,MAAM,CAAC,IAAD,CAAN;AACD,aANsB,2CAOvBC,QAPuB,EAOvBA,QAPuB,+BAOZ,YAAM,CAAE,CAPI;AAUrBC,YAAAA,SAVqB,GAUT,IAVS;AAcrBC,YAAAA,QAdqB,GAcV,KAdU;AAAA;AAAA;AAAA,mBAiBRC,OAAO,CAACC,IAAR,CAAgB,CAC7BR,EAD6B,EAE7B,IAAIO,OAAJ,CAAiB,UAACE,OAAD,EAAUN,MAAV,EAAqB;AACpCO,cAAAA,cAAc,GAAGD,OAAjB,CADoC,CAEpC;;AACAJ,cAAAA,SAAS,GAAGM,UAAU,CACpB;AAAA,uBAAMF,OAAO,CAACP,SAAS,CAACO,OAAD,EAAUN,MAAV,CAAV,CAAb;AAAA,eADoB,EAEpBF,OAFoB,CAAtB;AAID,aAPD,CAF6B,CAAhB,CAjBQ;;AAAA;AAiBvBW,YAAAA,MAjBuB;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6BvBN,YAAAA,QAAQ,GAAG,IAAX;AACAO,YAAAA,GAAG,cAAH;;AA9BuB;AAAA;AAgCvBH,YAAAA,cAAc;AACdI,YAAAA,YAAY,CAACT,SAAD,CAAZ;AACAD,YAAAA,QAAQ;AAlCe;;AAAA;AAAA,iBAqCrBE,QArCqB;AAAA;AAAA;AAAA;;AAAA,kBAsCjBO,GAtCiB;;AAAA;AAAA,6CAwClBD,MAxCkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXb,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["type ResolveType = (value?: any) => void;\n\ntype RaceTimeoutParams = {\n  timeout?: number;\n  onTimeout?: (resolve: ResolveType, reject: ResolveType) => any;\n  finalize?: () => any;\n};\n\nexport const raceTimeout = async <T>(\n  fn: Promise<T>,\n  {\n    timeout = 30 * 1000,\n    onTimeout = (reject) => {\n      reject(null);\n    },\n    finalize = () => {},\n  }: RaceTimeoutParams = {},\n): Promise<T> => {\n  let timeoutId = null;\n  let result: any;\n  let timeoutResolve: ResolveType;\n  let err: any;\n  let hasError = false;\n\n  try {\n    result = await Promise.race<T>([\n      fn,\n      new Promise<any>((resolve, reject) => {\n        timeoutResolve = resolve;\n        // here use resolve for easy to use.\n        timeoutId = setTimeout(\n          () => resolve(onTimeout(resolve, reject)),\n          timeout,\n        );\n      }),\n    ]);\n  } catch (error) {\n    hasError = true;\n    err = error;\n  } finally {\n    timeoutResolve();\n    clearTimeout(timeoutId);\n    finalize();\n  }\n\n  if (hasError) {\n    throw err;\n  }\n  return result;\n};\n"],"file":"raceTimeout.js"}