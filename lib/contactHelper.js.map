{"version":3,"sources":["lib/contactHelper.js"],"names":["AllContactSourceName","addPhoneToContact","contact","phone","type","existedPhone","phoneNumbers","find","number","phoneNumber","phoneType","push","replace","uniqueContactItems","input","map","result","item","itemId","id","NON_ALPHABET_RE","byName","a","b","name1","name","toLowerCase","name2","isNumber1","test","isNumber2","length","localeCompare","sortContactItemsByName","sort","POUND_SIGN","groupByFirstLetterOfName","groups","group","forEach","letter","toLocaleUpperCase","caption","contacts","filterContacts","searchFilter","items","searchText","filter","firstName","lastName","indexOf","extensionNumber","x","getSearchContacts","entityType","searchString","options","p","isMultipleSiteEnabled","phoneTypes","extension","currentSiteCode","siteCode","getMatchContacts","normalizeNumber","findContact","found","matchedContact","isSameSite","extensionFromContacts","RegExp","isAnExtension","isExtensionExist","getFindContact"],"mappings":"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","sourcesContent":["import { reduce } from 'ramda';\nimport { formatSameSiteExtension } from '@ringcentral-integration/phone-number/lib/format';\nimport isBlank from './isBlank';\nimport { phoneTypes } from '../enums/phoneTypes';\n\nexport const AllContactSourceName = 'all';\n\nexport function addPhoneToContact(contact, phone, type) {\n  if (isBlank(phone)) {\n    return;\n  }\n  const existedPhone = contact.phoneNumbers.find(\n    (number) => number && number.phoneNumber === phone,\n  );\n  if (existedPhone) {\n    existedPhone.phoneType = type;\n  } else {\n    contact.phoneNumbers.push({\n      phoneNumber: phone,\n      phoneType: type.replace('Phone', ''),\n    });\n  }\n}\n\nexport function uniqueContactItems(input = []) {\n  const map = {};\n  return reduce(\n    (result, item) => {\n      const itemId = `${item.type}${item.id}`;\n      if (!map[itemId]) {\n        map[itemId] = true;\n        result.push(item);\n      }\n      return result;\n    },\n    [],\n    input,\n  );\n}\n\nconst NON_ALPHABET_RE = /[^a-z]/i;\nfunction byName(a, b) {\n  const name1 = (a.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n  const name2 = (b.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n  const isNumber1 = /^[0-9]/.test(name1);\n  const isNumber2 = /^[0-9]/.test(name2);\n  // Empty string should be put at the end\n  if (name1.length <= 0 || name2.length <= 0) {\n    return -name1.localeCompare(name2);\n  }\n  if (isNumber1 && isNumber2) {\n    return name1.localeCompare(name2);\n  }\n  if (isNumber1 || isNumber2) {\n    // put number name at last\n    return -name1.localeCompare(name2);\n  }\n  if (NON_ALPHABET_RE.test(name1[0]) && !NON_ALPHABET_RE.test(name2[0])) {\n    return 1;\n  }\n  if (!NON_ALPHABET_RE.test(name1[0]) && NON_ALPHABET_RE.test(name2[0])) {\n    return -1;\n  }\n  return name1.localeCompare(name2);\n}\nexport function sortContactItemsByName(input = []) {\n  return input.sort(byName);\n}\n\nconst POUND_SIGN = '#';\nexport function groupByFirstLetterOfName(input = []) {\n  const groups = [];\n  if (input && input.length) {\n    let group;\n    input.forEach((contact) => {\n      const name = (contact.name || '').replace(/^\\s\\s*/, ''); // trim start\n      let letter = null;\n      if (name.length <= 0 || NON_ALPHABET_RE.test(name[0])) {\n        letter = POUND_SIGN;\n      } else {\n        letter = (name[0] || '').toLocaleUpperCase();\n      }\n      if (!group || group.caption !== letter) {\n        group = {\n          contacts: [],\n          caption: letter,\n          id: letter,\n        };\n        groups.push(group);\n      }\n      group.contacts.push(contact);\n    });\n  }\n  return groups;\n}\n\nexport function filterContacts(contacts, searchFilter) {\n  const items = contacts;\n  if (!searchFilter || isBlank(searchFilter)) {\n    return items;\n  }\n  const searchText = searchFilter.toLowerCase();\n  return items.filter((item) => {\n    const name = `${item.firstName} ${item.lastName} ${item.name}`;\n    if (\n      name.toLowerCase().indexOf(searchText) >= 0 ||\n      (item.extensionNumber && item.extensionNumber.indexOf(searchText) >= 0) ||\n      (item.phoneNumbers &&\n        item.phoneNumbers.find(\n          (x) => x.phoneNumber && x.phoneNumber.indexOf(searchText) >= 0,\n        ))\n    ) {\n      return true;\n    }\n    return false;\n  });\n}\n\nexport function getSearchContacts({\n  contacts,\n  entityType,\n  searchString,\n  options,\n}) {\n  if (!searchString) {\n    return contacts;\n  }\n  const searchText = searchString.toLowerCase();\n  const result = [];\n  contacts.forEach((item) => {\n    const name = item.name || `${item.firstName} ${item.lastName}`;\n    item.phoneNumbers.forEach((p) => {\n      if (\n        name.toLowerCase().indexOf(searchText) >= 0 ||\n        p.phoneNumber.indexOf(searchText) >= 0\n      ) {\n        let { phoneNumber } = p;\n        const isMultipleSiteEnabled = options?.isMultipleSiteEnabled ?? false;\n        // Need to check multi-site ?\n        if (p.phoneType === phoneTypes.extension && isMultipleSiteEnabled) {\n          // Remove site code of same site\n          phoneNumber = formatSameSiteExtension({\n            currentSiteCode: options?.siteCode ?? '',\n            extension: phoneNumber,\n          });\n        }\n        result.push({\n          id: `${item.id}${p.phoneNumber}`,\n          name,\n          type: item.type,\n          phoneNumber,\n          phoneType: p.phoneType.replace('Phone', ''),\n          entityType,\n        });\n      }\n    });\n  });\n  return result;\n}\n\nexport function getMatchContacts({\n  contacts,\n  phoneNumber,\n  entityType,\n  normalizeNumber = (number) => number,\n  findContact = (item) => normalizeNumber(item.phoneNumber) === phoneNumber,\n}) {\n  const result = [];\n  contacts.forEach((contact) => {\n    const found =\n      contact.phoneNumbers && contact.phoneNumbers.find(findContact);\n    if (!found) {\n      return;\n    }\n    const matchedContact = {\n      ...contact,\n      phoneNumbers: [...contact.phoneNumbers],\n      entityType,\n    };\n    result.push(matchedContact);\n  });\n  return result;\n}\n\nconst isSameSite = ({\n  siteCode = '',\n  extensionNumber,\n  extensionFromContacts,\n}) => {\n  /**\n   * [multiple site number match role]:\n   * Given an account which short extension starts with 0 in the same site, When short extension is equal to 0, it can match.\n   * Otherwise it cannot match.\n   */\n  if (\n    !siteCode ||\n    !/^[0-9]+$/.test(extensionNumber) || // to avoid special character in regular\n    (extensionNumber[0] === '0' && extensionNumber !== '0')\n  ) {\n    return false;\n  }\n\n  /**\n   * [multiple site only]\n   * The full extension number's length is fixed, no need to compute the frequency of 0.\n   * For example, 21022, 210022 would not both exist at the same time\n   */\n  return new RegExp(`^${siteCode}0*${extensionNumber}$`).test(\n    extensionFromContacts,\n  );\n};\n\nexport const isAnExtension = (number) => {\n  return number && number.length <= 6 && number[0] !== '+';\n};\n\n/**\n * check whether an extension is in contacts\n * @param {String} extensionNumber extensionNumber need to be checked\n * @param {String} extensionFromContacts extensionNumber from contact\n * @param {Boolean} options.isMultipleSiteEnabled\n * @param {String} options.siteCode\n * @returns {Boolean}\n */\nexport const isExtensionExist = ({\n  extensionNumber,\n  extensionFromContacts,\n  options,\n}) => {\n  if (extensionFromContacts === extensionNumber) {\n    return true;\n  }\n  if (\n    options.isMultipleSiteEnabled &&\n    isSameSite({\n      siteCode: options?.siteCode ?? '',\n      extensionNumber,\n      extensionFromContacts,\n    })\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const getFindContact = ({ phoneNumber, options = {} }) => (item) => {\n  if (item.phoneType === phoneTypes.extension) {\n    return (\n      isAnExtension(phoneNumber) &&\n      isExtensionExist({\n        extensionNumber: phoneNumber,\n        extensionFromContacts: item.phoneNumber,\n        options,\n      })\n    );\n  }\n  return item.phoneNumber === phoneNumber;\n};\n"],"file":"contactHelper.js"}