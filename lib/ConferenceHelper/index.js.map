{"version":3,"sources":["lib/ConferenceHelper/index.js"],"names":["dialInNumbersLinks","att","bt","rc","telus","getInviteTxt","brand","conference","locale","regionSettings","data","participantCode","phoneNumbers","dialInNumber","additionalNumbers","countryCounter","acc","item","country","isoCode","dialInNumbers","countryName","countryNames","getString","currentLocale","region","location","phoneNumber","formattedPhoneNumber","countryCode","areaCode","international","find","e","formattedDialInNumber","additionalNumbersTxt","map","p","obj","fmt","join","additionalNumbersSection","length","i18n","code","brandName","name","replace"],"mappings":"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","sourcesContent":["import formatMessage from 'format-message';\nimport { reduce, map } from 'ramda';\nimport formatNumber from '@ringcentral-integration/commons/lib/formatNumber';\nimport countryNames from '../countryNames';\n\nimport i18n from './i18n';\n\nconst dialInNumbersLinks = {\n  att: 'https://ringcentr.al/2L14jqL', // att reuse rc brand\n  bt: 'https://www.btcloudphone.bt.com/conferencing',\n  rc: 'https://ringcentr.al/2L14jqL',\n  telus:\n    'https://telus.com/BusinessConnect/ConferencingFrequentlyAskedQuestions',\n};\n\nexport function getInviteTxt({ brand, conference, locale, regionSettings }) {\n  const { participantCode, phoneNumbers } = conference.data;\n  let dialInNumber = conference.dialInNumber || '';\n  const additionalNumbers = conference.additionalNumbers;\n  const countryCounter = reduce(\n    (acc, item) => {\n      if (!acc[item.country.isoCode]) {\n        acc[item.country.isoCode] = 1;\n      } else {\n        acc[item.country.isoCode] += 1;\n      }\n      return acc;\n    },\n    {},\n    phoneNumbers,\n  );\n  const dialInNumbers = map((item) => {\n    const countryName = countryNames.getString(\n      item.country.isoCode,\n      locale.currentLocale,\n    );\n    // only show the provinces of canada\n    return {\n      region:\n        countryCounter[item.country.isoCode] > 1\n          ? `${countryName}, ${item.location}`\n          : countryName,\n      phoneNumber: item.phoneNumber,\n      formattedPhoneNumber: formatNumber({\n        phoneNumber: item.phoneNumber,\n        countryCode: regionSettings.countryCode,\n        areaCode: regionSettings.areaCode,\n        international: true,\n      }),\n    };\n  }, phoneNumbers);\n  dialInNumber =\n    dialInNumbers.find((e) => e.phoneNumber === dialInNumber) ||\n    dialInNumbers[0];\n  const formattedDialInNumber = dialInNumber.formattedPhoneNumber;\n  const additionalNumbersTxt = additionalNumbers\n    .map((p) => dialInNumbers.find((obj) => obj.phoneNumber === p))\n    .map((fmt) => `${fmt.region}  ${fmt.formattedPhoneNumber}`)\n    .join('\\n');\n  let additionalNumbersSection = '';\n  if (additionalNumbers.length > 0) {\n    additionalNumbersSection = `${i18n.getString(\n      'internationalNumber',\n      locale.currentLocale,\n    )}\\n${additionalNumbersTxt}`;\n  }\n  return formatMessage(\n    i18n.getString(`inviteText_${brand.code}`, locale.currentLocale),\n    {\n      brandName: brand.name,\n      formattedDialInNumber,\n      additionalNumbersSection,\n      participantCode: participantCode\n        .replace(/(\\d{3})/g, '$1-')\n        .replace(/-$/, ''),\n      dialInNumbersLinks: dialInNumbersLinks[brand.code],\n    },\n  );\n}\n"],"file":"index.js"}