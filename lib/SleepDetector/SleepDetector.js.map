{"version":3,"sources":["lib/SleepDetector/SleepDetector.js"],"names":["DEFAULT_INTERVAL","DEFAULT_THRESHOLD","SleepDetectorEvents","Enum","SleepDetector","detectionInterval","detectionThreshold","startImmediately","_detectionInterval","_detectionThreshold","_timeout","detect","stop","startTime","Date","now","emit","heartbeat","global","setTimeout","endTime","sleepTime","detected","clearTimeout","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,GAAG,KAAK,IAA9B;AACA,IAAMC,iBAAiB,GAAG,KAAK,IAA/B;AAEO,IAAMC,mBAAmB,GAAG,IAAIC,gBAAJ,CACjC,CAAC,WAAD,EAAc,UAAd,CADiC,EAEjC,qBAFiC,CAA5B;;;IAKMC,a;;;;;AACX,2BAIQ;AAAA;;AAAA,mFAAJ,EAAI;AAAA,qCAHNC,iBAGM;AAAA,QAHNA,iBAGM,sCAHcL,gBAGd;AAAA,qCAFNM,kBAEM;AAAA,QAFNA,kBAEM,sCAFeL,iBAEf;AAAA,qCADNM,gBACM;AAAA,QADNA,gBACM,sCADa,IACb;;AAAA;;AACN;AACA,UAAKC,kBAAL,GAA0BH,iBAA1B;AACA,UAAKI,mBAAL,GAA2BH,kBAA3B;AACA,UAAKI,QAAL,GAAgB,IAAhB;;AACA,QAAIH,gBAAJ,EAAsB;AACpB,YAAKI,MAAL;AACD;;AAPK;AAQP;;;;6BAEQ;AAAA;;AACP,WAAKC,IAAL;AACA,UAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;AACA,WAAKC,IAAL,CAAUd,mBAAmB,CAACe,SAA9B,EAAyCJ,SAAzC;AACA,WAAKH,QAAL,GAAgBQ,MAAM,CAACC,UAAP,CAAkB,YAAM;AACtC,YAAMC,OAAO,GAAGN,IAAI,CAACC,GAAL,EAAhB;AACA,YAAMM,SAAS,GAAGD,OAAO,GAAGP,SAAV,GAAsB,MAAI,CAACL,kBAA7C;;AACA,YAAIa,SAAS,GAAG,MAAI,CAACZ,mBAArB,EAA0C;AACxC,UAAA,MAAI,CAACO,IAAL,CAAUd,mBAAmB,CAACoB,QAA9B,EAAwCT,SAAxC,EAAmDO,OAAnD,EAA4DC,SAA5D;AACD;;AACD,QAAA,MAAI,CAACX,QAAL,GAAgB,IAAhB;;AACA,QAAA,MAAI,CAACC,MAAL;AACD,OARe,EAQb,KAAKH,kBARQ,CAAhB;AASD;;;2BAEM;AACL,UAAI,KAAKE,QAAT,EAAmB;AACjBQ,QAAAA,MAAM,CAACK,YAAP,CAAoB,KAAKb,QAAzB;AACA,aAAKA,QAAL,GAAgB,IAAhB;AACD;AACF;;;;EAnCgCc,kB","sourcesContent":["import EventEmitter from 'events';\nimport Enum from '../Enum';\n\nconst DEFAULT_INTERVAL = 30 * 1000;\nconst DEFAULT_THRESHOLD = 60 * 1000;\n\nexport const SleepDetectorEvents = new Enum(\n  ['heartbeat', 'detected'],\n  'SleepDetectorEvents',\n);\n\nexport class SleepDetector extends EventEmitter {\n  constructor({\n    detectionInterval = DEFAULT_INTERVAL,\n    detectionThreshold = DEFAULT_THRESHOLD,\n    startImmediately = true,\n  } = {}) {\n    super();\n    this._detectionInterval = detectionInterval;\n    this._detectionThreshold = detectionThreshold;\n    this._timeout = null;\n    if (startImmediately) {\n      this.detect();\n    }\n  }\n\n  detect() {\n    this.stop();\n    const startTime = Date.now();\n    this.emit(SleepDetectorEvents.heartbeat, startTime);\n    this._timeout = global.setTimeout(() => {\n      const endTime = Date.now();\n      const sleepTime = endTime - startTime - this._detectionInterval;\n      if (sleepTime > this._detectionThreshold) {\n        this.emit(SleepDetectorEvents.detected, startTime, endTime, sleepTime);\n      }\n      this._timeout = null;\n      this.detect();\n    }, this._detectionInterval);\n  }\n\n  stop() {\n    if (this._timeout) {\n      global.clearTimeout(this._timeout);\n      this._timeout = null;\n    }\n  }\n}\n"],"file":"SleepDetector.js"}