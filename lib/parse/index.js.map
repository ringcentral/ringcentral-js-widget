{"version":3,"sources":["lib/parse/index.ts"],"names":["invalidCharsRegExp","plusRegex","extensionDelimiter","attachParsedCountryInfo","result","countryCode","phoneNumber","country","phone","parsedCountry","parsedNumber","processServiceNumber","tokens","length","isServiceNumber","isValid","processInternational","hasPlus","extension","processLocalNumber","isExtension","parse","input","extendedControls","cleanInput","hasInvalidChars","test","startWithPlus","withoutPlus","replace","startWithStar","split"],"mappings":"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","sourcesContent":["import { parseNumber } from 'libphonenumber-js';\nimport cleanNumber from '../cleanNumber';\nimport extractControls from '../extractControls';\n\nconst invalidCharsRegExp = /[^\\d*+#\\-(). ]/;\nconst plusRegex = /\\+/g;\nconst extensionDelimiter = /[*#]/g;\n\n/**\n * @typedef {object} ParsedResult\n * @property {string} input\n * @property {string} parsedCountry\n * @property {string} parsedNumber\n * @property {boolean} isValid\n * @property {boolean} hasInvalidChars\n * @property {boolean} isExtension\n * @property {boolean} isServiceNumber\n * @property {boolean} hasPlus\n * @property {string} phoneNumber\n * @property {string} extension\n * @property {string[]} extendedControls\n */\n\n/**\n * @description helper function to attatch parsed country and phone number with libphonenumber\n * @param {ParsedResult} result\n * @param {string} countryCode\n */\nfunction attachParsedCountryInfo(result, countryCode) {\n  const { country = null, phone = null } = parseNumber(\n    result.phoneNumber,\n    countryCode,\n  );\n  result.parsedCountry = country;\n  result.parsedNumber = phone;\n}\n\n/**\n * @description process the tokens as a service number\n * @param {ParsedResult} result\n * @param {string[]} tokens\n * @returns {ParsedResult}\n */\nfunction processServiceNumber(result, tokens) {\n  if (tokens[1] && tokens[1].length) {\n    result.isServiceNumber = true;\n    result.phoneNumber = `*${tokens[1]}`;\n    result.isValid = true;\n  }\n  return result;\n}\n\n/**\n * @description process the tokens as an E164 formatted number\n * @param {ParsedResult} result\n * @param {string[]} tokens\n * @param {string} countryCode\n * @returns {ParsedResult}\n */\nfunction processInternational(result, tokens, countryCode) {\n  if (tokens[0] && tokens[0].length) {\n    result.hasPlus = true;\n    result.phoneNumber = `+${tokens[0]}`;\n    // use libphonenumber to parse country code in the number\n    attachParsedCountryInfo(result, countryCode);\n    if (tokens[1] && tokens[1].length) {\n      result.extension = tokens[1];\n    }\n    result.isValid = true;\n  }\n  return result;\n}\n\n/**\n * @description process the tokens as local numbers including extensions\n * @param {ParsedResult} result\n * @param {string[]} tokens\n * @param {string} countryCode\n * @returns {ParsedResult}\n */\nfunction processLocalNumber(result, tokens, countryCode) {\n  if (tokens[0] && tokens[0].length) {\n    // not extension\n    if (tokens[0].length > 6) {\n      result.phoneNumber = tokens[0];\n      attachParsedCountryInfo(result, countryCode);\n      if (tokens[1] && tokens[1].length) {\n        result.extension = tokens[1];\n      }\n    } else {\n      result.isExtension = true;\n      result.phoneNumber = tokens[0];\n    }\n    result.isValid = true;\n    return result;\n  }\n  return result;\n}\n\n/**\n * @typedef {object} ParseInput\n * @property {string} input\n * @property {string} countryCode\n */\n\n/**\n * @param {ParseInput}\n * @returns {ParsedResult}\n */\nexport default function parse({\n  input,\n  countryCode = 'US',\n}: {\n  input: string;\n  countryCode?: string;\n}) {\n  const { phoneNumber, extendedControls } = extractControls(input);\n  const cleanInput = cleanNumber(phoneNumber);\n  const result = {\n    input,\n    parsedCountry: null,\n    parsedNumber: null,\n    isValid: false,\n    hasInvalidChars: invalidCharsRegExp.test(input),\n    isExtension: false,\n    isServiceNumber: false,\n    hasPlus: false,\n    phoneNumber: null,\n    extension: null,\n    extendedControls,\n  };\n\n  const startWithPlus = cleanInput[0] === '+';\n  const withoutPlus = cleanInput.replace(plusRegex, '');\n  const startWithStar = withoutPlus[0] === '*';\n\n  // cleanInput = '+*xxxx'; // is invalid\n  if (startWithPlus && startWithStar) {\n    return result;\n  }\n  const tokens = withoutPlus.split(extensionDelimiter);\n\n  // cleanInput = '*xxxx'; // service number\n  if (startWithStar) {\n    return processServiceNumber(result, tokens);\n  }\n\n  // cleanInput = '+xxx'; // should contain country code\n  if (startWithPlus) {\n    return processInternational(result, tokens, countryCode);\n  }\n\n  // cleanNumber = 'xxxxx'; // is local number\n  return processLocalNumber(result, tokens, countryCode);\n}\n"],"file":"index.js"}