{"version":3,"sources":["lib/generateLoaderContent/index.js"],"names":["byLocale","a","b","ta","tb","generateLoaderContent","files","chunk","usedLang","cases","sort","map","f","basename","replace","locale","lang","split","padding","code","langDefaultCase","dedent","join"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAEA,SAASA,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwB;AACtB,MAAMC,EAAE,GAAG,8BAAaF,CAAb,CAAX;AACA,MAAMG,EAAE,GAAG,8BAAaF,CAAb,CAAX;AACA,MAAIC,EAAE,KAAKC,EAAX,EAAe,OAAO,CAAP;AACf,SAAOD,EAAE,GAAGC,EAAL,GAAU,CAAV,GAAc,CAAC,CAAtB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACe,SAASC,qBAAT;AACb;AADa,MAEb;AAAA,MAD4BC,KAC5B,QAD4BA,KAC5B;AAAA,wBADmCC,KACnC;AAAA,MADmCA,KACnC,2BAD2C,IAC3C;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,KAAK,GAAGH,KAAK,CAACI,IAAN,CAAWV,QAAX,EAAqBW,GAArB,CAAyB,UAACC,CAAD,EAAO;AAC5C,QAAMC,QAAQ,GAAGD,CAAC,CAACE,OAAF,CAAU,kBAAV,EAA8B,EAA9B,CAAjB;AACA,QAAMC,MAAM,GAAG,8BAAaF,QAAb,CAAf;AACA,QAAMG,IAAI,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAb;AACA,QAAMC,OAAO,GAAGX,KAAK,GAAG,IAAH,GAAU,EAA/B;AACA,QAAIY,IAAI,2BACED,OADF,qCACoCL,QADpC,8BAEEK,OAFF,6DAAR;;AAGA,QAAIX,KAAJ,EAAW;AACTY,MAAAA,IAAI,yGAEyBN,QAFzB,+BAEsDM,IAFtD,iCAGUJ,MAHV,sCAIYI,IAJZ,oBAAJ;AAMD;;AACD,QAAIC,eAAe,GAAG,EAAtB;;AACA,QAAI,CAACZ,QAAQ,CAACQ,IAAD,CAAb,EAAqB;AACnBR,MAAAA,QAAQ,CAACQ,IAAD,CAAR,GAAiB,IAAjB;AACAI,MAAAA,eAAe,6BACLJ,IADK,eAAf;AAGD;;AACD,qBAAUI,eAAV,+BACcL,MADd,iBAC2BI,IAD3B;AAID,GA3Ba,CAAd;AA4BA,aAAOE,kBAAP,qBAEyBZ,KAAK,CAACa,IAAN,CAAW,EAAX,CAFzB;AASD","sourcesContent":["import dedent from 'dedent';\nimport formatLocale from '@ringcentral-integration/i18n/lib/formatLocale';\n\nfunction byLocale(a, b) {\n  const ta = formatLocale(a);\n  const tb = formatLocale(b);\n  if (ta === tb) return 0;\n  return ta > tb ? 1 : -1;\n}\n/**\n * @typedef GLCOptions\n * @property {String[]} files\n * @property {Boolean} [chunk]\n *\n */\n/**\n * @function\n * @description Generate js code for localeLoader according the files listed.\n * @param {GLCOptions} options\n */\nexport default function generateLoaderContent(\n  /** @type {GLCOptions} */ { files, chunk = true },\n) {\n  const usedLang = {};\n  const cases = files.sort(byLocale).map((f) => {\n    const basename = f.replace(/\\.(js|json|ts)$/i, '');\n    const locale = formatLocale(basename);\n    const lang = locale.split('-')[0];\n    const padding = chunk ? '  ' : '';\n    let code = `\n            ${padding}const data = require('./${basename}');\n            ${padding}resolve(data.__esModule === true ? data.default : data);`;\n    if (chunk) {\n      code = `\n            if (typeof require.ensure === 'function') {\n              require.ensure(['./${basename}'], (require) => {${code}\n              }, '${locale}');\n            } else {${code}\n            }`;\n    }\n    let langDefaultCase = '';\n    if (!usedLang[lang]) {\n      usedLang[lang] = true;\n      langDefaultCase = `\n        case '${lang}':\n      `;\n    }\n    return `${langDefaultCase}\n          case '${locale}': {${code}\n            break;\n          }`;\n  });\n  return dedent`export default function loadLocale(locale) {\n      return new Promise((resolve) => {\n        switch (locale) {${cases.join('')}\n          default:\n            resolve({});\n            break;\n        }\n      });\n    }\\n`;\n}\n"],"file":"index.js"}