{"version":3,"sources":["lib/generateLoaderContent/index.js"],"names":["getBaseName","f","replace","generateLoaderContent","files","chunk","supportedLocales","sortIdx","forEach","locale","idx","byLocale","a","b","ta","tb","aIdx","bIdx","usedLang","cases","sort","map","basename","lang","split","padding","code","langDefaultCase","dedent","join"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAEA,SAASA,WAAT,CAAqBC,CAArB,EAAwB;AACtB,SAAOA,CAAC,CAACC,OAAF,CAAU,kBAAV,EAA8B,EAA9B,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACe,SAASC,qBAAT;AACb;AADa,MAEb;AAAA,MAD4BC,KAC5B,QAD4BA,KAC5B;AAAA,wBADmCC,KACnC;AAAA,MADmCA,KACnC,2BAD2C,IAC3C;AAAA,mCADiDC,gBACjD;AAAA,MADiDA,gBACjD,sCADoE,EACpE;AACA;AACA,MAAMC,OAAO,GAAG,EAAhB;AACAD,EAAAA,gBAAgB,CAACE,OAAjB,CAAyB,UAACC,MAAD,EAASC,GAAT,EAAiB;AACxCH,IAAAA,OAAO,CAAC,8BAAaE,MAAb,CAAD,CAAP,GAAgCC,GAAhC;AACD,GAFD;;AAGA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAIC,CAAJ,EAAU;AAAA;;AACzB,QAAMC,EAAE,GAAG,8BAAad,WAAW,CAACY,CAAD,CAAxB,CAAX;AACA,QAAMG,EAAE,GAAG,8BAAaf,WAAW,CAACa,CAAD,CAAxB,CAAX;AACA,QAAMG,IAAI,kBAAGT,OAAO,CAACO,EAAD,CAAV,qDAAkB,CAAC,CAA7B;AACA,QAAMG,IAAI,kBAAGV,OAAO,CAACQ,EAAD,CAAV,qDAAkB,CAAC,CAA7B;;AACA,QAAIC,IAAI,KAAKC,IAAb,EAAmB;AACjB;AACA,UAAIH,EAAE,KAAKC,EAAX,EAAe;AACb,eAAO,CAAP;AACD;;AACD,aAAOD,EAAE,GAAGC,EAAL,GAAU,CAAV,GAAc,CAAC,CAAtB;AACD,KAXwB,CAYzB;;;AACA,WAAOC,IAAI,GAAGC,IAAP,GAAc,CAAd,GAAkB,CAAC,CAA1B;AACD,GAdD;;AAeA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,KAAK,GAAGf,KAAK,CAACgB,IAAN,CAAWT,QAAX,EAAqBU,GAArB,CAAyB,UAACpB,CAAD,EAAO;AAC5C,QAAMqB,QAAQ,GAAGtB,WAAW,CAACC,CAAD,CAA5B;AACA,QAAMQ,MAAM,GAAG,8BAAaa,QAAb,CAAf;AACA,QAAMC,IAAI,GAAGd,MAAM,CAACe,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAb;AACA,QAAMC,OAAO,GAAGpB,KAAK,GAAG,IAAH,GAAU,EAA/B;AACA,QAAIqB,IAAI,2BACED,OADF,qCACoCH,QADpC,8BAEEG,OAFF,6DAAR;;AAGA,QAAIpB,KAAJ,EAAW;AACTqB,MAAAA,IAAI,yGAEyBJ,QAFzB,+BAEsDI,IAFtD,iCAGUjB,MAHV,sCAIYiB,IAJZ,oBAAJ;AAMD;;AACD,QAAIC,eAAe,GAAG,EAAtB;;AACA,QAAI,CAACT,QAAQ,CAACK,IAAD,CAAb,EAAqB;AACnBL,MAAAA,QAAQ,CAACK,IAAD,CAAR,GAAiB,IAAjB;AACAI,MAAAA,eAAe,6BACLJ,IADK,eAAf;AAGD;;AACD,qBAAUI,eAAV,+BACclB,MADd,iBAC2BiB,IAD3B;AAID,GA3Ba,CAAd;AA4BA,aAAOE,kBAAP,qBAEyBT,KAAK,CAACU,IAAN,CAAW,EAAX,CAFzB;AASD","sourcesContent":["import dedent from 'dedent';\nimport formatLocale from '@ringcentral-integration/i18n/lib/formatLocale';\n\nfunction getBaseName(f) {\n  return f.replace(/\\.(js|json|ts)$/i, '');\n}\n/**\n * @typedef GLCOptions\n * @property {String[]} files\n * @property {Boolean} [chunk]\n *\n */\n/**\n * @function\n * @description Generate js code for localeLoader according the files listed.\n * @param {GLCOptions} options\n */\nexport default function generateLoaderContent(\n  /** @type {GLCOptions} */ { files, chunk = true, supportedLocales = [] },\n) {\n  // create sort function\n  const sortIdx = {};\n  supportedLocales.forEach((locale, idx) => {\n    sortIdx[formatLocale(locale)] = idx;\n  });\n  const byLocale = (a, b) => {\n    const ta = formatLocale(getBaseName(a));\n    const tb = formatLocale(getBaseName(b));\n    const aIdx = sortIdx[ta] ?? -1;\n    const bIdx = sortIdx[tb] ?? -1;\n    if (aIdx === bIdx) {\n      // -1 or ta === tb\n      if (ta === tb) {\n        return 0;\n      }\n      return ta > tb ? 1 : -1;\n    }\n    // smaller index has priority\n    return aIdx > bIdx ? 1 : -1;\n  };\n  const usedLang = {};\n  const cases = files.sort(byLocale).map((f) => {\n    const basename = getBaseName(f);\n    const locale = formatLocale(basename);\n    const lang = locale.split('-')[0];\n    const padding = chunk ? '  ' : '';\n    let code = `\n            ${padding}const data = require('./${basename}');\n            ${padding}resolve(data.__esModule === true ? data.default : data);`;\n    if (chunk) {\n      code = `\n            if (typeof require.ensure === 'function') {\n              require.ensure(['./${basename}'], (require) => {${code}\n              }, '${locale}');\n            } else {${code}\n            }`;\n    }\n    let langDefaultCase = '';\n    if (!usedLang[lang]) {\n      usedLang[lang] = true;\n      langDefaultCase = `\n        case '${lang}':\n      `;\n    }\n    return `${langDefaultCase}\n          case '${locale}': {${code}\n            break;\n          }`;\n  });\n  return dedent`export default function loadLocale(locale) {\n      return new Promise((resolve) => {\n        switch (locale) {${cases.join('')}\n          default:\n            resolve({});\n            break;\n        }\n      });\n    }\\n`;\n}\n"],"file":"index.js"}