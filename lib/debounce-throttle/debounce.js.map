{"version":3,"sources":["lib/debounce-throttle/debounce.ts"],"names":["DEFAULT_THRESHOLD","debounce","fn","threshold","leading","trailing","maxThreshold","timeoutId","lastArgs","lastThis","lastResult","thresholdStart","invoke","apply","undefined","getWaitTime","timestamp","Number","isNaN","Math","min","handleTimeout","Date","now","setTimeout","cancel","clearTimeout","flush","debounced","args"],"mappings":"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","sourcesContent":["export const DEFAULT_THRESHOLD = 500;\n\n/**\n * @property {function} fn - Original function to be debounced\n * @property {number} threshold\n */\nexport interface DebounceOptions<F> {\n  /** @property {function} - Original function to be debounced */\n  fn: F;\n  /** @default 500 @property {number} - The debounce delay time. Or the throttle time if in leading mode. */\n  threshold?: number;\n  /** @default false @property {boolean} - If true, fn will be invoke first before starting the debounce timer. */\n  leading?: boolean;\n  /** @default true @property {boolean} - Only applies to leading=true. If true, calling the debounced function during debounce timer will lead to a trailing invocation. */\n  trailing?: boolean;\n  /** @default undefined @property {number} - Defines the maximum time in ms that the invocation can be delayed. This can be used as a throttling mechanism. */\n  maxThreshold?: number;\n}\n\nexport interface DebouncedFunction<F extends (...args: any) => any> {\n  (this: any, ...args: Parameters<F>): ReturnType<F>;\n  flush: () => ReturnType<F>;\n  cancel: () => ReturnType<F>;\n}\n\n/**\n * @return {function} debounced - The debounced function. Set leading to true and maxThreshold to the same as threshold to have basic throttle function.\n * @return {function} debounced.cancel - Calling the cancel function will return the last known result and cancel the queued invocation if there is one.\n * @return {function} debounce.flush - Calling the flush function will return the last known result if no invocation is queued, or cancel the queue and invoke fn immediately and return the result.\n */\nexport function debounce<F extends (...args: any) => any>({\n  fn,\n  threshold = DEFAULT_THRESHOLD,\n  leading = false,\n  trailing = true,\n  maxThreshold = null,\n}: DebounceOptions<F>): DebouncedFunction<F> {\n  let timeoutId: NodeJS.Timeout = null;\n  let lastArgs: Parameters<F>;\n  let lastThis: any;\n  let lastResult: ReturnType<F>;\n  let thresholdStart = 0;\n\n  function invoke() {\n    if (lastArgs) {\n      lastResult = fn.apply(lastThis, lastArgs);\n    }\n    lastThis = undefined;\n    lastArgs = undefined;\n  }\n\n  function getWaitTime(timestamp: number) {\n    return !Number.isNaN(maxThreshold) && maxThreshold > 0\n      ? Math.min(threshold, maxThreshold - (timestamp - thresholdStart))\n      : threshold;\n  }\n\n  function handleTimeout() {\n    timeoutId = null;\n    const timestamp = Date.now();\n    if (lastArgs) {\n      thresholdStart = timestamp;\n      invoke();\n      timeoutId = setTimeout(handleTimeout, getWaitTime(timestamp));\n    } else {\n      thresholdStart = 0;\n    }\n  }\n\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n    }\n    // reset the args and thresholdStart since no invocation occurs\n    lastThis = undefined;\n    lastArgs = undefined;\n    thresholdStart = 0;\n    return lastResult;\n  }\n\n  function flush() {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      handleTimeout();\n    }\n    return lastResult;\n  }\n\n  function debounced(this: any, ...args: Parameters<F>): ReturnType<F> {\n    const timestamp = Date.now();\n    if (!timeoutId || trailing || !leading) {\n      lastThis = this;\n      lastArgs = args;\n    }\n\n    if (!timeoutId && leading) {\n      invoke();\n    }\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    if (thresholdStart === 0 || thresholdStart > timestamp) {\n      // in case that the system time is adjusted backwards to a time server\n      // resett he thresholdStart so that invocation will not be delayed indefinitely\n      thresholdStart = timestamp;\n    }\n    timeoutId = setTimeout(handleTimeout, getWaitTime(timestamp));\n\n    return lastResult;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n\n  return debounced;\n}\n"],"file":"debounce.js"}