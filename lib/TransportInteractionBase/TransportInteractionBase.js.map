{"version":3,"sources":["lib/TransportInteractionBase/TransportInteractionBase.ts"],"names":["TransportInteractionBase","_transportEvents","_transport","key","func","Error","events","registerTransportEvent","requestId","fetchFunc","emitData","result","error","console","log","response"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQqBA,wB;;;;SACnBC,gB,GAAoC,E;SACpCC,U;;;;;iDAEsD;AAAA,UAA7BC,GAA6B,QAA7BA,GAA6B;AAAA,UAAxBC,IAAwB,QAAxBA,IAAwB;;AACpD,UAAI,KAAKH,gBAAL,CAAsBE,GAAtB,CAAJ,EAAgC;AAC9B,cAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACD;;AACD,WAAKJ,gBAAL,CAAsBE,GAAtB,IAA6BC,IAA7B;AACD;;;4CAEuBE,M,EAA0B;AAAA,iDACpBA,MADoB;AAAA;;AAAA;AAChD,4DAAoC;AAAA;AAAA,cAAvBH,GAAuB,eAAvBA,GAAuB;AAAA,cAAlBC,IAAkB,eAAlBA,IAAkB;AAClC,eAAKG,sBAAL,CAA4B;AAAEJ,YAAAA,GAAG,EAAHA,GAAF;AAAOC,YAAAA,IAAI,EAAJA;AAAP,WAA5B;AACD;AAH+C;AAAA;AAAA;AAAA;AAAA;AAIjD;;;;;;;;;;AAGCI,gBAAAA,S,SAAAA,S,EACAC,S,SAAAA,S;;AAEA,oBAAI,CAACA,SAAD,IAAc,OAAOA,SAAP,KAAqB,UAAvC,EAAmD,CACjD;AACD;;AAEKC,gBAAAA,Q,GAAkC;AACtCF,kBAAAA,SAAS,EAATA,SADsC;AAEtCG,kBAAAA,MAAM,EAAE,IAF8B;AAGtCC,kBAAAA,KAAK,EAAE;AAH+B,iB;;;uBAOdH,SAAS,E;;;AAAjCC,gBAAAA,QAAQ,CAACC,M;;;;;;;AAETE,gBAAAA,OAAO,CAACC,GAAR;AACAJ,gBAAAA,QAAQ,CAACE,KAAT;;;AAGF,qBAAKV,UAAL,CAAgBa,QAAhB,CAAyBL,QAAzB;;iDAEOA,Q;;;;;;;;;;;;;;;;;;wBAGa;AACpB,aAAO,KAAKT,gBAAZ;AACD","sourcesContent":["import {\n  FetchOption,\n  Transport,\n  TransportEvent,\n  transportEvents,\n  TransportResponseData,\n} from './TransportInteractionBase.interface';\n\nexport default class TransportInteractionBase {\n  _transportEvents: transportEvents = {};\n  _transport: Transport;\n\n  registerTransportEvent({ key, func }: TransportEvent) {\n    if (this._transportEvents[key]) {\n      throw new Error('transport event has already registered');\n    }\n    this._transportEvents[key] = func;\n  }\n\n  registerTransportEvents(events: TransportEvent[]) {\n    for (const { key, func } of events) {\n      this.registerTransportEvent({ key, func });\n    }\n  }\n\n  async _fetchAndResponse({\n    requestId,\n    fetchFunc,\n  }: FetchOption): Promise<TransportResponseData> {\n    if (!fetchFunc || typeof fetchFunc !== 'function') {\n      // throw new Error('Parameter `fetchFunc` is invalid!');\n    }\n\n    const emitData: TransportResponseData = {\n      requestId,\n      result: null,\n      error: null,\n    };\n\n    try {\n      emitData.result = await fetchFunc();\n    } catch (error) {\n      console.log(error);\n      emitData.error = error;\n    }\n\n    this._transport.response(emitData);\n\n    return emitData;\n  }\n\n  get transportEvents() {\n    return this._transportEvents;\n  }\n}\n"],"file":"TransportInteractionBase.js"}