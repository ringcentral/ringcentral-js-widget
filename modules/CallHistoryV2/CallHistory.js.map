{"version":3,"sources":["modules/CallHistoryV2/CallHistory.ts"],"names":["DEFAULT_CLEAN_TIME","CallHistory","name","deps","dep","optional","trackEvents","clickToSMSCallHistory","that","parentModule","callingSettings","callingMode","callingModes","ringout","clickToDialCallHistoryWithRingOut","clickToDialCallHistory","_deps","callLog","calls","accountInfo","countryCode","normalizedCalls","endedCalls","contactMatcher","dataMapping","activityMatcher","callMonitor","callMatched","filterCalls","searchInput","filteredCalls","storageKey","enableCache","callHistoryOptions","_debouncedSearch","callsSearch","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","tabManager","sessionIds","data","input","timestamp","call","callWithDuration","duration","Math","floor","startTime","idx","item","telephonySessionId","push","filter","find","Date","now","active","triggerMatch","newMonitorCalls","oldMonitorCalls","currentCall","length","_addEndedCalls","currentCalls","ids","forEach","shouldRemovedCalls","removeEndedCalls","setSearchInput","disconnectedCalls","map","result","setEndedCalls","sync","args","effectSearchStr","toLowerCase","trim","phoneNumber","matches","matchesMatched","some","entities","id","indexOf","phone","sort","sortByStartTime","filterSuccess","callFrom","from","callTo","to","contactMapping","activityMapping","telephonySessionIds","fromNumber","extensionNumber","toNumber","fromName","toName","fromMatches","toMatches","activityMatches","sessionId","matched","toNumberEntity","filteredEndedCalls","newCalls","output","numberMap","concat","RcModuleV2","storage","state","action","proxify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AASA;;AACA;;AAIA;;AACA;;AACA;;AAEA;;AAGA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAA1C,C,CAAgD;;IAenCC,W,WAbZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,aADA;AAENC,EAAAA,IAAI,EAAE,CACJ,aADI,EAEJ,SAFI,EAGJ,SAHI,EAIJ;AAAEC,IAAAA,GAAG,EAAE,aAAP;AAAsBC,IAAAA,QAAQ,EAAE;AAAhC,GAJI,EAKJ;AAAED,IAAAA,GAAG,EAAE,iBAAP;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GALI,EAMJ;AAAED,IAAAA,GAAG,EAAE,gBAAP;AAAyBC,IAAAA,QAAQ,EAAE;AAAnC,GANI,EAOJ;AAAED,IAAAA,GAAG,EAAE,YAAP;AAAqBC,IAAAA,QAAQ,EAAE;AAA/B,GAPI,EAQJ;AAAED,IAAAA,GAAG,EAAE,oBAAP;AAA6BC,IAAAA,QAAQ,EAAE;AAAvC,GARI;AAFA,CAAP,C,UA0LE,iBAAMC,uBAAYC,qBAAlB,C,UAMA,iBAAM,UAACC,IAAD;AAAA;;AAAA,SAAuB,CAC5B,qBAACA,IAAI,CAACC,YAAN,CAA2BC,eAA3B,sEAA4CC,WAA5C,MACAC,+BAAaC,OADb,GAEIP,uBAAYQ,iCAFhB,GAGIR,uBAAYS,sBAJY,CAAvB;AAAA,CAAN,C,UAaA,oBAAS,UAACP,IAAD;AAAA,SAAuB,CAC/BA,IAAI,CAACQ,KAAL,CAAWC,OAAX,CAAmBC,KADY,EAE/BV,IAAI,CAACQ,KAAL,CAAWG,WAAX,CAAuBC,WAFQ,CAAvB;AAAA,CAAT,C,UAkCA,oBAAS,UAACZ,IAAD;AAAA;;AAAA,SAAuB,CAC/BA,IAAI,CAACa,eAD0B,EAE/Bb,IAAI,CAACc,UAF0B,2BAG/Bd,IAAI,CAACQ,KAAL,CAAWO,cAHoB,0DAG/B,sBAA2BC,WAHI,2BAI/BhB,IAAI,CAACQ,KAAL,CAAWS,eAJoB,0DAI/B,sBAA4BD,WAJG,2BAK/BhB,IAAI,CAACQ,KAAL,CAAWU,WALoB,0DAK/B,sBAAwBC,WALO,CAAvB;AAAA,CAAT,C,UA+FA,oBAAS,UAACnB,IAAD;AAAA;;AAAA,SAAuB,CAC/BA,IAAI,CAACoB,WAD0B,4BAE/BpB,IAAI,CAACQ,KAAL,CAAWS,eAFoB,2DAE/B,uBAA4BD,WAFG,CAAvB;AAAA,CAAT,C,UAgBA,oBAAS,UAAChB,IAAD;AAAA,SAAuB,CAACA,IAAI,CAACa,eAAN,EAAuBb,IAAI,CAACc,UAA5B,CAAvB;AAAA,CAAT,C,UASA,oBAAS,UAACd,IAAD;AAAA,SAAuB,CAACA,IAAI,CAACQ,KAAL,CAAWC,OAAX,CAAmBC,KAApB,EAA2BV,IAAI,CAACc,UAAhC,CAAvB;AAAA,CAAT,C,UAeA,oBAAS,UAACd,IAAD;AAAA,SAAuB,CAC/BA,IAAI,CAACqB,WAD0B,EAE/BrB,IAAI,CAACU,KAF0B,EAG/BV,IAAI,CAACsB,aAH0B,CAAvB;AAAA,CAAT,C;;;;;AAtWD,uBAAY3B,IAAZ,EAAwB;AAAA;;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA,IADI;AAEJ4B,MAAAA,UAAU,EAAE,aAFR;AAGJC,MAAAA,WAAW,qDAAE7B,IAAI,CAAC8B,kBAAP,2DAAE,uBAAyBD,WAA3B,yEAA0C;AAHjD,KAAN;AADsB,UAFhBE,gBAEgB,GAFG,0BAAS,MAAKC,WAAd,EAA2B,GAA3B,EAAgC,KAAhC,CAEH;;AAAA;;AAAA;;AAAA;;AAMtB,mCAAKnB,KAAL,CAAWO,cAAX,gFAA2Ba,cAA3B,CAA0C;AACxCC,MAAAA,YAAY,EAAE;AAAA,eAAM,MAAKC,aAAX;AAAA,OAD0B;AAExCC,MAAAA,YAAY,EAAE;AAAA,eACZ,CAAC,CAAC,MAAKvB,KAAL,CAAWU,WAAZ,IAA2B,MAAKV,KAAL,CAAWU,WAAX,CAAuBc,KAAnD,MACC,CAAC,MAAKxB,KAAL,CAAWyB,UAAZ,IAA0B,MAAKzB,KAAL,CAAWyB,UAAX,CAAsBD,KADjD,KAEA,MAAKxB,KAAL,CAAWC,OAAX,CAAmBuB,KAFnB,IAGA,MAAKxB,KAAL,CAAWG,WAAX,CAAuBqB,KAJX;AAAA;AAF0B,KAA1C;AAQA,mCAAKxB,KAAL,CAAWS,eAAX,gFAA4BW,cAA5B,CAA2C;AACzCC,MAAAA,YAAY,EAAE;AAAA,eAAM,MAAKK,UAAX;AAAA,OAD2B;AAEzCH,MAAAA,YAAY,EAAE;AAAA,eACZ,CAAC,CAAC,MAAKvB,KAAL,CAAWU,WAAZ,IAA2B,MAAKV,KAAL,CAAWU,WAAX,CAAuBc,KAAnD,MACC,CAAC,MAAKxB,KAAL,CAAWyB,UAAZ,IAA0B,MAAKzB,KAAL,CAAWyB,UAAX,CAAsBD,KADjD,KAEA,MAAKxB,KAAL,CAAWC,OAAX,CAAmBuB,KAHP;AAAA;AAF2B,KAA3C;AAdsB;AAqBvB;;;;oCAauC;AAAA,UAA1BG,IAA0B,uEAAJ,EAAI;AACtC,WAAKb,aAAL,GAAqBa,IAArB;AACD;;;qCAG0B;AAAA,UAAZC,KAAY,uEAAJ,EAAI;AACzB,WAAKf,WAAL,GAAmBe,KAAnB;AACD;;;kCAGatB,U,EAAyBuB,S,EAAmB;AAAA;;AACxD,0BAAQ,UAACC,IAAD,EAAU;AAChB,YAAMC,gBAAgB,mCACjBD,IADiB;AAEpBE,UAAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAW,CAACL,SAAS,GAAGC,IAAI,CAACK,SAAlB,IAA+B,IAA1C;AAFU,UAAtB;;AAIA,YAAMC,GAAG,GAAG,sBACV,UAACC,IAAD;AAAA,iBAAUA,IAAI,CAACC,kBAAL,KAA4BR,IAAI,CAACQ,kBAA3C;AAAA,SADU,EAEV,MAAI,CAAChC,UAFK,CAAZ;;AAIA,YAAI8B,GAAG,GAAG,CAAC,CAAX,EAAc;AACZ;AACA,UAAA,MAAI,CAAC9B,UAAL,CAAgB8B,GAAhB,IAAuBL,gBAAvB;AACD,SAHD,MAGO;AACL,UAAA,MAAI,CAACzB,UAAL,CAAgBiC,IAAhB,CAAqBR,gBAArB;AACD;AACF,OAfD,EAeGzB,UAfH;AAgBD;;;qCAGgBA,U,EAAyB;AACxC,WAAKA,UAAL,GAAkB,KAAKA,UAAL,CAAgBkC,MAAhB,CAChB,UAACV,IAAD;AAAA,eACE,EACExB,UAAU,CAACmC,IAAX,CACE;AAAA,cAAGH,kBAAH,QAAGA,kBAAH;AAAA,iBACEA,kBAAkB,KAAKR,IAAI,CAACQ,kBAD9B;AAAA,SADF,KAIA;AACAI,QAAAA,IAAI,CAACC,GAAL,KAAab,IAAI,CAACK,SAAlB,GAA8BnD,kBANhC,CADF;AAAA,OADgB,CAAlB;AAWD;;;iCAEY;AAAA;;AACX,UAAI,KAAKgB,KAAL,CAAWO,cAAf,EAA+B;AAC7B,yBACE,IADF,EAEE;AAAA,iBAAM,MAAI,CAACe,aAAX;AAAA,SAFF,EAGE,YAAM;AACJ,cACE,MAAI,CAACE,KAAL,KACC,CAAC,MAAI,CAACxB,KAAL,CAAWyB,UAAZ,IAA0B,MAAI,CAACzB,KAAL,CAAWyB,UAAX,CAAsBmB,MADjD,KAEA,MAAI,CAAC5C,KAAL,CAAWO,cAAX,CAA0BiB,KAH5B,EAIE;AACA,YAAA,MAAI,CAACxB,KAAL,CAAWO,cAAX,CAA0BsC,YAA1B;AACD;AACF,SAXH;AAaD;;AAED,UAAI,KAAK7C,KAAL,CAAWS,eAAf,EAAgC;AAC9B,yBACE,IADF,EAEE;AAAA,iBAAM,MAAI,CAACiB,UAAX;AAAA,SAFF,EAGE,YAAM;AACJ,cACE,MAAI,CAACF,KAAL,KACC,CAAC,MAAI,CAACxB,KAAL,CAAWyB,UAAZ,IAA0B,MAAI,CAACzB,KAAL,CAAWyB,UAAX,CAAsBmB,MADjD,KAEA,MAAI,CAAC5C,KAAL,CAAWS,eAAX,CAA2Be,KAH7B,EAIE;AACA,YAAA,MAAI,CAACxB,KAAL,CAAWS,eAAX,CAA2BoC,YAA3B;AACD;AACF,SAXH;AAaD;;AAED,WAAK7C,KAAL,CAAWU,WAAX,IACE,iBACE,IADF,EAEE;AAAA,eAAM,MAAI,CAACV,KAAL,CAAWU,WAAX,CAAuBR,KAA7B;AAAA,OAFF,EAGE,UAAC4C,eAAD,EAAkBC,eAAlB,EAAsC;AACpC,YAAI,CAAC,MAAI,CAACvB,KAAV,EAAiB;AACjB,YAAMlB,UAAU,GAAG,CAACyC,eAAe,IAAI,EAApB,EAAwBP,MAAxB,CACjB,UAACV,IAAD;AAAA,iBACE,CAACgB,eAAe,CAACL,IAAhB,CACC,UAACO,WAAD;AAAA,mBACElB,IAAI,CAACQ,kBAAL,KAA4BU,WAAW,CAACV,kBAD1C;AAAA,WADD,CAAD,IAIA;AACA,WAAC,MAAI,CAACtC,KAAL,CAAWC,OAAX,CAAmBC,KAAnB,CAAyBuC,IAAzB,CACC,UAACO,WAAD;AAAA,mBACElB,IAAI,CAACQ,kBAAL,KAA4BU,WAAW,CAACV,kBAD1C;AAAA,WADD,CANH;AAAA,SADiB,CAAnB;;AAYA,YAAIhC,UAAU,CAAC2C,MAAf,EAAuB;AACrB,UAAA,MAAI,CAACC,cAAL,CAAoB5C,UAApB;AACD;AACF,OApBH,CADF;AAwBA,uBACE,IADF,EAEE;AAAA,eAAM,MAAI,CAACN,KAAL,CAAWC,OAAX,CAAmBC,KAAzB;AAAA,OAFF,EAGE,YAAuB;AAAA,YAAtBiD,YAAsB,uEAAP,EAAO;AACrB,YAAI,CAAC,MAAI,CAAC3B,KAAV,EAAiB;AACjB,YAAM4B,GAA4B,GAAG,EAArC;AACAD,QAAAA,YAAY,CAACE,OAAb,CAAqB,UAACvB,IAAD,EAAU;AAC7BsB,UAAAA,GAAG,CAACtB,IAAI,CAACQ,kBAAN,CAAH,GAA+B,IAA/B;AACD,SAFD;;AAGA,YAAMgB,kBAAkB,GAAG,MAAI,CAAChD,UAAL,CAAgBkC,MAAhB,CACzB,UAACV,IAAD;AAAA,iBAAUsB,GAAG,CAACtB,IAAI,CAACQ,kBAAN,CAAb;AAAA,SADyB,CAA3B;;AAGA,YAAIgB,kBAAkB,CAACL,MAAvB,EAA+B;AAC7B,UAAA,MAAI,CAACM,gBAAL,CAAsBD,kBAAtB;AACD;AACF,OAfH;AAiBD;;;8BAES;AACR,WAAKE,cAAL,CAAoB,EAApB;AACD;;;mCAEclD,U,EAAoB;AACjC,UAAMmD,iBAA8B,GAAGnD,UAAU,CAACoD,GAAX,CAAe,UAAC5B,IAAD;AAAA,+CACjDA,IADiD;AAEpD6B,UAAAA,MAAM,EAAE;AAF4C;AAAA,OAAf,CAAvC;AAIA,WAAKC,aAAL,CAAmBH,iBAAnB,EAAsCf,IAAI,CAACC,GAAL,EAAtC;;AACA,WAAK3C,KAAL,CAAWC,OAAX,CAAmB4D,IAAnB;AACD,K,CAED;AACA;;;;;;;;;;;;;;;;;;;;;;QAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;yGAWwBjC,K;;;;;AACtB,qBAAK4B,cAAL,CAAoB5B,KAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CA4FuBkC,I;AAAAA,kBAAAA,I;;;AACvB,8CAAK5C,gBAAL,EAAsBY,IAAtB,+BAA2B,IAA3B,SAAoCgC,IAApC;;;;;;;;;;;;;;;;;;;;;;;;;sBAKI,KAAKjD,WAAL,KAAqB,E;;;;;;;;AAGnBX,gBAAAA,K,GAAQ,KAAKA,K;AACbW,gBAAAA,W,GAAc,KAAKA,W;AACnBkD,gBAAAA,e,GAAkBlD,WAAW,CAACmD,WAAZ,GAA0BC,IAA1B,E;AAClBtC,gBAAAA,I,GAAOzB,KAAK,CACfsC,MADU,CACH,UAACV,IAAD,EAAU;AAAA,8CACiB,2CAAsBA,IAAtB,CADjB;AAAA,sBACRoC,WADQ,yBACRA,WADQ;AAAA,sBACKC,OADL,yBACKA,OADL;;AAEhB,sBAAMC,cAAc,GAAGD,OAAO,CAACE,IAAR,CAAa,UAACC,QAAD,EAAc;AAChD,wBAAI,CAACA,QAAD,IAAa,CAACA,QAAQ,CAACC,EAA3B,EAA+B,OAAO,KAAP;AAC/B,wBACED,QAAQ,CAACpF,IAAT,IACAoF,QAAQ,CAACpF,IAAT,CAAc8E,WAAd,GAA4BQ,OAA5B,CAAoCT,eAApC,IAAuD,CAAC,CAF1D,EAIE,OAAO,IAAP;AACF,wBAAIO,QAAQ,CAACG,KAAT,IAAkBH,QAAQ,CAACG,KAAT,CAAeD,OAAf,CAAuBT,eAAvB,IAA0C,CAAC,CAAjE,EACE,OAAO,IAAP;AACF,2BAAO,KAAP;AACD,mBAVsB,CAAvB;;AAYA,sBAAIK,cAAJ,EAAoB;AAClB,2BAAO,IAAP;AACD;;AACD,sBAAIF,WAAW,IAAIA,WAAW,CAACM,OAAZ,CAAoBT,eAApB,IAAuC,CAAC,CAA3D,EAA8D;AAC5D,2BAAO,IAAP;AACD;;AACD,yBAAO,KAAP;AACD,iBAtBU,EAuBVW,IAvBU,CAuBLC,+BAvBK,C;AAyBb,qBAAKC,aAAL,CAAmBjD,IAAnB;;;;;;;;;;;;;;;;;;wBA1HkC;AAAA;;AAClC,aAAO,KAAK3B,KAAL,CAAWC,OAAX,CAAmBC,KAAnB,CACJwD,GADI,CACA,UAAC5B,IAAD,EAAU;AACb,YAAM+C,QAAQ,qBACT/C,IAAI,CAACgD,IADI,CAAd;;AAGA,YAAID,QAAQ,CAACX,WAAb,EAA0B;AACxBW,UAAAA,QAAQ,CAACX,WAAT,GAAuB,iCAAgB;AACrCA,YAAAA,WAAW,EAAEW,QAAQ,CAACX,WADe;AAErC9D,YAAAA,WAAW,EAAE,MAAI,CAACJ,KAAL,CAAWG,WAAX,CAAuBC;AAFC,WAAhB,CAAvB;AAID;;AACD,YAAM2E,MAAM,qBACPjD,IAAI,CAACkD,EADE,CAAZ;;AAGA,YAAID,MAAM,CAACb,WAAX,EAAwB;AACtBa,UAAAA,MAAM,CAACb,WAAP,GAAqB,iCAAgB;AACnCA,YAAAA,WAAW,EAAEa,MAAM,CAACb,WADe;AAEnC9D,YAAAA,WAAW,EAAE,MAAI,CAACJ,KAAL,CAAWG,WAAX,CAAuBC;AAFD,WAAhB,CAArB;AAID;;AACD,+CACK0B,IADL;AAEEgD,UAAAA,IAAI,EAAED,QAFR;AAGEG,UAAAA,EAAE,EAAED;AAHN;AAKD,OAzBI,EA0BJL,IA1BI,CA0BCC,+BA1BD,CAAP;AA2BD;;;wBAS0B;AAAA;;AACzB,UAAMM,cAAc,uDAAG,KAAKjF,KAAL,CAAWO,cAAd,2DAAG,uBAA2BC,WAA9B,2EAA6C,EAAjE;AACA,UAAM0E,eAAe,uDAAG,KAAKlF,KAAL,CAAWS,eAAd,2DAAG,uBAA4BD,WAA/B,2EAA8C,EAAnE;AACA,UAAMG,WAAW,sDAAG,KAAKX,KAAL,CAAWU,WAAd,2DAAG,uBAAwBC,WAA3B,yEAA0C,EAA3D;AACA,UAAMwE,mBAA4C,GAAG,EAArD;AACA,UAAMjF,KAAK,GAAG,KAAKG,eAAL,CAAqBqD,GAArB,CAAyB,UAAC5B,IAAD,EAAU;AAC/CqD,QAAAA,mBAAmB,CAACrD,IAAI,CAACQ,kBAAN,CAAnB,GAA+C,IAA/C;AACA,YAAM8C,UAAU,GACdtD,IAAI,CAACgD,IAAL,KAAchD,IAAI,CAACgD,IAAL,CAAUZ,WAAV,IAAyBpC,IAAI,CAACgD,IAAL,CAAUO,eAAjD,CADF;AAEA,YAAMC,QAAQ,GACZxD,IAAI,CAACkD,EAAL,KAAYlD,IAAI,CAACkD,EAAL,CAAQd,WAAR,IAAuBpC,IAAI,CAACkD,EAAL,CAAQK,eAA3C,CADF;AAEA,YAAME,QAAQ,GAAGzD,IAAI,CAACgD,IAAL,CAAU5F,IAAV,IAAkB4C,IAAI,CAACgD,IAAL,CAAUZ,WAA7C;AACA,YAAMsB,MAAM,GAAG1D,IAAI,CAACkD,EAAL,CAAQ9F,IAAR,IAAgB4C,IAAI,CAACkD,EAAL,CAAQd,WAAvC;AACA,YAAMuB,WAAW,GAAIL,UAAU,IAAIH,cAAc,CAACG,UAAD,CAA7B,IAA8C,EAAlE;AACA,YAAMM,SAAS,GAAIJ,QAAQ,IAAIL,cAAc,CAACK,QAAD,CAA3B,IAA0C,EAA5D;AACA,YAAMK,eAAe,GAAGT,eAAe,CAACpD,IAAI,CAAC8D,SAAN,CAAf,IAAmC,EAA3D;AACA,YAAMC,OAAO,GAAGlF,WAAW,CAACmB,IAAI,CAAC8D,SAAN,CAA3B;AACA,+CACK9D,IADL;AAEEyD,UAAAA,QAAQ,EAARA,QAFF;AAGEC,UAAAA,MAAM,EAANA,MAHF;AAIEC,UAAAA,WAAW,EAAXA,WAJF;AAKEC,UAAAA,SAAS,EAATA,SALF;AAMEC,UAAAA,eAAe,EAAfA,eANF;AAOEG,UAAAA,cAAc,EAAED;AAPlB;AASD,OArBa,CAAd;AAsBA,UAAME,kBAAkB,GAAG,KAAKzF,UAAL,CACxBkC,MADwB,CACjB,UAACV,IAAD;AAAA,eAAU,CAACqD,mBAAmB,CAACrD,IAAI,CAACQ,kBAAN,CAA9B;AAAA,OADiB,EAExBoB,GAFwB,CAEpB,UAAC5B,IAAD,EAAU;AACb,YAAM6D,eAAe,GAAGT,eAAe,CAACpD,IAAI,CAAC8D,SAAN,CAAf,IAAmC,EAA3D;AACA,YAAMR,UAAU,GACdtD,IAAI,CAACgD,IAAL,KAAchD,IAAI,CAACgD,IAAL,CAAUZ,WAAV,IAAyBpC,IAAI,CAACgD,IAAL,CAAUO,eAAjD,CADF;AAEA,YAAMC,QAAQ,GACZxD,IAAI,CAACkD,EAAL,KAAYlD,IAAI,CAACkD,EAAL,CAAQd,WAAR,IAAuBpC,IAAI,CAACkD,EAAL,CAAQK,eAA3C,CADF;AAEA,YAAMI,WAAW,GAAIL,UAAU,IAAIH,cAAc,CAACG,UAAD,CAA7B,IAA8C,EAAlE;AACA,YAAMM,SAAS,GAAIJ,QAAQ,IAAIL,cAAc,CAACK,QAAD,CAA3B,IAA0C,EAA5D;AACA,+CACKxD,IADL;AAEE6D,UAAAA,eAAe,EAAfA,eAFF;AAGEF,UAAAA,WAAW,EAAXA,WAHF;AAIEC,UAAAA,SAAS,EAATA;AAJF;AAMD,OAhBwB,CAA3B;AAiBA,aAAO,6BAAIK,kBAAJ,sBAA2B7F,KAA3B,GAAkCwE,IAAlC,CAAuCC,+BAAvC,CAAP;AACD;;;wBA+CiB;AAAA;AAAA;;AAChB,oCAAI,KAAK3E,KAAL,CAAWS,eAAf,2DAAI,uBAA4BD,WAAhC,EAA6C;AAC3C,YAAMwF,QAAQ,GAAG,KAAKpF,WAAL,CAAiB8C,GAAjB,CAAqB,UAAC5B,IAAD;AAAA;;AAAA,iDACjCA,IADiC;AAEpC6D,YAAAA,eAAe,EACb,0BAAA,MAAI,CAAC3F,KAAL,CAAWS,eAAX,gFAA4BD,WAA5B,CAAwCsB,IAAI,CAAC8D,SAA7C,MAA2D;AAHzB;AAAA,SAArB,CAAjB;AAKA,eAAOI,QAAP;AACD;;AACD,aAAO,KAAKpF,WAAZ;AACD;;;wBAGmB;AAClB,UAAMqF,MAAgB,GAAG,EAAzB;AACA,UAAMC,SAAkC,GAAG,EAA3C;AACA,WAAK7F,eAAL,CAAqBgD,OAArB,CAA6B,2CAAmB4C,MAAnB,EAA2BC,SAA3B,CAA7B;AACA,WAAK5F,UAAL,CAAgB+C,OAAhB,CAAwB,2CAAmB4C,MAAnB,EAA2BC,SAA3B,CAAxB;AACA,aAAOD,MAAP;AACD;;;wBAGgB;AACf,UAAMvE,UAAmC,GAAG,EAA5C;AACA,aAAO,KAAK1B,KAAL,CAAWC,OAAX,CAAmBC,KAAnB,CACJwD,GADI,CACA,UAAC5B,IAAD,EAAU;AACbJ,QAAAA,UAAU,CAACI,IAAI,CAAC8D,SAAN,CAAV,GAA6B,IAA7B;AACA,eAAO9D,IAAI,CAAC8D,SAAZ;AACD,OAJI,EAKJO,MALI,CAMH,KAAK7F,UAAL,CACGkC,MADH,CACU,UAACV,IAAD;AAAA,eAAU,CAACJ,UAAU,CAACI,IAAI,CAAC8D,SAAN,CAArB;AAAA,OADV,EAEGlC,GAFH,CAEO,UAAC5B,IAAD;AAAA,eAAUA,IAAI,CAAC8D,SAAf;AAAA,OAFP,CANG,CAAP;AAUD;;;wBAOiB;AAChB,UAAI,KAAK/E,WAAL,KAAqB,EAAzB,EAA6B;AAC3B,eAAO,KAAKX,KAAZ;AACD;;AACD,aAAO,KAAKY,aAAZ;AACD,K,CAED;;AACA;AACF;AACA;AACA;;;;wBAC2B;AACvB,aAAO,KAAKR,UAAZ;AACD;;;;EA5X8B8F,gB,8EA0B9BC,a,EACAC,W;;;;;WACyB,E;;gFAEzBA,W;;;;;WACa,E;;kFAEbA,W;;;;;WAC8B,E;;mEAE9BC,Y,4JAKAA,Y,4JAKAA,Y,8JAoBAA,Y,6JA0GAC,mB,iKAMAA,mB,sKASAA,mB,qdA6FAA,mB,2JAKAA,mB","sourcesContent":["import { forEach, findIndex } from 'ramda';\nimport {\n  RcModuleV2,\n  state,\n  action,\n  computed,\n  storage,\n  watch,\n  track,\n} from '@ringcentral-integration/core';\nimport { Module } from '../../lib/di';\nimport {\n  sortByStartTime,\n  getPhoneNumberMatches,\n} from '../../lib/callLogHelpers';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport proxify from '../../lib/proxy/proxify';\nimport debounce from '../../lib/debounce';\nimport { Deps, EndedCall, HistoryCall } from './CallHistory.interface';\nimport { addNumbersFromCall } from './callHistoryHelper';\nimport { Call } from '../../interfaces/Call.interface';\nimport { ActiveCall } from '../../interfaces/Presence.model';\nimport { trackEvents } from '../Analytics';\nimport { callingModes } from '../CallingSettingsV2';\n\nconst DEFAULT_CLEAN_TIME = 24 * 60 * 60 * 1000; // 1 day\n\n@Module({\n  name: 'CallHistory',\n  deps: [\n    'AccountInfo',\n    'CallLog',\n    'Storage',\n    { dep: 'CallMonitor', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'CallHistoryOptions', optional: true },\n  ],\n})\nexport class CallHistory extends RcModuleV2<Deps> {\n  private _debouncedSearch = debounce(this.callsSearch, 230, false);\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      storageKey: 'CallHistory',\n      enableCache: deps.callHistoryOptions?.enableCache ?? true,\n    });\n    this._deps.contactMatcher?.addQuerySource({\n      getQueriesFn: () => this.uniqueNumbers,\n      readyCheckFn: () =>\n        (!this._deps.callMonitor || this._deps.callMonitor.ready) &&\n        (!this._deps.tabManager || this._deps.tabManager.ready) &&\n        this._deps.callLog.ready &&\n        this._deps.accountInfo.ready,\n    });\n    this._deps.activityMatcher?.addQuerySource({\n      getQueriesFn: () => this.sessionIds,\n      readyCheckFn: () =>\n        (!this._deps.callMonitor || this._deps.callMonitor.ready) &&\n        (!this._deps.tabManager || this._deps.tabManager.ready) &&\n        this._deps.callLog.ready,\n    });\n  }\n\n  @storage\n  @state\n  endedCalls: EndedCall[] = [];\n\n  @state\n  searchInput = '';\n\n  @state\n  filteredCalls: HistoryCall[] = [];\n\n  @action\n  filterSuccess(data: HistoryCall[] = []) {\n    this.filteredCalls = data;\n  }\n\n  @action\n  setSearchInput(input = '') {\n    this.searchInput = input;\n  }\n\n  @action\n  setEndedCalls(endedCalls: EndedCall[], timestamp: number) {\n    forEach((call) => {\n      const callWithDuration = {\n        ...call,\n        duration: Math.floor((timestamp - call.startTime) / 1000),\n      };\n      const idx = findIndex(\n        (item) => item.telephonySessionId === call.telephonySessionId,\n        this.endedCalls,\n      );\n      if (idx > -1) {\n        // replace old one if found\n        this.endedCalls[idx] = callWithDuration;\n      } else {\n        this.endedCalls.push(callWithDuration);\n      }\n    }, endedCalls);\n  }\n\n  @action\n  removeEndedCalls(endedCalls: EndedCall[]) {\n    this.endedCalls = this.endedCalls.filter(\n      (call) =>\n        !(\n          endedCalls.find(\n            ({ telephonySessionId }) =>\n              telephonySessionId === call.telephonySessionId,\n          ) ||\n          // clean current overdue ended call (default clean time: 1day).\n          Date.now() - call.startTime > DEFAULT_CLEAN_TIME\n        ),\n    );\n  }\n\n  onInitOnce() {\n    if (this._deps.contactMatcher) {\n      watch(\n        this,\n        () => this.uniqueNumbers,\n        () => {\n          if (\n            this.ready &&\n            (!this._deps.tabManager || this._deps.tabManager.active) &&\n            this._deps.contactMatcher.ready\n          ) {\n            this._deps.contactMatcher.triggerMatch();\n          }\n        },\n      );\n    }\n\n    if (this._deps.activityMatcher) {\n      watch(\n        this,\n        () => this.sessionIds,\n        () => {\n          if (\n            this.ready &&\n            (!this._deps.tabManager || this._deps.tabManager.active) &&\n            this._deps.activityMatcher.ready\n          ) {\n            this._deps.activityMatcher.triggerMatch();\n          }\n        },\n      );\n    }\n\n    this._deps.callMonitor &&\n      watch(\n        this,\n        () => this._deps.callMonitor.calls,\n        (newMonitorCalls, oldMonitorCalls) => {\n          if (!this.ready) return;\n          const endedCalls = (oldMonitorCalls || []).filter(\n            (call) =>\n              !newMonitorCalls.find(\n                (currentCall) =>\n                  call.telephonySessionId === currentCall.telephonySessionId,\n              ) &&\n              // if the call's callLog has been fetch, skip\n              !this._deps.callLog.calls.find(\n                (currentCall) =>\n                  call.telephonySessionId === currentCall.telephonySessionId,\n              ),\n          );\n          if (endedCalls.length) {\n            this._addEndedCalls(endedCalls);\n          }\n        },\n      );\n\n    watch(\n      this,\n      () => this._deps.callLog.calls,\n      (currentCalls = []) => {\n        if (!this.ready) return;\n        const ids: Record<string, boolean> = {};\n        currentCalls.forEach((call) => {\n          ids[call.telephonySessionId] = true;\n        });\n        const shouldRemovedCalls = this.endedCalls.filter(\n          (call) => ids[call.telephonySessionId],\n        );\n        if (shouldRemovedCalls.length) {\n          this.removeEndedCalls(shouldRemovedCalls);\n        }\n      },\n    );\n  }\n\n  onReset() {\n    this.setSearchInput('');\n  }\n\n  _addEndedCalls(endedCalls: Call[]) {\n    const disconnectedCalls: EndedCall[] = endedCalls.map((call) => ({\n      ...call,\n      result: 'Disconnected',\n    }));\n    this.setEndedCalls(disconnectedCalls, Date.now());\n    this._deps.callLog.sync();\n  }\n\n  // TODO: move to UI module\n  // for track click to sms in call history\n  @proxify\n  @track(trackEvents.clickToSMSCallHistory)\n  async onClickToSMS() {}\n\n  // TODO: move to UI module\n  // for track click to call in call history\n  @proxify\n  @track((that: CallHistory) => [\n    (that.parentModule as any).callingSettings?.callingMode ===\n    callingModes.ringout\n      ? trackEvents.clickToDialCallHistoryWithRingOut\n      : trackEvents.clickToDialCallHistory,\n  ])\n  async onClickToCall() {}\n\n  @proxify\n  async updateSearchInput(input: string) {\n    this.setSearchInput(input);\n  }\n\n  @computed((that: CallHistory) => [\n    that._deps.callLog.calls,\n    that._deps.accountInfo.countryCode,\n  ])\n  get normalizedCalls(): ActiveCall[] {\n    return this._deps.callLog.calls\n      .map((call) => {\n        const callFrom = {\n          ...call.from,\n        };\n        if (callFrom.phoneNumber) {\n          callFrom.phoneNumber = normalizeNumber({\n            phoneNumber: callFrom.phoneNumber,\n            countryCode: this._deps.accountInfo.countryCode,\n          });\n        }\n        const callTo = {\n          ...call.to,\n        };\n        if (callTo.phoneNumber) {\n          callTo.phoneNumber = normalizeNumber({\n            phoneNumber: callTo.phoneNumber,\n            countryCode: this._deps.accountInfo.countryCode,\n          });\n        }\n        return {\n          ...call,\n          from: callFrom,\n          to: callTo,\n        };\n      })\n      .sort(sortByStartTime);\n  }\n\n  @computed((that: CallHistory) => [\n    that.normalizedCalls,\n    that.endedCalls,\n    that._deps.contactMatcher?.dataMapping,\n    that._deps.activityMatcher?.dataMapping,\n    that._deps.callMonitor?.callMatched,\n  ])\n  get calls(): HistoryCall[] {\n    const contactMapping = this._deps.contactMatcher?.dataMapping ?? {};\n    const activityMapping = this._deps.activityMatcher?.dataMapping ?? {};\n    const callMatched = this._deps.callMonitor?.callMatched ?? {};\n    const telephonySessionIds: Record<string, boolean> = {};\n    const calls = this.normalizedCalls.map((call) => {\n      telephonySessionIds[call.telephonySessionId] = true;\n      const fromNumber =\n        call.from && (call.from.phoneNumber || call.from.extensionNumber);\n      const toNumber =\n        call.to && (call.to.phoneNumber || call.to.extensionNumber);\n      const fromName = call.from.name || call.from.phoneNumber;\n      const toName = call.to.name || call.to.phoneNumber;\n      const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n      const toMatches = (toNumber && contactMapping[toNumber]) || [];\n      const activityMatches = activityMapping[call.sessionId] || [];\n      const matched = callMatched[call.sessionId];\n      return {\n        ...call,\n        fromName,\n        toName,\n        fromMatches,\n        toMatches,\n        activityMatches,\n        toNumberEntity: matched,\n      };\n    });\n    const filteredEndedCalls = this.endedCalls\n      .filter((call) => !telephonySessionIds[call.telephonySessionId])\n      .map((call) => {\n        const activityMatches = activityMapping[call.sessionId] || [];\n        const fromNumber =\n          call.from && (call.from.phoneNumber || call.from.extensionNumber);\n        const toNumber =\n          call.to && (call.to.phoneNumber || call.to.extensionNumber);\n        const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n        const toMatches = (toNumber && contactMapping[toNumber]) || [];\n        return {\n          ...call,\n          activityMatches,\n          fromMatches,\n          toMatches,\n        };\n      });\n    return [...filteredEndedCalls, ...calls].sort(sortByStartTime);\n  }\n\n  @proxify\n  async debouncedSearch(...args: any[]) {\n    this._debouncedSearch.call(this, ...args);\n  }\n\n  @proxify\n  async callsSearch() {\n    if (this.searchInput === '') {\n      return;\n    }\n    const calls = this.calls;\n    const searchInput = this.searchInput;\n    const effectSearchStr = searchInput.toLowerCase().trim();\n    const data = calls\n      .filter((call) => {\n        const { phoneNumber, matches } = getPhoneNumberMatches(call);\n        const matchesMatched = matches.some((entities) => {\n          if (!entities || !entities.id) return false;\n          if (\n            entities.name &&\n            entities.name.toLowerCase().indexOf(effectSearchStr) > -1\n          )\n            return true;\n          if (entities.phone && entities.phone.indexOf(effectSearchStr) > -1)\n            return true;\n          return false;\n        });\n\n        if (matchesMatched) {\n          return true;\n        }\n        if (phoneNumber && phoneNumber.indexOf(effectSearchStr) > -1) {\n          return true;\n        }\n        return false;\n      })\n      .sort(sortByStartTime);\n\n    this.filterSuccess(data);\n  }\n\n  @computed((that: CallHistory) => [\n    that.filterCalls,\n    that._deps.activityMatcher?.dataMapping,\n  ])\n  get latestCalls() {\n    if (this._deps.activityMatcher?.dataMapping) {\n      const newCalls = this.filterCalls.map((call) => ({\n        ...call,\n        activityMatches:\n          this._deps.activityMatcher?.dataMapping[call.sessionId] || [],\n      }));\n      return newCalls;\n    }\n    return this.filterCalls;\n  }\n\n  @computed((that: CallHistory) => [that.normalizedCalls, that.endedCalls])\n  get uniqueNumbers() {\n    const output: string[] = [];\n    const numberMap: Record<string, boolean> = {};\n    this.normalizedCalls.forEach(addNumbersFromCall(output, numberMap));\n    this.endedCalls.forEach(addNumbersFromCall(output, numberMap));\n    return output;\n  }\n\n  @computed((that: CallHistory) => [that._deps.callLog.calls, that.endedCalls])\n  get sessionIds() {\n    const sessionIds: Record<string, boolean> = {};\n    return this._deps.callLog.calls\n      .map((call) => {\n        sessionIds[call.sessionId] = true;\n        return call.sessionId;\n      })\n      .concat(\n        this.endedCalls\n          .filter((call) => !sessionIds[call.sessionId])\n          .map((call) => call.sessionId),\n      );\n  }\n\n  @computed((that: CallHistory) => [\n    that.searchInput,\n    that.calls,\n    that.filteredCalls,\n  ])\n  get filterCalls() {\n    if (this.searchInput === '') {\n      return this.calls;\n    }\n    return this.filteredCalls;\n  }\n\n  // TODO: remove recentlyEndedCalls getter, instead of `endedCalls`.\n  /**\n   * !!Please use `endedCalls` instead of it.\n   * @deprecated\n   */\n  get recentlyEndedCalls() {\n    return this.endedCalls;\n  }\n}\n"],"file":"CallHistory.js"}