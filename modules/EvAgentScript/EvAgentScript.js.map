{"version":3,"sources":["modules/EvAgentScript/EvAgentScript.ts"],"names":["EvAgentScript","name","deps","dep","optional","enableCache","storageKey","_channel","_eventEmitter","EventEmitter","_hadResponse","state","isDisplayAgentScript","script","currentCallScript","id","data","callScriptResultMapping","emit","agentScriptEvents","SET_SCRIPT_RESULT","console","log","cb","on","UPDATE_DISPOSITION","_bindChannel","_responseInitScript","_deps","evCallMonitor","onCallAnswered","call","getIsAgentScript","getScript","scriptId","scriptVersion","uii","evAuth","beforeAgentLogout","reset","setIsDisplayAgentScript","tabManager","enable","sessionStorage","getItem","EV_AGENT_SCRIPT_BROADCAST_KEY","setItem","SingleTabBroadcastChannel","from","EV_APP_PAGE_KEY","to","EV_AGENT_SCRIPT_PAGE_KEY","init","addEventListener","key","value","evCall","activityCallId","currentCall","INIT","setCallScriptResult","GET_KNOWLEDGE_BASE_ARTICLES","_getKnowledgeBaseGroups","setTimeout","knowledgeBaseGroupIds","evClient","getKnowledgeBaseGroups","send","config","version","type","response","result","JSON","parse","json","setCurrentCallScript","scriptResult","encodeUii","sessionId","session","_formatScriptResult","saveScriptResult","res","resultCopy","model","output","undefined","leadField","Object","entries","RcModuleV2","storage","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n  watch,\n} from '@ringcentral-integration/core';\nimport { EventEmitter } from 'events';\nimport { clone, reduce } from 'ramda';\nimport { Debounce } from 'ringcentral-integration/lib/debounce-throttle';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { SingleTabBroadcastChannel } from 'ringcentral-integration/lib/SingleTabBroadcastChannel';\n\nimport {\n  agentScriptEvents,\n  EV_AGENT_SCRIPT_BROADCAST_KEY,\n  EV_AGENT_SCRIPT_PAGE_KEY,\n  EV_APP_PAGE_KEY,\n} from '../../enums';\nimport { EvCallData } from '../../interfaces/EvData.interface';\nimport {\n  EvAgentScriptData,\n  EvAgentScriptResult,\n  EvAgentScriptResultModel,\n  EvBaseCall,\n  EvCallDispositionItem,\n  EvScriptResponseJSON,\n} from '../../lib/EvClient';\nimport {\n  AgentScript,\n  Deps,\n  EvCallScriptResultMapping,\n} from './EvAgentScript.interface';\n\n@Module({\n  name: 'EvAgentScript',\n  deps: [\n    'EvClient',\n    'EvAuth',\n    'EvCall',\n    'Storage',\n    'TabManager',\n    'EvCallMonitor',\n    { dep: 'EvAgentScriptOptions', optional: true },\n  ],\n})\nclass EvAgentScript<T = {}>\n  extends RcModuleV2<Deps & T>\n  implements AgentScript {\n  private _channel: SingleTabBroadcastChannel;\n\n  protected _eventEmitter = new EventEmitter();\n  private _hadResponse = false;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvAgentScript',\n    });\n  }\n\n  // currentChatScripts: any = null;\n\n  @storage\n  @state\n  currentCallScript: EvAgentScriptData = null;\n\n  @storage\n  @state\n  isDisplayAgentScript = true;\n\n  @storage\n  @state\n  callScriptResultMapping: EvCallScriptResultMapping = {};\n\n  @action\n  setIsDisplayAgentScript(state: boolean) {\n    this.isDisplayAgentScript = state;\n  }\n\n  @action\n  setCurrentCallScript(script: EvAgentScriptData) {\n    this.currentCallScript = script;\n  }\n\n  @Debounce()\n  @action\n  setCallScriptResult(id: string, data: EvAgentScriptResult) {\n    this.callScriptResultMapping[id] = data;\n    this._eventEmitter.emit(agentScriptEvents.SET_SCRIPT_RESULT, id, data);\n  }\n\n  reset() {\n    console.log('!!!EvAgentScript reset');\n    // this.setIsDisplayAgentScript(false);\n  }\n\n  onSetScriptResult(cb: (id: string, data: EvAgentScriptResult) => any) {\n    this._eventEmitter.on(agentScriptEvents.SET_SCRIPT_RESULT, cb);\n  }\n\n  onUpdateDisposition(cb: (id: string, data: EvCallDispositionItem) => any) {\n    this._eventEmitter.on(agentScriptEvents.UPDATE_DISPOSITION, cb);\n  }\n\n  onInitOnce() {\n    this._bindChannel();\n\n    // when script change emit that\n    watch(\n      this,\n      () => this.currentCallScript,\n      () => {\n        this._responseInitScript();\n      },\n    );\n\n    this._deps.evCallMonitor.onCallAnswered(async (call) => {\n      if (this.getIsAgentScript(call)) {\n        await this.getScript(\n          call.scriptId,\n          call.scriptVersion,\n          'CALL',\n          call.uii,\n        );\n      }\n    });\n\n    this._deps.evAuth.beforeAgentLogout(() => {\n      this.reset();\n    });\n  }\n\n  onInit() {\n    console.log('EvAgentScript!! init');\n    this.setIsDisplayAgentScript(true);\n  }\n\n  getIsAgentScript(call: EvBaseCall) {\n    return !!(this.isDisplayAgentScript && call.scriptId);\n  }\n\n  private _bindChannel() {\n    if (\n      this._deps.tabManager.enable &&\n      !sessionStorage.getItem(EV_AGENT_SCRIPT_BROADCAST_KEY)\n    ) {\n      sessionStorage.setItem(\n        EV_AGENT_SCRIPT_BROADCAST_KEY,\n        this._deps.tabManager.id,\n      );\n    }\n\n    this._channel = new SingleTabBroadcastChannel(\n      EV_AGENT_SCRIPT_BROADCAST_KEY,\n      {\n        from: EV_APP_PAGE_KEY,\n        to: EV_AGENT_SCRIPT_PAGE_KEY,\n      },\n    ).init();\n\n    this._channel.addEventListener(({ data }) => {\n      const { key, value } = data;\n      const { activityCallId, currentCall } = this._deps.evCall;\n\n      if (\n        this.isDisplayAgentScript &&\n        activityCallId &&\n        currentCall?.scriptId\n      ) {\n        switch (key) {\n          case agentScriptEvents.INIT:\n            this._responseInitScript();\n            break;\n          case agentScriptEvents.SET_SCRIPT_RESULT:\n            this.setCallScriptResult(activityCallId, value);\n            break;\n          case agentScriptEvents.GET_KNOWLEDGE_BASE_ARTICLES:\n            this._getKnowledgeBaseGroups(value);\n            break;\n          case agentScriptEvents.UPDATE_DISPOSITION:\n            this._eventEmitter.emit(\n              agentScriptEvents.UPDATE_DISPOSITION,\n              activityCallId,\n              value,\n            );\n            break;\n          default:\n            break;\n        }\n      }\n    });\n\n    // if that agent Script is more quick than CTI app, that will need emit that when app init.\n    setTimeout(() => {\n      if (this.currentCallScript && !this._hadResponse) {\n        this._responseInitScript();\n      }\n    }, 1000);\n  }\n\n  private async _getKnowledgeBaseGroups(knowledgeBaseGroupIds: number[]) {\n    const value = await this._deps.evClient.getKnowledgeBaseGroups(\n      knowledgeBaseGroupIds,\n    );\n\n    this._channel.send({\n      key: agentScriptEvents.GET_KNOWLEDGE_BASE_ARTICLES,\n      value,\n    });\n  }\n\n  private _responseInitScript() {\n    this._channel.send({\n      key: agentScriptEvents.INIT,\n      value: {\n        config: this.currentCallScript,\n        call: this._deps.evCall.currentCall,\n      },\n    });\n\n    this._hadResponse = true;\n  }\n\n  async getScript(\n    scriptId: string,\n    version: string = null,\n    type: string = 'CALL',\n    uii: string = null,\n  ) {\n    const response = await this._deps.evClient.getScript(scriptId, version);\n    // TODO: that will fix in next MR\n    const result: EvAgentScriptData = {\n      scriptId: response.scriptId,\n      // scriptName: response.scriptName,\n      // finalResult: null as any, // used for reporting\n      // navPosition: null as any,\n      // version: response.version,\n      data: JSON.parse(response.json) as EvScriptResponseJSON,\n    } as any;\n\n    switch (type) {\n      // case 'CHAT':\n      //   this.currentChatScripts[uii] = result;\n      //   break;\n      case 'CALL':\n        this.setCurrentCallScript(result);\n        break;\n\n      default:\n        break;\n    }\n\n    return result;\n  }\n\n  /**\n   * @param call - the corresponding chat or call object\n   */\n  async saveScriptResult(call: EvCallData) {\n    const scriptResult = this.callScriptResultMapping[\n      this._deps.evClient.encodeUii({\n        uii: call.uii,\n        sessionId: call.session.sessionId,\n      })\n    ];\n\n    if (scriptResult) {\n      const result = this._formatScriptResult(scriptResult);\n\n      try {\n        const res = await this._deps.evClient.saveScriptResult(\n          call.uii,\n          call.scriptId,\n          result,\n        );\n        return res;\n      } catch (error) {\n        console.log('saveScriptResult fail', error);\n      }\n    }\n  }\n\n  private _formatScriptResult(scriptResult: EvAgentScriptResult) {\n    const resultCopy = clone(scriptResult);\n\n    resultCopy.model = reduce(\n      (output, [key, value]) => {\n        let result = value;\n        if (result.value !== undefined) {\n          result = result.value;\n        }\n\n        output[key] = {\n          value: result,\n          leadField: value.leadField ?? '',\n        };\n        return output;\n      },\n      {} as EvAgentScriptResultModel,\n      Object.entries<any>(resultCopy.model),\n    );\n\n    return resultCopy;\n  }\n}\n\nexport { EvAgentScript };\n"],"file":"EvAgentScript.js"}