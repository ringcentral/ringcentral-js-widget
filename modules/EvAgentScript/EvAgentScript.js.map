{"version":3,"sources":["modules/EvAgentScript/EvAgentScript.ts"],"names":["EvAgentScript","name","deps","dep","optional","enableCache","storageKey","broadcastChannel","BroadcastChannel","BROADCAST_KEY","_eventEmitter","EventEmitter","state","isAgentScript","script","currentCallScript","id","data","callScriptResultMapping","emit","agentScriptEvents","SET_SCRIPT_RESULT","setIsAgentScript","cb","on","onmessage","key","INIT","currentCall","_deps","evCall","scriptId","_sendInitScript","setCallScriptResult","uii","evAuth","beforeAgentLogout","reset","postMessage","value","version","type","evClient","getScript","response","result","JSON","parse","json","setCurrentCallScript","call","scriptResult","_formatScriptResult","saveScriptResult","res","console","log","resultCopy","model","output","undefined","leadField","Object","entries","RcModuleV2","storage","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { EventEmitter } from 'events';\nimport { clone, reduce } from 'ramda';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport { agentScriptEvents, BROADCAST_KEY } from '../../enums';\nimport { EvCallData } from '../../interfaces/EvData.interface';\nimport {\n  EvAgentScriptData,\n  EvAgentScriptResult,\n  EvAgentScriptResultModel,\n  EvScriptResponseJSON,\n} from '../../lib/EvClient';\nimport {\n  AgentScript,\n  Deps,\n  EvCallScriptResultMapping,\n} from './EvAgentScript.interface';\n\n@Module({\n  name: 'EvAgentScript',\n  deps: [\n    'EvClient',\n    'EvAuth',\n    'EvCall',\n    'Storage',\n    { dep: 'EvAgentScriptOptions', optional: true },\n  ],\n})\nclass EvAgentScript<T = {}> extends RcModuleV2<Deps & T>\n  implements AgentScript {\n  private broadcastChannel = new BroadcastChannel(BROADCAST_KEY);\n  protected _eventEmitter = new EventEmitter();\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvAgentScript',\n    });\n  }\n\n  // currentChatScripts: any = null;\n\n  @storage\n  @state\n  currentCallScript: EvAgentScriptData = null;\n\n  @storage\n  @state\n  isAgentScript = true;\n\n  @storage\n  @state\n  callScriptResultMapping: EvCallScriptResultMapping = {};\n\n  @action\n  setIsAgentScript(state: boolean) {\n    this.isAgentScript = state;\n  }\n\n  @action\n  setCurrentCallScript(script: EvAgentScriptData) {\n    this.currentCallScript = script;\n  }\n\n  @action\n  setCallScriptResult(id: string, data: EvAgentScriptResult) {\n    this.callScriptResultMapping[id] = data;\n    this._eventEmitter.emit(agentScriptEvents.SET_SCRIPT_RESULT, id, data);\n  }\n\n  reset() {\n    this.setIsAgentScript(false);\n  }\n\n  onSetScriptResult(cb: (id: string, data: EvAgentScriptResult) => any) {\n    this._eventEmitter.on(agentScriptEvents.SET_SCRIPT_RESULT, cb);\n  }\n\n  onInitOnce() {\n    this.broadcastChannel.onmessage = ({ data }) => {\n      if (this.isAgentScript) {\n        switch (data.key) {\n          case agentScriptEvents.INIT:\n            {\n              const { currentCall } = this._deps.evCall;\n              if (currentCall?.scriptId) {\n                this._sendInitScript();\n              }\n            }\n            break;\n          case agentScriptEvents.SET_SCRIPT_RESULT:\n            {\n              const { currentCall } = this._deps.evCall;\n\n              if (currentCall) {\n                this.setCallScriptResult(currentCall.uii, data.data);\n              }\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    this._deps.evAuth.beforeAgentLogout(() => {\n      this.reset();\n    });\n  }\n\n  private _sendInitScript() {\n    this.broadcastChannel.postMessage({\n      key: agentScriptEvents.INIT,\n      value: this.currentCallScript,\n    });\n  }\n\n  async getScript(\n    scriptId: string,\n    version: string = null,\n    type: string = 'CALL',\n    uii: string = null,\n  ) {\n    const response = await this._deps.evClient.getScript(scriptId, version);\n    // TODO: that will fix in next MR\n    const result: EvAgentScriptData = {\n      scriptId: response.scriptId,\n      // scriptName: response.scriptName,\n      // finalResult: null as any, // used for reporting\n      // navPosition: null as any,\n      // version: response.version,\n      data: JSON.parse(response.json) as EvScriptResponseJSON,\n    } as any;\n\n    switch (type) {\n      // case 'CHAT':\n      //   this.currentChatScripts[uii] = result;\n      //   break;\n      case 'CALL':\n        this.setCurrentCallScript(result);\n        this._sendInitScript();\n        break;\n\n      default:\n        break;\n    }\n\n    return result;\n  }\n\n  /**\n   * @param call - the corresponding chat or call object\n   */\n  async saveScriptResult(call: EvCallData) {\n    const scriptResult = this.callScriptResultMapping[call.uii];\n    if (scriptResult) {\n      const result = this._formatScriptResult(scriptResult);\n\n      try {\n        const res = await this._deps.evClient.saveScriptResult(\n          call.uii,\n          call.scriptId,\n          result,\n        );\n        return res;\n      } catch (error) {\n        console.log('saveScriptResult fail', error);\n      }\n    }\n  }\n\n  private _formatScriptResult(scriptResult: EvAgentScriptResult) {\n    const resultCopy = clone(scriptResult);\n\n    resultCopy.model = reduce(\n      (output, [key, value]) => {\n        let result = value;\n        if (result.value !== undefined) {\n          result = result.value;\n        }\n\n        output[key] = {\n          value: result,\n          leadField: value.leadField ?? '',\n        };\n        return output;\n      },\n      {} as EvAgentScriptResultModel,\n      Object.entries<any>(resultCopy.model),\n    );\n\n    return resultCopy;\n  }\n}\n\nexport { EvAgentScript };\n"],"file":"EvAgentScript.js"}