{"version":3,"sources":["modules/MessageStore/index.js"],"names":["DEFAULT_CONVERSATIONS_LOAD_LENGTH","DEFAULT_CONVERSATION_LOAD_LENGTH","DEFAULT_TTL","DEFAULT_REFRESH_LOCK","DEFAULT_RETRY","DEFAULT_DAYSPAN","DEFAULT_MESSAGES_FILTER","list","UPDATE_MESSAGE_ONCE_COUNT","getSyncParams","recordCount","conversationLoadLength","dateFrom","dateTo","syncToken","syncType","syncTypes","iSync","params","recordCountPerConversation","fSync","toISOString","MessageStore","deps","dep","optional","auth","alert","client","subscription","storage","tabManager","rolesAndPermissions","connectivityMonitor","availabilityMonitor","ttl","refreshLock","polling","disableCache","timeToRetry","daySpan","conversationsLoadLength","messagesFilter","options","actionTypes","_debouncedSetConversationAsRead","_setConversationAsRead","_auth","ensureExist","_alert","_client","_subscription","_rolesAndPermissions","_storage","_dataStorageKey","_tabManager","_connectivityMonitor","_availabilityMonitor","_ttl","_refreshLock","_timeToRetry","_polling","_conversationsLoadLength","_conversationLoadLength","_messagesFilter","_daySpan","_reducer","registerReducer","key","reducer","data","_promise","_lastSubscriptionMessage","_newInboundMessageNotificationHandlers","_messageUpdatedHandlers","_dispatchedMessageIds","store","subscribe","_onStateChange","_shouldInit","_init","_isDataReady","_connectivity","connectivity","dispatch","type","initSuccess","_shouldReset","_clearTimeout","resetSuccess","ready","_subscriptionHandler","_checkConnectivity","loggedIn","pending","status","moduleStatuses","initializing","syncInfo","init","_hasPermission","_shouldFetch","fetchData","console","error","_retry","_startPolling","active","timestamp","Date","now","accountExtesionEndPoint","message","test","event","body","changes","passive","receivedRecordsLength","account","extension","messageSync","records","length","olderRecordsExist","olderDateTo","creationTime","_syncFunction","olderRecordResult","concat","conversationsISyncSuccess","conversationsFSyncSuccess","conversationsSync","ownerId","setDate","getDate","actionType","getSyncActionType","conversationStore","_dispatchMessageHandlers","conversationsSyncError","_syncData","t","_timeoutId","setTimeout","pageNumber","_fetchData","handler","push","slice","sort","a","b","getTime","record","id","direction","availability","messageStatus","readStatus","lastModifiedTime","_messageDispatched","forEach","some","m","updateMessages","pushMessages","messageId","messageStore","put","updateRequest","response","conversationIds","Object","keys","messages","reduce","acc","messageIds","map","item","sliceConversations","ids","decodeURIComponent","join","platform","service","url","responses","allMessageIds","results","index","nextLength","_updateMessageApi","result","leftIds","_batchUpdateMessagesApi","res","json","conversationId","messageList","unreadMessageIds","filter","messageHelper","messageIsUnread","_updateMessagesApi","updatedMessages","checkIfHAError","warning","messageStoreErrors","readFailed","markMessages","unreadFailed","deleteMessageApi","deleteConversation","deleteFailed","clickToSMS","fromType","clickToCall","state","getItem","hasReadMessagesPermission","Pollable","proxify","selector","conversationList","conversationItem","unreadCounts","allConversations","conversations","conversation","messageIsTextMessage","textConversations","messageIsFax","faxMessages","messageIsVoicemail","voicemailMessages","voiceUnreadCounts","textUnreadCounts","faxUnreadCounts","readTextPermissions","voicemailPermissions","readFaxPermissions"],"mappings":"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","sourcesContent":["import { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport ensureExist from '../../lib/ensureExist';\nimport { selector } from '../../lib/selector';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport syncTypes from '../../enums/syncTypes';\nimport * as messageHelper from '../../lib/messageHelper';\nimport { batchPutApi } from '../../lib/batchApiHelper';\n\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\nimport getDataReducer from './getDataReducer';\nimport messageStoreErrors from './errors';\nimport debounce from '../../lib/debounce';\n\nconst DEFAULT_CONVERSATIONS_LOAD_LENGTH = 10;\nconst DEFAULT_CONVERSATION_LOAD_LENGTH = 100;\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_REFRESH_LOCK = 5 * 60 * 1000;\nconst DEFAULT_RETRY = 62 * 1000;\nconst DEFAULT_DAYSPAN = 7; // default to load 7 days's messages\nconst DEFAULT_MESSAGES_FILTER = (list) => list;\n// Number of messages to be updated in one time\nconst UPDATE_MESSAGE_ONCE_COUNT = 20;\n\nfunction getSyncParams({\n  recordCount,\n  conversationLoadLength,\n  dateFrom,\n  dateTo,\n  syncToken,\n}) {\n  if (syncToken) {\n    return {\n      syncToken,\n      syncType: syncTypes.iSync,\n    };\n  }\n  const params = {\n    recordCountPerConversation: conversationLoadLength,\n    syncType: syncTypes.fSync,\n  };\n  if (recordCount) {\n    params.recordCount = recordCount;\n  }\n  if (dateFrom) {\n    params.dateFrom = dateFrom.toISOString();\n  }\n  if (dateTo) {\n    params.dateTo = dateTo.toISOString();\n  }\n  return params;\n}\n\n/**\n * @class\n\n * @description Messages data managing module\n * fetch conversations\n * handle new message subscription\n */\n@Module({\n  deps: [\n    'Alert',\n    'Client',\n    'Auth',\n    'Subscription',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'MessageStoreOptions', optional: true },\n  ],\n})\nexport default class MessageStore extends Pollable {\n  constructor({\n    auth,\n    alert,\n    client,\n    subscription,\n    storage,\n    tabManager,\n    rolesAndPermissions,\n    connectivityMonitor,\n    availabilityMonitor,\n    ttl = DEFAULT_TTL,\n    refreshLock = DEFAULT_REFRESH_LOCK,\n    polling = false,\n    disableCache = false,\n    timeToRetry = DEFAULT_RETRY,\n    daySpan = DEFAULT_DAYSPAN,\n    conversationsLoadLength = DEFAULT_CONVERSATIONS_LOAD_LENGTH,\n    conversationLoadLength = DEFAULT_CONVERSATION_LOAD_LENGTH,\n    messagesFilter = DEFAULT_MESSAGES_FILTER,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n\n    this._auth = this::ensureExist(auth, 'auth');\n    this._alert = this::ensureExist(alert, 'alert');\n    this._client = this::ensureExist(client, 'client');\n    this._subscription = this::ensureExist(subscription, 'subscription');\n    this._rolesAndPermissions = this::ensureExist(\n      rolesAndPermissions,\n      'rolesAndPermissions',\n    );\n\n    if (!disableCache) {\n      this._storage = storage;\n    }\n\n    this._dataStorageKey = 'messageStoreData';\n\n    this._tabManager = tabManager;\n    this._connectivityMonitor = connectivityMonitor;\n    this._availabilityMonitor = availabilityMonitor;\n    this._ttl = ttl;\n    this._refreshLock = refreshLock;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._conversationsLoadLength = conversationsLoadLength;\n    this._conversationLoadLength = conversationLoadLength;\n    this._messagesFilter = messagesFilter;\n\n    this._daySpan = daySpan;\n\n    if (this._storage) {\n      this._reducer = getReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._dataStorageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes, false),\n      });\n    }\n\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    // setting up event handlers for message\n    this._newInboundMessageNotificationHandlers = [];\n    this._messageUpdatedHandlers = [];\n    this._dispatchedMessageIds = [];\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      await this._init();\n    } else if (this._isDataReady()) {\n      /**\n       * When there is cached data, triggering init will immediately trigger initSuccess.\n       * This causes the code to run this._checkConnectivity() before initializing\n       * this._connectivity, forcing the the module to always run sync on app restart.\n       * Moving the this._connectivity initializating just before initSuccess ensure\n       * that this._checkConnectivity is only run when this._connectivity has been set.\n       */\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (this.ready) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n    }\n  }\n\n  _shouldInit() {\n    return !!(\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this._subscription.ready &&\n      this._rolesAndPermissions.ready &&\n      (!this._availabilityMonitor || this._availabilityMonitor.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return !!(\n      (!this._auth.loggedIn ||\n        (this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._connectivityMonitor && !this._connectivityMonitor.ready) ||\n        !this._rolesAndPermissions.ready ||\n        (this._tabManager && !this._tabManager.ready) ||\n        (this._availabilityMonitor && !this._availabilityMonitor.ready)) &&\n      this.ready\n    );\n  }\n\n  _isDataReady() {\n    return (\n      this.status === moduleStatuses.initializing && this.syncInfo !== null\n    );\n  }\n\n  async _init() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    if (!this._hasPermission) return;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        console.error('fetchData error:', e);\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    this._subscription.subscribe('/account/~/extension/~/message-store');\n  }\n\n  _shouldFetch() {\n    return (\n      (!this._tabManager || this._tabManager.active) &&\n      (!this.timestamp || Date.now() - this.timestamp > this.refreshLock)\n    );\n  }\n\n  _subscriptionHandler() {\n    if (this._storage && this._tabManager && !this._tabManager.active) {\n      return;\n    }\n    const accountExtesionEndPoint = /\\/message-store$/;\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      accountExtesionEndPoint.test(message.event) &&\n      message.body &&\n      message.body.changes\n    ) {\n      this._lastSubscriptionMessage = this._subscription.message;\n      this.fetchData({ passive: true });\n    }\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n\n  async _syncFunction({\n    recordCount,\n    conversationLoadLength,\n    dateFrom,\n    dateTo,\n    syncToken,\n    receivedRecordsLength = 0,\n  }) {\n    const params = getSyncParams({\n      recordCount,\n      conversationLoadLength,\n      dateFrom,\n      dateTo,\n      syncToken,\n    });\n    const { records, syncInfo } = await this._client\n      .account()\n      .extension()\n      .messageSync()\n      .list(params);\n    receivedRecordsLength += records.length;\n    if (!syncInfo.olderRecordsExist || receivedRecordsLength >= recordCount) {\n      return { records, syncInfo };\n    }\n    await sleep(500);\n    const olderDateTo = new Date(records[records.length - 1].creationTime);\n    const olderRecordResult = await this._syncFunction({\n      conversationLoadLength,\n      dateFrom,\n      dateTo: olderDateTo,\n    });\n    return {\n      records: records.concat(olderRecordResult.records),\n      syncInfo,\n    };\n  }\n\n  getSyncActionType({ dateTo, syncToken }) {\n    if (syncToken) {\n      return this.actionTypes.conversationsISyncSuccess;\n    }\n    return this.actionTypes.conversationsFSyncSuccess;\n  }\n\n  async _syncData({\n    dateTo,\n    conversationsLoadLength = this._conversationsLoadLength,\n    conversationLoadLength = this._conversationLoadLength,\n    passive = false,\n  } = {}) {\n    this.store.dispatch({\n      type: this.actionTypes.conversationsSync,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const dateFrom = new Date();\n      dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n      let syncToken = dateTo ? null : this.syncInfo && this.syncInfo.syncToken;\n      const recordCount = conversationsLoadLength * conversationLoadLength;\n      let data;\n      try {\n        data = await this._syncFunction({\n          recordCount,\n          conversationLoadLength,\n          dateFrom,\n          syncToken,\n          dateTo,\n        });\n      } catch (error) {\n        if (\n          error &&\n          (error.message === 'Parameter [syncToken] value is invalid' ||\n            error.message === 'Parameter [syncToken] is invalid')\n        ) {\n          data = await this._syncFunction({\n            recordCount,\n            conversationLoadLength,\n            dateFrom,\n            syncToken: null,\n            dateTo,\n          });\n          syncToken = null;\n        } else {\n          throw error;\n        }\n      }\n      if (this._auth.ownerId === ownerId) {\n        const actionType = this.getSyncActionType({ dateTo, syncToken });\n        this.store.dispatch({\n          type: actionType,\n          recordCount,\n          records: this._messagesFilter(data.records),\n          syncInfo: data.syncInfo,\n          timestamp: Date.now(),\n          conversationStore: this.conversationStore,\n        });\n        // this is only executed in passive sync mode (aka. invoked by subscription)\n        if (passive) {\n          this._dispatchMessageHandlers(this._messagesFilter(data.records));\n        }\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        console.error(error);\n        this.store.dispatch({\n          type: this.actionTypes.conversationsSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n\n  async _fetchData({\n    dateTo,\n    conversationsLoadLength,\n    conversationLoadLength,\n    passive = false,\n  } = {}) {\n    try {\n      await this._syncData({\n        dateTo,\n        conversationsLoadLength,\n        conversationLoadLength,\n        passive,\n      });\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  _startPolling(t = this.timestamp + this.ttl + 10 - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (\n        (!this._tabManager || this._tabManager.active) &&\n        this.pageNumber === 1\n      ) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  @proxify\n  async fetchData({ passive = false } = {}) {\n    if (!this._promise) {\n      this._promise = this._fetchData({ passive });\n    }\n    await this._promise;\n  }\n\n  onNewInboundMessage(handler) {\n    if (typeof handler === 'function') {\n      this._newInboundMessageNotificationHandlers.push(handler);\n    }\n  }\n\n  onMessageUpdated(handler) {\n    if (typeof handler === 'function') {\n      this._messageUpdatedHandlers.push(handler);\n    }\n  }\n\n  /**\n   * Dispatch events to different handlers\n   */\n  _dispatchMessageHandlers(records) {\n    // Sort all records by creation time\n    records = records\n      .slice()\n      .sort(\n        (a, b) =>\n          new Date(a.creationTime).getTime() -\n          new Date(b.creationTime).getTime(),\n      );\n    for (const record of records) {\n      const {\n        id,\n        direction,\n        availability,\n        messageStatus,\n        readStatus,\n        lastModifiedTime,\n        creationTime,\n      } = record || {};\n      // Notify when new message incoming\n      // fix mix old messages and new messages logic error.\n      if (!this._messageDispatched(record)) {\n        // Mark last 10 messages that dispatched\n        // To present dispatching same record twice\n        this._dispatchedMessageIds = [{ id, lastModifiedTime }]\n          .concat(this._dispatchedMessageIds)\n          .slice(0, 20);\n        this._messageUpdatedHandlers.forEach((handler) => handler(record));\n        // For new inbound message notification\n        if (\n          direction === 'Inbound' &&\n          readStatus === 'Unread' &&\n          messageStatus === 'Received' &&\n          availability === 'Alive' &&\n          new Date(creationTime).getTime() >\n            new Date(lastModifiedTime).getTime() - 600 * 1000\n        ) {\n          this._newInboundMessageNotificationHandlers.forEach((handler) =>\n            handler(record),\n          );\n        }\n      }\n    }\n  }\n\n  _messageDispatched(message) {\n    return this._dispatchedMessageIds.some(\n      (m) =>\n        m.id === message.id && m.lastModifiedTime === message.lastModifiedTime,\n    );\n  }\n\n  @proxify\n  async pushMessages(records) {\n    this.store.dispatch({\n      type: this.actionTypes.updateMessages,\n      records,\n    });\n  }\n\n  pushMessage(record) {\n    this.pushMessages([record]);\n  }\n\n  async _updateMessageApi(messageId, status) {\n    const body = {\n      readStatus: status,\n    };\n    const updateRequest = await this._client\n      .account()\n      .extension()\n      .messageStore(messageId)\n      .put(body);\n    return updateRequest;\n  }\n\n  async deleteMessageApi(messageId) {\n    const response = await this._client\n      .account()\n      .extension()\n      .messageStore(messageId)\n      .delete();\n    return response;\n  }\n\n  sliceConversations() {\n    const conversationIds = Object.keys(this.conversationStore);\n    const messages = conversationIds.reduce(\n      (acc, id) => acc.concat(this.conversationStore[id]),\n      [],\n    );\n    const messageIds = this._messagesFilter(messages).map((item) => item.id);\n    this.store.dispatch({\n      type: this.actionTypes.sliceConversations,\n      messageIds,\n    });\n  }\n\n  /**\n   * Batch update messages status\n   *\n   * @param {*} messageIds\n   * @param {*} body\n   * @returns\n   * @memberof MessageStore\n   */\n  async _batchUpdateMessagesApi(messageIds, body) {\n    // Not to request when there're no messages\n    if (!messageIds || messageIds.length === 0) {\n      return;\n    }\n\n    const ids = decodeURIComponent(messageIds.join(','));\n    const platform = this._client.service.platform();\n    const responses = await batchPutApi({\n      platform,\n      url: `/account/~/extension/~/message-store/${ids}`,\n      body,\n    });\n    return responses;\n  }\n\n  /**\n   * Change messages' status to `READ` or `UNREAD`.\n   * Update 20 messages per time with `_batchUpdateMessagesApi`,\n   * or `_updateMessageApi` one by one in recursion.\n   *\n   * @param {*} messageIds\n   * @param {*} status\n   * @returns\n   * @memberof MessageStore\n   */\n  async _updateMessagesApi(messageIds, status) {\n    const allMessageIds = messageIds;\n    if (!allMessageIds || allMessageIds.length === 0) {\n      return [];\n    }\n\n    const results = [];\n\n    for (let index = 0; ; index++) {\n      let nextLength = (index + 1) * UPDATE_MESSAGE_ONCE_COUNT;\n\n      if (nextLength > allMessageIds.length) {\n        nextLength = allMessageIds.length - index * UPDATE_MESSAGE_ONCE_COUNT;\n      } else {\n        nextLength = UPDATE_MESSAGE_ONCE_COUNT;\n      }\n\n      // If there's only one message, use another api to update its status\n      if (nextLength === 1) {\n        const result = await this._updateMessageApi(messageIds[0], status);\n        return [result];\n      }\n\n      const leftIds = allMessageIds.slice(\n        index * UPDATE_MESSAGE_ONCE_COUNT,\n        index * UPDATE_MESSAGE_ONCE_COUNT + nextLength,\n      );\n\n      const body = leftIds.map(() => ({ body: { readStatus: status } }));\n      const responses = await this._batchUpdateMessagesApi(leftIds, body);\n      responses.forEach((res) => {\n        if (res.response().status === 200) {\n          results.push(res.json());\n        }\n      });\n\n      const { ownerId } = this._auth;\n      if (allMessageIds.length > (index + 1) * UPDATE_MESSAGE_ONCE_COUNT) {\n        await sleep(1300);\n        // Check if owner ID has been changed. If it is, cancel this update.\n        if (ownerId !== this._auth.ownerId) {\n          return [];\n        }\n      } else {\n        break;\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Set message status to `READ`.\n   *\n   * @param {*} conversationId\n   * @returns\n   * @memberof MessageStore\n   */\n  @proxify\n  async readMessages(conversationId) {\n    this._debouncedSetConversationAsRead(conversationId);\n  }\n\n  _debouncedSetConversationAsRead = debounce(\n    this._setConversationAsRead,\n    500,\n    true,\n  );\n\n  async _setConversationAsRead(conversationId) {\n    const messageList = this.conversationStore[conversationId];\n    if (!messageList || messageList.length === 0) {\n      return null;\n    }\n    const unreadMessageIds = messageList\n      .filter(messageHelper.messageIsUnread)\n      .map((m) => m.id);\n    if (unreadMessageIds.length === 0) {\n      return null;\n    }\n    try {\n      const { ownerId } = this._auth;\n      const updatedMessages = await this._updateMessagesApi(\n        unreadMessageIds,\n        'Read',\n      );\n\n      if (ownerId !== this._auth.ownerId) {\n        return;\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: updatedMessages,\n      });\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._availabilityMonitor ||\n        !this._availabilityMonitor.checkIfHAError(error)\n      ) {\n        this._alert.warning({ message: messageStoreErrors.readFailed });\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Set message status to `UNREAD`.\n   *\n   * @param {*} conversationId\n   * @returns\n   * @memberof MessageStore\n   */\n  @proxify\n  async unreadMessage(messageId) {\n    //  for track mark message\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n    try {\n      const message = await this._updateMessageApi(messageId, 'Unread');\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: [message],\n      });\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._availabilityMonitor ||\n        !this._availabilityMonitor.checkIfHAError(error)\n      ) {\n        this._alert.warning({ message: messageStoreErrors.unreadFailed });\n      }\n    }\n  }\n\n  @proxify\n  async onUnmarkMessages() {\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n  }\n\n  @proxify\n  async deleteConversationMessages(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    const messageList = this.conversationStore[conversationId];\n    if (!messageList || messageList.length === 0) {\n      return;\n    }\n    const messageId = messageList.map((m) => m.id).join(',');\n    try {\n      await this.deleteMessageApi(messageId);\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._availabilityMonitor ||\n        !this._availabilityMonitor.checkIfHAError(error)\n      ) {\n        this._alert.warning({ message: messageStoreErrors.deleteFailed });\n      }\n    }\n  }\n\n  @proxify\n  async deleteConversation(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    try {\n      await this._client\n        .account()\n        .extension()\n        .messageStore()\n        .delete({\n          conversationId,\n        });\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._availabilityMonitor ||\n        !this._availabilityMonitor.checkIfHAError(error)\n      ) {\n        this._alert.warning({ message: messageStoreErrors.deleteFailed });\n      }\n    }\n  }\n\n  // for track click to sms in message list\n  @proxify\n  onClickToSMS() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToSMS,\n    });\n  }\n\n  // for track click to call in message list\n  @proxify\n  onClickToCall({ fromType = '' }) {\n    this.store.dispatch({\n      type: this.actionTypes.clickToCall,\n      fromType,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get data() {\n    return this._storage\n      ? this._storage.getItem(this._dataStorageKey)\n      : this.state.data;\n  }\n\n  get timestamp() {\n    return this.data && this.data.timestamp;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get refreshLock() {\n    return this._refreshLock;\n  }\n\n  get syncInfo() {\n    return this.data && this.data.syncInfo;\n  }\n\n  get conversationStore() {\n    return this.data && this.data.conversationStore;\n  }\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.hasReadMessagesPermission;\n  }\n\n  @selector\n  allConversations = [\n    () => this.data && this.data.conversationList,\n    () => this.conversationStore,\n    (conversationList = [], conversationStore) =>\n      conversationList.map((conversationItem) => {\n        const messageList = conversationStore[conversationItem.id] || [];\n        return {\n          ...messageList[0],\n          unreadCounts: messageList.filter(messageHelper.messageIsUnread)\n            .length,\n        };\n      }),\n  ];\n\n  @selector\n  textConversations = [\n    () => this.allConversations,\n    (conversations) =>\n      conversations.filter((conversation) =>\n        messageHelper.messageIsTextMessage(conversation),\n      ),\n  ];\n\n  @selector\n  textUnreadCounts = [\n    () => this.textConversations,\n    (conversations) => conversations.reduce((a, b) => a + b.unreadCounts, 0),\n  ];\n\n  @selector\n  faxMessages = [\n    () => this.allConversations,\n    (conversations) =>\n      conversations.filter((conversation) =>\n        messageHelper.messageIsFax(conversation),\n      ),\n  ];\n\n  @selector\n  faxUnreadCounts = [\n    () => this.faxMessages,\n    (conversations) => conversations.reduce((a, b) => a + b.unreadCounts, 0),\n  ];\n\n  @selector\n  voicemailMessages = [\n    () => this.allConversations,\n    (conversations) =>\n      conversations.filter((conversation) =>\n        messageHelper.messageIsVoicemail(conversation),\n      ),\n  ];\n\n  @selector\n  voiceUnreadCounts = [\n    () => this.voicemailMessages,\n    (conversations) => conversations.reduce((a, b) => a + b.unreadCounts, 0),\n  ];\n\n  @selector\n  unreadCounts = [\n    () => this.voiceUnreadCounts,\n    () => this.textUnreadCounts,\n    () => this.faxUnreadCounts,\n    (voiceUnreadCounts, textUnreadCounts, faxUnreadCounts) => {\n      let unreadCounts = 0;\n      if (this._rolesAndPermissions.readTextPermissions) {\n        unreadCounts += textUnreadCounts;\n      }\n      if (this._rolesAndPermissions.voicemailPermissions) {\n        unreadCounts += voiceUnreadCounts;\n      }\n      if (this._rolesAndPermissions.readFaxPermissions) {\n        unreadCounts += faxUnreadCounts;\n      }\n      return unreadCounts;\n    },\n  ];\n}\n"],"file":"index.js"}