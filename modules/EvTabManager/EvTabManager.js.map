{"version":3,"sources":["modules/EvTabManager/EvTabManager.ts"],"names":["EvTabManager","name","deps","_eventEmitter","EventEmitter","id","setMainTabIdInThisTab","_sendTabManager","tabManagerEvents","SET_MIAN_TAB_ID","mainTabId","event","value","console","log","emit","SET_MAIN_TAB_COMPLETE","callback","on","tabbie","actualTabIds","find","tab","prefix","TabManager","globalStorage","state","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMMA,Y,WAJL,gBAAO;AACNC,EAAAA,IAAI,EAAE,YADA;AAENC,EAAAA,IAAI,EAAE,CAAC,eAAD;AAFA,CAAP,C;;;;;;;;;;;;;;;UAKSC,a,GAAgB,IAAIC,oBAAJ,E;;;;;;;;;iCAMXC,E,EAAY;AACvB,WAAKC,qBAAL,CAA2BD,EAA3B,EADuB,CAEvB;;AACA,WAAKE,eAAL,CAAqBC,wBAAiBC,eAAtC,EAAuDJ,EAAvD;AACD;;;0CAGqBA,E,EAAY;AAChC,WAAKK,SAAL,GAAiBL,EAAjB;AACD;;;oCAEuBM,K,EAAeC,K,EAAa;AAClD,6EAAWD,KAAX,EAAkBC,KAAlB;AACD;;;6CAEwB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;;AACA,WAAKX,aAAL,CAAmBY,IAAnB,CAAwBP,wBAAiBQ,qBAAzC;AACD;;;yCAEoBC,Q,EAAsB;AACzC,WAAKd,aAAL,CAAmBe,EAAnB,CAAsBV,wBAAiBQ,qBAAvC,EAA8DC,QAA9D;AACD;;;;;;;;;iDAIG,kEACC,KAAKP,SAAL,IACC;AADD,oGAEyB,KAAKA,SAF9B,C;;;;;;;;;;;;;;;;;;wBAM0B;AAAA;;AAC7B,aACE,KAAKS,MAAL,CAAYC,YAAZ,CAAyBC,IAAzB,CAA8B,UAACC,GAAD;AAAA,eAASA,GAAG,KAAK,MAAI,CAACZ,SAAtB;AAAA,OAA9B,KAAkE,IADpE;AAGD;;;wBAEe;AACd,aAAO,kEAAiB,KAAKA,SAAL,8DAAxB;AACD;;;wBAEY;AACX,aAAO,KAAKS,MAAL,CAAYI,MAAnB;AACD;;;;EApDwBC,uB,qFAGxBC,mB,EACAC,W;;;;;WACmB,I;;2EAQnBC,Y","sourcesContent":["import { action, state, globalStorage } from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { TabManager } from 'ringcentral-integration/modules/TabManagerV2';\nimport { EventEmitter } from 'events';\nimport { tabManagerEvents } from '../../enums';\n\n@Module({\n  name: 'TabManager',\n  deps: ['GlobalStorage'],\n})\nclass EvTabManager extends TabManager {\n  private _eventEmitter = new EventEmitter();\n\n  @globalStorage\n  @state\n  mainTabId: string = null;\n\n  setMainTabId(id: string) {\n    this.setMainTabIdInThisTab(id);\n    // could not use Storage module because of DI circular dependency\n    this._sendTabManager(tabManagerEvents.SET_MIAN_TAB_ID, id);\n  }\n\n  @action\n  setMainTabIdInThisTab(id: string) {\n    this.mainTabId = id;\n  }\n\n  private _sendTabManager(event: string, value?: any) {\n    super.send(event, value);\n  }\n\n  emitSetMainTabComplete() {\n    console.log('_emitSetMainTabComplete~');\n    this._eventEmitter.emit(tabManagerEvents.SET_MAIN_TAB_COMPLETE);\n  }\n\n  onSetMainTabComplete(callback: () => void) {\n    this._eventEmitter.on(tabManagerEvents.SET_MAIN_TAB_COMPLETE, callback);\n  }\n\n  async checkIsMainTabAlive() {\n    return (\n      !super.enable ||\n      (this.mainTabId &&\n        // check if tab exist by finding in storaged tabs\n        super.checkTabAliveById(this.mainTabId))\n    );\n  }\n\n  get firstTabIdExcludeMainTab() {\n    return (\n      this.tabbie.actualTabIds.find((tab) => tab !== this.mainTabId) || null\n    );\n  }\n\n  get isMainTab() {\n    return !super.enable || this.mainTabId === super.id;\n  }\n\n  get prefix() {\n    return this.tabbie.prefix;\n  }\n}\n\nexport { EvTabManager };\n"],"file":"EvTabManager.js"}