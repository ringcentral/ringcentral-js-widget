{"version":3,"sources":["modules/CallCtrlUI/index.ts"],"names":["getLastCallInfoFromWebphoneSession","webphoneSession","sessionNumber","direction","callDirections","outbound","to","from","sessionStatus","callStatus","matchedContact","contactMatch","calleeType","calleeTypes","contacts","unknown","avatarUrl","profileImageUrl","name","status","phoneNumber","CallCtrlUI","deps","dep","optional","webphone","locale","contactMatcher","regionSettings","brand","contactSearch","conferenceCall","callingSettings","rolesAndPermissions","connectivityManager","forwardingNumber","callMonitor","routerInteraction","extensionInfo","options","_webphone","_locale","_contactMatcher","_regionSettings","_brand","_contactSearch","_conferenceCall","_callingSettings","_rolesAndPermissions","_connectivityManager","_forwardingNumber","_callMonitor","_routerInteraction","_extensionInfo","params","children","showCallQueueName","showPark","sessionId","currentSession","sessions","find","session","id","activeSession","contactMapping","dataMapping","fromMatches","toMatches","nameMatches","isWebRTC","callingMode","callingModes","isInboundCall","inbound","isOnConference","hasConferenceCall","isMerging","conferenceCallParties","conferenceCallId","lastCallInfo","isConferenceCallOverload","conferenceCallEquipped","hasConferenceCallPermission","isConferenceSession","conferenceData","Object","values","conferences","conference","isOverload","partyProfiles","fromSessionId","mergingPair","finished","warmTransferSessionId","warmTransferSession","disableLinks","isOfflineMode","isVoipOnlyMode","fullName","currentLocale","areaCode","countryCode","showBackButton","searchContactList","sortedResult","showSpinner","disableFlip","flipNumbers","length","getAvatarUrl","onBackButtonClick","phoneTypeRenderer","phoneSourceNameRenderer","getInitialLayout","layout","callCtrlLayouts","normalCtrl","completeTransferCtrl","conferenceCtrl","fromSession","x","activeSessionId","onHold","mergeCtrl","formatPhone","siteCode","site","code","isMultipleSiteEnabled","onHangup","hangup","mergeControlClickHangupTrack","onMute","mute","onUnmute","unmute","hold","onUnhold","unhold","onRecord","startRecord","onStopRecord","stopRecord","sendDTMF","value","updateSessionMatchedContact","contact","onFlip","push","onTransfer","onCompleteTransfer","completeWarmTransfer","onPark","park","searchContact","searchString","debouncedSearch","onAdd","callControlClickAddTrack","validateCallRecording","fromNumber","otherCalls","call","allCalls","setMergeParty","onBeforeMerge","conferenceSession","onMerge","parseMergingSessions","mergeSessions","gotoParticipantsCtrl","callControlClickParticipantAreaTrack","loadConference","confId","closeMergingPair","afterHideMergeConfirm","confirmMergeClickCloseTrack","afterConfirmMerge","confirmMergeClickMergeTrack","afterOnMerge","callControlClickMergeTrack","RcUIModule"],"mappings":"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","sourcesContent":["import { find, filter } from 'ramda';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport calleeTypes from 'ringcentral-integration/enums/calleeTypes';\n\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport RcUIModule from '../../lib/RcUIModule';\n\nfunction getLastCallInfoFromWebphoneSession(webphoneSession) {\n  const sessionNumber =\n    webphoneSession.direction === callDirections.outbound\n      ? webphoneSession.to\n      : webphoneSession.from;\n  const sessionStatus = webphoneSession.callStatus;\n  const matchedContact = webphoneSession.contactMatch;\n  const calleeType = matchedContact\n    ? calleeTypes.contacts\n    : calleeTypes.unknown;\n  return {\n    calleeType,\n    avatarUrl: matchedContact && matchedContact.profileImageUrl,\n    name: matchedContact && matchedContact.name,\n    status: sessionStatus,\n    phoneNumber: sessionNumber,\n  };\n}\n\n@Module({\n  name: 'CallCtrlUI',\n  deps: [\n    'Webphone',\n    'Locale',\n    'ContactMatcher',\n    'RegionSettings',\n    'Brand',\n    'ContactSearch',\n    'CallingSettings',\n    'RolesAndPermissions',\n    'ConnectivityManager',\n    'ForwardingNumber',\n    'CallMonitor',\n    'ExtensionInfo',\n    { dep: 'ConferenceCall', optional: true },\n    { dep: 'RouterInteraction', optional: true },\n  ],\n})\nexport default class CallCtrlUI extends RcUIModule {\n  constructor({\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    rolesAndPermissions,\n    connectivityManager,\n    forwardingNumber,\n    callMonitor,\n    routerInteraction,\n    extensionInfo,\n    ...options\n  }) {\n    super({ ...options });\n    this._webphone = webphone;\n    this._locale = locale;\n    this._contactMatcher = contactMatcher;\n    this._regionSettings = regionSettings;\n    this._brand = brand;\n    this._contactSearch = contactSearch;\n    this._conferenceCall = conferenceCall;\n    this._callingSettings = callingSettings;\n    this._rolesAndPermissions = rolesAndPermissions;\n    this._connectivityManager = connectivityManager;\n    this._forwardingNumber = forwardingNumber;\n    this._callMonitor = callMonitor;\n    this._routerInteraction = routerInteraction;\n    this._extensionInfo = extensionInfo;\n  }\n\n  getUIProps({\n    params,\n    children,\n    showCallQueueName = false,\n    showPark = false,\n  }) {\n    const sessionId = params && params.sessionId;\n    let currentSession;\n\n    if (sessionId) {\n      currentSession =\n        this._webphone.sessions.find((session) => session.id === sessionId) ||\n        {};\n    } else {\n      currentSession = this._webphone.activeSession || {};\n    }\n\n    const contactMapping =\n      this._contactMatcher && this._contactMatcher.dataMapping;\n    const fromMatches =\n      (contactMapping && contactMapping[currentSession.from]) || [];\n    const toMatches =\n      (contactMapping && contactMapping[currentSession.to]) || [];\n    const nameMatches =\n      currentSession.direction === callDirections.outbound\n        ? toMatches\n        : fromMatches;\n\n    const isWebRTC =\n      this._callingSettings.callingMode === callingModes.webphone;\n    const isInboundCall = currentSession.direction === callDirections.inbound;\n\n    let isOnConference = false;\n    let hasConferenceCall = false;\n    let isMerging = false;\n    let conferenceCallParties;\n    let conferenceCallId = null;\n    let lastCallInfo =\n      this._conferenceCall && this._conferenceCall.lastCallInfo;\n    let isConferenceCallOverload = false;\n    const conferenceCallEquipped = !!(\n      this._conferenceCall &&\n      this._rolesAndPermissions.hasConferenceCallPermission\n    );\n    if (conferenceCallEquipped) {\n      isOnConference = this._conferenceCall.isConferenceSession(\n        currentSession.id,\n      );\n      const conferenceData = Object.values(this._conferenceCall.conferences)[0];\n\n      isMerging = this._conferenceCall.isMerging;\n\n      if (conferenceData && isWebRTC) {\n        conferenceCallId = conferenceData.conference.id;\n        isConferenceCallOverload = this._conferenceCall.isOverload(\n          conferenceCallId,\n        );\n      }\n\n      hasConferenceCall = !!conferenceData;\n      conferenceCallParties = this._conferenceCall.partyProfiles;\n\n      const { fromSessionId } = this._conferenceCall.mergingPair;\n      if (\n        !isInboundCall &&\n        fromSessionId &&\n        fromSessionId !== currentSession.id &&\n        lastCallInfo &&\n        lastCallInfo.status &&\n        lastCallInfo.status !== sessionStatus.finished\n      ) {\n        // for mergeCtrl page, we don't show any children (container) component.\n        children = null;\n      }\n    }\n    if (currentSession.warmTransferSessionId) {\n      const warmTransferSession = this._webphone.sessions.find(\n        (session) => session.id === currentSession.warmTransferSessionId,\n      );\n      lastCallInfo = getLastCallInfoFromWebphoneSession(warmTransferSession);\n    }\n\n    const disableLinks = !!(\n      this._connectivityManager.isOfflineMode ||\n      this._connectivityManager.isVoipOnlyMode\n    );\n\n    return {\n      brand: this._brand.fullName,\n      nameMatches,\n      currentLocale: this._locale.currentLocale,\n      session: currentSession,\n      areaCode: this._regionSettings.areaCode,\n      countryCode: this._regionSettings.countryCode,\n      showBackButton: true, // callMonitor.calls.length > 0,\n      searchContactList: this._contactSearch.sortedResult,\n      showSpinner: isMerging,\n      conferenceCallEquipped,\n      hasConferenceCall,\n      conferenceCallParties,\n      conferenceCallId,\n      lastCallInfo,\n      children,\n      isOnConference,\n      isWebRTC,\n      disableLinks,\n      isConferenceCallOverload,\n      disableFlip: this._forwardingNumber.flipNumbers.length === 0,\n      showCallQueueName,\n      showPark,\n    };\n  }\n\n  getUIFunctions({\n    getAvatarUrl,\n    onBackButtonClick,\n    phoneTypeRenderer,\n    phoneSourceNameRenderer,\n  }) {\n    return {\n      getInitialLayout: ({\n        conferenceCallEquipped,\n        isOnConference,\n        lastCallInfo,\n        session,\n      }) => {\n        let layout = callCtrlLayouts.normalCtrl;\n        if (session.warmTransferSessionId) {\n          return callCtrlLayouts.completeTransferCtrl;\n        }\n        if (!conferenceCallEquipped) {\n          return layout;\n        }\n\n        if (isOnConference) {\n          return callCtrlLayouts.conferenceCtrl;\n        }\n        const isInboundCall = session.direction === callDirections.inbound;\n\n        const { fromSessionId } = this._conferenceCall.mergingPair;\n        const fromSession = find(\n          (x: any) => x.id === fromSessionId,\n          this._webphone.sessions,\n        );\n\n        const activeSessionId =\n          this._webphone &&\n          this._webphone.activeSession &&\n          this._webphone.activeSession.id;\n\n        if (\n          !isOnConference &&\n          !isInboundCall &&\n          fromSession &&\n          fromSessionId !== session.id &&\n          lastCallInfo &&\n          (session.callStatus !== sessionStatus.onHold ||\n            (session.callStatus === sessionStatus.onHold &&\n              session.id === activeSessionId))\n        ) {\n          // enter merge ctrl page.\n          layout = callCtrlLayouts.mergeCtrl;\n        }\n\n        return layout;\n      },\n      formatPhone: (phoneNumber) =>\n        formatNumber({\n          phoneNumber,\n          areaCode: this._regionSettings.areaCode,\n          countryCode: this._regionSettings.countryCode,\n          siteCode: this._extensionInfo?.site?.code ?? '',\n          isMultipleSiteEnabled: this._extensionInfo.isMultipleSiteEnabled,\n        }),\n      onHangup: (sessionId, layout) => {\n        this._webphone.hangup(sessionId);\n        if (layout && layout === callCtrlLayouts.mergeCtrl) {\n          this._callMonitor.mergeControlClickHangupTrack();\n        }\n      },\n      onMute: (sessionId) => this._webphone.mute(sessionId),\n      onUnmute: (sessionId) => this._webphone.unmute(sessionId),\n      onHold: (sessionId) => this._webphone.hold(sessionId),\n      onUnhold: (sessionId) => {\n        this._webphone.unhold(sessionId);\n      },\n      onRecord: (sessionId) => this._webphone.startRecord(sessionId),\n      onStopRecord: (sessionId) => this._webphone.stopRecord(sessionId),\n      sendDTMF: (value, sessionId) => this._webphone.sendDTMF(value, sessionId),\n      updateSessionMatchedContact: (sessionId, contact) =>\n        this._webphone.updateSessionMatchedContact(sessionId, contact),\n      getAvatarUrl,\n      onBackButtonClick,\n      onFlip: (sessionId) => {\n        this._routerInteraction.push(`/flip/${sessionId}`);\n      },\n      onTransfer: (sessionId) => {\n        this._routerInteraction.push(`/transfer/${sessionId}/webphone`);\n      },\n      onCompleteTransfer: (sessionId) => {\n        this._webphone.completeWarmTransfer(sessionId);\n      },\n      onPark: (sessionId) => this._webphone.park(sessionId),\n      searchContact: (searchString) =>\n        this._contactSearch.debouncedSearch({ searchString }),\n      phoneTypeRenderer,\n      phoneSourceNameRenderer,\n      onAdd: (sessionId) => {\n        // track user click add on call control\n        this._callMonitor.callControlClickAddTrack();\n        const session = find(\n          (x: any) => x.id === sessionId,\n          this._webphone.sessions,\n        );\n        if (!session || !this._conferenceCall.validateCallRecording(session)) {\n          return;\n        }\n        let fromNumber = this._callingSettings.fromNumber;\n        if (session.direction === callDirections.outbound) {\n          fromNumber = session.fromNumber; // keep the same fromNumber\n        }\n        const otherCalls = filter(\n          (call: any) =>\n            call.webphoneSession && call.webphoneSession.id !== session.id,\n          this._callMonitor.allCalls,\n        );\n        if (otherCalls.length) {\n          // goto 'calls on hold' page\n          this._routerInteraction.push(\n            `/conferenceCall/callsOnhold/${fromNumber}/${session.id}`,\n          );\n        } else {\n          if (this._conferenceCall) {\n            this._conferenceCall.setMergeParty({ fromSessionId: sessionId });\n          }\n          // goto dialer directly\n          this._routerInteraction.push(\n            `/conferenceCall/dialer/${fromNumber}/${sessionId}`,\n          );\n        }\n      },\n      onBeforeMerge: (sessionId) => {\n        const session = find(\n          (x: any) => x.id === sessionId,\n          this._webphone.sessions,\n        );\n        if (!session || !this._conferenceCall.validateCallRecording(session)) {\n          return false;\n        }\n        if (this._conferenceCall) {\n          const conferenceData = Object.values(\n            this._conferenceCall.conferences,\n          )[0];\n          if (conferenceData) {\n            const conferenceSession = find(\n              (x: any) => x.id === conferenceData.sessionId,\n              this._webphone.sessions,\n            );\n            if (\n              conferenceSession &&\n              !this._conferenceCall.validateCallRecording(conferenceSession)\n            ) {\n              return false;\n            }\n          }\n        }\n        return true;\n      },\n      onMerge: async (sessionId) => {\n        const sessions = await this._conferenceCall.parseMergingSessions({\n          sessionId,\n        });\n        if (sessions) {\n          await this._conferenceCall.mergeSessions(sessions);\n        }\n      },\n\n      gotoParticipantsCtrl: () => {\n        this._routerInteraction.push('/conferenceCall/participants');\n        // track user click participant area on call control\n        this._callMonitor.callControlClickParticipantAreaTrack();\n      },\n      loadConference: (confId) => {\n        if (this._conferenceCall) {\n          this._conferenceCall.loadConference(confId);\n        }\n      },\n      closeMergingPair: () => {\n        return this._conferenceCall && this._conferenceCall.closeMergingPair();\n      },\n      setMergeParty: (...args) => {\n        return (\n          this._conferenceCall && this._conferenceCall.setMergeParty(...args)\n        );\n      },\n      // user action track functions\n      afterHideMergeConfirm: () =>\n        this._callMonitor.confirmMergeClickCloseTrack(),\n      afterConfirmMerge: () => this._callMonitor.confirmMergeClickMergeTrack(),\n      afterOnMerge: () => this._callMonitor.callControlClickMergeTrack(),\n    };\n  }\n}\n"],"file":"index.js"}