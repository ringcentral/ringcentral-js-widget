{"version":3,"sources":["modules/CallCtrlUI/index.ts"],"names":["CallCtrlUI","name","deps","dep","optional","webphone","locale","contactMatcher","regionSettings","brand","contactSearch","conferenceCall","callingSettings","rolesAndPermissions","connectivityManager","forwardingNumber","callMonitor","routerInteraction","options","_webphone","_locale","_contactMatcher","_regionSettings","_brand","_contactSearch","_conferenceCall","_callingSettings","_rolesAndPermissions","_connectivityManager","_forwardingNumber","_callMonitor","_routerInteraction","params","children","showCallQueueName","sessionId","currentSession","sessions","find","session","id","activeSession","contactMapping","dataMapping","fromMatches","from","toMatches","to","nameMatches","direction","callDirections","outbound","isWebRTC","callingMode","callingModes","isInboundCall","inbound","isOnConference","hasConferenceCall","isMerging","conferenceCallParties","conferenceCallId","lastCallInfo","isConferenceCallOverload","conferenceCallEquipped","hasConferenceCallPermission","isConferenceSession","conferenceData","Object","values","conferences","conference","isOverload","partyProfiles","fromSessionId","mergingPair","status","sessionStatus","finished","disableLinks","isOfflineMode","isVoipOnlyMode","fullName","currentLocale","areaCode","countryCode","showBackButton","searchContactList","sortedResult","showSpinner","disableFlip","flipNumbers","length","getAvatarUrl","onBackButtonClick","phoneTypeRenderer","phoneSourceNameRenderer","getInitialLayout","layout","callCtrlLayouts","normalCtrl","conferenceCtrl","fromSession","x","activeSessionId","callStatus","onHold","mergeCtrl","formatPhone","phoneNumber","onHangup","hangup","mergeControlClickHangupTrack","onMute","mute","onUnmute","unmute","hold","onUnhold","unhold","onRecord","startRecord","onStopRecord","stopRecord","sendDTMF","value","updateSessionMatchedContact","contact","onFlip","push","onTransfer","onPark","park","searchContact","searchString","debouncedSearch","onAdd","callControlClickAddTrack","validateCallRecording","fromNumber","otherCalls","call","webphoneSession","allCalls","setMergeParty","onBeforeMerge","conferenceSession","onMerge","parseMergingSessions","mergeSessions","gotoParticipantsCtrl","callControlClickParticipantAreaTrack","loadConference","confId","closeMergingPair","afterHideMergeConfirm","confirmMergeClickCloseTrack","afterConfirmMerge","confirmMergeClickMergeTrack","afterOnMerge","callControlClickMergeTrack","RcUIModule"],"mappings":"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","sourcesContent":["import { find, filter } from 'ramda';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport RcUIModule from '../../lib/RcUIModule';\n\n@Module({\n  name: 'CallCtrlUI',\n  deps: [\n    'Webphone',\n    'Locale',\n    'ContactMatcher',\n    'RegionSettings',\n    'Brand',\n    'ContactSearch',\n    'ConferenceCall',\n    'CallingSettings',\n    'RolesAndPermissions',\n    'ConnectivityManager',\n    'ForwardingNumber',\n    'CallMonitor',\n    { dep: 'RouterInteraction', optional: true },\n  ],\n})\nexport default class CallCtrlUI extends RcUIModule {\n  constructor({\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    rolesAndPermissions,\n    connectivityManager,\n    forwardingNumber,\n    callMonitor,\n    routerInteraction,\n    ...options\n  }) {\n    super({ ...options });\n    this._webphone = webphone;\n    this._locale = locale;\n    this._contactMatcher = contactMatcher;\n    this._regionSettings = regionSettings;\n    this._brand = brand;\n    this._contactSearch = contactSearch;\n    this._conferenceCall = conferenceCall;\n    this._callingSettings = callingSettings;\n    this._rolesAndPermissions = rolesAndPermissions;\n    this._connectivityManager = connectivityManager;\n    this._forwardingNumber = forwardingNumber;\n    this._callMonitor = callMonitor;\n    this._routerInteraction = routerInteraction;\n  }\n\n  getUIProps({ params, children, showCallQueueName = false }) {\n    const sessionId = params && params.sessionId;\n    let currentSession;\n\n    if (sessionId) {\n      currentSession =\n        this._webphone.sessions.find((session) => session.id === sessionId) ||\n        {};\n    } else {\n      currentSession = this._webphone.activeSession || {};\n    }\n\n    const contactMapping =\n      this._contactMatcher && this._contactMatcher.dataMapping;\n    const fromMatches =\n      (contactMapping && contactMapping[currentSession.from]) || [];\n    const toMatches =\n      (contactMapping && contactMapping[currentSession.to]) || [];\n    const nameMatches =\n      currentSession.direction === callDirections.outbound\n        ? toMatches\n        : fromMatches;\n\n    const isWebRTC =\n      this._callingSettings.callingMode === callingModes.webphone;\n    const isInboundCall = currentSession.direction === callDirections.inbound;\n\n    let isOnConference = false;\n    let hasConferenceCall = false;\n    let isMerging = false;\n    let conferenceCallParties;\n    let conferenceCallId = null;\n    const lastCallInfo =\n      this._conferenceCall && this._conferenceCall.lastCallInfo;\n    let isConferenceCallOverload = false;\n    const conferenceCallEquipped = !!(\n      this._conferenceCall &&\n      this._rolesAndPermissions.hasConferenceCallPermission\n    );\n    if (conferenceCallEquipped) {\n      isOnConference = this._conferenceCall.isConferenceSession(\n        currentSession.id,\n      );\n      const conferenceData = Object.values(this._conferenceCall.conferences)[0];\n\n      isMerging = this._conferenceCall.isMerging;\n\n      if (conferenceData && isWebRTC) {\n        conferenceCallId = conferenceData.conference.id;\n        isConferenceCallOverload = this._conferenceCall.isOverload(\n          conferenceCallId,\n        );\n      }\n\n      hasConferenceCall = !!conferenceData;\n      conferenceCallParties = this._conferenceCall.partyProfiles;\n\n      const { fromSessionId } = this._conferenceCall.mergingPair;\n      if (\n        !isInboundCall &&\n        (fromSessionId &&\n          fromSessionId !== currentSession.id &&\n          lastCallInfo &&\n          lastCallInfo.status &&\n          lastCallInfo.status !== sessionStatus.finished)\n      ) {\n        // for mergeCtrl page, we don't show any children (container) component.\n        children = null;\n      }\n    }\n\n    const disableLinks = !!(\n      this._connectivityManager.isOfflineMode ||\n      this._connectivityManager.isVoipOnlyMode\n    );\n\n    return {\n      brand: this._brand.fullName,\n      nameMatches,\n      currentLocale: this._locale.currentLocale,\n      session: currentSession,\n      areaCode: this._regionSettings.areaCode,\n      countryCode: this._regionSettings.countryCode,\n      showBackButton: true, // callMonitor.calls.length > 0,\n      searchContactList: this._contactSearch.sortedResult,\n      showSpinner: isMerging,\n      conferenceCallEquipped,\n      hasConferenceCall,\n      conferenceCallParties,\n      conferenceCallId,\n      lastCallInfo,\n      children,\n      isOnConference,\n      isWebRTC,\n      disableLinks,\n      isConferenceCallOverload,\n      disableFlip: this._forwardingNumber.flipNumbers.length === 0,\n      showCallQueueName,\n    };\n  }\n\n  getUIFunctions({\n    getAvatarUrl,\n    onBackButtonClick,\n    phoneTypeRenderer,\n    phoneSourceNameRenderer,\n  }) {\n    return {\n      getInitialLayout: ({\n        conferenceCallEquipped,\n        isOnConference,\n        lastCallInfo,\n        session,\n      }) => {\n        let layout = callCtrlLayouts.normalCtrl;\n\n        if (!conferenceCallEquipped) {\n          return layout;\n        }\n\n        if (isOnConference) {\n          return callCtrlLayouts.conferenceCtrl;\n        }\n        const isInboundCall = session.direction === callDirections.inbound;\n\n        const { fromSessionId } = this._conferenceCall.mergingPair;\n        const fromSession = find(\n          (x: any) => x.id === fromSessionId,\n          this._webphone.sessions,\n        );\n\n        const activeSessionId =\n          this._webphone &&\n          this._webphone.activeSession &&\n          this._webphone.activeSession.id;\n\n        if (\n          !isOnConference &&\n          !isInboundCall &&\n          (fromSession && fromSessionId !== session.id && lastCallInfo) &&\n          (session.callStatus !== sessionStatus.onHold ||\n            (session.callStatus === sessionStatus.onHold &&\n              session.id === activeSessionId))\n        ) {\n          // enter merge ctrl page.\n          layout = callCtrlLayouts.mergeCtrl;\n        }\n\n        return layout;\n      },\n      formatPhone: (phoneNumber) =>\n        formatNumber({\n          phoneNumber,\n          areaCode: this._regionSettings.areaCode,\n          countryCode: this._regionSettings.countryCode,\n        }),\n      onHangup: (sessionId, layout) => {\n        this._webphone.hangup(sessionId);\n        if (layout && layout === callCtrlLayouts.mergeCtrl) {\n          this._callMonitor.mergeControlClickHangupTrack();\n        }\n      },\n      onMute: (sessionId) => this._webphone.mute(sessionId),\n      onUnmute: (sessionId) => this._webphone.unmute(sessionId),\n      onHold: (sessionId) => this._webphone.hold(sessionId),\n      onUnhold: (sessionId) => {\n        this._webphone.unhold(sessionId);\n      },\n      onRecord: (sessionId) => this._webphone.startRecord(sessionId),\n      onStopRecord: (sessionId) => this._webphone.stopRecord(sessionId),\n      sendDTMF: (value, sessionId) => this._webphone.sendDTMF(value, sessionId),\n      updateSessionMatchedContact: (sessionId, contact) =>\n        this._webphone.updateSessionMatchedContact(sessionId, contact),\n      getAvatarUrl,\n      onBackButtonClick,\n      onFlip: (sessionId) => {\n        this._routerInteraction.push(`/flip/${sessionId}`);\n      },\n      onTransfer: (sessionId) => {\n        this._routerInteraction.push(`/transfer/${sessionId}/webphone`);\n      },\n      onPark: (sessionId) => this._webphone.park(sessionId),\n      searchContact: (searchString) =>\n        this._contactSearch.debouncedSearch({ searchString }),\n      phoneTypeRenderer,\n      phoneSourceNameRenderer,\n      onAdd: (sessionId) => {\n        // track user click add on call control\n        this._callMonitor.callControlClickAddTrack();\n        const session = find(\n          (x: any) => x.id === sessionId,\n          this._webphone.sessions,\n        );\n        if (!session || !this._conferenceCall.validateCallRecording(session)) {\n          return;\n        }\n        let fromNumber = this._callingSettings.fromNumber;\n        if (session.direction === callDirections.outbound) {\n          fromNumber = session.fromNumber; // keep the same fromNumber\n        }\n        const otherCalls = filter(\n          (call: any) =>\n            call.webphoneSession && call.webphoneSession.id !== session.id,\n          this._callMonitor.allCalls,\n        );\n        if (otherCalls.length) {\n          // goto 'calls on hold' page\n          this._routerInteraction.push(\n            `/conferenceCall/callsOnhold/${fromNumber}/${session.id}`,\n          );\n        } else {\n          if (this._conferenceCall) {\n            this._conferenceCall.setMergeParty({ fromSessionId: sessionId });\n          }\n          // goto dialer directly\n          this._routerInteraction.push(\n            `/conferenceCall/dialer/${fromNumber}/${sessionId}`,\n          );\n        }\n      },\n      onBeforeMerge: (sessionId) => {\n        const session = find(\n          (x: any) => x.id === sessionId,\n          this._webphone.sessions,\n        );\n        if (!session || !this._conferenceCall.validateCallRecording(session)) {\n          return false;\n        }\n        if (this._conferenceCall) {\n          const conferenceData = Object.values(\n            this._conferenceCall.conferences,\n          )[0];\n          if (conferenceData) {\n            const conferenceSession = find(\n              (x: any) => x.id === conferenceData.sessionId,\n              this._webphone.sessions,\n            );\n            if (\n              conferenceSession &&\n              !this._conferenceCall.validateCallRecording(conferenceSession)\n            ) {\n              return false;\n            }\n          }\n        }\n        return true;\n      },\n      onMerge: async (sessionId) => {\n        const sessions = await this._conferenceCall.parseMergingSessions({\n          sessionId,\n        });\n        if (sessions) {\n          await this._conferenceCall.mergeSessions(sessions);\n        }\n      },\n\n      gotoParticipantsCtrl: () => {\n        this._routerInteraction.push('/conferenceCall/participants');\n        // track user click participant area on call control\n        this._callMonitor.callControlClickParticipantAreaTrack();\n      },\n      loadConference: (confId) => {\n        if (this._conferenceCall) {\n          this._conferenceCall.loadConference(confId);\n        }\n      },\n      closeMergingPair: () => {\n        return this._conferenceCall && this._conferenceCall.closeMergingPair();\n      },\n      setMergeParty: (...args) => {\n        return (\n          this._conferenceCall && this._conferenceCall.setMergeParty(...args)\n        );\n      },\n      // user action track functions\n      afterHideMergeConfirm: () =>\n        this._callMonitor.confirmMergeClickCloseTrack(),\n      afterConfirmMerge: () => this._callMonitor.confirmMergeClickMergeTrack(),\n      afterOnMerge: () => this._callMonitor.callControlClickMergeTrack(),\n    };\n  }\n}\n"],"file":"index.js"}