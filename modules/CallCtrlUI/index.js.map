{"version":3,"sources":["modules/CallCtrlUI/index.ts"],"names":["CallCtrlUI","name","deps","dep","optional","webphone","locale","contactMatcher","regionSettings","brand","contactSearch","conferenceCall","callingSettings","rolesAndPermissions","connectivityManager","forwardingNumber","callMonitor","routerInteraction","extensionInfo","options","_webphone","_locale","_contactMatcher","_regionSettings","_brand","_contactSearch","_conferenceCall","_callingSettings","_rolesAndPermissions","_connectivityManager","_forwardingNumber","_callMonitor","_routerInteraction","_extensionInfo","params","children","showCallQueueName","showPark","sessionId","currentSession","sessions","find","session","id","activeSession","contactMapping","dataMapping","fromMatches","from","toMatches","to","nameMatches","direction","callDirections","outbound","isWebRTC","callingMode","callingModes","isInboundCall","inbound","isOnConference","hasConferenceCall","isMerging","conferenceCallParties","conferenceCallId","lastCallInfo","isConferenceCallOverload","conferenceCallEquipped","hasConferenceCallPermission","isConferenceSession","conferenceData","Object","values","conferences","conference","isOverload","partyProfiles","fromSessionId","mergingPair","status","sessionStatus","finished","disableLinks","isOfflineMode","isVoipOnlyMode","fullName","currentLocale","areaCode","countryCode","showBackButton","searchContactList","sortedResult","showSpinner","disableFlip","flipNumbers","length","getAvatarUrl","onBackButtonClick","phoneTypeRenderer","phoneSourceNameRenderer","getInitialLayout","layout","callCtrlLayouts","normalCtrl","conferenceCtrl","fromSession","x","activeSessionId","callStatus","onHold","mergeCtrl","formatPhone","phoneNumber","siteCode","site","code","isMultipleSiteEnabled","onHangup","hangup","mergeControlClickHangupTrack","onMute","mute","onUnmute","unmute","hold","onUnhold","unhold","onRecord","startRecord","onStopRecord","stopRecord","sendDTMF","value","updateSessionMatchedContact","contact","onFlip","push","onTransfer","onPark","park","searchContact","searchString","debouncedSearch","onAdd","callControlClickAddTrack","validateCallRecording","fromNumber","otherCalls","call","webphoneSession","allCalls","setMergeParty","onBeforeMerge","conferenceSession","onMerge","parseMergingSessions","mergeSessions","gotoParticipantsCtrl","callControlClickParticipantAreaTrack","loadConference","confId","closeMergingPair","afterHideMergeConfirm","confirmMergeClickCloseTrack","afterConfirmMerge","confirmMergeClickMergeTrack","afterOnMerge","callControlClickMergeTrack","RcUIModule"],"mappings":"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","sourcesContent":["import { find, filter } from 'ramda';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport RcUIModule from '../../lib/RcUIModule';\n\n@Module({\n  name: 'CallCtrlUI',\n  deps: [\n    'Webphone',\n    'Locale',\n    'ContactMatcher',\n    'RegionSettings',\n    'Brand',\n    'ContactSearch',\n    'CallingSettings',\n    'RolesAndPermissions',\n    'ConnectivityManager',\n    'ForwardingNumber',\n    'CallMonitor',\n    'ExtensionInfo',\n    { dep: 'ConferenceCall', optional: true },\n    { dep: 'RouterInteraction', optional: true },\n  ],\n})\nexport default class CallCtrlUI extends RcUIModule {\n  constructor({\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    rolesAndPermissions,\n    connectivityManager,\n    forwardingNumber,\n    callMonitor,\n    routerInteraction,\n    extensionInfo,\n    ...options\n  }) {\n    super({ ...options });\n    this._webphone = webphone;\n    this._locale = locale;\n    this._contactMatcher = contactMatcher;\n    this._regionSettings = regionSettings;\n    this._brand = brand;\n    this._contactSearch = contactSearch;\n    this._conferenceCall = conferenceCall;\n    this._callingSettings = callingSettings;\n    this._rolesAndPermissions = rolesAndPermissions;\n    this._connectivityManager = connectivityManager;\n    this._forwardingNumber = forwardingNumber;\n    this._callMonitor = callMonitor;\n    this._routerInteraction = routerInteraction;\n    this._extensionInfo = extensionInfo;\n  }\n\n  getUIProps({\n    params,\n    children,\n    showCallQueueName = false,\n    showPark = false,\n  }) {\n    const sessionId = params && params.sessionId;\n    let currentSession;\n\n    if (sessionId) {\n      currentSession =\n        this._webphone.sessions.find((session) => session.id === sessionId) ||\n        {};\n    } else {\n      currentSession = this._webphone.activeSession || {};\n    }\n\n    const contactMapping =\n      this._contactMatcher && this._contactMatcher.dataMapping;\n    const fromMatches =\n      (contactMapping && contactMapping[currentSession.from]) || [];\n    const toMatches =\n      (contactMapping && contactMapping[currentSession.to]) || [];\n    const nameMatches =\n      currentSession.direction === callDirections.outbound\n        ? toMatches\n        : fromMatches;\n\n    const isWebRTC =\n      this._callingSettings.callingMode === callingModes.webphone;\n    const isInboundCall = currentSession.direction === callDirections.inbound;\n\n    let isOnConference = false;\n    let hasConferenceCall = false;\n    let isMerging = false;\n    let conferenceCallParties;\n    let conferenceCallId = null;\n    const lastCallInfo =\n      this._conferenceCall && this._conferenceCall.lastCallInfo;\n    let isConferenceCallOverload = false;\n    const conferenceCallEquipped = !!(\n      this._conferenceCall &&\n      this._rolesAndPermissions.hasConferenceCallPermission\n    );\n    if (conferenceCallEquipped) {\n      isOnConference = this._conferenceCall.isConferenceSession(\n        currentSession.id,\n      );\n      const conferenceData = Object.values(this._conferenceCall.conferences)[0];\n\n      isMerging = this._conferenceCall.isMerging;\n\n      if (conferenceData && isWebRTC) {\n        conferenceCallId = conferenceData.conference.id;\n        isConferenceCallOverload = this._conferenceCall.isOverload(\n          conferenceCallId,\n        );\n      }\n\n      hasConferenceCall = !!conferenceData;\n      conferenceCallParties = this._conferenceCall.partyProfiles;\n\n      const { fromSessionId } = this._conferenceCall.mergingPair;\n      if (\n        !isInboundCall &&\n        fromSessionId &&\n        fromSessionId !== currentSession.id &&\n        lastCallInfo &&\n        lastCallInfo.status &&\n        lastCallInfo.status !== sessionStatus.finished\n      ) {\n        // for mergeCtrl page, we don't show any children (container) component.\n        children = null;\n      }\n    }\n\n    const disableLinks = !!(\n      this._connectivityManager.isOfflineMode ||\n      this._connectivityManager.isVoipOnlyMode\n    );\n\n    return {\n      brand: this._brand.fullName,\n      nameMatches,\n      currentLocale: this._locale.currentLocale,\n      session: currentSession,\n      areaCode: this._regionSettings.areaCode,\n      countryCode: this._regionSettings.countryCode,\n      showBackButton: true, // callMonitor.calls.length > 0,\n      searchContactList: this._contactSearch.sortedResult,\n      showSpinner: isMerging,\n      conferenceCallEquipped,\n      hasConferenceCall,\n      conferenceCallParties,\n      conferenceCallId,\n      lastCallInfo,\n      children,\n      isOnConference,\n      isWebRTC,\n      disableLinks,\n      isConferenceCallOverload,\n      disableFlip: this._forwardingNumber.flipNumbers.length === 0,\n      showCallQueueName,\n      showPark,\n    };\n  }\n\n  getUIFunctions({\n    getAvatarUrl,\n    onBackButtonClick,\n    phoneTypeRenderer,\n    phoneSourceNameRenderer,\n  }) {\n    return {\n      getInitialLayout: ({\n        conferenceCallEquipped,\n        isOnConference,\n        lastCallInfo,\n        session,\n      }) => {\n        let layout = callCtrlLayouts.normalCtrl;\n\n        if (!conferenceCallEquipped) {\n          return layout;\n        }\n\n        if (isOnConference) {\n          return callCtrlLayouts.conferenceCtrl;\n        }\n        const isInboundCall = session.direction === callDirections.inbound;\n\n        const { fromSessionId } = this._conferenceCall.mergingPair;\n        const fromSession = find(\n          (x: any) => x.id === fromSessionId,\n          this._webphone.sessions,\n        );\n\n        const activeSessionId =\n          this._webphone &&\n          this._webphone.activeSession &&\n          this._webphone.activeSession.id;\n\n        if (\n          !isOnConference &&\n          !isInboundCall &&\n          fromSession &&\n          fromSessionId !== session.id &&\n          lastCallInfo &&\n          (session.callStatus !== sessionStatus.onHold ||\n            (session.callStatus === sessionStatus.onHold &&\n              session.id === activeSessionId))\n        ) {\n          // enter merge ctrl page.\n          layout = callCtrlLayouts.mergeCtrl;\n        }\n\n        return layout;\n      },\n      formatPhone: (phoneNumber) =>\n        formatNumber({\n          phoneNumber,\n          areaCode: this._regionSettings.areaCode,\n          countryCode: this._regionSettings.countryCode,\n          siteCode: this._extensionInfo?.site?.code ?? '',\n          isMultipleSiteEnabled: this._extensionInfo.isMultipleSiteEnabled,\n        }),\n      onHangup: (sessionId, layout) => {\n        this._webphone.hangup(sessionId);\n        if (layout && layout === callCtrlLayouts.mergeCtrl) {\n          this._callMonitor.mergeControlClickHangupTrack();\n        }\n      },\n      onMute: (sessionId) => this._webphone.mute(sessionId),\n      onUnmute: (sessionId) => this._webphone.unmute(sessionId),\n      onHold: (sessionId) => this._webphone.hold(sessionId),\n      onUnhold: (sessionId) => {\n        this._webphone.unhold(sessionId);\n      },\n      onRecord: (sessionId) => this._webphone.startRecord(sessionId),\n      onStopRecord: (sessionId) => this._webphone.stopRecord(sessionId),\n      sendDTMF: (value, sessionId) => this._webphone.sendDTMF(value, sessionId),\n      updateSessionMatchedContact: (sessionId, contact) =>\n        this._webphone.updateSessionMatchedContact(sessionId, contact),\n      getAvatarUrl,\n      onBackButtonClick,\n      onFlip: (sessionId) => {\n        this._routerInteraction.push(`/flip/${sessionId}`);\n      },\n      onTransfer: (sessionId) => {\n        this._routerInteraction.push(`/transfer/${sessionId}/webphone`);\n      },\n      onPark: (sessionId) => this._webphone.park(sessionId),\n      searchContact: (searchString) =>\n        this._contactSearch.debouncedSearch({ searchString }),\n      phoneTypeRenderer,\n      phoneSourceNameRenderer,\n      onAdd: (sessionId) => {\n        // track user click add on call control\n        this._callMonitor.callControlClickAddTrack();\n        const session = find(\n          (x: any) => x.id === sessionId,\n          this._webphone.sessions,\n        );\n        if (!session || !this._conferenceCall.validateCallRecording(session)) {\n          return;\n        }\n        let fromNumber = this._callingSettings.fromNumber;\n        if (session.direction === callDirections.outbound) {\n          fromNumber = session.fromNumber; // keep the same fromNumber\n        }\n        const otherCalls = filter(\n          (call: any) =>\n            call.webphoneSession && call.webphoneSession.id !== session.id,\n          this._callMonitor.allCalls,\n        );\n        if (otherCalls.length) {\n          // goto 'calls on hold' page\n          this._routerInteraction.push(\n            `/conferenceCall/callsOnhold/${fromNumber}/${session.id}`,\n          );\n        } else {\n          if (this._conferenceCall) {\n            this._conferenceCall.setMergeParty({ fromSessionId: sessionId });\n          }\n          // goto dialer directly\n          this._routerInteraction.push(\n            `/conferenceCall/dialer/${fromNumber}/${sessionId}`,\n          );\n        }\n      },\n      onBeforeMerge: (sessionId) => {\n        const session = find(\n          (x: any) => x.id === sessionId,\n          this._webphone.sessions,\n        );\n        if (!session || !this._conferenceCall.validateCallRecording(session)) {\n          return false;\n        }\n        if (this._conferenceCall) {\n          const conferenceData = Object.values(\n            this._conferenceCall.conferences,\n          )[0];\n          if (conferenceData) {\n            const conferenceSession = find(\n              (x: any) => x.id === conferenceData.sessionId,\n              this._webphone.sessions,\n            );\n            if (\n              conferenceSession &&\n              !this._conferenceCall.validateCallRecording(conferenceSession)\n            ) {\n              return false;\n            }\n          }\n        }\n        return true;\n      },\n      onMerge: async (sessionId) => {\n        const sessions = await this._conferenceCall.parseMergingSessions({\n          sessionId,\n        });\n        if (sessions) {\n          await this._conferenceCall.mergeSessions(sessions);\n        }\n      },\n\n      gotoParticipantsCtrl: () => {\n        this._routerInteraction.push('/conferenceCall/participants');\n        // track user click participant area on call control\n        this._callMonitor.callControlClickParticipantAreaTrack();\n      },\n      loadConference: (confId) => {\n        if (this._conferenceCall) {\n          this._conferenceCall.loadConference(confId);\n        }\n      },\n      closeMergingPair: () => {\n        return this._conferenceCall && this._conferenceCall.closeMergingPair();\n      },\n      setMergeParty: (...args) => {\n        return (\n          this._conferenceCall && this._conferenceCall.setMergeParty(...args)\n        );\n      },\n      // user action track functions\n      afterHideMergeConfirm: () =>\n        this._callMonitor.confirmMergeClickCloseTrack(),\n      afterConfirmMerge: () => this._callMonitor.confirmMergeClickMergeTrack(),\n      afterOnMerge: () => this._callMonitor.callControlClickMergeTrack(),\n    };\n  }\n}\n"],"file":"index.js"}