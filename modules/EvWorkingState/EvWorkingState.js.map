{"version":3,"sources":["modules/EvWorkingState/EvWorkingState.ts"],"names":["PendingDisposition","rank","agentState","agentAuxState","EvWorkingState","name","deps","dep","optional","that","isPendingDisposition","agentConfig","agentSettings","availableAgentStates","agentStates","enableCache","storageKey","_deps","evAgentSession","onTriggerConfig","evAuth","agent","initLoginState","evClient","setAgentState","initLoginStateLabel","tabManagerEnabled","tabManager","send","tabManagerEvents","RESET_WORKING_STATE","resetWorkingState","agentStateTypes","breakAfterCall","time","Date","now","evCallMonitor","onCallEnded","setIsPendingDisposition","evSubscription","subscribe","EvCallbackTypes","AGENT_STATE","currentAuxState","currentState","ready","event","isOnCall","transition","engaged","indexOf","presence","calls","length","onBreak","alert","danger","message","messageTypes","INVALID_STATE_CHANGE","allowDuplicates","ttl","state","workingAgentState","changeWorkingState","OVER_BREAK_TIME","enable","defaultAgentStateTexts","find","working","RcModuleV2","storage","available","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport {\n  agentStateTypes,\n  DefaultAgentStateTexts,\n  defaultAgentStateTexts,\n  messageTypes,\n  tabManagerEvents,\n} from '../../enums';\nimport { EvAgentState, EvAvailableAgentState } from '../../lib/EvClient';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport { Deps, State, WorkingState } from './EvWorkingState.interface';\n\nconst PendingDisposition: EvAvailableAgentState = {\n  // TODO: here seems need i18n\n  rank: '0',\n  agentState: 'PENDING-DISPOSITION',\n  agentAuxState: 'Pending Disposition',\n};\n\n@Module({\n  name: 'EvWorkingState',\n  deps: [\n    'Auth',\n    'EvAuth',\n    'EvSubscription',\n    'EvClient',\n    'Presence',\n    'EvCallMonitor',\n    'Alert',\n    'Storage',\n    'EvAgentSession',\n    'TabManager',\n    { dep: 'EvWorkingStateOptions', optional: true },\n  ],\n})\nclass EvWorkingState extends RcModuleV2<Deps> implements WorkingState {\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvWorkingState',\n    });\n    this._deps.evAgentSession.onTriggerConfig(() => {\n      const { agentConfig } = this._deps.evAuth.agent;\n      if (agentConfig?.agentSettings?.initLoginState) {\n        // if that tab is not activity, that wi\n        this._deps.evClient.setAgentState(\n          agentConfig.agentSettings.initLoginState,\n          agentConfig.agentSettings.initLoginStateLabel,\n        );\n      }\n\n      if (this.tabManagerEnabled) {\n        this._deps.tabManager.send(tabManagerEvents.RESET_WORKING_STATE);\n      }\n      this.resetWorkingState();\n    });\n  }\n\n  get tabManagerEnabled() {\n    return this._deps.tabManager?.enable;\n  }\n\n  @storage\n  @state\n  time = Date.now();\n\n  @storage\n  @state\n  agentState: EvAgentState = {\n    agentState: agentStateTypes.available,\n    agentAuxState: 'Available',\n  };\n\n  @storage\n  @state\n  isPendingDisposition = false;\n\n  get agentConfig() {\n    return this._deps.evAuth.agent.agentConfig;\n  }\n\n  @computed((that: EvWorkingState) => [\n    that.agentState,\n    that.isPendingDisposition,\n  ])\n  get workingState() {\n    return this.isPendingDisposition\n      ? PendingDisposition\n      : {\n          ...this.agentState,\n          agentAuxState:\n            this.agentState.agentAuxState ||\n            defaultAgentStateTexts[\n              this.agentState.agentState as DefaultAgentStateTexts\n            ],\n        };\n  }\n\n  @computed((that: EvWorkingState) => [\n    that.agentConfig,\n    that.isPendingDisposition,\n    that.agentConfig.agentSettings.availableAgentStates,\n  ])\n  get agentStates() {\n    const { availableAgentStates } = this.agentConfig.agentSettings;\n\n    const agentStates = this.isPendingDisposition\n      ? [PendingDisposition, ...availableAgentStates]\n      : availableAgentStates;\n\n    return this.agentConfig ? agentStates : [];\n  }\n\n  @computed((that: EvWorkingState) => [that.agentStates])\n  get workingAgentState() {\n    return this.agentStates.find(\n      (state) => state.agentState === agentStateTypes.working,\n    );\n  }\n\n  @action\n  setAgentState(agentState: EvAgentState) {\n    this.agentState = agentState;\n    if (agentState.agentState !== agentStateTypes.breakAfterCall) {\n      this.time = Date.now();\n    }\n  }\n\n  @action\n  setIsPendingDisposition(isPendingDisposition: State['isPendingDisposition']) {\n    this.isPendingDisposition = isPendingDisposition;\n  }\n\n  @action\n  resetWorkingState() {\n    this.time = Date.now();\n    this.isPendingDisposition = false;\n  }\n\n  @action\n  setTime(time: number) {\n    this.time = time;\n  }\n\n  onInitOnce() {\n    this._deps.evCallMonitor.onCallEnded(() => {\n      this.setIsPendingDisposition(true);\n    });\n\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.AGENT_STATE,\n      ({ currentAuxState, currentState }) => {\n        if (\n          this.agentState.agentState !== currentState ||\n          this.agentState.agentAuxState !== currentAuxState\n        ) {\n          this.setAgentState({\n            agentState: currentState,\n            agentAuxState: currentAuxState,\n          });\n        }\n      },\n    );\n  }\n\n  async onStateChange() {\n    if (this.ready && this.tabManagerEnabled && this._deps.tabManager.ready) {\n      const { event } = this._deps.tabManager;\n      if (event) {\n        switch (event.name) {\n          case tabManagerEvents.RESET_WORKING_STATE:\n            this.resetWorkingState();\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  changeWorkingState({ agentState, agentAuxState }: EvAgentState) {\n    const isOnCall =\n      [agentStateTypes.transition, agentStateTypes.engaged].indexOf(\n        this.agentState.agentState,\n      ) > -1 || this._deps.presence.calls.length > 0;\n\n    if (isOnCall && agentState !== agentStateTypes.onBreak) {\n      return this._deps.alert.danger({\n        message: messageTypes.INVALID_STATE_CHANGE,\n        allowDuplicates: false,\n        ttl: 0,\n      });\n    }\n\n    this._deps.evClient.setAgentState(agentState, agentAuxState);\n  }\n\n  setWorkingStateWorking() {\n    const state = this.workingAgentState;\n    if (state) {\n      this.changeWorkingState(state);\n    }\n  }\n\n  alertOverBreakTime() {\n    this._deps.alert.danger({\n      message: messageTypes.OVER_BREAK_TIME,\n      allowDuplicates: false,\n      ttl: 0,\n    });\n  }\n}\n\nexport { EvWorkingState };\n"],"file":"EvWorkingState.js"}