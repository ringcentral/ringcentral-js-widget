{"version":3,"sources":["modules/EvWorkingState/EvWorkingState.ts"],"names":["PendingDisposition","rank","agentState","agentAuxState","EvWorkingState","name","deps","dep","optional","auth","evAuth","evSubscription","evClient","presence","storage","alert","evSessionConfig","enableCache","modules","storageKey","_hasSetInitialState","getWorkingState","isPendingDisposition","defaultAgentStatesTexts","getAgentStates","agentConfig","agentSettings","availableAgentStates","agentStates","getWorkingAgentState","find","state","agentStateTypes","working","_modules","onTriggerConfig","push","agent","initLoginState","setAgentState","initLoginStateLabel","resetWorkingState","onConfigSuccess","isConfigSuccessByLocal","breakAfterCall","time","Date","now","subscribe","EvCallbackTypes","AGENT_STATE","currentAuxState","currentState","isOnCall","transition","engaged","indexOf","getCalls","length","onBreak","danger","message","messageTypes","INVALID_STATE_CHANGE","allowDuplicates","ttl","changeWorkingState","OVER_BREAK_TIME","RcModuleV2","available","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleState,\n  RcModuleV2,\n  state,\n  storage,\n  createSelector,\n} from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport {\n  agentStateTypes,\n  defaultAgentStatesTexts,\n  messageTypes,\n} from '../../enums';\nimport { EvAgentState, EvAvailableAgentState } from '../../lib/EvClient';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport { DepsModules, State, WorkingState } from './EvWorkingState.interface';\n\nconst PendingDisposition: EvAvailableAgentState = {\n  // TODO: here seems need i18n\n  rank: '0',\n  agentState: 'PENDING-DISPOSITION',\n  agentAuxState: 'Pending Disposition',\n};\n\ntype EvWorkingStateState = RcModuleState<EvWorkingState, State>;\n\n@Module({\n  name: 'EvWorkingState',\n  deps: [\n    'Auth',\n    'EvAuth',\n    'EvSubscription',\n    'EvClient',\n    'Presence',\n    'Alert',\n    'Storage',\n    'EvSessionConfig',\n    { dep: 'EvWorkingStateOptions', optional: true },\n  ],\n})\nclass EvWorkingState extends RcModuleV2<DepsModules, EvWorkingStateState>\n  implements WorkingState {\n  private _hasSetInitialState = false;\n\n  constructor({\n    auth,\n    evAuth,\n    evSubscription,\n    evClient,\n    presence,\n    storage,\n    alert,\n    evSessionConfig,\n    enableCache = true,\n  }) {\n    super({\n      modules: {\n        auth,\n        evAuth,\n        evSubscription,\n        evClient,\n        presence,\n        storage,\n        alert,\n        evSessionConfig,\n      },\n      enableCache,\n      storageKey: 'EvWorkingState',\n    });\n    this._modules.evSessionConfig.onTriggerConfig.push(() => {\n      const { agentConfig } = this._modules.evAuth.agent;\n      if (agentConfig?.agentSettings?.initLoginState) {\n        this._modules.evClient.setAgentState(\n          agentConfig.agentSettings.initLoginState,\n          agentConfig.agentSettings.initLoginStateLabel,\n        );\n      }\n      this.resetWorkingState();\n    });\n\n    this._modules.evSessionConfig.onConfigSuccess.push(() => {\n      this._hasSetInitialState = this._modules.evSessionConfig.isConfigSuccessByLocal;\n    });\n  }\n\n  @storage\n  @state\n  time = Date.now();\n\n  @storage\n  @state\n  agentState: EvAgentState = {\n    agentState: agentStateTypes.available,\n    agentAuxState: 'Available',\n  };\n\n  @storage\n  @state\n  isPendingDisposition = false;\n\n  get agentConfig() {\n    return this._modules.evAuth.agent\n      ? this._modules.evAuth.agent.agentConfig\n      : null;\n  }\n\n  getWorkingState = createSelector(\n    () => this.agentState,\n    () => this.isPendingDisposition,\n    (agentState, isPendingDisposition) =>\n      isPendingDisposition\n        ? PendingDisposition\n        : {\n            ...agentState,\n            agentAuxState:\n              agentState.agentAuxState ||\n              defaultAgentStatesTexts[agentState.agentState],\n          },\n  );\n\n  getAgentStates = createSelector(\n    () => this.agentConfig,\n    () => this.isPendingDisposition,\n    () => this.agentConfig.agentSettings.availableAgentStates,\n    (agentConfig, isPendingDisposition, availableAgentStates) => {\n      const agentStates = isPendingDisposition\n        ? [PendingDisposition, ...availableAgentStates]\n        : availableAgentStates;\n\n      return agentConfig ? agentStates : [];\n    },\n  );\n\n  getWorkingAgentState = createSelector(\n    () => this.getAgentStates(),\n    (agentStates) => {\n      return agentStates.find(\n        (state) => state.agentState === agentStateTypes.working,\n      );\n    },\n  );\n\n  @action\n  setAgentState(agentState: EvAgentState) {\n    this.state.agentState = agentState;\n    if (agentState.agentState !== agentStateTypes.breakAfterCall) {\n      this.state.time = Date.now();\n    }\n  }\n\n  @action\n  setIsPendingDisposition(\n    isPendingDisposition: EvWorkingStateState['isPendingDisposition'],\n  ) {\n    this.state.isPendingDisposition = isPendingDisposition;\n  }\n\n  @action\n  setSettingsNow() {\n    this.state.time = Date.now();\n  }\n\n  @action\n  resetWorkingState() {\n    this.state.time = Date.now();\n    this.state.isPendingDisposition = false;\n  }\n\n  @action\n  setTime(time: number) {\n    this.state.time = time;\n  }\n\n  onInitOnce() {\n    this._modules.evSubscription.subscribe(\n      EvCallbackTypes.AGENT_STATE,\n      ({ currentAuxState, currentState }) => {\n        // login with multi-tabs and skip the first agent notification for reset timer.\n        if (\n          !this._hasSetInitialState ||\n          this.agentState.agentState !== currentAuxState\n        ) {\n          this.setAgentState({\n            agentState: currentState,\n            agentAuxState: currentAuxState,\n          });\n        }\n        this._hasSetInitialState = false;\n      },\n    );\n  }\n\n  changeWorkingState({ agentState, agentAuxState }: EvAgentState) {\n    const isOnCall =\n      [agentStateTypes.transition, agentStateTypes.engaged].indexOf(\n        this.agentState.agentState,\n      ) > -1 || this._modules.presence.getCalls().length > 0;\n\n    if (isOnCall) {\n      if (agentState === agentStateTypes.onBreak) {\n        return this._modules.evClient.setAgentState(agentState, agentAuxState);\n      }\n      this._modules.alert.danger({\n        message: messageTypes.INVALID_STATE_CHANGE,\n        allowDuplicates: false,\n        ttl: 0,\n      });\n      return;\n    }\n\n    this._modules.evClient.setAgentState(agentState, agentAuxState);\n  }\n\n  setWorkingStateWorking() {\n    if (this.getWorkingAgentState()) {\n      this.changeWorkingState(this.getWorkingAgentState());\n    }\n  }\n\n  alertOverBreakTime() {\n    this._modules.alert.danger({\n      message: messageTypes.OVER_BREAK_TIME,\n      allowDuplicates: false,\n      ttl: 0,\n    });\n  }\n}\n\nexport { EvWorkingState };\n"],"file":"EvWorkingState.js"}