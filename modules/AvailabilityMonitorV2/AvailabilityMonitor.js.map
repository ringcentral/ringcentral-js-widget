{"version":3,"sources":["modules/AvailabilityMonitorV2/AvailabilityMonitor.ts"],"names":["HEALTH_CHECK_INTERVAL","STATUS_END_POINT","DEFAULT_TIME","AvailabilityMonitor","name","deps","dep","optional","_enabled","_deps","availabilityMonitorOptions","enabled","_randomTime","_limitedTimeout","_normalTimeout","_promise","_healthRetryTime","_unbindHandlers","_throttledHealthCheck","_beforeRequestHandler","params","isLimitedAvailabilityMode","requestUrl","requestMethod","url","method","Error","errorMessages","serviceLimited","_requestErrorHandler","error","response","_json","clone","json","extractedUrl","hasLimitedStatusError","setLimitedModeStatusError","headers","retryAfter","_retrieveRetryAfter","_switchToLimitedMode","_retry","_refreshErrorHandler","isOffline","message","platform","client","service","RES_STATUS","status","auth","refreshTokenValid","_switchToVoIPOnlyMode","_refreshSuccessHandler","isVoIPOnlyMode","setVoIPOnlyReset","_clearLimitedTimeout","setVoIPOnlyMode","_switchToNormalMode","setNormalMode","_clearNormalTimeout","isLimitedMode","_bindHandlers","environment","changeCounter","ready","on","events","beforeRequest","requestError","addListener","loginSuccess","logoutSuccess","logoutError","refreshError","refreshSuccess","removeListener","parseFloat","get","Number","isNaN","setLimitedMode","clearTimeout","skipAuthCheck","Authorization","accessToken","res","setTimeout","_healthCheck","manual","_getStatus","console","errMessage","RcModuleV2","state","action"],"mappings":"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","sourcesContent":["import { pathOr } from 'ramda';\nimport { ApiError } from '@ringcentral/sdk';\nimport {\n  action,\n  RcModuleV2,\n  state,\n  watch,\n} from '@ringcentral-integration/core';\nimport { Module } from '../../lib/di';\nimport {\n  extractUrl,\n  isHAError,\n  generateRandomNumber,\n  isHAEnabledAPI,\n} from './availabilityMonitorHelper';\nimport { errorMessages } from './errorMessages';\nimport { throttle } from '../../lib/debounce-throttle';\nimport validateIsOffline from '../../lib/validateIsOffline';\nimport { Deps, ErrorMessages } from './AvailabilityMonitor.interface';\n\nexport const HEALTH_CHECK_INTERVAL = 60 * 1000;\nexport const STATUS_END_POINT = '/restapi/v1.0/status';\nconst DEFAULT_TIME = 0;\n\n@Module({\n  name: 'AvailabilityMonitor',\n  deps: [\n    'Auth',\n    'Client',\n    { dep: 'Environment', optional: true },\n    { dep: 'AvailabilityMonitorOptions', optional: true },\n  ],\n})\nexport class AvailabilityMonitor extends RcModuleV2<Deps> {\n  protected _enabled = this._deps.availabilityMonitorOptions?.enabled ?? false;\n\n  protected _randomTime = DEFAULT_TIME;\n\n  protected _limitedTimeout: NodeJS.Timeout = null;\n\n  protected _normalTimeout: NodeJS.Timeout = null;\n\n  protected _promise: Promise<Response> = null;\n\n  protected _healthRetryTime = HEALTH_CHECK_INTERVAL;\n\n  protected _unbindHandlers: () => void = null;\n\n  protected _throttledHealthCheck: () => void = null;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  /**\n   * When App is in Limited Mode and Status check met a non-503 error\n   */\n  @state\n  hasLimitedStatusError = false;\n\n  @state\n  isLimitedMode = false;\n\n  @state\n  isVoIPOnlyMode = false;\n\n  @action\n  setLimitedModeStatusError() {\n    this.hasLimitedStatusError = true;\n  }\n\n  @action\n  setNormalMode() {\n    this.hasLimitedStatusError = false;\n    this.isLimitedMode = false;\n    this.isVoIPOnlyMode = false;\n  }\n\n  @action\n  setLimitedMode() {\n    this.isLimitedMode = true;\n  }\n\n  @action\n  setVoIPOnlyMode() {\n    this.isVoIPOnlyMode = true;\n  }\n\n  @action\n  setVoIPOnlyReset() {\n    this.isVoIPOnlyMode = false;\n  }\n\n  onInit() {\n    this._bindHandlers();\n  }\n\n  onInitOnce() {\n    watch(\n      this,\n      () => this._deps.environment.changeCounter,\n      () => {\n        if (this.ready && this._deps.environment?.ready) {\n          this._bindHandlers();\n        }\n      },\n    );\n  }\n\n  _bindHandlers() {\n    if (this._unbindHandlers) {\n      this._unbindHandlers();\n    }\n\n    const client = this._deps.client.service.client();\n    const platform = this._deps.client.service.platform();\n\n    // TODO: in other modules, when they catch error first check if app is in HA mode.\n    client.on(client.events.beforeRequest, this._beforeRequestHandler);\n    client.on(client.events.requestError, this._requestErrorHandler);\n    platform.addListener(\n      platform.events.loginSuccess,\n      this._switchToNormalMode,\n    );\n    platform.addListener(\n      platform.events.logoutSuccess,\n      this._switchToNormalMode,\n    );\n    platform.addListener(platform.events.logoutError, this._switchToNormalMode);\n    platform.addListener(\n      platform.events.refreshError,\n      this._refreshErrorHandler,\n    );\n    platform.addListener(\n      platform.events.refreshSuccess,\n      this._refreshSuccessHandler,\n    );\n\n    this._unbindHandlers = () => {\n      client.removeListener(\n        client.events.beforeRequest,\n        this._beforeRequestHandler,\n      );\n      client.removeListener(\n        client.events.requestError,\n        this._requestErrorHandler,\n      );\n      platform.removeListener(\n        platform.events.loginSuccess,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.logoutSuccess,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.logoutError,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.refreshError,\n        this._refreshErrorHandler,\n      );\n      platform.removeListener(\n        platform.events.refreshSuccess,\n        this._refreshSuccessHandler,\n      );\n      this._unbindHandlers = null;\n    };\n  }\n\n  _beforeRequestHandler = (params: Request) => {\n    if (!this.isLimitedAvailabilityMode || !this._enabled) {\n      return;\n    }\n\n    const requestUrl = pathOr<string>(null, ['_request', 'url'], params);\n    const requestMethod = pathOr<string>(null, ['_request', 'method'], params);\n\n    if (!requestUrl || !requestMethod) {\n      return;\n    }\n\n    // In the limited availability mode, should not block status check api\n    // or highly availability api.\n    if (\n      extractUrl({ url: requestUrl }) === STATUS_END_POINT ||\n      isHAEnabledAPI({ url: requestUrl, method: requestMethod })\n    ) {\n      return;\n    }\n\n    throw new Error(errorMessages.serviceLimited);\n  };\n\n  /**\n   * Retrieve retry after value from response headers\n   */\n  _retrieveRetryAfter(headers: ApiError['response']['headers']) {\n    try {\n      const retryAfter = parseFloat(`${headers.get('Retry-After') || -1}`);\n      return Number.isNaN(retryAfter) ? -1 : retryAfter;\n    } catch (error) {\n      return -1;\n    }\n  }\n\n  /**\n   * Check if app can enter LA mode.\n   * If this module is not enabled, just return.\n   *\n   */\n  _requestErrorHandler = async (error: ApiError) => {\n    if (\n      error.response &&\n      !(error.response as ApiError['response'] & ErrorMessages)._json\n    ) {\n      (error.response as ApiError['response'] &\n        ErrorMessages)._json = await error.response.clone().json();\n    }\n    const requestUrl = pathOr<ApiError['request']['url']>(\n      '',\n      ['request', 'url'],\n      error,\n    );\n    const extractedUrl = extractUrl({\n      url: requestUrl,\n    });\n\n    // If app is in Limited Mode and staus API met a status which is not 200 nor 503\n    if (\n      this.isLimitedAvailabilityMode &&\n      extractedUrl === STATUS_END_POINT &&\n      !isHAError(error)\n    ) {\n      if (!this.hasLimitedStatusError) {\n        this.setLimitedModeStatusError();\n      }\n      return;\n    }\n\n    if (!isHAError(error) || !this._enabled) {\n      return;\n    }\n\n    const headers = pathOr(\n      {},\n      ['response', 'headers'],\n      error,\n    ) as ApiError['response']['headers'];\n    const retryAfter = this._retrieveRetryAfter(headers);\n\n    if (retryAfter > 0) {\n      // Retry-After unit is secons, make it mili-secons\n      this._healthRetryTime = retryAfter * 1000;\n    } else {\n      this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    }\n\n    this._switchToLimitedMode();\n    this._retry();\n  };\n\n  _refreshErrorHandler = async (error: ApiError) => {\n    const isOffline = validateIsOffline(error.message);\n\n    const platform = this._deps.client.service.platform();\n    const RES_STATUS = (error.response && error.response.status) || null;\n    const refreshTokenValid =\n      (isOffline || RES_STATUS >= 500) &&\n      (await platform.auth().refreshTokenValid());\n    if (refreshTokenValid) {\n      this._switchToVoIPOnlyMode();\n    }\n  };\n\n  _refreshSuccessHandler = () => {\n    if (this.isVoIPOnlyMode) {\n      this.setVoIPOnlyReset();\n    }\n    this._clearLimitedTimeout();\n  };\n\n  _switchToVoIPOnlyMode = () => {\n    if (this.isVoIPOnlyMode) {\n      return;\n    }\n\n    this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    this.setVoIPOnlyMode();\n    this._retry();\n  };\n\n  _switchToLimitedMode() {\n    if (this.isLimitedMode) {\n      return;\n    }\n\n    this.setLimitedMode();\n  }\n\n  _switchToNormalMode = () => {\n    if (!this.isLimitedAvailabilityMode) {\n      return;\n    }\n\n    this.setNormalMode();\n\n    this._clearLimitedTimeout();\n    this._clearNormalTimeout();\n  };\n\n  _clearLimitedTimeout() {\n    if (this._limitedTimeout) {\n      clearTimeout(this._limitedTimeout);\n      this._limitedTimeout = null;\n    }\n  }\n\n  _clearNormalTimeout() {\n    if (this._normalTimeout) {\n      clearTimeout(this._normalTimeout);\n      this._normalTimeout = null;\n    }\n  }\n\n  async _getStatus() {\n    // !!This API must be always called with OAuth token in Authorization header\n    // !! (same as in case of regular API calls) in order to ensure the request is routed to proper POD/partition.\n    // Client app can even continue use expired access token with this API - backend will pass such requests through.\n    // The result of the API call is unpredictable when it is called without access token!\n    //\n    // Reference: https://wiki.ringcentral.com/display/PLAT/High+Availability+Guidelines+for+API+Clients\n\n    const res: Response = await this._deps.client.service\n      .platform()\n      .get('/restapi/v1.0/status', null, {\n        skipAuthCheck: true,\n        headers: {\n          Authorization: `Bearer ${this._deps.auth.accessToken}`,\n        },\n      });\n    return res;\n  }\n\n  _retry() {\n    if (!this._limitedTimeout) {\n      this._limitedTimeout = setTimeout(() => {\n        this._clearLimitedTimeout();\n        this._healthCheck();\n      }, this._healthRetryTime);\n    }\n  }\n\n  /**\n   * Inner method of health checking\n   */\n  async _healthCheck({ manual = false } = {}) {\n    if (this._promise) return;\n    try {\n      this._promise = this._getStatus();\n      const response = await this._promise;\n      if (!response || response.status !== 200) {\n        return;\n      }\n    } catch (err) {\n      console.error('error from request of /restapi/v1.0/status.');\n      return;\n    } finally {\n      this._promise = null;\n    }\n    if (manual) {\n      this._clearNormalTimeout();\n      this._switchToNormalMode();\n      return;\n    }\n    // In the described situation Client Application should follow an \"Exponential Backoff\" approach:\n    // The retries exponentially increase the waiting time up to a certain threshold.\n    // The idea is that if the server is down temporarily,\n    // it is not overwhelmed with requests hitting at the same time when it comes back up.\n    //\n    // Reference: https://wiki.ringcentral.com/display/PLAT/Error+Handling+Guidelines+for+API+Clients\n\n    this._randomTime = this._randomTime || generateRandomNumber(); // Generate random seconds (1 ~ 121)\n    this._normalTimeout = setTimeout(() => {\n      this._clearNormalTimeout();\n      this._switchToNormalMode();\n    }, this._randomTime * 1000);\n  }\n\n  /**\n   * Health check with status API\n   */\n  async healthCheck() {\n    if (!this._throttledHealthCheck) {\n      this._throttledHealthCheck = throttle(async () => {\n        await this._healthCheck({ manual: true });\n      });\n    }\n\n    this._throttledHealthCheck();\n  }\n\n  /**\n   * Check if the error is Survival Mode error,\n   * Or if app is already in Survival Mode and current request is blocked with an error.\n   */\n  async checkIfHAError(error: ApiError) {\n    const errMessage = pathOr<string>(null, ['message'], error);\n    if (error.response) {\n      (error.response as ApiError['response'] &\n        ErrorMessages)._json = await error.response.clone().json();\n    }\n    return isHAError(error) || errMessage === errorMessages.serviceLimited;\n  }\n\n  /**\n   * Is App in limited mode\n   */\n  get isLimitedAvailabilityMode() {\n    return this.isLimitedMode || this.isVoIPOnlyMode;\n  }\n}\n"],"file":"AvailabilityMonitor.js"}