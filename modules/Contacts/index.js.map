{"version":3,"sources":["modules/Contacts/index.js"],"names":["DefaultContactListPageSize","Contacts","deps","dep","optional","auth","contactSources","options","actionTypes","_auth","ensureExist","call","_reducer","_contactSources","Map","_sourcesLastStatus","_sourcesUpdatedAt","Date","now","source","addSource","store","subscribe","_onStateChange","_shouldInit","dispatch","type","initSuccess","_shouldReset","_resetModuleStatus","loggedIn","sourceModuleReady","pending","ready","resetSuccess","sourceFilter","searchFilter","updateFilter","sourceName","Error","has","getPresence","getProfileImage","filterContacts","searchForPhoneNumbers","matchContactsByPhoneNumber","set","updated","Array","from","keys","get","lastStatus","sourceReady","data","contacts","sources","values","filter","result","Promise","all","map","promise","resolve","then","items","concat","error","console","searchString","phoneNumber","phoneNumbers","id","contactId","toString","find","x","contact","useCache","sync","state","status","RcModule","proxify","selector","size","checkSourceUpdated","names","AllContactSourceName","push","filteredContacts","allContacts"],"mappings":"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","sourcesContent":["import { selector } from '../../lib/selector';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport isBlank from '../../lib/isBlank';\nimport {\n  uniqueContactItems,\n  sortContactItemsByName,\n  groupByFirstLetterOfName,\n  getFilterContacts,\n  AllContactSourceName,\n} from '../../lib/contactHelper';\nimport proxify from '../../lib/proxy/proxify';\nimport actionTypes from './actionTypes';\nimport getContactsReducer from './getContactsReducer';\n\nexport const DefaultContactListPageSize = 20;\n\n/**\n * @class\n * @description Contacts managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    { dep: 'ContactSources', optional: true },\n    { dep: 'ContactsOptions', optional: true },\n  ],\n})\nexport default class Contacts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   */\n  constructor({ auth, contactSources = [], ...options }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = ensureExist.call(this, auth, 'auth');\n    this._reducer = getContactsReducer(this.actionTypes);\n    this._contactSources = new Map();\n    this._sourcesLastStatus = new Map();\n    this._sourcesUpdatedAt = Date.now();\n\n    for (const source of contactSources) {\n      this.addSource(source);\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return this._auth.loggedIn && this.sourceModuleReady && this.pending;\n  }\n\n  _shouldReset() {\n    return (!this._auth.loggedIn || !this.sourceModuleReady) && this.ready;\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  updateFilter({ sourceFilter, searchFilter }) {\n    this.store.dispatch({\n      type: this.actionTypes.updateFilter,\n      sourceFilter,\n      searchFilter,\n    });\n  }\n\n  addSource(source) {\n    if (!source.sourceName) {\n      throw new Error('[Contacts > ContactSource > sourceName] is required');\n    }\n    if (this._contactSources.has(source.sourceName)) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > sourceName] already exists`,\n      );\n    }\n    if (source.getPresence && typeof source.getPresence !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getPresence] must be a function`,\n      );\n    }\n    if (\n      source.getProfileImage &&\n      typeof source.getProfileImage !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getProfileImage] must be a function`,\n      );\n    }\n    if (source.filterContacts && typeof source.filterContacts !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > filterContacts] must be a function`,\n      );\n    }\n    if (\n      source.searchForPhoneNumbers &&\n      typeof source.searchForPhoneNumbers !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] must be a function`,\n      );\n    }\n    if (\n      source.matchContactsByPhoneNumber &&\n      typeof source.matchContactsByPhoneNumber !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] must be a function`,\n      );\n    }\n    this._contactSources.set(source.sourceName, source);\n    this._sourcesLastStatus.set(source.sourceName, {});\n    this._sourcesUpdatedAt = Date.now();\n  }\n\n  checkSourceUpdated() {\n    let updated = false;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      const lastStatus = this._sourcesLastStatus.get(sourceName);\n      if (\n        lastStatus.ready !== source.sourceReady ||\n        lastStatus.data !== source.contacts\n      ) {\n        updated = true;\n        this._sourcesLastStatus.set(sourceName, {\n          ready: source.sourceReady,\n          data: source.contacts,\n        });\n      }\n    }\n    if (updated) {\n      this._sourcesUpdatedAt = Date.now();\n    }\n    return this._sourcesUpdatedAt;\n  }\n\n  async filterContacts(searchFilter) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.filterContacts === 'function',\n    );\n    let result = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(source.filterContacts(searchFilter));\n        return promise\n          .then((items) => {\n            result = result.concat(items);\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > filterContacts] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async searchForPhoneNumbers(searchString) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.searchForPhoneNumbers === 'function',\n    );\n    let result = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.searchForPhoneNumbers(searchString),\n        );\n        return promise\n          .then((items) => {\n            result = result.concat(items);\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContactsByPhoneNumber(phoneNumber) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.matchContactsByPhoneNumber === 'function',\n    );\n    let result = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.matchContactsByPhoneNumber(phoneNumber),\n        );\n        return promise\n          .then((items) => {\n            result = result.concat(items);\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContacts({ phoneNumbers }) {\n    const result = {};\n    await Promise.all(\n      phoneNumbers.map((phoneNumber) => {\n        const promise = this.matchContactsByPhoneNumber(phoneNumber);\n        return promise.then((items) => {\n          result[phoneNumber] = items;\n        });\n      }),\n    );\n    return result;\n  }\n\n  find({ type, id }) {\n    const contactId = (id || '').toString();\n    const source = this._contactSources.get(type);\n    if (source) {\n      return source.contacts.find((x) => x.id.toString() === contactId);\n    }\n    return null;\n  }\n\n  @proxify\n  async getProfileImage(contact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getProfileImage) {\n      const result = await source.getProfileImage(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async getPresence(contact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getPresence) {\n      const result = await source.getPresence(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async sync(...args) {\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (typeof source.sync === 'function') {\n        await source.sync(...args);\n      }\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get sourceModuleReady() {\n    let ready = true;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (!source.ready) {\n        ready = false;\n      }\n    }\n    return ready;\n  }\n\n  get companyContacts() {\n    const source = this._contactSources.get('company');\n    if (source) {\n      return source.contacts;\n    }\n    return [];\n  }\n\n  get personalContacts() {\n    const source = this._contactSources.get('personal');\n    if (source) {\n      return source.contacts;\n    }\n    return [];\n  }\n\n  get searchFilter() {\n    return this.state.searchFilter;\n  }\n\n  get sourceFilter() {\n    return this.state.sourceFilter;\n  }\n\n  @selector\n  sourceNames = [\n    () => this._contactSources.size,\n    () => this.checkSourceUpdated(),\n    () => {\n      const names = [AllContactSourceName];\n      for (const sourceName of Array.from(this._contactSources.keys())) {\n        const source = this._contactSources.get(sourceName);\n        if (source.sourceReady) {\n          names.push(sourceName);\n        }\n      }\n      return names;\n    },\n  ];\n\n  @selector\n  allContacts = [\n    () => this.checkSourceUpdated(),\n    () => {\n      let contacts = [];\n      for (const sourceName of Array.from(this._contactSources.keys())) {\n        const source = this._contactSources.get(sourceName);\n        if (source.sourceReady) {\n          contacts = contacts.concat(source.contacts);\n        }\n      }\n      return contacts;\n    },\n  ];\n\n  @selector\n  contactGroups = [\n    () => this.filteredContacts,\n    (filteredContacts) =>\n      groupByFirstLetterOfName(\n        sortContactItemsByName(uniqueContactItems(filteredContacts)),\n      ),\n  ];\n\n  @selector\n  filteredContacts = [\n    () => this.searchFilter,\n    () => this.sourceFilter,\n    () => this.checkSourceUpdated(),\n    (searchFilter, sourceFilter) => {\n      let contacts;\n      if (\n        isBlank(searchFilter) &&\n        (sourceFilter === AllContactSourceName || isBlank(sourceFilter))\n      ) {\n        return this.allContacts;\n      }\n      if (sourceFilter !== AllContactSourceName && !isBlank(sourceFilter)) {\n        const source = this._contactSources.get(sourceFilter);\n        if (source && source.sourceReady) {\n          /* eslint { \"prefer-destructuring\": 0 } */\n          contacts = source.contacts;\n        } else {\n          contacts = [];\n        }\n      } else {\n        contacts = this.allContacts;\n      }\n      if (!isBlank(searchFilter)) {\n        contacts = getFilterContacts(contacts, searchFilter);\n      }\n      return contacts;\n    },\n  ];\n}\n"],"file":"index.js"}