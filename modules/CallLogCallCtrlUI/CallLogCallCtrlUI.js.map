{"version":3,"sources":["modules/CallLogCallCtrlUI/CallLogCallCtrlUI.ts"],"names":["CallLogCallCtrlUI","name","deps","activeCallControl","connectivityMonitor","rateLimiter","routerInteraction","callingSettings","forwardingNumber","callMonitor","options","_activeCallControl","_connectivityMonitor","_rateLimiter","_routerInteraction","_callingSettings","_forwardingNumber","_callMonitor","onTransfer","telephonySessionId","clickTransferTrack","push","isWebphone","callingMode","callingModes","webphone","currentSession","getActiveSession","realOutboundCallStatus","getRcCallSession","otherParties","activeOnHoldCalls","activeCurrentCalls","otherActiveCalls","concat","filter","call","sessionId","length","disableLinks","connectivity","throttling","forwardingNumbers","mute","bind","unmute","hangUp","reject","onHold","hold","onUnHold","unhold","startRecord","stopRecord","sendDTMF","dtmfValue","answer","forward","phoneNumber","ignore","answerAndHold","answerAndEnd","dialpadToggleTrack","open","dialpadOpenTrack","dialpadCloseTrack","clickForwardTrack","RcUIModule"],"mappings":"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","sourcesContent":["import { Module } from 'ringcentral-integration/lib/di';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport RcUIModule from '../../lib/RcUIModule';\n\n@Module({\n  name: 'CallLogCallCtrlUI',\n  deps: [\n    'ActiveCallControl',\n    'ConnectivityMonitor',\n    'RateLimiter',\n    'RouterInteraction',\n    'CallingSettings',\n    'ForwardingNumber',\n    'CallMonitor',\n  ],\n})\nexport default class CallLogCallCtrlUI extends RcUIModule {\n  private _activeCallControl: any;\n  private _connectivityMonitor: any;\n  private _rateLimiter: any;\n  private _routerInteraction: any;\n  private _callingSettings: any;\n  private _forwardingNumber: any;\n  private _callMonitor: any;\n\n  constructor({\n    activeCallControl,\n    connectivityMonitor,\n    rateLimiter,\n    routerInteraction,\n    callingSettings,\n    forwardingNumber,\n    callMonitor,\n    ...options\n  }) {\n    super({ ...options });\n    this._activeCallControl = activeCallControl;\n    this._connectivityMonitor = connectivityMonitor;\n    this._rateLimiter = rateLimiter;\n    this._routerInteraction = routerInteraction;\n    this._callingSettings = callingSettings;\n    this._forwardingNumber = forwardingNumber;\n    this._callMonitor = callMonitor;\n  }\n\n  private onTransfer = (telephonySessionId: string) => {\n    this._activeCallControl.clickTransferTrack();\n    return this._routerInteraction.push(\n      `/transfer/${telephonySessionId}/active`,\n    );\n  };\n\n  getUIProps({ telephonySessionId }: { telephonySessionId: string }) {\n    const isWebphone =\n      this._callingSettings.callingMode === callingModes.webphone;\n    const currentSession = this._activeCallControl.getActiveSession(\n      telephonySessionId,\n    );\n    // we can get real callee call status from telephony session\n    const realOutboundCallStatus = this._activeCallControl?.getRcCallSession(\n      telephonySessionId,\n    )?.otherParties[0]?.['status']['code'];\n    const { activeOnHoldCalls, activeCurrentCalls } = this._callMonitor;\n    const otherActiveCalls =\n      currentSession &&\n      !!activeOnHoldCalls\n        .concat(activeCurrentCalls)\n        .filter((call: any) => call.sessionId !== currentSession.sessionId)\n        .length;\n    return {\n      isWebphone,\n      currentSession,\n      disableLinks:\n        !this._connectivityMonitor.connectivity || this._rateLimiter.throttling,\n      telephonySessionId,\n      forwardingNumbers: this._forwardingNumber.forwardingNumbers,\n      otherActiveCalls,\n      realOutboundCallStatus,\n    };\n  }\n\n  getUIFunctions() {\n    return {\n      mute: this._activeCallControl.mute.bind(this._activeCallControl),\n      unmute: this._activeCallControl.unmute.bind(this._activeCallControl),\n      hangUp: this._activeCallControl.hangUp.bind(this._activeCallControl),\n      reject: this._activeCallControl.reject.bind(this._activeCallControl),\n      onHold: this._activeCallControl.hold.bind(this._activeCallControl),\n      onUnHold: this._activeCallControl.unhold.bind(this._activeCallControl),\n      startRecord: this._activeCallControl.startRecord.bind(\n        this._activeCallControl,\n      ),\n      stopRecord: this._activeCallControl.stopRecord.bind(\n        this._activeCallControl,\n      ),\n      onTransfer: this.onTransfer,\n      sendDTMF: (dtmfValue: string, telephonySessionId: string) =>\n        this._activeCallControl.sendDTMF(dtmfValue, telephonySessionId),\n      answer: this._activeCallControl.answer.bind(this._activeCallControl),\n      forward: (phoneNumber: string, telephonySessionId: string) => {\n        if (phoneNumber === 'custom') {\n          this._routerInteraction.push(`/forward/${telephonySessionId}`);\n        } else {\n          this._activeCallControl.forward.call(\n            this._activeCallControl,\n            phoneNumber,\n            telephonySessionId,\n          );\n        }\n      },\n      ignore: this._activeCallControl.ignore.bind(this._activeCallControl),\n      answerAndHold: this._activeCallControl.answerAndHold.bind(\n        this._activeCallControl,\n      ),\n      answerAndEnd: this._activeCallControl.answerAndEnd.bind(\n        this._activeCallControl,\n      ),\n      dialpadToggleTrack: (open: boolean) => {\n        if (open) {\n          this._activeCallControl.dialpadOpenTrack();\n        } else {\n          this._activeCallControl.dialpadCloseTrack();\n        }\n      },\n      clickForwardTrack: this._activeCallControl.clickForwardTrack.bind(\n        this._activeCallControl,\n      ),\n    };\n  }\n}\n"],"file":"CallLogCallCtrlUI.js"}