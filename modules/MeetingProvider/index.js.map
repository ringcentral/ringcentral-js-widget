{"version":3,"sources":["modules/MeetingProvider/index.js"],"names":["MeetingProvider","options","subscriptionFilters","extensionInfo","subscriptionHandler","message","_subscriptionHandleFn","fetchFunction","_client","data","disableCache","body","hints","includes","subscriptionHints","videoConfiguration","fetchData","provider","DataFetcher"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOqBA,e;AALrB;;;;OAIC,iB;;;;;AAEC,iCAA4B;AAAA;;AAAA,QAAXC,OAAW;;AAAA;;AAAA,qEAErBA,OAFqB;AAGxBC,MAAAA,mBAAmB,EAAE,CAACA,gCAAoBC,aAArB,CAHG;AAIxBC,MAAAA,mBAAmB;AAAA,2FAAE,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACb,MAAKC,qBAAL,CAA2BD,OAA3B,CADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,SAJK;AAOlBE,MAAAA,aAPkB,2BAOF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACD,iCAAmB,MAAI,CAACC,OAAxB,CADC;;AAAA;AACdC,kBAAAA,IADc;AAAA,oDAEbA,IAFa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGrB,OAVuB;AAWxBC,MAAAA,YAAY,EAAE;AAXU;AAa3B;;;;;6GAE2BL,O;;;;;;;sBACtBA,O,aAAAA,O,wCAAAA,OAAO,CAAEM,I,yEAAT,cAAeC,K,wDAAf,oBAAsBC,QAAtB,CAA+BC,8BAAkBC,kBAAjD,C;;;;;;uBAII,uBAAM,IAAN,C;;;;uBACA,KAAKC,SAAL,E;;;;;;;;;;;;;;;;;;wBAIK;AAAA;;AACb,2BAAO,KAAKP,IAAZ,+CAAO,WAAWQ,QAAlB;AACD;;;wBAEW;AACV,aAAO,iBAAP;AACD;;;;EAhC0CC,wB","sourcesContent":["import sleep from '../../lib/sleep';\nimport { Module } from '../../lib/di';\nimport DataFetcher from '../../lib/DataFetcher';\nimport subscriptionHints from '../../enums/subscriptionHints';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\n\nimport { getMeetingProvider } from './service';\n\n/**\n * @class\n * @description: just check meeting provider from RC PLA\n */\n@Module()\nexport default class MeetingProvider extends DataFetcher {\n  constructor({ ...options }) {\n    super({\n      ...options,\n      subscriptionFilters: [subscriptionFilters.extensionInfo],\n      subscriptionHandler: async (message) => {\n        await this._subscriptionHandleFn(message);\n      },\n      async fetchFunction() {\n        const data = await getMeetingProvider(this._client);\n        return data;\n      },\n      disableCache: true,\n    });\n  }\n\n  async _subscriptionHandleFn(message) {\n    if (message?.body?.hints?.includes(subscriptionHints.videoConfiguration)) {\n      // the video configuration api may return the old value\n      // when we try to query immediately right after got the push notification\n      // here we wait for seconds as a workaround to solve the issue\n      await sleep(5000);\n      await this.fetchData();\n    }\n  }\n\n  get provider() {\n    return this.data?.provider;\n  }\n\n  get _name() {\n    return 'meetingProvider';\n  }\n}\n"],"file":"index.js"}