{"version":3,"sources":["modules/EvAuth/EvAuth.ts"],"names":["DEFAULT_COUNTRIES","EvAuth","name","deps","dep","optional","that","inboundSettings","availableQueues","availableRequeueQueues","agentSettings","callerIds","agentConfig","applicationSettings","availableCountries","_deps","locale","currentLocale","_","connected","agent","trackEvents","loginAgent","authenticateResponse","agents","map","agentId","rcUserId","undefined","tabManager","enable","length","enableCache","storageKey","enableGlobalCache","connecting","_eventEmitter","EventEmitter","canUserLogoutFn","_logout","auth","logout","dismissAllAlert","_logoutByOtherTab","token","accessToken","authenticateWithToken","authenticateRes","openSocketWithSelectedAgentId","syncTabs","send","tabManagerEvents","SET_AGENT_ID","loggedIn","console","log","clearAgentId","addBeforeLogoutHandler","onBeforeRCLogout","evSubscription","subscribe","EvCallbackTypes","LOGOUT","_emitLogoutBefore","alert","info","message","messageTypes","FORCE_LOGOUT","newReconnect","tabManagerEnabled","ready","_checkTabManagerEvent","cb","once","sendLogoutTabEvent","block","next","logoutAgent","logoutAgentResponse","setConnectionData","evClient","callback","on","authStatus","LOGOUT_BEFORE","isBlock","closeSocket","fn","rcAccessToken","tokenType","initSDK","getAndHandleAuthenticateResponse","setAgent","_emitAuthSuccess","type","NO_AGENT","CONNECT_TIMEOUT","UNEXPECTED_AGENT","warning","danger","CONNECT_ERROR","syncOtherTabs","retryOpenSocket","getAgentConfig","Promise","resolve","LOGIN_PHASE_1","selectedAgentId","EvTypeError","openSocket","openSocketResult","error","refreshToken","access_token","openSocketRes","OPEN_SOCKET_ERROR","OPEN_SOCKET","_emitLoginSuccess","INVALID_BROWSER","LOGIN_SUCCESS","AUTH_SUCCESS","emit","event","data","args","setAgentId","isFreshLogin","outboundManualDefaultRingtime","availableSkillProfiles","queues","skillProfile","agentPermissions","gateId","gateName","i18n","getString","description","number","callerId","phoneNumber","countryCode","countriesUsaCan","filter","countryId","includes","countryName","RcModuleV2","storage","state","globalStorage","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  track,\n  globalStorage,\n} from '@ringcentral-integration/core';\nimport format from '@ringcentral-integration/phone-number/lib/format';\nimport { EventEmitter } from 'events';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport sleep from 'ringcentral-integration/lib/sleep';\n\nimport { authStatus, messageTypes, tabManagerEvents } from '../../enums';\nimport { EvAgentConfig, EvAgentData, EvTokenType } from '../../lib/EvClient';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums';\nimport { EvTypeError } from '../../lib/EvTypeError';\nimport { sortByName } from '../../lib/sortByName';\nimport { trackEvents } from '../../lib/trackEvents';\nimport { Auth, Deps, State } from './EvAuth.interface';\nimport i18n from './i18n';\n\nconst DEFAULT_COUNTRIES = ['USA', 'CAN'];\n\n@Module({\n  name: 'EvAuth',\n  deps: [\n    'EvClient',\n    'Auth',\n    'Storage',\n    'Block',\n    'Alert',\n    'Locale',\n    'RouterInteraction',\n    'EvSubscription',\n    'TabManager',\n    'GlobalStorage',\n    { dep: 'EvAuthOptions', optional: true },\n  ],\n})\nclass EvAuth extends RcModuleV2<Deps> implements Auth {\n  public connecting?: boolean;\n\n  private _eventEmitter = new EventEmitter();\n\n  public canUserLogoutFn: () => Promise<boolean> = async () => true;\n\n  private _logout = () => {\n    return this._deps.auth.logout({ dismissAllAlert: false });\n  };\n\n  private _logoutByOtherTab = false;\n\n  get tabManagerEnabled() {\n    return this._deps.tabManager?.enable;\n  }\n\n  get isOnlyOneAgent() {\n    return this.agent?.authenticateResponse.agents.length === 1;\n  }\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvAuth',\n      enableGlobalCache: true,\n    });\n  }\n\n  @storage\n  @state\n  connected = false;\n\n  @storage\n  @state\n  agent: EvAgentData = null;\n\n  @globalStorage\n  @state\n  agentId = '';\n\n  @action\n  setAgentId(agentId: string, syncTabs = false) {\n    this.agentId = agentId;\n    if (syncTabs) {\n      this._deps.tabManager.send(tabManagerEvents.SET_AGENT_ID, agentId);\n    }\n  }\n\n  get isFreshLogin() {\n    return this._deps.auth.isFreshLogin;\n  }\n\n  get agentConfig() {\n    return this.agent?.agentConfig || null;\n  }\n\n  get authenticateResponse() {\n    return this.agent?.authenticateResponse || null;\n  }\n\n  get agentSettings() {\n    return this.agentConfig.agentSettings;\n  }\n\n  get outboundManualDefaultRingtime() {\n    return this.agentSettings.outboundManualDefaultRingtime;\n  }\n\n  get inboundSettings() {\n    return (\n      this.agentConfig.inboundSettings || {\n        availableQueues: [] as Array<undefined>,\n        availableSkillProfiles: [] as Array<undefined>,\n        queues: [] as Array<undefined>,\n        skillProfile: {} as any,\n        availableRequeueQueues: [] as Array<undefined>,\n      }\n    );\n  }\n\n  get assignedQueue() {\n    return this.inboundSettings.queues;\n  }\n\n  get agentPermissions() {\n    return this.agentConfig.agentPermissions;\n  }\n\n  @computed((that: EvAuth) => [that.inboundSettings.availableQueues])\n  get availableQueues() {\n    return [\n      {\n        gateId: '-1',\n        gateName: i18n.getString('default', this._deps.locale.currentLocale),\n      },\n      ...sortByName(this.inboundSettings.availableQueues, 'gateName'),\n    ];\n  }\n\n  @computed((that: EvAuth) => [that.inboundSettings.availableRequeueQueues])\n  get availableRequeueQueues() {\n    return sortByName(this.inboundSettings.availableRequeueQueues, 'groupName');\n  }\n\n  @computed((that: EvAuth) => [that.agentSettings.callerIds])\n  get callerIds() {\n    return [\n      {\n        description: i18n.getString('default', this._deps.locale.currentLocale),\n        number: '-1',\n      },\n      ...this.agentSettings.callerIds.map((callerId) => {\n        const number =\n          format({\n            phoneNumber: callerId.number,\n            countryCode: 'US',\n          }) || callerId.number;\n        return {\n          ...callerId,\n          number,\n        };\n      }),\n    ];\n  }\n\n  @computed((that: EvAuth) => [\n    that.agentConfig.applicationSettings.availableCountries,\n    that._deps.locale.currentLocale,\n  ])\n  get availableCountries() {\n    const { availableCountries } = this.agentConfig.applicationSettings;\n    // The default Engage Voice service area is `USA` and `CAN` with `+1` international code.\n    const countriesUsaCan = availableCountries.filter(({ countryId }) =>\n      DEFAULT_COUNTRIES.includes(countryId),\n    );\n    return countriesUsaCan.length > 0\n      ? countriesUsaCan\n      : [\n          {\n            countryId: 'USA',\n            countryName: i18n.getString('us', this._deps.locale.currentLocale),\n          },\n        ];\n  }\n\n  @track((_: EvAuth, { connected, agent }: State) => {\n    return [\n      trackEvents.loginAgent,\n      connected\n        ? {\n            'agentId(s)': agent.authenticateResponse?.agents?.map(\n              (agent) => agent.agentId,\n            ),\n            'userId(s)': agent.authenticateResponse?.agents?.map(\n              (agent) => agent.rcUserId,\n            ),\n          }\n        : undefined,\n    ];\n  })\n  @action\n  setConnectionData({ connected, agent }: State) {\n    // ! agent must be set before connected\n    this.agent = agent;\n    this.connected = connected;\n  }\n\n  @action\n  setConnected(connected: boolean) {\n    this.connected = connected;\n  }\n\n  @action\n  setAgent(agent: EvAgentData) {\n    this.agent = agent;\n  }\n\n  @action\n  clearAgentId(syncTabs = false) {\n    this.agentId = '';\n    if (syncTabs) {\n      this._deps.tabManager.send(tabManagerEvents.SET_AGENT_ID, '');\n    }\n  }\n\n  _shouldInit() {\n    return super._shouldInit() && this._deps.auth.loggedIn && this.connected;\n  }\n\n  onBeforeRCLogout() {\n    console.log('_onBeforeRCLogout~');\n    this.clearAgentId();\n  }\n\n  onInitOnce() {\n    this._deps.auth.addBeforeLogoutHandler(() => this.onBeforeRCLogout());\n    this._deps.evSubscription.subscribe(EvCallbackTypes.LOGOUT, async () => {\n      this._emitLogoutBefore();\n\n      // if that is logout by same browser that will only trigger emit\n      // if there is logout by other browser, that need redirect to home page,\n      if (!this._logoutByOtherTab) {\n        this._deps.alert.info({\n          message: messageTypes.FORCE_LOGOUT,\n        });\n\n        this._logoutByOtherTab = false;\n\n        await this.newReconnect();\n      }\n    });\n  }\n\n  async onStateChange() {\n    // here not need check this.ready, because that should work when not login\n    if (this.tabManagerEnabled && this._deps.tabManager.ready) {\n      await this._checkTabManagerEvent();\n    }\n\n    if (this._deps.auth.loggedIn && !this.connected && !this.connecting) {\n      console.log('evAuth onStateChange~~');\n      this.connecting = true;\n      // when login make sure the logoutByOtherTab is false\n      this._logoutByOtherTab = false;\n\n      if (this.agentId) {\n        await this.loginAgent();\n      } else {\n        await this.authenticateWithToken();\n      }\n    }\n  }\n\n  onceLogout(cb: () => any) {\n    return this._deps.evSubscription.once(EvCallbackTypes.LOGOUT, cb);\n  }\n\n  async logout() {\n    if (!(await this.canUserLogoutFn())) {\n      return;\n    }\n\n    const agentId = this.agentId;\n\n    this.sendLogoutTabEvent();\n\n    await this._deps.block.next(this._logout);\n\n    const logoutAgentResponse = await this.logoutAgent(agentId);\n\n    // TODO: error handle when logout fail\n    // TODO: when failed need tell other tab not logout => this._deps.tabManager.send(tabManagerEvents.LOGOUT);\n    if (!logoutAgentResponse.message || logoutAgentResponse.message !== 'OK') {\n      console.log('logoutAgent failed');\n    }\n    this.setConnectionData({ connected: false, agent: null });\n  }\n\n  sendLogoutTabEvent() {\n    this._emitLogoutBefore();\n    if (this.tabManagerEnabled) {\n      this._deps.tabManager.send(tabManagerEvents.LOGOUT);\n    }\n  }\n\n  logoutAgent(agentId: string = this.agentId) {\n    return this._deps.evClient.logoutAgent(agentId);\n  }\n\n  beforeAgentLogout(callback: () => void) {\n    this._eventEmitter.on(authStatus.LOGOUT_BEFORE, callback);\n  }\n\n  newReconnect(isBlock: boolean = true) {\n    this._deps.evClient.closeSocket();\n\n    const fn = this.loginAgent;\n\n    return isBlock ? this._deps.block.next(fn) : fn();\n  }\n\n  async authenticateWithToken(\n    rcAccessToken = this._deps.auth.accessToken,\n    tokenType: EvTokenType = 'Bearer',\n  ) {\n    try {\n      this._deps.evClient.initSDK();\n\n      const authenticateResponse = await this._deps.evClient.getAndHandleAuthenticateResponse(\n        rcAccessToken,\n        tokenType,\n      );\n      const agent = { ...this.agent, authenticateResponse };\n      this.setAgent(agent);\n      this._emitAuthSuccess();\n\n      return authenticateResponse;\n    } catch (error) {\n      switch (error.type) {\n        case messageTypes.NO_AGENT:\n          this._deps.alert.warning({\n            message: error.type,\n          });\n          break;\n        case messageTypes.CONNECT_TIMEOUT:\n        case messageTypes.UNEXPECTED_AGENT:\n          this._deps.alert.danger({\n            message: error.type,\n          });\n          break;\n        default:\n          this._deps.alert.danger({\n            message: messageTypes.CONNECT_ERROR,\n          });\n      }\n      await this._logout();\n    }\n  }\n\n  async openSocketWithSelectedAgentId({\n    syncOtherTabs = false,\n    retryOpenSocket = false,\n  } = {}) {\n    try {\n      // TODO: here need check time when no message come back, that will block app.\n      const getAgentConfig = new Promise<EvAgentConfig>((resolve) => {\n        this._deps.evClient.on(EvCallbackTypes.LOGIN_PHASE_1, resolve);\n      });\n\n      const selectedAgentId = this.agentId;\n      console.log('selectedAgentId~~~', selectedAgentId);\n      if (!selectedAgentId) {\n        throw new EvTypeError({\n          type: messageTypes.NO_AGENT,\n        });\n      }\n      const openSocketResult = await this._deps.evClient.openSocket(\n        selectedAgentId,\n      );\n      // wait for socketOpened\n      // Because instance.socket Opened(); was performed after callback.\n      await sleep(0);\n      if (openSocketResult.error) {\n        console.log('retryOpenSocket~~', retryOpenSocket);\n        if (retryOpenSocket) {\n          const { access_token } = await this._deps.auth.refreshToken();\n          const authenticateRes = await this.authenticateWithToken(\n            access_token,\n          );\n          if (!authenticateRes) return;\n          const openSocketRes: any = await this.openSocketWithSelectedAgentId({\n            syncOtherTabs,\n          });\n          return openSocketRes;\n        }\n        throw new EvTypeError({\n          type: messageTypes.OPEN_SOCKET_ERROR,\n        });\n      }\n\n      // TODO： implement multiple sync back drop\n      if (syncOtherTabs && this.tabManagerEnabled) {\n        this._deps.tabManager.send(tabManagerEvents.OPEN_SOCKET);\n      }\n\n      const agentConfig = await getAgentConfig;\n\n      const agent = { ...this.agent, agentConfig };\n\n      this.setConnectionData({ agent, connected: true });\n\n      this.connecting = false;\n\n      this._emitLoginSuccess();\n      return agentConfig;\n    } catch (error) {\n      switch (error.type) {\n        case messageTypes.NO_AGENT:\n          this._deps.alert.warning({\n            message: error.type,\n          });\n          break;\n        case messageTypes.INVALID_BROWSER:\n        case messageTypes.OPEN_SOCKET_ERROR:\n          this._deps.alert.danger({\n            message: error.type,\n          });\n          break;\n        default:\n          this._deps.alert.danger({\n            message: messageTypes.CONNECT_ERROR,\n          });\n      }\n\n      await this._logout();\n    }\n  }\n\n  loginAgent = async (token: string = this._deps.auth.accessToken) => {\n    const authenticateRes = await this.authenticateWithToken(token);\n    if (!authenticateRes) return;\n    await this.openSocketWithSelectedAgentId();\n  };\n\n  onLoginSuccess(callback: () => void) {\n    this._eventEmitter.on(authStatus.LOGIN_SUCCESS, callback);\n  }\n\n  onceLoginSuccess(callback: () => void) {\n    this._eventEmitter.once(authStatus.LOGIN_SUCCESS, callback);\n  }\n\n  onAuthSuccess(callback: () => void) {\n    this._eventEmitter.on(authStatus.AUTH_SUCCESS, callback);\n  }\n\n  private _emitLogoutBefore() {\n    this._eventEmitter.emit(authStatus.LOGOUT_BEFORE);\n  }\n\n  private _emitLoginSuccess() {\n    this._eventEmitter.emit(authStatus.LOGIN_SUCCESS);\n  }\n\n  private _emitAuthSuccess() {\n    console.log('_emitAuthSuccess~~');\n    this._eventEmitter.emit(authStatus.AUTH_SUCCESS);\n  }\n\n  private async _checkTabManagerEvent() {\n    const { event } = this._deps.tabManager;\n    if (event) {\n      const data = event.args[0];\n      switch (event.name) {\n        case tabManagerEvents.LOGOUT:\n          this._logoutByOtherTab = true;\n          break;\n        case tabManagerEvents.OPEN_SOCKET:\n          console.log('tabManagerEvents.OPEN_SOCKET~~');\n          await this._deps.block.next(async () => {\n            await this.openSocketWithSelectedAgentId({\n              retryOpenSocket: true,\n            });\n          });\n          break;\n        case tabManagerEvents.SET_AGENT_ID:\n          this.setAgentId(data);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}\n\nexport { EvAuth };\n"],"file":"EvAuth.js"}