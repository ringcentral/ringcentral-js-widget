{"version":3,"sources":["modules/EvAuth/EvAuth.ts"],"names":["DEFAULT_COUNTRIES","EvAuth","name","deps","dep","optional","that","inboundSettings","availableQueues","availableRequeueQueues","agentSettings","callerIds","agentConfig","applicationSettings","availableCountries","_deps","locale","currentLocale","_","connected","agent","trackEvents","loginAgent","authenticateResponse","agents","map","agentId","rcUserId","undefined","tabManager","enable","enableCache","storageKey","connecting","_eventEmitter","EventEmitter","canUserLogoutFn","_logout","auth","logout","dismissAllAlert","_logoutByOtherTab","token","accessToken","console","log","evClient","initSDK","setConnectionData","data","_emitLoginSuccess","type","messageTypes","NO_AGENT","CONNECT_TIMEOUT","UNEXPECTED_AGENT","INVALID_BROWSER","OPEN_SOCKET_ERROR","alert","warning","message","danger","CONNECT_ERROR","loggedIn","evSubscription","subscribe","EvCallbackTypes","LOGOUT","_emitLogoutBefore","info","FORCE_LOGOUT","newReconnect","tabManagerEnabled","ready","_checkTabManagerEvent","cb","once","sendLogoutTabEvent","block","next","logoutAgent","logoutAgentResponse","send","tabManagerEvents","callback","on","authStatus","LOGOUT_BEFORE","isBlock","closeSocket","fn","LOGIN_SUCCESS","emit","event","isFreshLogin","outboundManualDefaultRingtime","availableSkillProfiles","queues","skillProfile","agentPermissions","gateId","gateName","i18n","getString","description","number","callerId","phoneNumber","countryCode","countriesUsaCan","filter","countryId","includes","length","countryName","RcModuleV2","storage","state","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAQA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAG,CAAC,KAAD,EAAQ,KAAR,CAA1B;IAiBMC,M,WAfL,gBAAO;AACNC,EAAAA,IAAI,EAAE,QADA;AAENC,EAAAA,IAAI,EAAE,CACJ,UADI,EAEJ,MAFI,EAGJ,SAHI,EAIJ,OAJI,EAKJ,OALI,EAMJ,QANI,EAOJ,mBAPI,EAQJ,gBARI,EASJ,YATI,EAUJ;AAAEC,IAAAA,GAAG,EAAE,eAAP;AAAwBC,IAAAA,QAAQ,EAAE;AAAlC,GAVI;AAFA,CAAP,C,UAwFE,oBAAS,UAACC,IAAD;AAAA,SAAkB,CAACA,IAAI,CAACC,eAAL,CAAqBC,eAAtB,CAAlB;AAAA,CAAT,C,UAWA,oBAAS,UAACF,IAAD;AAAA,SAAkB,CAACA,IAAI,CAACC,eAAL,CAAqBE,sBAAtB,CAAlB;AAAA,CAAT,C,UAKA,oBAAS,UAACH,IAAD;AAAA,SAAkB,CAACA,IAAI,CAACI,aAAL,CAAmBC,SAApB,CAAlB;AAAA,CAAT,C,UAqBA,oBAAS,UAACL,IAAD;AAAA,SAAkB,CAC1BA,IAAI,CAACM,WAAL,CAAiBC,mBAAjB,CAAqCC,kBADX,EAE1BR,IAAI,CAACS,KAAL,CAAWC,MAAX,CAAkBC,aAFQ,CAAlB;AAAA,CAAT,C,UAoBA,iBAAM,UAACC,CAAD,QAA4C;AAAA;;AAAA,MAA9BC,SAA8B,QAA9BA,SAA8B;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;AACjD,SAAO,CACLC,yBAAYC,UADP,EAELH,SAAS,GACL;AACE,2CAAcC,KAAK,CAACG,oBAApB,oFAAc,sBAA4BC,MAA1C,2DAAc,uBAAoCC,GAApC,CACZ,UAACL,KAAD;AAAA,aAAWA,KAAK,CAACM,OAAjB;AAAA,KADY,CADhB;AAIE,2CAAaN,KAAK,CAACG,oBAAnB,qFAAa,uBAA4BC,MAAzC,2DAAa,uBAAoCC,GAApC,CACX,UAACL,KAAD;AAAA,aAAWA,KAAK,CAACO,QAAjB;AAAA,KADW;AAJf,GADK,GASLC,SAXC,CAAP;AAaD,CAdA,C;;;;;;;wBArHuB;AAAA;;AACtB,sCAAO,KAAKb,KAAL,CAAWc,UAAlB,0DAAO,sBAAuBC,MAA9B;AACD;;;AAED,kBAAY3B,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA,IADI;AAEJ4B,MAAAA,WAAW,EAAE,IAFT;AAGJC,MAAAA,UAAU,EAAE;AAHR,KAAN;AADsB,UAhBjBC,UAgBiB;AAAA,UAdhBC,aAcgB,GAdA,IAAIC,oBAAJ,EAcA;AAAA,UAZjBC,eAYiB,wEAZyB;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAY,IAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYzB;;AAAA,UAVhBC,OAUgB,GAVN,YAAM;AACtB,aAAO,MAAKtB,KAAL,CAAWuB,IAAX,CAAgBC,MAAhB,CAAuB;AAAEC,QAAAA,eAAe,EAAE;AAAnB,OAAvB,CAAP;AACD,KAQuB;;AAAA,UANhBC,iBAMgB,GANI,KAMJ;;AAAA;;AAAA;;AAAA,UAkOxBnB,UAlOwB,wEAkOX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAOoB,cAAAA,KAAP,8DAAuB,MAAK3B,KAAL,CAAWuB,IAAX,CAAgBK,WAAvC;AACXC,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AADW;;AAGT,oBAAK9B,KAAL,CAAW+B,QAAX,CAAoBC,OAApB;;AAHS;AAAA,qBAKW,MAAKhC,KAAL,CAAW+B,QAAX,CAAoBxB,UAApB,CAA+BoB,KAA/B,EAAsC,QAAtC,CALX;;AAAA;AAKHtB,cAAAA,MALG;;AAOT,oBAAK4B,iBAAL,CAAuB;AACrB7B,gBAAAA,SAAS,EAAE,IADU;AAErBC,gBAAAA,KAAK,EAAEA,MAAK,CAAC6B;AAFQ,eAAvB;;AAKA,oBAAKC,iBAAL,CAAuB9B,MAAvB;;AAZS;AAAA;;AAAA;AAAA;AAAA;AAAA,6BAcD,aAAM+B,IAdL;AAAA,gDAeFC,oBAAaC,QAfX,yBAoBFD,oBAAaE,eApBX,yBAqBFF,oBAAaG,gBArBX,yBAsBFH,oBAAaI,eAtBX,yBAuBFJ,oBAAaK,iBAvBX;AAAA;;AAAA;AAgBL,oBAAK1C,KAAL,CAAW2C,KAAX,CAAiBC,OAAjB,CAAyB;AACvBC,gBAAAA,OAAO,EAAE,aAAMT;AADQ,eAAzB;;AAhBK;;AAAA;AAwBL,oBAAKpC,KAAL,CAAW2C,KAAX,CAAiBG,MAAjB,CAAwB;AACtBD,gBAAAA,OAAO,EAAE,aAAMT;AADO,eAAxB;;AAxBK;;AAAA;AA6BL,oBAAKpC,KAAL,CAAW2C,KAAX,CAAiBG,MAAjB,CAAwB;AACtBD,gBAAAA,OAAO,EAAER,oBAAaU;AADA,eAAxB;;AA7BK;AAAA;AAAA,qBAiCH,MAAKzB,OAAL,EAjCG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlOW;AAAA;AAMvB;;;;6CA2H8C;AAAA,UAA3BlB,SAA2B,SAA3BA,SAA2B;AAAA,UAAhBC,KAAgB,SAAhBA,KAAgB;AAC7C;AACA,WAAKA,KAAL,GAAaA,KAAb;AACA,WAAKD,SAAL,GAAiBA,SAAjB;AACD;;;6BAGQC,K,EAAoB;AAC3B,WAAKA,KAAL,GAAaA,KAAb;AACD;;;kCAEa;AACZ,aAAO,2EAAuB,KAAKL,KAAL,CAAWuB,IAAX,CAAgByB,QAAvC,IAAmD,KAAK5C,SAA/D;AACD;;;iCAEY;AAAA;;AACX,WAAKJ,KAAL,CAAWiD,cAAX,CAA0BC,SAA1B,CAAoCC,wBAAgBC,MAApD,uEAA4D;AAAA;AAAA;AAAA;AAAA;AAC1D,gBAAA,MAAI,CAACC,iBAAL,GAD0D,CAG1D;AACA;;;AAJ0D,oBAKrD,MAAI,CAAC3B,iBALgD;AAAA;AAAA;AAAA;;AAMxD,gBAAA,MAAI,CAAC1B,KAAL,CAAW2C,KAAX,CAAiBW,IAAjB,CAAsB;AACpBT,kBAAAA,OAAO,EAAER,oBAAakB;AADF,iBAAtB;;AAIA,gBAAA,MAAI,CAAC7B,iBAAL,GAAyB,KAAzB;AAVwD;AAAA,uBAYlD,MAAI,CAAC8B,YAAL,EAZkD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA5D;AAeD;;;;;;;;;AAGC;AACA,oBAAI,KAAKC,iBAAL,IAA0B,KAAKzD,KAAL,CAAWc,UAAX,CAAsB4C,KAApD,EAA2D;AACzD,uBAAKC,qBAAL;AACD;;sBAEG,KAAK3D,KAAL,CAAWuB,IAAX,CAAgByB,QAAhB,IAA4B,CAAC,KAAK5C,SAAlC,IAA+C,CAAC,KAAKc,U;;;;;AACvD,qBAAKA,UAAL,GAAkB,IAAlB,C,CACA;;AACA,qBAAKQ,iBAAL,GAAyB,KAAzB;;uBAEM,KAAKnB,UAAL,E;;;AACN,qBAAKW,UAAL,GAAkB,KAAlB;;;;;;;;;;;;;;;;;;+BAIO0C,E,EAAe;AACxB,aAAO,KAAK5D,KAAL,CAAWiD,cAAX,CAA0BY,IAA1B,CAA+BV,wBAAgBC,MAA/C,EAAuDQ,EAAvD,CAAP;AACD;;;;;;;;;;;uBAGa,KAAKvC,eAAL,E;;;;;;;;;;;AAINV,gBAAAA,O,GAAU,KAAKA,O;AAErB,qBAAKmD,kBAAL;;uBAEM,KAAK9D,KAAL,CAAW+D,KAAX,CAAiBC,IAAjB,CAAsB,KAAK1C,OAA3B,C;;;;uBAE4B,KAAK2C,WAAL,CAAiBtD,OAAjB,C;;;AAA5BuD,gBAAAA,mB;;AAEN;AACA;AACA,oBAAI,CAACA,mBAAmB,CAACrB,OAArB,IAAgCqB,mBAAmB,CAACrB,OAApB,KAAgC,IAApE,EAA0E;AACxEhB,kBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;;AACD,qBAAKG,iBAAL,CAAuB;AAAE7B,kBAAAA,SAAS,EAAE,KAAb;AAAoBC,kBAAAA,KAAK,EAAE;AAA3B,iBAAvB;;;;;;;;;;;;;;;;;;yCAGmB;AACnB,WAAKgD,iBAAL;;AACA,UAAI,KAAKI,iBAAT,EAA4B;AAC1B,aAAKzD,KAAL,CAAWc,UAAX,CAAsBqD,IAAtB,CAA2BC,wBAAiBhB,MAA5C;AACD;AACF;;;kCAE2C;AAAA,UAAhCzC,OAAgC,uEAAd,KAAKA,OAAS;AAC1C,aAAO,KAAKX,KAAL,CAAW+B,QAAX,CAAoBkC,WAApB,CAAgCtD,OAAhC,CAAP;AACD;;;sCAEiB0D,Q,EAAsB;AACtC,WAAKlD,aAAL,CAAmBmD,EAAnB,CAAsBC,kBAAWC,aAAjC,EAAgDH,QAAhD;AACD;;;mCAEqC;AAAA,UAAzBI,OAAyB,uEAAN,IAAM;;AACpC,WAAKzE,KAAL,CAAW+B,QAAX,CAAoB2C,WAApB;;AAEA,UAAMC,EAAE,GAAG,KAAKpE,UAAhB;AAEA,aAAOkE,OAAO,GAAG,KAAKzE,KAAL,CAAW+D,KAAX,CAAiBC,IAAjB,CAAsBW,EAAtB,CAAH,GAA+BA,EAAE,EAA/C;AACD;;;mCAuCcN,Q,EAAwC;AACrD,WAAKlD,aAAL,CAAmBmD,EAAnB,CAAsBC,kBAAWK,aAAjC,EAAgDP,QAAhD;AACD;;;qCAEgBA,Q,EAAwC;AACvD,WAAKlD,aAAL,CAAmB0C,IAAnB,CAAwBU,kBAAWK,aAAnC,EAAkDP,QAAlD;AACD;;;wCAE2B;AAC1B,WAAKlD,aAAL,CAAmB0D,IAAnB,CAAwBN,kBAAWC,aAAnC;AACD;;;sCAEyBnE,K,EAAoB;AAC5C,WAAKc,aAAL,CAAmB0D,IAAnB,CAAwBN,kBAAWK,aAAnC,EAAkDvE,KAAlD;AACD;;;4CAE+B;AAAA,UACtByE,KADsB,GACZ,KAAK9E,KAAL,CAAWc,UADC,CACtBgE,KADsB;;AAE9B,UAAIA,KAAJ,EAAW;AACT;AACA,gBAAQA,KAAK,CAAC3F,IAAd;AACE,eAAKiF,wBAAiBhB,MAAtB;AACE,iBAAK1B,iBAAL,GAAyB,IAAzB;AACA;;AACF;AACE;AALJ;AAOD;AACF;;;wBAnRa;AAAA;;AACZ,aAAO,qBAAKrB,KAAL,qFAAYG,oBAAZ,0GAAkCC,MAAlC,CAAyC,CAAzC,mFAA6CE,OAA7C,KAAwD,EAA/D;AACD;;;wBAEkB;AACjB,aAAO,KAAKX,KAAL,CAAWuB,IAAX,CAAgBwD,YAAvB;AACD;;;wBAEiB;AAAA;;AAChB,aAAO,sBAAK1E,KAAL,8DAAYR,WAAZ,KAA2B,IAAlC;AACD;;;wBAEmB;AAClB,aAAO,KAAKA,WAAL,CAAiBF,aAAxB;AACD;;;wBAEmC;AAClC,aAAO,KAAKA,aAAL,CAAmBqF,6BAA1B;AACD;;;wBAEqB;AACpB,aACE,KAAKnF,WAAL,CAAiBL,eAAjB,IAAoC;AAClCC,QAAAA,eAAe,EAAE,EADiB;AAElCwF,QAAAA,sBAAsB,EAAE,EAFU;AAGlCC,QAAAA,MAAM,EAAE,EAH0B;AAIlCC,QAAAA,YAAY,EAAE,EAJoB;AAKlCzF,QAAAA,sBAAsB,EAAE;AALU,OADtC;AASD;;;wBAEmB;AAClB,aAAO,KAAKF,eAAL,CAAqB0F,MAA5B;AACD;;;wBAEsB;AACrB,aAAO,KAAKrF,WAAL,CAAiBuF,gBAAxB;AACD;;;wBAGqB;AACpB,cACE;AACEC,QAAAA,MAAM,EAAE,IADV;AAEEC,QAAAA,QAAQ,EAAEC,iBAAKC,SAAL,CAAe,SAAf,EAA0B,KAAKxF,KAAL,CAAWC,MAAX,CAAkBC,aAA5C;AAFZ,OADF,4BAKK,4BAAW,KAAKV,eAAL,CAAqBC,eAAhC,EAAiD,UAAjD,CALL;AAOD;;;wBAG4B;AAC3B,aAAO,4BAAW,KAAKD,eAAL,CAAqBE,sBAAhC,EAAwD,WAAxD,CAAP;AACD;;;wBAGe;AACd,cACE;AACE+F,QAAAA,WAAW,EAAEF,iBAAKC,SAAL,CAAe,SAAf,EAA0B,KAAKxF,KAAL,CAAWC,MAAX,CAAkBC,aAA5C,CADf;AAEEwF,QAAAA,MAAM,EAAE;AAFV,OADF,4BAKK,KAAK/F,aAAL,CAAmBC,SAAnB,CAA6Bc,GAA7B,CAAiC,UAACiF,QAAD,EAAc;AAChD,YAAMD,MAAM,GACV,wBAAO;AACLE,UAAAA,WAAW,EAAED,QAAQ,CAACD,MADjB;AAELG,UAAAA,WAAW,EAAE;AAFR,SAAP,KAGMF,QAAQ,CAACD,MAJjB;AAKA,+CACKC,QADL;AAEED,UAAAA,MAAM,EAANA;AAFF;AAID,OAVE,CALL;AAiBD;;;wBAMwB;AAAA,UACf3F,kBADe,GACQ,KAAKF,WAAL,CAAiBC,mBADzB,CACfC,kBADe,EAEvB;;AACA,UAAM+F,eAAe,GAAG/F,kBAAkB,CAACgG,MAAnB,CAA0B;AAAA,YAAGC,SAAH,SAAGA,SAAH;AAAA,eAChD/G,iBAAiB,CAACgH,QAAlB,CAA2BD,SAA3B,CADgD;AAAA,OAA1B,CAAxB;AAGA,aAAOF,eAAe,CAACI,MAAhB,GAAyB,CAAzB,GACHJ,eADG,GAEH,CACE;AACEE,QAAAA,SAAS,EAAE,KADb;AAEEG,QAAAA,WAAW,EAAEZ,iBAAKC,SAAL,CAAe,IAAf,EAAqB,KAAKxF,KAAL,CAAWC,MAAX,CAAkBC,aAAvC;AAFf,OADF,CAFJ;AAQD;;;;EAhIkBkG,gB,qFAyBlBC,a,EACAC,W;;;;;WACW,K;;0EAEXD,a,EACAC,W;;;;;WACoB,I;;suBAkHpBC,Y,0JAOAA,Y","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  track,\n} from '@ringcentral-integration/core';\nimport format from '@ringcentral-integration/phone-number/lib/format';\nimport { EventEmitter } from 'events';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport { authStatus, messageTypes, tabManagerEvents } from '../../enums';\nimport { EvAgentData, EvAgentInfo } from '../../lib/EvClient';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums';\nimport { sortByName } from '../../lib/sortByName';\nimport { trackEvents } from '../../lib/trackEvents';\nimport { Auth, Deps, State } from './EvAuth.interface';\nimport i18n from './i18n';\n\nconst DEFAULT_COUNTRIES = ['USA', 'CAN'];\n\n@Module({\n  name: 'EvAuth',\n  deps: [\n    'EvClient',\n    'Auth',\n    'Storage',\n    'Block',\n    'Alert',\n    'Locale',\n    'RouterInteraction',\n    'EvSubscription',\n    'TabManager',\n    { dep: 'EvAuthOptions', optional: true },\n  ],\n})\nclass EvAuth extends RcModuleV2<Deps> implements Auth {\n  public connecting?: boolean;\n\n  private _eventEmitter = new EventEmitter();\n\n  public canUserLogoutFn: () => Promise<boolean> = async () => true;\n\n  private _logout = () => {\n    return this._deps.auth.logout({ dismissAllAlert: false });\n  };\n\n  private _logoutByOtherTab = false;\n\n  get tabManagerEnabled() {\n    return this._deps.tabManager?.enable;\n  }\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvAuth',\n    });\n  }\n\n  @storage\n  @state\n  connected = false;\n\n  @storage\n  @state\n  agent: EvAgentData = null;\n\n  get agentId() {\n    return this.agent?.authenticateResponse?.agents[0]?.agentId || '';\n  }\n\n  get isFreshLogin() {\n    return this._deps.auth.isFreshLogin;\n  }\n\n  get agentConfig() {\n    return this.agent?.agentConfig || null;\n  }\n\n  get agentSettings() {\n    return this.agentConfig.agentSettings;\n  }\n\n  get outboundManualDefaultRingtime() {\n    return this.agentSettings.outboundManualDefaultRingtime;\n  }\n\n  get inboundSettings() {\n    return (\n      this.agentConfig.inboundSettings || {\n        availableQueues: [] as Array<undefined>,\n        availableSkillProfiles: [] as Array<undefined>,\n        queues: [] as Array<undefined>,\n        skillProfile: {} as any,\n        availableRequeueQueues: [] as Array<undefined>,\n      }\n    );\n  }\n\n  get assignedQueue() {\n    return this.inboundSettings.queues;\n  }\n\n  get agentPermissions() {\n    return this.agentConfig.agentPermissions;\n  }\n\n  @computed((that: EvAuth) => [that.inboundSettings.availableQueues])\n  get availableQueues() {\n    return [\n      {\n        gateId: '-1',\n        gateName: i18n.getString('default', this._deps.locale.currentLocale),\n      },\n      ...sortByName(this.inboundSettings.availableQueues, 'gateName'),\n    ];\n  }\n\n  @computed((that: EvAuth) => [that.inboundSettings.availableRequeueQueues])\n  get availableRequeueQueues() {\n    return sortByName(this.inboundSettings.availableRequeueQueues, 'groupName');\n  }\n\n  @computed((that: EvAuth) => [that.agentSettings.callerIds])\n  get callerIds() {\n    return [\n      {\n        description: i18n.getString('default', this._deps.locale.currentLocale),\n        number: '-1',\n      },\n      ...this.agentSettings.callerIds.map((callerId) => {\n        const number =\n          format({\n            phoneNumber: callerId.number,\n            countryCode: 'US',\n          }) || callerId.number;\n        return {\n          ...callerId,\n          number,\n        };\n      }),\n    ];\n  }\n\n  @computed((that: EvAuth) => [\n    that.agentConfig.applicationSettings.availableCountries,\n    that._deps.locale.currentLocale,\n  ])\n  get availableCountries() {\n    const { availableCountries } = this.agentConfig.applicationSettings;\n    // The default Engage Voice service area is `USA` and `CAN` with `+1` international code.\n    const countriesUsaCan = availableCountries.filter(({ countryId }) =>\n      DEFAULT_COUNTRIES.includes(countryId),\n    );\n    return countriesUsaCan.length > 0\n      ? countriesUsaCan\n      : [\n          {\n            countryId: 'USA',\n            countryName: i18n.getString('us', this._deps.locale.currentLocale),\n          },\n        ];\n  }\n\n  @track((_: EvAuth, { connected, agent }: State) => {\n    return [\n      trackEvents.loginAgent,\n      connected\n        ? {\n            'agentId(s)': agent.authenticateResponse?.agents?.map(\n              (agent) => agent.agentId,\n            ),\n            'userId(s)': agent.authenticateResponse?.agents?.map(\n              (agent) => agent.rcUserId,\n            ),\n          }\n        : undefined,\n    ];\n  })\n  @action\n  setConnectionData({ connected, agent }: State) {\n    // ! agent must be set before connected\n    this.agent = agent;\n    this.connected = connected;\n  }\n\n  @action\n  setAgent(agent: EvAgentData) {\n    this.agent = agent;\n  }\n\n  _shouldInit() {\n    return super._shouldInit() && this._deps.auth.loggedIn && this.connected;\n  }\n\n  onInitOnce() {\n    this._deps.evSubscription.subscribe(EvCallbackTypes.LOGOUT, async () => {\n      this._emitLogoutBefore();\n\n      // if that is logout by same browser that will only trigger emit\n      // if there is logout by other browser, that need redirect to home page,\n      if (!this._logoutByOtherTab) {\n        this._deps.alert.info({\n          message: messageTypes.FORCE_LOGOUT,\n        });\n\n        this._logoutByOtherTab = false;\n\n        await this.newReconnect();\n      }\n    });\n  }\n\n  async onStateChange() {\n    // here not need check this.ready, because that should work when not login\n    if (this.tabManagerEnabled && this._deps.tabManager.ready) {\n      this._checkTabManagerEvent();\n    }\n\n    if (this._deps.auth.loggedIn && !this.connected && !this.connecting) {\n      this.connecting = true;\n      // when login make sure the logoutByOtherTab is false\n      this._logoutByOtherTab = false;\n\n      await this.loginAgent();\n      this.connecting = false;\n    }\n  }\n\n  onceLogout(cb: () => any) {\n    return this._deps.evSubscription.once(EvCallbackTypes.LOGOUT, cb);\n  }\n\n  async logout() {\n    if (!(await this.canUserLogoutFn())) {\n      return;\n    }\n\n    const agentId = this.agentId;\n\n    this.sendLogoutTabEvent();\n\n    await this._deps.block.next(this._logout);\n\n    const logoutAgentResponse = await this.logoutAgent(agentId);\n\n    // TODO: error handle when logout fail\n    // TODO: when failed need tell other tab not logout => this._deps.tabManager.send(tabManagerEvents.LOGOUT);\n    if (!logoutAgentResponse.message || logoutAgentResponse.message !== 'OK') {\n      console.log('logoutAgent failed');\n    }\n    this.setConnectionData({ connected: false, agent: null });\n  }\n\n  sendLogoutTabEvent() {\n    this._emitLogoutBefore();\n    if (this.tabManagerEnabled) {\n      this._deps.tabManager.send(tabManagerEvents.LOGOUT);\n    }\n  }\n\n  logoutAgent(agentId: string = this.agentId) {\n    return this._deps.evClient.logoutAgent(agentId);\n  }\n\n  beforeAgentLogout(callback: () => void) {\n    this._eventEmitter.on(authStatus.LOGOUT_BEFORE, callback);\n  }\n\n  newReconnect(isBlock: boolean = true) {\n    this._deps.evClient.closeSocket();\n\n    const fn = this.loginAgent;\n\n    return isBlock ? this._deps.block.next(fn) : fn();\n  }\n\n  loginAgent = async (token: string = this._deps.auth.accessToken) => {\n    console.log('loginAgent~~');\n    try {\n      this._deps.evClient.initSDK();\n\n      const agent = await this._deps.evClient.loginAgent(token, 'Bearer');\n\n      this.setConnectionData({\n        connected: true,\n        agent: agent.data,\n      });\n\n      this._emitLoginSuccess(agent);\n    } catch (error) {\n      switch (error.type) {\n        case messageTypes.NO_AGENT:\n          this._deps.alert.warning({\n            message: error.type,\n          });\n          break;\n        case messageTypes.CONNECT_TIMEOUT:\n        case messageTypes.UNEXPECTED_AGENT:\n        case messageTypes.INVALID_BROWSER:\n        case messageTypes.OPEN_SOCKET_ERROR:\n          this._deps.alert.danger({\n            message: error.type,\n          });\n          break;\n        default:\n          this._deps.alert.danger({\n            message: messageTypes.CONNECT_ERROR,\n          });\n      }\n      await this._logout();\n    }\n  };\n\n  onLoginSuccess(callback: (agent: EvAgentInfo) => void) {\n    this._eventEmitter.on(authStatus.LOGIN_SUCCESS, callback);\n  }\n\n  onceLoginSuccess(callback: (agent: EvAgentInfo) => void) {\n    this._eventEmitter.once(authStatus.LOGIN_SUCCESS, callback);\n  }\n\n  private _emitLogoutBefore() {\n    this._eventEmitter.emit(authStatus.LOGOUT_BEFORE);\n  }\n\n  private _emitLoginSuccess(agent: EvAgentInfo) {\n    this._eventEmitter.emit(authStatus.LOGIN_SUCCESS, agent);\n  }\n\n  private _checkTabManagerEvent() {\n    const { event } = this._deps.tabManager;\n    if (event) {\n      // const data = event.args[0];\n      switch (event.name) {\n        case tabManagerEvents.LOGOUT:\n          this._logoutByOtherTab = true;\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}\n\nexport { EvAuth };\n"],"file":"EvAuth.js"}