{"version":3,"sources":["modules/EvAuth/EvAuth.ts"],"names":["DEFAULT_COUNTRIES","EvAuth","name","deps","dep","optional","auth","alert","locale","storage","evClient","evSubscription","routerInteraction","enableCache","modules","storageKey","connecting","disconnecting","_eventEmitter","EventEmitter","_getAvailableQueues","inboundSettings","availableQueues","gateId","gateName","i18n","getString","_modules","currentLocale","getAvailableRequeueQueues","availableRequeueQueues","getCallerIds","agentSettings","callerIds","description","number","map","callerId","phoneNumber","countryCode","getAvailableCountries","agentConfig","applicationSettings","availableCountries","countriesUsaCan","filter","countryId","includes","length","countryName","connected","agent","state","subscribe","EvCallbackTypes","LOGOUT","data","logout","callback","on","authStatus","LOGOUT_BEFORE","emit","agentId","_onLogout","console","log","logoutAgent","logoutAgentResponse","message","setConnectionData","onInit","error","loginAgent","accessToken","_onLoginSuccess","LOGIN_SUCCESS","type","messageTypes","NO_AGENT","CONNECT_TIMEOUT","UNEXPECTED_AGENT","INVALID_BROWSER","OPEN_SOCKET_ERROR","warning","danger","CONNECT_ERROR","dismissAllAlert","loggedIn","connect","disconnect","agents","isFreshLogin","outboundManualDefaultRingtime","queues","agentPermissions","autoAnswerCalls","RcModuleV2","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleState,\n  RcModuleV2,\n  state,\n  storage,\n  createSelector,\n} from '@ringcentral-integration/core';\nimport format from '@ringcentral-integration/phone-number/lib/format';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport EventEmitter from 'events';\nimport { messageTypes, authStatus } from '../../enums';\nimport { EvAgentInfo } from '../../lib/EvClient';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums';\nimport { sortByName } from '../../lib/sortByName';\nimport { Auth, DepsModules, EvAuthData, State } from './EvAuth.interface';\nimport i18n from './i18n';\n\nconst DEFAULT_COUNTRIES = ['USA', 'CAN'];\ntype EvAuthState = RcModuleState<EvAuth, State>;\n\n@Module({\n  name: 'EvAuth',\n  deps: [\n    'EvClient',\n    'Auth',\n    'Storage',\n    'Alert',\n    'Locale',\n    'RouterInteraction',\n    'EvSubscription',\n    { dep: 'EvAuthOptions', optional: true },\n  ],\n})\nclass EvAuth extends RcModuleV2<DepsModules, EvAuthState> implements Auth {\n  public connecting?: boolean;\n\n  public disconnecting?: boolean;\n\n  private _eventEmitter = new EventEmitter();\n\n  constructor({\n    auth,\n    alert,\n    locale,\n    storage,\n    evClient,\n    evSubscription,\n    routerInteraction,\n    enableCache = true,\n  }) {\n    super({\n      modules: {\n        auth,\n        alert,\n        locale,\n        storage,\n        evClient,\n        evSubscription,\n        routerInteraction,\n      },\n      enableCache,\n      storageKey: 'EvAuth',\n    });\n  }\n\n  @storage\n  @state\n  connected = false;\n\n  @storage\n  @state\n  agent: EvAuthData = {};\n\n  get agentId() {\n    return this.agent.data?.agents[0]?.agentId || '';\n  }\n\n  get isFreshLogin() {\n    return this._modules.auth.isFreshLogin;\n  }\n\n  get outboundManualDefaultRingtime() {\n    return this.agentSettings.outboundManualDefaultRingtime;\n  }\n\n  get assignedQueue() {\n    return this.inboundSettings.queues;\n  }\n\n  get agentPermissions() {\n    return this.agentConfig.agentPermissions;\n  }\n\n  get agentConfig() {\n    return this.agent.agentConfig;\n  }\n\n  get inboundSettings() {\n    return this.agentConfig.inboundSettings;\n  }\n\n  get agentSettings() {\n    return this.agentConfig.agentSettings;\n  }\n\n  get autoAnswerCalls() {\n    return this.agentSettings.autoAnswerCalls;\n  }\n\n  private _getAvailableQueues = createSelector(\n    () => this.inboundSettings.availableQueues,\n    (availableQueues) => [\n      {\n        gateId: '-1',\n        gateName: i18n.getString('default', this._modules.locale.currentLocale),\n      },\n      ...sortByName(availableQueues, 'gateName'),\n    ],\n  );\n\n  get availableQueues() {\n    return this._getAvailableQueues();\n  }\n\n  getAvailableRequeueQueues = createSelector(\n    () => this.inboundSettings.availableRequeueQueues,\n    (availableRequeueQueues) => {\n      return sortByName(availableRequeueQueues, 'groupName');\n    },\n  );\n\n  getCallerIds = createSelector(\n    () => this.agentSettings.callerIds,\n    (callerIds) => [\n      {\n        description: i18n.getString(\n          'default',\n          this._modules.locale.currentLocale,\n        ),\n        number: '-1',\n      },\n      ...callerIds.map((callerId) => {\n        const number =\n          format({\n            phoneNumber: callerId.number,\n            countryCode: 'US',\n          }) || callerId.number;\n        return {\n          ...callerId,\n          number,\n        };\n      }),\n    ],\n  );\n\n  getAvailableCountries = createSelector(\n    () => this.agentConfig.applicationSettings.availableCountries,\n    (availableCountries = []) => {\n      // The default Engage Voice service area is `USA` and `CAN` with `+1` international code.\n      const countriesUsaCan = availableCountries.filter(({ countryId }) =>\n        DEFAULT_COUNTRIES.includes(countryId),\n      );\n      return countriesUsaCan.length > 0\n        ? countriesUsaCan\n        : [\n            {\n              countryId: 'USA',\n              countryName: i18n.getString(\n                'us',\n                this._modules.locale.currentLocale,\n              ),\n            },\n          ];\n    },\n  );\n\n  @action\n  setConnectionData({ connected, agent }: State) {\n    this.state.agent = agent;\n    this.state.connected = connected;\n  }\n\n  onInitOnce() {\n    this._modules.evSubscription.subscribe(\n      EvCallbackTypes.LOGOUT,\n      async (data) => {\n        // TODO: check it about `data.message === 'OK'`?\n        // wait for fixing `LOGOUT` event missing issue about EV multiple socket\n        this._modules.auth.logout();\n      },\n    );\n  }\n\n  onLogout(callback: () => void) {\n    this._eventEmitter.on(authStatus.LOGOUT_BEFORE, callback);\n  }\n\n  private _onLogout() {\n    this._eventEmitter.emit(authStatus.LOGOUT_BEFORE);\n  }\n\n  async disconnect(agentId: string) {\n    this._onLogout();\n    // ensure that multi-tabs update state effect.\n    if (!agentId) {\n      console.log('agentId does not exist');\n      return;\n    }\n    try {\n      const logoutAgentResponse = await this._modules.evClient.logoutAgent(\n        agentId,\n      );\n      if (\n        !logoutAgentResponse.message ||\n        logoutAgentResponse.message !== 'OK'\n      ) {\n        // TODO: error handle\n        console.log('logoutAgent failed');\n        return;\n      }\n      this.setConnectionData({ connected: false, agent: {} });\n      // create a new AgentSDK instance\n      this._modules.evClient.onInit();\n    } catch (error) {\n      // TODO: error handle\n      console.error('disconnect failed');\n    }\n  }\n\n  async loginAgent() {\n    const agent = await this._modules.evClient.loginAgent(\n      this._modules.auth.accessToken,\n      'Bearer',\n    );\n\n    this.setConnectionData({\n      connected: true,\n      agent,\n    });\n\n    this._onLoginSuccess(agent);\n  }\n\n  onLoginSuccess(callback: (agent: EvAgentInfo) => void) {\n    this._eventEmitter.on(authStatus.LOGIN_SUCCESS, callback);\n  }\n\n  private _onLoginSuccess(agent: EvAgentInfo) {\n    this._eventEmitter.emit(authStatus.LOGIN_SUCCESS, agent);\n  }\n\n  async connect() {\n    try {\n      await this.loginAgent();\n    } catch (error) {\n      switch (error.type) {\n        case messageTypes.NO_AGENT:\n          this._modules.alert.warning({\n            message: error.type,\n          });\n          break;\n        case messageTypes.CONNECT_TIMEOUT:\n        case messageTypes.UNEXPECTED_AGENT:\n        case messageTypes.INVALID_BROWSER:\n        case messageTypes.OPEN_SOCKET_ERROR:\n          this._modules.alert.danger({\n            message: error.type,\n          });\n          break;\n        default:\n          this._modules.alert.danger({\n            message: messageTypes.CONNECT_ERROR,\n          });\n      }\n      await this._modules.auth.logout({ dismissAllAlert: false });\n    }\n  }\n\n  _shouldInit() {\n    return super._shouldInit() && this._modules.auth.loggedIn && this.connected;\n  }\n\n  async onStateChange() {\n    if (this._modules.auth.loggedIn && !this.connected && !this.connecting) {\n      this.connecting = true;\n      try {\n        await this.connect();\n      } catch (e) {\n        console.error(e);\n      }\n      this.connecting = false;\n    }\n    if (!this._modules.auth.loggedIn && this.connected && !this.disconnecting) {\n      this.disconnecting = true;\n      await this.disconnect(this.agentId);\n      this.disconnecting = false;\n    }\n  }\n}\n\nexport { EvAuth };\n"],"file":"EvAuth.js"}