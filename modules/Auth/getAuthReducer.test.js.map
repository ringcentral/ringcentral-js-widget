{"version":3,"sources":["modules/Auth/getAuthReducer.test.ts"],"names":["describe","it","getLoginStatusReducer","to","be","a","actionTypes","reducer","undefined","equal","originalState","type","login","loginStatus","loggingIn","loginSuccess","loggedIn","refreshSuccess","cancelLogout","loginError","notLoggedIn","logoutSuccess","logoutError","refreshError","refreshTokenValid","logout","loggingOut","beforeLogout","refresh","init","initSuccess","tabSync","getTokenReducer","deep","forEach","token","endpoint_id","owner_id","access_token","expire_time","expires_in","scope","endpointId","ownerId","accessToken","expireTime","expiresIn","getFreshLoginReducer","getAuthReducer","statusReducer","loginStatusReducer","freshLoginReducer","tokenReducer","status","freshLogin","error","Error","action"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\n\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport actionTypes from './actionTypes';\nimport getAuthReducer, {\n  getFreshLoginReducer,\n  getLoginStatusReducer,\n  getTokenReducer,\n} from './getAuthReducer';\nimport loginStatus from './loginStatus';\n\ndescribe('getLoginStatusReducer', () => {\n  it('should be a function', () => {\n    expect(getLoginStatusReducer).to.be.a('function');\n  });\n  it('should return a reducer', () => {\n    expect(getLoginStatusReducer(actionTypes)).to.be.a('function');\n  });\n  describe('loginStatusReducer', () => {\n    const reducer = getLoginStatusReducer(actionTypes);\n    it('should have initial state of null', () => {\n      expect(reducer(undefined, {})).to.equal(null);\n    });\n    it('should return original state of actionTypes is not recognized', () => {\n      const originalState = {};\n      expect(reducer(originalState, { type: 'foo' })).to.equal(originalState);\n    });\n    describe('actionTypes => loginStatus', () => {\n      it('actionTypes.login => loginStatus.loggingIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.login,\n          }),\n        ).to.equal(loginStatus.loggingIn);\n      });\n      it('actionTypes.loginSuccess => loginStatus.loggedIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.loginSuccess,\n          }),\n        ).to.equal(loginStatus.loggedIn);\n      });\n      it('actionTypes.refreshSuccess => loginStatus.loggedIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.refreshSuccess,\n          }),\n        ).to.equal(loginStatus.loggedIn);\n      });\n      it('actionTypes.cancelLogout => loginStatus.loggedIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.cancelLogout,\n          }),\n        ).to.equal(loginStatus.loggedIn);\n      });\n      it('actionTypes.loginError => loginStatus.notLoggedIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.loginError,\n          }),\n        ).to.equal(loginStatus.notLoggedIn);\n      });\n      it('actionTypes.logoutSuccess => loginStatus.notLoggedIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.logoutSuccess,\n          }),\n        ).to.equal(loginStatus.notLoggedIn);\n      });\n      it('actionTypes.logoutError => loginStatus.notLoggedIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.logoutError,\n          }),\n        ).to.equal(loginStatus.notLoggedIn);\n      });\n      it('actionTypes.refreshError => refreshTokenValid ? state : loginStatus.notLoggedIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.refreshError,\n            refreshTokenValid: false,\n          }),\n        ).to.equal(loginStatus.notLoggedIn);\n        expect(\n          reducer(loginStatus.loggedIn, {\n            type: actionTypes.refreshError,\n            refreshTokenValid: true,\n          }),\n        ).to.equal(loginStatus.loggedIn);\n      });\n      it('actionTypes.logout => loginStatus.loggingOut', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.logout,\n          }),\n        ).to.equal(loginStatus.loggingOut);\n      });\n      it('actionTypes.beforeLogout => loginStatus.beforeLogout', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.beforeLogout,\n          }),\n        ).to.equal(loginStatus.beforeLogout);\n      });\n      it('actionTypes.refresh => originalState', () => {\n        const originalState = {};\n        expect(\n          reducer(originalState, {\n            type: actionTypes.refresh,\n          }),\n        ).to.equal(originalState);\n      });\n      it('actionTypes.init => state', () => {\n        expect(\n          reducer('originalState', {\n            type: actionTypes.init,\n          }),\n        ).to.equal('originalState');\n      });\n      it('actionTypes.initSuccess && !loggedIn => loginStatus.notLoggedIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.initSuccess,\n            loggedIn: false,\n          }),\n        ).to.equal(loginStatus.notLoggedIn);\n      });\n      it('actionTypes.initSuccess && loggedIn => loginStatus.loggedIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.initSuccess,\n            loggedIn: true,\n          }),\n        ).to.equal(loginStatus.loggedIn);\n      });\n      it('actionTypes.tabSync && !loggedIn => loginStatus.notLoggedIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.tabSync,\n            loggedIn: false,\n          }),\n        ).to.equal(loginStatus.notLoggedIn);\n      });\n      it('actionTypes.tabSync && loggedIn => loginStatus.loggedIn', () => {\n        expect(\n          reducer(null, {\n            type: actionTypes.tabSync,\n            loggedIn: true,\n          }),\n        ).to.equal(loginStatus.loggedIn);\n      });\n    });\n  });\n});\n\ndescribe('getTokenReducer', () => {\n  it('should be a function', () => {\n    expect(getTokenReducer).to.be.a('function');\n  });\n  it('should return a reducer', () => {\n    expect(getTokenReducer(actionTypes)).to.be.a('function');\n  });\n  describe('endpointIdReducer', () => {\n    const reducer = getTokenReducer(actionTypes);\n    it('should have initial state of empty object', () => {\n      expect(reducer(undefined, {})).to.deep.equal({});\n    });\n    it('should return original state of actionTypes is not recognized', () => {\n      const originalState = {};\n      expect(reducer(originalState, { type: 'foo' })).to.equal(originalState);\n    });\n    it('should return token object on loginSuccess and refreshSuccess', () => {\n      [actionTypes.loginSuccess, actionTypes.refreshSuccess].forEach((type) => {\n        expect(\n          reducer(null, {\n            type,\n            token: {\n              endpoint_id: 'foo',\n              owner_id: 'owner',\n              access_token: 'access token',\n              expire_time: '1111',\n              expires_in: '1234',\n              scope: 'scope',\n            },\n          }),\n        ).to.deep.equal({\n          endpointId: 'foo',\n          ownerId: 'owner',\n          accessToken: 'access token',\n          expireTime: '1111',\n          expiresIn: '1234',\n          scope: 'scope',\n        });\n      });\n    });\n    it('should return empty object on following auth action types', () => {\n      [\n        actionTypes.loginError,\n        actionTypes.logoutSuccess,\n        actionTypes.logoutError,\n      ].forEach((type) => {\n        expect(\n          reducer('foo', {\n            type,\n          }),\n        ).to.be.deep.equal({});\n      });\n    });\n\n    it('should return empty object on refreshError and refreshToken not Valid', () => {\n      expect(\n        reducer(null, {\n          type: actionTypes.refreshError,\n          token: {\n            endpoint_id: 'foo',\n          },\n          refreshTokenValid: false,\n        }),\n      ).to.deep.equal({});\n    });\n\n    it('should return original state on refreshError and refreshToken Valid', () => {\n      const originalState = {};\n      expect(\n        reducer(originalState, {\n          type: actionTypes.refreshError,\n          token: {\n            endpoint_id: 'foo',\n          },\n          refreshTokenValid: true,\n        }),\n      ).to.equal(originalState);\n    });\n\n    it('should ignore other auth action types', () => {\n      const originalState = {};\n      [\n        actionTypes.login,\n        actionTypes.logout,\n        actionTypes.refresh,\n        actionTypes.beforeLogout,\n        actionTypes.cancelLogout,\n      ].forEach((type) => {\n        expect(\n          reducer(originalState, {\n            type,\n          }),\n        ).to.equal(originalState);\n      });\n    });\n\n    it('should return endpoint_id on initSuccess or tabSync with token', () => {\n      [actionTypes.initSuccess, actionTypes.tabSync].forEach((type) => {\n        expect(\n          reducer(\n            {},\n            {\n              type,\n              token: {\n                endpoint_id: 'foo',\n                owner_id: 'owner',\n                access_token: 'access token',\n                expire_time: '1111',\n                expires_in: '1234',\n                scope: 'scope',\n              },\n            },\n          ),\n        ).to.deep.equal({\n          endpointId: 'foo',\n          ownerId: 'owner',\n          accessToken: 'access token',\n          expireTime: '1111',\n          expiresIn: '1234',\n          scope: 'scope',\n        });\n      });\n    });\n\n    it('should return empty object on initSuccess or tabSync without token', () => {\n      [actionTypes.initSuccess, actionTypes.tabSync].forEach((type) => {\n        expect(\n          reducer(\n            {},\n            {\n              type,\n            },\n          ),\n        ).to.deep.equal({});\n      });\n    });\n  });\n});\n\ndescribe('getFreshLoginReducer', () => {\n  it('should be a function', () => {\n    expect(getFreshLoginReducer).to.be.a('function');\n  });\n  it('should return a reducer', () => {\n    expect(getFreshLoginReducer(actionTypes)).to.be.a('function');\n  });\n  describe('freshLoginReducer', () => {\n    const reducer = getFreshLoginReducer(actionTypes);\n    it('should have initial state of null', () => {\n      expect(reducer(undefined, {})).to.be.null;\n    });\n    it('should return original state of actionTypes is not recognized', () => {\n      const originalState = {};\n      expect(reducer(originalState, { type: 'foo' })).to.equal(originalState);\n    });\n    it('should return true on login action type', () => {\n      expect(\n        reducer(null, {\n          type: actionTypes.login,\n        }),\n      ).to.be.true;\n    });\n    it('should return null on following auth action types', () => {\n      [\n        actionTypes.loginError,\n        actionTypes.logoutError,\n        actionTypes.refreshError,\n        actionTypes.logoutSuccess,\n      ].forEach((type) => {\n        expect(\n          reducer('foo', {\n            type,\n          }),\n        ).to.equal(null);\n      });\n    });\n    it('should ignore the following auth action types', () => {\n      const originalState = {};\n      [\n        actionTypes.cancelLogout,\n        actionTypes.loginSuccess,\n        actionTypes.logout,\n        actionTypes.refresh,\n        actionTypes.refreshSuccess,\n        actionTypes.beforeLogout,\n        actionTypes.init,\n      ].forEach((type) => {\n        expect(\n          reducer(originalState, {\n            type,\n          }),\n        ).to.equal(originalState);\n      });\n    });\n    it('should return false on authActionType.initSuccess && loggedIn', () => {\n      expect(\n        reducer(null, {\n          type: actionTypes.initSuccess,\n          loggedIn: true,\n        }),\n      ).to.be.false;\n    });\n    it('should return null on authActionType.initSuccess && !loggedIn', () => {\n      expect(\n        reducer(null, {\n          type: actionTypes.initSuccess,\n          loggedIn: false,\n        }),\n      ).to.be.null;\n    });\n    it('should return false on authActionType.tabSync && loggedIn', () => {\n      expect(\n        reducer(null, {\n          type: actionTypes.tabSync,\n          loggedIn: true,\n        }),\n      ).to.be.false;\n    });\n    it('should return null on authActionType.tabSync && !loggedIn', () => {\n      expect(\n        reducer(null, {\n          type: actionTypes.tabSync,\n          loggedIn: false,\n        }),\n      ).to.be.null;\n    });\n  });\n});\n\ndescribe('getAuthReducer', () => {\n  it('should be a function', () => {\n    expect(getAuthReducer).to.be.a('function');\n  });\n  it('should return a reducer', () => {\n    expect(getAuthReducer()).to.be.a('function');\n  });\n  describe('authReducer', () => {\n    const reducer = getAuthReducer(actionTypes);\n    const statusReducer = getModuleStatusReducer(actionTypes);\n    const loginStatusReducer = getLoginStatusReducer(actionTypes);\n    const freshLoginReducer = getFreshLoginReducer(actionTypes);\n    const tokenReducer = getTokenReducer(actionTypes);\n    it('should return combined state', () => {\n      expect(reducer(undefined, {})).to.deep.equal({\n        status: statusReducer(undefined, {}),\n        loginStatus: loginStatusReducer(undefined, {}),\n        freshLogin: freshLoginReducer(undefined, {}),\n        token: tokenReducer(undefined, {}),\n      });\n      const error = new Error('test');\n      const token = {\n        owner_id: 'foo',\n        endpoint_id: 'foo',\n      };\n      [\n        {\n          type: actionTypes.login,\n        },\n        {\n          type: actionTypes.loginSuccess,\n          token,\n        },\n        {\n          type: actionTypes.loginError,\n          error,\n        },\n        {\n          type: actionTypes.logout,\n        },\n        {\n          type: actionTypes.logoutSuccess,\n        },\n        {\n          type: actionTypes.logoutError,\n          error,\n        },\n        {\n          type: actionTypes.refresh,\n        },\n        {\n          type: actionTypes.refreshSuccess,\n          token,\n        },\n        {\n          type: actionTypes.refreshError,\n          error,\n        },\n        {\n          type: actionTypes.beforeLogout,\n        },\n        {\n          type: actionTypes.cancelLogout,\n          error,\n        },\n        {\n          type: actionTypes.init,\n        },\n        {\n          type: actionTypes.initSuccess,\n          loggedIn: true,\n          token,\n        },\n        {\n          type: actionTypes.initSuccess,\n          loggedIn: false,\n        },\n        {\n          type: actionTypes.tabSync,\n          loggedIn: true,\n          token,\n        },\n        {\n          type: actionTypes.tabSync,\n          loggedIn: false,\n        },\n      ].forEach((action) => {\n        expect(\n          reducer(\n            {\n              status: 'status',\n              loginStatus: 'loginStatus',\n              freshLogin: 'freshLogin',\n              token: {},\n            },\n            action,\n          ),\n        ).to.deep.equal({\n          status: statusReducer('status', action),\n          loginStatus: loginStatusReducer('loginStatus', action),\n          freshLogin: freshLoginReducer('freshLogin', action),\n          token: tokenReducer({}, action),\n        });\n      });\n    });\n  });\n});\n"],"file":"getAuthReducer.test.js"}