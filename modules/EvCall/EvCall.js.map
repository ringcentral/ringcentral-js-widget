{"version":3,"sources":["modules/EvCall/EvCall.ts"],"names":["DEFAULT_OUTBOUND_SETTING","dialoutCallerId","dialoutQueueId","dialoutCountryId","dialoutRingTime","EvCall","name","deps","dep","optional","that","activityCallId","_deps","evCallMonitor","callsMapping","trackEvents","outbound","enableCache","storageKey","ringTimeLimit","min","max","data","formGroup","defaultRingtime","parseInt","evAuth","outboundManualDefaultRingtime","Number","isNaN","setFormGroup","onLoginSuccess","resetForm","onCallEnded","setDialoutStatus","dialoutStatuses","idle","evSubscription","subscribe","EvCallbackTypes","TCPA_SAFE_LEAD_STATE","leadState","evSettings","isManualOffhook","_isTabActive","evClient","offhookTerm","setPhonedIdle","OFFHOOK_TERM","isFreshLogin","resetOutBoundDialSetting","phoneNumber","evAgentSession","isIntegratedSoftphone","integratedSoftphone","evIntegratedSoftphone","sipRegisterSuccess","askAudioPermission","configureAgent","onceRegistered","destination","_checkAndParseNumber","_manualOutdial","callerId","countryId","queueId","ringTime","callConnected","Math","status","presence","dialing","error","type","messageTypes","NO_SUPPORT_COUNTRY","alert","danger","message","ttl","callErrors","noToNumber","dialoutStatus","setPhonedDialing","isOffhook","getOffhookInitResult","_getOffhookInitResult","offhookInit","offhookInitResult","manualOutdial","Error","Promise","resolve","reject","evPresenceEvents","once","OFFHOOK_INIT","tabManager","active","call","currentCall","callType","RcModuleV2","storage","state","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  track,\n} from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport callErrors from 'ringcentral-integration/modules/Call/callErrors';\n\nimport { messageTypes } from '../../enums';\nimport {\n  dialoutStatuses,\n  DialoutStatusesType,\n} from '../../enums/dialoutStatus';\nimport { checkCountryCode } from '../../lib/checkCountryCode';\nimport {\n  EvClientManualOutdialParams,\n  EvOffhookInitResponse,\n} from '../../lib/EvClient';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport { parseNumber } from '../../lib/parseNumber';\nimport { trackEvents } from '../../lib/trackEvents';\nimport { Call, Deps, State } from './EvCall.interface';\n\nconst DEFAULT_OUTBOUND_SETTING = {\n  dialoutCallerId: '-1',\n  dialoutQueueId: '-1',\n  dialoutCountryId: 'USA',\n  dialoutRingTime: 30,\n};\n\n@Module({\n  name: 'EvCall',\n  deps: [\n    'Alert',\n    'EvAuth',\n    'Storage',\n    'EvClient',\n    'Presence',\n    'EvSettings',\n    'EvCallMonitor',\n    'EvSubscription',\n    'EvAgentSession',\n    'EvIntegratedSoftphone',\n    { dep: 'TabManager', optional: true },\n    { dep: 'EvCallOptions', optional: true },\n  ],\n})\nclass EvCall extends RcModuleV2<Deps> implements Call {\n  /** this id is get from route, set from EvActivityCallUI */\n  activityCallId: string;\n\n  ringTimeLimit = {\n    min: 20,\n    max: 120,\n  };\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvCall',\n    });\n  }\n\n  @storage\n  @state\n  dialoutCallerId = DEFAULT_OUTBOUND_SETTING.dialoutCallerId;\n\n  @storage\n  @state\n  dialoutQueueId = DEFAULT_OUTBOUND_SETTING.dialoutQueueId;\n\n  @storage\n  @state\n  dialoutCountryId = DEFAULT_OUTBOUND_SETTING.dialoutCountryId;\n\n  @storage\n  @state\n  dialoutRingTime: number = DEFAULT_OUTBOUND_SETTING.dialoutRingTime;\n\n  @storage\n  @state\n  formGroup: State['formGroup'] = DEFAULT_OUTBOUND_SETTING;\n\n  get ringTime() {\n    return this.dialoutRingTime;\n  }\n\n  get queueId() {\n    return this.dialoutQueueId === '-1' ? null : this.dialoutQueueId;\n  }\n\n  get callerId() {\n    return this.dialoutCallerId === '-1' ? null : this.dialoutCallerId;\n  }\n\n  get countryId() {\n    return this.dialoutCountryId;\n  }\n\n  get dialoutStatus() {\n    return this._deps.presence.dialoutStatus;\n  }\n\n  private get _isTabActive() {\n    return !this._deps.tabManager || this._deps.tabManager.active;\n  }\n\n  @computed((that: EvCall) => [\n    that.activityCallId,\n    that._deps.evCallMonitor.callsMapping,\n  ])\n  get currentCall() {\n    const call = this._deps.evCallMonitor.callsMapping[this.activityCallId];\n    return this.activityCallId && call ? call : null;\n  }\n\n  @action\n  setFormGroup(data: Partial<State['formGroup']>) {\n    this.formGroup = { ...this.formGroup, ...data };\n  }\n\n  @action\n  saveForm() {\n    this.dialoutCallerId = this.formGroup.dialoutCallerId;\n    this.dialoutQueueId = this.formGroup.dialoutQueueId;\n    this.dialoutCountryId = this.formGroup.dialoutCountryId;\n    this.dialoutRingTime = this.formGroup.dialoutRingTime;\n  }\n\n  @action\n  resetOutBoundDialSetting() {\n    this.dialoutCallerId = DEFAULT_OUTBOUND_SETTING.dialoutCallerId;\n    this.dialoutQueueId = DEFAULT_OUTBOUND_SETTING.dialoutQueueId;\n    this.dialoutCountryId = DEFAULT_OUTBOUND_SETTING.dialoutCountryId;\n    this.dialoutRingTime = DEFAULT_OUTBOUND_SETTING.dialoutRingTime;\n    const defaultRingtime = parseInt(\n      this._deps.evAuth.outboundManualDefaultRingtime,\n      10,\n    );\n    if (!Number.isNaN(defaultRingtime)) {\n      this.formGroup.dialoutRingTime = defaultRingtime;\n      this.dialoutRingTime = defaultRingtime;\n    }\n  }\n\n  resetForm() {\n    this.setFormGroup({\n      dialoutCallerId: this.dialoutCallerId,\n      dialoutQueueId: this.dialoutQueueId,\n      dialoutCountryId: this.dialoutCountryId,\n      dialoutRingTime: this.dialoutRingTime,\n    });\n  }\n\n  onInitOnce() {\n    this._deps.evAuth.onLoginSuccess(() => {\n      this.resetForm();\n    });\n\n    this._deps.evCallMonitor.onCallEnded(() => {\n      this.setDialoutStatus(dialoutStatuses.idle);\n    });\n\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.TCPA_SAFE_LEAD_STATE,\n      (data) => {\n        if (data.leadState === 'BUSY') {\n          // TCPA_SAFE_LEAD_STATE -> BUSY\n          // TODO alert message info about busy call.\n          if (!this._deps.evSettings.isManualOffhook && this._isTabActive) {\n            this._deps.evClient.offhookTerm();\n          }\n          this.setPhonedIdle();\n        }\n      },\n    );\n\n    this._deps.evSubscription.subscribe(EvCallbackTypes.OFFHOOK_TERM, () => {\n      this.setPhonedIdle();\n    });\n  }\n\n  onInit() {\n    if (this._deps.evAuth.isFreshLogin) {\n      this.resetOutBoundDialSetting();\n    }\n  }\n\n  @track(trackEvents.outbound)\n  async dialout(phoneNumber: string) {\n    if (this._deps.evAgentSession.isIntegratedSoftphone) {\n      const integratedSoftphone = this._deps.evIntegratedSoftphone;\n      try {\n        if (integratedSoftphone.sipRegisterSuccess) {\n          await integratedSoftphone.askAudioPermission(false);\n        } else {\n          await this._deps.evAgentSession.configureAgent();\n          await integratedSoftphone.onceRegistered();\n        }\n      } catch (error) {\n        return;\n      }\n    }\n\n    try {\n      const destination = this._checkAndParseNumber(phoneNumber);\n      await this._manualOutdial({\n        destination,\n        callerId: this.callerId,\n        countryId: this.countryId,\n        queueId: this.queueId,\n        ringTime: this.ringTime,\n      });\n\n      this.setDialoutStatus(dialoutStatuses.callConnected);\n    } catch (error) {\n      this.setPhonedIdle();\n    }\n  }\n\n  checkDialoutRingTime() {\n    const dialoutRingTime = Math.min(\n      Math.max(this.formGroup.dialoutRingTime, this.ringTimeLimit.min),\n      this.ringTimeLimit.max,\n    );\n    if (dialoutRingTime !== this.formGroup.dialoutRingTime) {\n      this.setFormGroup({ dialoutRingTime });\n    }\n  }\n\n  setDialoutStatus(status: DialoutStatusesType) {\n    this._deps.presence.setDialoutStatus(status);\n  }\n\n  setPhonedIdle() {\n    this.setDialoutStatus(dialoutStatuses.idle);\n  }\n\n  setPhonedDialing() {\n    this.setDialoutStatus(dialoutStatuses.dialing);\n  }\n\n  private _checkAndParseNumber(phoneNumber: string) {\n    try {\n      checkCountryCode(phoneNumber);\n\n      return parseNumber(phoneNumber);\n    } catch (error) {\n      switch (error.type) {\n        case messageTypes.NO_SUPPORT_COUNTRY:\n          this._deps.alert.danger({\n            message: messageTypes.NO_SUPPORT_COUNTRY,\n            ttl: 0,\n          });\n          break;\n        default:\n          this._deps.alert.danger({\n            message: callErrors.noToNumber,\n          });\n          break;\n      }\n\n      throw error;\n    }\n  }\n\n  private async _manualOutdial({\n    callerId = '',\n    destination,\n    ringTime = DEFAULT_OUTBOUND_SETTING.dialoutRingTime,\n    queueId = '',\n    countryId = 'USA',\n  }: EvClientManualOutdialParams) {\n    let offhookInitResult: EvOffhookInitResponse;\n    if (this.dialoutStatus !== dialoutStatuses.dialing) {\n      this.setPhonedDialing();\n    }\n\n    try {\n      if (!this._deps.evSettings.isOffhook) {\n        // bind init hook first, and then call offhookInit\n        const getOffhookInitResult = this._getOffhookInitResult();\n        this._deps.evClient.offhookInit();\n\n        offhookInitResult = await getOffhookInitResult;\n      }\n\n      if (\n        this._deps.evSettings.isOffhook ||\n        (offhookInitResult && offhookInitResult.status === 'OK')\n      ) {\n        await this._deps.evClient.manualOutdial({\n          callerId,\n          countryId,\n          destination,\n          queueId,\n          ringTime,\n        });\n      } else {\n        throw new Error(`'offhookInit' exception error`);\n      }\n    } catch (e) {\n      if (!this._deps.evSettings.isManualOffhook) {\n        this._deps.evClient.offhookTerm();\n      }\n\n      throw e;\n    }\n  }\n\n  private _getOffhookInitResult() {\n    return new Promise<EvOffhookInitResponse>((resolve, reject) => {\n      this._deps.presence.evPresenceEvents.once(\n        EvCallbackTypes.OFFHOOK_INIT,\n        (data: EvOffhookInitResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  get isInbound() {\n    return this.currentCall?.callType === 'INBOUND';\n  }\n}\n\nexport { EvCall };\n"],"file":"EvCall.js"}