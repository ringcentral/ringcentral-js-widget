{"version":3,"sources":["modules/EvCall/EvCall.ts"],"names":["DEFAULT_OUTBOUND_SETTING","dialoutCallerId","dialoutQueueId","dialoutCountryId","dialoutRingTime","EvCall","name","deps","dep","optional","alert","evAuth","storage","evClient","presence","evSettings","tabManager","evCallMonitor","evSubscription","evSessionConfig","evIntegratedSoftphone","enableCache","modules","storageKey","activityCallId","ringTimeLimit","min","max","getCurrentCall","_modules","getCallsMapping","id","callsMapping","call","data","state","formGroup","setFormGroup","subscribe","EvCallbackTypes","TCPA_SAFE_LEAD_STATE","leadState","isManualOffhook","_isTabActive","offhookTerm","setPhonedIdle","OFFHOOK_TERM","isFreshLogin","resetOutBoundDialSetting","phoneNumber","isIntegrated","askAudioPermission","toNumber","_checkAndParseNumber","_manualOutdial","callerId","countryId","queueId","ringTime","setDialoutStatus","dialoutStatuses","callConnected","Math","status","idle","dialing","error","type","messageTypes","NO_SUPPORT_COUNTRY","danger","message","ttl","callErrors","noToNumber","dialoutStatus","setPhonedDialing","isOffhook","getOffhookInitResult","_getOffhookInitResult","offhookInit","offhookInitResult","manualOutdial","destination","Error","Promise","resolve","reject","evPresenceEvents","once","OFFHOOK_INIT","outboundManualDefaultRingtime","active","RcModuleV2","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleState,\n  RcModuleV2,\n  state,\n  storage,\n  createSelector,\n} from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport callErrors from 'ringcentral-integration/modules/Call/callErrors';\n\nimport { messageTypes } from '../../enums';\nimport {\n  dialoutStatuses,\n  DialoutStatusesType,\n} from '../../enums/dialoutStatus';\nimport { checkCountryCode } from '../../lib/checkCountryCode';\nimport { EvOffhookInitResponse } from '../../lib/EvClient';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport { parseNumber } from '../../lib/parseNumber';\nimport { Call, DepsModules, State } from './EvCall.interface';\n\nconst DEFAULT_OUTBOUND_SETTING = {\n  dialoutCallerId: '-1',\n  dialoutQueueId: '-1',\n  dialoutCountryId: 'USA',\n  dialoutRingTime: 30,\n};\n\ntype EvCallState = RcModuleState<EvCall, State>;\n\n@Module({\n  name: 'EvCall',\n  deps: [\n    'Alert',\n    'EvAuth',\n    'Storage',\n    'EvClient',\n    'Presence',\n    'EvSettings',\n    'EvCallMonitor',\n    'EvSubscription',\n    'EvSessionConfig',\n    'EvIntegratedSoftphone',\n    { dep: 'TabManager', optional: true },\n    { dep: 'EvCallOptions', optional: true },\n  ],\n})\nclass EvCall extends RcModuleV2<DepsModules, EvCallState> implements Call {\n  /** this id is get from route, set from EvActivityCallUI */\n  activityCallId: string;\n\n  ringTimeLimit = {\n    min: 20,\n    max: 120,\n  };\n\n  constructor({\n    alert,\n    evAuth,\n    storage,\n    evClient,\n    presence,\n    evSettings,\n    tabManager,\n    evCallMonitor,\n    evSubscription,\n    evSessionConfig,\n    evIntegratedSoftphone,\n    enableCache = true,\n  }) {\n    super({\n      modules: {\n        alert,\n        evAuth,\n        storage,\n        evClient,\n        presence,\n        evSettings,\n        tabManager,\n        evCallMonitor,\n        evSubscription,\n        evSessionConfig,\n        evIntegratedSoftphone,\n      },\n      enableCache,\n      storageKey: 'EvCall',\n    });\n  }\n\n  @storage\n  @state\n  dialoutCallerId = DEFAULT_OUTBOUND_SETTING.dialoutCallerId;\n\n  @storage\n  @state\n  dialoutQueueId = DEFAULT_OUTBOUND_SETTING.dialoutQueueId;\n\n  @storage\n  @state\n  dialoutCountryId = DEFAULT_OUTBOUND_SETTING.dialoutCountryId;\n\n  @storage\n  @state\n  dialoutRingTime: number = DEFAULT_OUTBOUND_SETTING.dialoutRingTime;\n\n  @storage\n  @state\n  formGroup: State['formGroup'] = DEFAULT_OUTBOUND_SETTING;\n\n  get ringTime() {\n    // Consider that the `dialoutRingTime` may be empty string(not null).\n    return this.formGroup.dialoutRingTime === null\n      ? +this._modules.evAuth.outboundManualDefaultRingtime\n      : this.formGroup.dialoutRingTime;\n  }\n\n  get queueId() {\n    return this.dialoutQueueId === '-1' ? null : this.dialoutQueueId;\n  }\n\n  get callerId() {\n    return this.dialoutCallerId === '-1' ? null : this.dialoutCallerId;\n  }\n\n  get countryId() {\n    return this.dialoutCountryId;\n  }\n\n  get dialoutStatus() {\n    return this._modules.presence.dialoutStatus;\n  }\n\n  private get _isTabActive() {\n    return !this._modules.tabManager || this._modules.tabManager.active;\n  }\n\n  getCurrentCall = createSelector(\n    () => this.activityCallId,\n    () => this._modules.evCallMonitor.getCallsMapping(),\n    (id, callsMapping) => {\n      const call = callsMapping[id];\n      return id && call ? call : null;\n    },\n  );\n\n  @action\n  setFormGroup(data: Partial<State['formGroup']>) {\n    this.state.formGroup = { ...this.state.formGroup, ...data };\n  }\n\n  @action\n  saveForm() {\n    this.state.dialoutCallerId = this.formGroup.dialoutCallerId;\n    this.state.dialoutQueueId = this.formGroup.dialoutQueueId;\n    this.state.dialoutCountryId = this.formGroup.dialoutCountryId;\n    this.state.dialoutRingTime = this.formGroup.dialoutRingTime;\n  }\n\n  @action\n  resetOutBoundDialSetting() {\n    this.state.dialoutCallerId = DEFAULT_OUTBOUND_SETTING.dialoutCallerId;\n    this.state.dialoutQueueId = DEFAULT_OUTBOUND_SETTING.dialoutQueueId;\n    this.state.dialoutCountryId = DEFAULT_OUTBOUND_SETTING.dialoutCountryId;\n    this.state.dialoutRingTime = DEFAULT_OUTBOUND_SETTING.dialoutRingTime;\n  }\n\n  resetForm() {\n    this.setFormGroup({\n      dialoutCallerId: this.dialoutCallerId,\n      dialoutQueueId: this.dialoutQueueId,\n      dialoutCountryId: this.dialoutCountryId,\n      dialoutRingTime: this.dialoutRingTime,\n    });\n  }\n\n  onInitOnce() {\n    this._modules.evSubscription.subscribe(\n      EvCallbackTypes.TCPA_SAFE_LEAD_STATE,\n      (data) => {\n        if (data.leadState === 'BUSY') {\n          // TCPA_SAFE_LEAD_STATE -> BUSY\n          // TODO alert message info about busy call.\n          if (!this._modules.evSettings.isManualOffhook && this._isTabActive) {\n            this._modules.evClient.offhookTerm();\n          }\n          this.setPhonedIdle();\n        }\n      },\n    );\n\n    this._modules.evSubscription.subscribe(EvCallbackTypes.OFFHOOK_TERM, () => {\n      this.setPhonedIdle();\n    });\n  }\n\n  onInit() {\n    if (this._modules.evAuth.isFreshLogin) {\n      this.resetOutBoundDialSetting();\n    }\n  }\n\n  async dialout(phoneNumber: string) {\n    if (this._modules.evSessionConfig.isIntegrated) {\n      try {\n        await this._modules.evIntegratedSoftphone.askAudioPermission();\n      } catch (error) {\n        return;\n      }\n    }\n\n    const toNumber = this._checkAndParseNumber(phoneNumber);\n\n    if (toNumber) {\n      await this._manualOutdial({\n        toNumber,\n        callerId: this.callerId,\n        countryId: this.countryId,\n        queueId: this.queueId,\n        ringTime: this.ringTime,\n      });\n\n      this.setDialoutStatus(dialoutStatuses.callConnected);\n    }\n  }\n\n  checkDialoutRingTime() {\n    const dialoutRingTime = Math.min(\n      Math.max(this.formGroup.dialoutRingTime, this.ringTimeLimit.min),\n      this.ringTimeLimit.max,\n    );\n    if (dialoutRingTime !== this.formGroup.dialoutRingTime) {\n      this.setFormGroup({ dialoutRingTime });\n    }\n  }\n\n  setDialoutStatus(status: DialoutStatusesType) {\n    this._modules.presence.setDialoutStatus(status);\n  }\n\n  setPhonedIdle() {\n    this.setDialoutStatus(dialoutStatuses.idle);\n  }\n\n  setPhonedDialing() {\n    this.setDialoutStatus(dialoutStatuses.dialing);\n  }\n\n  private _checkAndParseNumber(phoneNumber: string) {\n    try {\n      checkCountryCode(phoneNumber);\n\n      return parseNumber(phoneNumber);\n    } catch (error) {\n      this.setPhonedIdle();\n\n      switch (error.type) {\n        case messageTypes.NO_SUPPORT_COUNTRY:\n          this._modules.alert.danger({\n            message: messageTypes.NO_SUPPORT_COUNTRY,\n            ttl: 0,\n          });\n          return null;\n        default:\n          this._modules.alert.danger({\n            message: callErrors.noToNumber,\n          });\n          return null;\n      }\n    }\n  }\n\n  private async _manualOutdial({\n    callerId = '',\n    toNumber,\n    ringTime = DEFAULT_OUTBOUND_SETTING.dialoutRingTime,\n    queueId = '',\n    countryId = 'USA',\n  }) {\n    let offhookInitResult: EvOffhookInitResponse;\n    if (this.dialoutStatus !== dialoutStatuses.dialing) {\n      this.setPhonedDialing();\n    }\n\n    try {\n      if (!this._modules.evSettings.isOffhook) {\n        // bind init hook first, and then call offhookInit\n        const getOffhookInitResult = this._getOffhookInitResult();\n        this._modules.evClient.offhookInit();\n\n        offhookInitResult = await getOffhookInitResult;\n      }\n\n      if (\n        this._modules.evSettings.isOffhook ||\n        (offhookInitResult && offhookInitResult.status === 'OK')\n      ) {\n        await this._modules.evClient.manualOutdial({\n          callerId,\n          countryId,\n          destination: toNumber,\n          queueId,\n          ringTime,\n        });\n      } else {\n        throw new Error(`'offhookInit' exception error`);\n      }\n    } catch (e) {\n      if (!this._modules.evSettings.isManualOffhook) {\n        this._modules.evClient.offhookTerm();\n      }\n      this.setPhonedIdle();\n      throw e;\n    }\n  }\n\n  private _getOffhookInitResult() {\n    return new Promise<EvOffhookInitResponse>((resolve, reject) => {\n      this._modules.presence.evPresenceEvents.once(\n        EvCallbackTypes.OFFHOOK_INIT,\n        (data: EvOffhookInitResponse) => {\n          if (data.status === 'OK') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n}\n\nexport { EvCall };\n"],"file":"EvCall.js"}