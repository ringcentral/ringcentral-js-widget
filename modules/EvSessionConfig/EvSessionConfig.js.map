{"version":3,"sources":["modules/EvSessionConfig/EvSessionConfig.ts"],"names":["ACCEPTABLE_LOGIN_TYPES","loginTypes","RC_PHONE","externalPhone","DEFAULT_LOGIN_TYPE","NONE","dropDownOptions","None","AGENT_CONFIG_SUCCESS_EVENT","EvSessionConfig","name","deps","dep","optional","evClient","evAuth","storage","alert","auth","locale","modal","regionSettings","tabManager","heartBeatInterval","enableCache","modules","storageKey","onConfigSuccess","onTriggerConfig","_lastConfigSuccess","_configSuccessKey","_configuringKey","_heartBeatIntervalTime","_heartBeatIntervalId","success","configuring","_configureAgentPromise","getLoginTypeList","_modules","currentLocale","map","type","id","label","i18n","getString","getInboundQueues","agent","agentConfig","inboundSettings","availableQueues","isFreshLogin","queue","gateId","gateName","checked","getDefaultSkillProfile","getSkillProfileList","skillProfileList","defaultSkill","pickSkillProfile","profileId","availableSkillProfiles","length","unshift","profileName","addBeforeLogoutHandler","resetAllConfig","tabManagerEnabled","_tabbie","_prefix","state","selectedInboundQueueIds","selectedSkillProfileId","loginType","extensionNumber","takingCall","autoAnswer","configSuccess","configured","status","skillProfileId","ids","setConfig","inboundQueue","setFreshConfig","checkSelectIsInList","some","profile","setSkillProfileId","checkedInboundQueues","reduce","result","inboundQueueId","push","setInboundQueueIds","loggedIn","connected","getAgentConfig","find","item","isDefault","isConfiguringByLocal","_heartBeatOnConfiguring","isConfigSuccessByLocal","multiLoginRequest","setConfigSuccess","_heartBeatOnConfigSuccess","console","log","configureAgent","config","_checkFieldsResult","_connectEvServer","data","closeSocket","onInit","loginAgent","message","danger","messageTypes","AGENT_CONFIG_DETAIL_ERROR","ttl","payload","AGENT_CONFIG_ERROR","Error","_onTriggerAgentConfig","hasMultipleTabs","send","setInterval","localStorage","setItem","Date","now","toString","statusKey","Number","getItem","clearInterval","_onConfigureAgentSuccess","ready","event","args","_closeModal","modalIds","forEach","close","hook","e","error","EXISTING_LOGIN_FOUND","confirmSync","title","content","okText","cancelText","onOK","isForce","modalId","EXISTING_LOGIN_ENGAGED","NO_AGENT_SELECTED","dialDest","_getDialDest","queueIds","EMPTY_PHONE_NUMBER","formattedNumber","phoneNumber","areaCode","input","parsedNumber","isValid","INVALID_PHONE_NUMBER","setExtensionNumber","integratedSoftphone","_getConfigStatusByLocal","window","enabled","RcModuleV2","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleState,\n  RcModuleV2,\n  state,\n  storage,\n  createSelector,\n} from '@ringcentral-integration/core';\nimport { format, parse } from '@ringcentral-integration/phone-number';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport { dropDownOptions, loginTypes, messageTypes } from '../../enums';\nimport {\n  EvAvailableSkillProfile,\n  EvConfigureAgentOptions,\n  EvMessageRes,\n} from '../../lib/EvClient';\nimport { DepsModules, SessionConfig, State } from './EvSessionConfig.interface';\nimport i18n from './i18n';\n\nconst ACCEPTABLE_LOGIN_TYPES = [\n  loginTypes.RC_PHONE,\n  loginTypes.externalPhone,\n  // TODO: Temporarily remove\n  // loginTypes.integratedSoftphone,\n];\nconst DEFAULT_LOGIN_TYPE = loginTypes.RC_PHONE;\n\nconst NONE = dropDownOptions.None;\nconst AGENT_CONFIG_SUCCESS_EVENT = 'AgentConfigSuccess';\n\ntype EvSessionConfigState = RcModuleState<EvSessionConfig, State>;\n\n@Module({\n  name: 'EvSessionConfig',\n  deps: [\n    'EvClient',\n    'Auth',\n    'EvAuth',\n    'Storage',\n    'Alert',\n    'Auth',\n    'Locale',\n    'RegionSettings',\n    'Modal',\n    { dep: 'TabManager', optional: true },\n    { dep: 'SessionConfigOptions', optional: true },\n  ],\n})\nclass EvSessionConfig extends RcModuleV2<DepsModules, EvSessionConfigState>\n  implements SessionConfig {\n  public onConfigSuccess: Function[] = [];\n\n  public onTriggerConfig: Function[] = [];\n\n  private _lastConfigSuccess = false;\n\n  private _configSuccessKey?: string;\n\n  private _configuringKey?: string;\n\n  private _heartBeatIntervalTime?: number;\n\n  private _heartBeatIntervalId = {\n    success: null,\n    configuring: null,\n  };\n\n  // for multiple tab using\n  private _configureAgentPromise: Promise<EvMessageRes>;\n\n  constructor({\n    evClient,\n    evAuth,\n    storage,\n    alert,\n    auth,\n    locale,\n    modal,\n    regionSettings,\n    tabManager,\n    heartBeatInterval = 1000,\n    enableCache = true,\n  }) {\n    super({\n      modules: {\n        evClient,\n        evAuth,\n        storage,\n        auth,\n        alert,\n        locale,\n        modal,\n        regionSettings,\n        tabManager,\n      },\n      enableCache,\n      storageKey: 'EvSessionConfig',\n    });\n    this._modules.auth.addBeforeLogoutHandler(() => {\n      this.resetAllConfig();\n    });\n    if (this.tabManagerEnabled) {\n      this._configSuccessKey = `${this._modules.tabManager._tabbie._prefix}configSuccess`;\n      this._configuringKey = `${this._modules.tabManager._tabbie._prefix}configuring`;\n      this._heartBeatIntervalTime = heartBeatInterval;\n    }\n  }\n\n  @storage\n  @state\n  selectedSkillProfileId = NONE;\n\n  @storage\n  @state\n  selectedInboundQueueIds: string[] = [];\n\n  @storage\n  @state\n  loginType = DEFAULT_LOGIN_TYPE;\n\n  @storage\n  @state\n  extensionNumber = '';\n\n  @storage\n  @state\n  takingCall = true;\n\n  @storage\n  @state\n  autoAnswer = false;\n\n  @storage\n  @state\n  configured = false;\n\n  @state\n  configSuccess = false;\n\n  get isExternalPhone() {\n    return this.loginType === loginTypes.externalPhone;\n  }\n\n  get isIntegrated() {\n    return this.loginType === loginTypes.integratedSoftphone;\n  }\n\n  get isConfigSuccessByLocal() {\n    return this._getConfigStatusByLocal(this._configSuccessKey);\n  }\n\n  get isConfiguringByLocal() {\n    return this._getConfigStatusByLocal(this._configuringKey);\n  }\n\n  get localStorage() {\n    return window?.localStorage;\n  }\n\n  getLoginTypeList = createSelector(\n    () => this._modules.locale.currentLocale,\n    (currentLocale) => {\n      return ACCEPTABLE_LOGIN_TYPES.map((type) => ({\n        id: type,\n        label: i18n.getString(type, currentLocale),\n      }));\n    },\n  );\n\n  getInboundQueues = createSelector(\n    () => this._modules.evAuth.agent.agentConfig,\n    (agentConfig) => {\n      if (!agentConfig || !agentConfig.inboundSettings) {\n        return [];\n      }\n      const {\n        inboundSettings: { availableQueues = [] },\n      } = agentConfig;\n\n      const { isFreshLogin } = this._modules.auth;\n\n      return availableQueues.map((queue) => ({\n        gateId: queue.gateId,\n        gateName: queue.gateName,\n        checked: isFreshLogin,\n      }));\n    },\n  );\n\n  getDefaultSkillProfile = createSelector(\n    () => this.getSkillProfileList(),\n    (skillProfileList) => {\n      const defaultSkill = this.pickSkillProfile(skillProfileList);\n      return defaultSkill ? defaultSkill.profileId : NONE;\n    },\n  );\n\n  getSkillProfileList = createSelector(\n    () => this._modules.evAuth.agent.agentConfig,\n    (agentConfig) => {\n      if (!agentConfig || !agentConfig.inboundSettings) {\n        return [];\n      }\n      const {\n        inboundSettings: { availableSkillProfiles = [] },\n      } = agentConfig;\n\n      const defaultSkill = this.pickSkillProfile(availableSkillProfiles);\n\n      if (!defaultSkill && availableSkillProfiles.length > 0) {\n        availableSkillProfiles.unshift({\n          profileId: NONE,\n          profileName: i18n.getString(NONE, this._modules.locale.currentLocale),\n        });\n      }\n\n      return availableSkillProfiles;\n    },\n  );\n\n  @action\n  resetAllConfig() {\n    this.state.selectedInboundQueueIds = [];\n    this.state.selectedSkillProfileId = NONE;\n    this.state.loginType = DEFAULT_LOGIN_TYPE;\n    this.state.extensionNumber = '';\n    this.state.takingCall = true;\n    this.state.autoAnswer = false;\n    this.state.configSuccess = false;\n    this.state.configured = false;\n    this._lastConfigSuccess = false;\n  }\n\n  @action\n  setConfigSuccess(status: boolean) {\n    this.state.configSuccess = status;\n    this.state.configured = status;\n  }\n\n  @action\n  setLoginType(type: string) {\n    this.state.loginType = type;\n  }\n\n  @action\n  setSkillProfileId(skillProfileId: string) {\n    this.state.selectedSkillProfileId = skillProfileId;\n  }\n\n  @action\n  setInboundQueueIds(ids: string[]) {\n    this.state.selectedInboundQueueIds = ids;\n  }\n\n  @action\n  setExtensionNumber(extensionNumber: string) {\n    this.state.extensionNumber = extensionNumber;\n  }\n\n  @action\n  setTakingCall(takingCall: boolean) {\n    this.state.takingCall = takingCall;\n  }\n\n  @action\n  setAutoAnswer(autoAnswer) {\n    this.state.autoAnswer = autoAnswer;\n  }\n\n  @action\n  setConfig(skillProfileId: string, selectedInboundQueueIds: string[]) {\n    this.state.loginType = DEFAULT_LOGIN_TYPE;\n    this.state.extensionNumber = '';\n    this.state.takingCall = true;\n    this.state.autoAnswer = false;\n    this.state.configSuccess = false;\n    this.state.configured = false;\n    this._lastConfigSuccess = false;\n\n    this.state.selectedSkillProfileId = skillProfileId;\n    this.state.selectedInboundQueueIds = selectedInboundQueueIds;\n  }\n\n  setFreshConfig() {\n    this.setConfig(\n      this.getDefaultSkillProfile(),\n      this.getInboundQueues().map((inboundQueue) => inboundQueue.gateId)\n    );\n  }\n\n  afterLogin() {\n    // handle setting\n    if (this._modules.auth.isFreshLogin) {\n      this.setFreshConfig();\n    } else {\n      // check current skill is in list of skillList\n      const checkSelectIsInList = this.getSkillProfileList().some(\n        (profile) => profile.profileId === this.selectedSkillProfileId,\n      );\n\n      if (!checkSelectIsInList) {\n        this.setSkillProfileId(this.getDefaultSkillProfile());\n      }\n\n      // check all selected queue is in inboundQueue list\n      const checkedInboundQueues = this.selectedInboundQueueIds.reduce(\n        (result, inboundQueueId) => {\n          if (\n            this.getInboundQueues().some(\n              (inboundQueue) => inboundQueue.gateId === inboundQueueId,\n            )\n          ) {\n            result.push(inboundQueueId);\n          }\n          return result;\n        },\n        [],\n      );\n      this.setInboundQueueIds(checkedInboundQueues);\n    }\n  }\n\n  _shouldInit() {\n    return (\n      super._shouldInit() &&\n      this._modules.auth.loggedIn &&\n      this._modules.evAuth.connected\n    );\n  }\n\n  _shouldReset() {\n    return super._shouldReset() && !this._modules.auth.loggedIn;\n  }\n\n  async getSessionConfig() {\n    await this._modules.evClient.getAgentConfig();\n  }\n\n  pickSkillProfile(skillProfileList: EvAvailableSkillProfile[]) {\n    return skillProfileList.find((item) => item.isDefault === '1');\n  }\n\n  async autoConfigureAgent() {\n    const isConfiguringByLocal = this.isConfiguringByLocal;\n    if (this.tabManagerEnabled && !isConfiguringByLocal) {\n      this._heartBeatOnConfiguring();\n    }\n    if (this.isConfigSuccessByLocal) {\n      try {\n        await this._modules.evClient.multiLoginRequest();\n        this.setConfigSuccess(true);\n        if (this.tabManagerEnabled) {\n          this._heartBeatOnConfigSuccess();\n        }\n        return;\n      } catch (e) {\n        console.log(e);\n      }\n    } else if (!this.tabManagerEnabled || !isConfiguringByLocal) {\n      await this.configureAgent();\n    }\n  }\n\n  async configureAgent() {\n    const config = this._checkFieldsResult();\n\n    let result = await this._connectEvServer(config);\n\n    if (result) {\n      // Session timeout\n      // this will occur when stay in session config page for long time\n      if (result.data.status !== 'SUCCESS') {\n        this._modules.evClient.closeSocket();\n        this._modules.evClient.onInit();\n        await this._modules.evAuth.loginAgent();\n        result = await this._connectEvServer(config);\n      }\n\n      const {\n        data: { message, status },\n      } = result;\n\n      if (status !== 'SUCCESS') {\n        if (typeof message === 'string') {\n          this._modules.alert.danger({\n            message: messageTypes.AGENT_CONFIG_DETAIL_ERROR,\n            ttl: 0,\n            payload: message,\n          });\n        } else {\n          this._modules.alert.danger({\n            message: messageTypes.AGENT_CONFIG_ERROR,\n            ttl: 0,\n          });\n        }\n        throw new Error(message);\n      }\n\n      this._onTriggerAgentConfig();\n\n      if (this.hasMultipleTabs) {\n        this._modules.tabManager.send(AGENT_CONFIG_SUCCESS_EVENT, true);\n      }\n    }\n    this.setConfigSuccess(true);\n\n    if (this.tabManagerEnabled) {\n      this._heartBeatOnConfigSuccess();\n    }\n  }\n\n  private _heartBeatOnConfigSuccess() {\n    if (typeof this._heartBeatIntervalId.success === 'number') return;\n\n    this._heartBeatIntervalId.success = setInterval(() => {\n      this.localStorage.setItem(this._configSuccessKey, Date.now().toString());\n    }, this._heartBeatIntervalTime);\n  }\n\n  private _heartBeatOnConfiguring() {\n    if (typeof this._heartBeatIntervalId.configuring === 'number') return;\n\n    this.localStorage.setItem(this._configuringKey, Date.now().toString());\n\n    this._heartBeatIntervalId.configuring = setInterval(() => {\n      this.localStorage.setItem(this._configuringKey, Date.now().toString());\n    }, this._heartBeatIntervalTime);\n  }\n\n  private _getConfigStatusByLocal(statusKey: string) {\n    return (\n      this.localStorage &&\n      Date.now() - Number(this.localStorage.getItem(statusKey)) <\n        this._heartBeatIntervalTime * 2 - 100\n    );\n  }\n\n  onReset() {\n    this._lastConfigSuccess = false;\n    this.setConfigSuccess(false);\n    clearInterval(this._heartBeatIntervalId.success);\n    this._heartBeatIntervalId.success = null;\n    clearInterval(this._heartBeatIntervalId.configuring);\n    this._heartBeatIntervalId.configuring = null;\n  }\n\n  async onStateChange() {\n    if (this.configSuccess && this._lastConfigSuccess !== this.configSuccess) {\n      this._lastConfigSuccess = this.configSuccess;\n      this._onConfigureAgentSuccess();\n    }\n    if (\n      this.ready &&\n      this.tabManagerEnabled &&\n      this._modules.tabManager.ready &&\n      this._modules.tabManager.event &&\n      this._modules.tabManager.event.name === AGENT_CONFIG_SUCCESS_EVENT &&\n      this._modules.tabManager.event.args[0]\n    ) {\n      await this._configureAgentPromise;\n      await this._modules.evClient.multiLoginRequest();\n      this.setConfigSuccess(true);\n      this._heartBeatOnConfigSuccess();\n      this._closeModal();\n    }\n  }\n\n  private _closeModal() {\n    this._modules.modal.modalIds.forEach((id) => {\n      this._modules.modal.close(id);\n    });\n  }\n\n  private _onConfigureAgentSuccess() {\n    this.onConfigSuccess.forEach((hook) => {\n      try {\n        hook();\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  private _onTriggerAgentConfig() {\n    this.onTriggerConfig.forEach((hook) => {\n      try {\n        hook();\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  private async _connectEvServer(config: EvConfigureAgentOptions) {\n    this._configureAgentPromise = this._modules.evClient.configureAgent(config);\n    let result = await this._configureAgentPromise;\n    if (result.data.status === messageTypes.EXISTING_LOGIN_FOUND) {\n      const { currentLocale } = this._modules.locale;\n      // TODO: think about sync up in all tabs?\n      const modalId = await this._modules.modal.confirmSync({\n        title: i18n.getString('multipleLoginsTitle', currentLocale),\n        content: i18n.getString('multipleLoginsContent', currentLocale),\n        okText: i18n.getString('multipleLoginsConfirm', currentLocale),\n        cancelText: i18n.getString('multipleLoginsCancel', currentLocale),\n        onOK: async () => {\n          result = await this._modules.evClient.configureAgent({\n            ...config,\n            isForce: true,\n          });\n        },\n      });\n\n      if (!modalId) {\n        throw new Error(result.data.status);\n      }\n    } else if (result.data.status === messageTypes.EXISTING_LOGIN_ENGAGED) {\n      this._modules.alert.danger({\n        message: messageTypes.EXISTING_LOGIN_ENGAGED,\n        ttl: 0,\n      });\n\n      throw new Error(messageTypes.EXISTING_LOGIN_ENGAGED);\n    }\n\n    return result;\n  }\n\n  get hasMultipleTabs() {\n    return this.tabManagerEnabled && this._modules.tabManager.hasMultipleTabs;\n  }\n\n  get tabManagerEnabled() {\n    return this._modules.tabManager?._tabbie.enabled;\n  }\n\n  private _checkFieldsResult(): EvConfigureAgentOptions {\n    if (this.selectedInboundQueueIds.length === 0) {\n      this._modules.alert.danger({\n        message: messageTypes.NO_AGENT_SELECTED,\n        ttl: 0,\n      });\n      throw new Error(`'queueIds' is an empty array.`);\n    }\n\n    return {\n      dialDest: this._getDialDest(),\n      queueIds: this.selectedInboundQueueIds,\n      skillProfileId:\n        this.selectedSkillProfileId === NONE ? '' : this.selectedSkillProfileId,\n    };\n  }\n\n  private _getDialDest() {\n    // Only external phone has number input\n    switch (this.loginType) {\n      case loginTypes.externalPhone: {\n        if (!this.extensionNumber) {\n          this._modules.alert.danger({\n            message: messageTypes.EMPTY_PHONE_NUMBER,\n            ttl: 0,\n          });\n          throw new Error(`'extensionNumber' is an empty number.`);\n        }\n        const formattedNumber = format({\n          phoneNumber: this.extensionNumber,\n          areaCode: this._modules.regionSettings.areaCode,\n        });\n        const { parsedNumber, isValid } = parse({\n          input: formattedNumber,\n        });\n        if (!isValid || !parsedNumber || parsedNumber === '') {\n          this._modules.alert.danger({\n            message: messageTypes.INVALID_PHONE_NUMBER,\n            ttl: 0,\n          });\n          throw new Error(`'extensionNumber' is not a valid number.`);\n        }\n        this.setExtensionNumber(parsedNumber);\n        return this.extensionNumber;\n      }\n      case loginTypes.integratedSoftphone:\n        return 'integrated';\n      case loginTypes.RC_PHONE:\n      default:\n        return 'RC_PHONE';\n    }\n  }\n}\n\nexport { EvSessionConfig };\n"],"file":"EvSessionConfig.js"}