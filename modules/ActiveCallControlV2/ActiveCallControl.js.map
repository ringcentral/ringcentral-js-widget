{"version":3,"sources":["modules/ActiveCallControlV2/ActiveCallControl.ts"],"names":["DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","DEFAULT_BUSY_TIMEOUT","telephonySessionsEndPoint","subscribeEvent","subscriptionFilters","telephonySessions","ActiveCallControl","name","deps","dep","optional","that","_getTrackEventName","trackEvents","mute","unmute","record","stopRecord","hangup","voicemail","confirmSwitch","hold","unhold","transfer","confirmForward","answer","holdAndAnswer","ignore","endAndAnswer","activeSessionId","activeSessions","sessions","timestamp","_deps","presence","calls","dialpadOpen","dialpadClose","clickTransfer","forward","enableCache","activeCallControlOptions","storageKey","_ttl","_timeToRetry","_polling","_enableCache","_promise","_rcCall","_tabActive","_connectivity","_onCallEndFunc","_timeoutId","_lastSubscriptionMessage","_permissionCheck","_autoMergeSignCallIdKey","_autoMergeCallsKey","_enableAutoSwitchFeature","_autoMergeWebphoneSessionsMap","_onCallSwitchedFunc","_updateSessionsHandler","updateActiveSessions","ttl","timeToRetry","polling","permissionCheck","enableAutoSwitchFeature","prefix","Map","ready","_hasPermission","_subscriptionHandler","_checkConnectivity","_checkTabActive","_createOtherInstanceListener","tabManager","window","addEventListener","e","_onStorageChangeEvent","key","_triggerCurrentClientAutoMerge","_autoMergeCallsHandler","JSON","parse","newValue","telephoneSessionId","ids","rcCallSessions","filter","s","webphoneSession","telephonySessionId","map","id","data","length","localStorage","setItem","stringify","err","console","log","active","client","service","platform","get","detailedPresence","response","json","activeCalls","callsList","find","item","telephonySession","activeCall","call","forEach","transferUnmuteHandler","switchSession","switchCallFromActiveCall","homeCountryId","regionSettings","set","once","_addTrackToActiveSession","activeRCCallSession","webphone","_remoteVideo","_localVideo","addTrack","subscription","subscribe","RingCentralCall","sdk","subscriptions","enableSubscriptionHander","callControlOptions","preloadDevices","preloadSessions","extensionInfo","info","account","accountInfo","_webphone","on","callEvents","NEW","session","_newSessionHandler","WEBPHONE_INVITE","_onWebphoneInvite","WEBPHONE_INVITE_SENT","_callControl","_shouldFetch","fetchData","_retry","_startPolling","connected","setWebphone","resetState","busyTimestamp","_fetchData","clearTimeout","message","test","event","body","_checkRingOutCallDirection","onNotificationEvent","originType","origin","type","parties","Array","isArray","party","ringOutRole","direction","tempFrom","from","to","t","_clearTimeout","setTimeout","Date","now","_syncData","loadSessions","callControlSessions","removeListener","eventsEnum","STATUS","MUTED","RECORDINGS","DISCONNECTED","normalizedWebphoneSession","startTime","isToVoicemail","isForwarded","isReplied","partyData","lastEndedSessionIds","indexOf","sessionId","concat","slice","connectivityMonitor","connectivity","storage","restoreSessions","currentPath","routerInteraction","showCallLog","parentModule","callLogSection","show","showNotification","includes","setCallControlBusyTimestamp","clearCallControlBusyTimestamp","_text","clone","text","alert","warning","callControlError","muteConflictError","availabilityMonitor","checkIfHAError","generalError","unMuteConflictError","muted","recordingId","getRecordingId","startRecord","errors","error","danger","webphoneErrors","recordError","payload","errorCode","recording","recordings","recodingId","toVoicemail","__rc_isToVoicemail","switchCall","switchedSession","_triggerAutoMergeEvent","_holdOtherCalls","otherParties","callDirection","outbound","status","code","PartyStatusCode","proceeding","__rc_callStatus","sessionStatus","onHold","holdConflictError","setActiveSessionId","unHoldConflictError","transferNumber","numberValidate","validateNumbers","validatedResult","result","isHAError","callErrors","phoneNumber","validPhoneNumber","numbers","e164","mainCompanyNumber","join","flipValue","flip","callFlipId","forwardNumber","brand","__rc_isForwarded","acceptOptions","success","forwardSuccess","forwardError","dtmfValue","dtmf","__rc_creationTime","__rc_lastActiveTime","_setActiveSessionIdFromOnHoldCalls","onHoldSessions","l","r","otherSessions","answered","localHold","holdOtherSessions","Promise","all","deviceId","device","_answer","reject","busy","currentActiveCall","params","toNumber","isVoIPOnlyMode","_fetchDL","phoneLines","noOutboundCallWithoutDL","sdkMakeCallParams","fromNumber","makeCall","extension","list","devices","records","getActiveSession","reducer","accumulator","reduce","rolesAndPermissions","ringoutEnabled","sessionDescriptionHandlerOptions","constraints","audio","audioSettings","inputDeviceId","video","some","disconnected","inboundSwitchedParty","RcModuleV2","state","action"],"mappings":"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","sourcesContent":["import {\n  RcModuleV2,\n  state,\n  action,\n  storage,\n  computed,\n  track,\n  watch,\n} from '@ringcentral-integration/core';\nimport {\n  RingCentralCall,\n  events as callEvents,\n  MakeCallParams,\n  ActiveCallInfo,\n} from 'ringcentral-call';\nimport { Session, events as eventsEnum } from 'ringcentral-call/lib/Session';\nimport {\n  Session as TelephonySession,\n  PartyStatusCode,\n} from 'ringcentral-call-control/lib/Session';\nimport { WebPhoneSession } from 'ringcentral-web-phone/lib/session';\nimport { filter, sort, forEach } from 'ramda';\nimport { v4 as uuidV4 } from 'uuid';\nimport { ExtensionTelephonySessionsEvent } from '@rc-ex/core/definitions';\nimport { callDirection } from '../../enums/callDirections';\nimport { Module } from '../../lib/di';\n// eslint-disable-next-line import/no-named-as-default\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport callErrors from '../Call/callErrors';\nimport { webphoneErrors } from '../WebphoneV2/webphoneErrors';\nimport {\n  normalizeSession,\n  conflictError,\n  isRecording,\n  isHolding,\n  ActiveCallControlSessionData,\n  isRinging,\n  isAtMainNumberPromptToneStage,\n  getInboundSwitchedParty,\n} from './helpers';\nimport { trackEvents } from '../Analytics';\nimport callControlError from '../ActiveCallControl/callControlError';\nimport { Deps, ModuleMakeCallParams } from './ActiveCallControl.interface';\nimport validateNumbers from '../../lib/validateNumbers';\nimport {\n  normalizeSession as normalizeWebphoneSession,\n  sortByCreationTimeDesc,\n} from '../Webphone/webphoneHelper';\nimport { sessionStatus } from '../Webphone/sessionStatus';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst DEFAULT_BUSY_TIMEOUT = 3 * 1000;\nconst telephonySessionsEndPoint = /\\/telephony\\/sessions$/;\nconst subscribeEvent = subscriptionFilters.telephonySessions;\n\n@Module({\n  name: 'ActiveCallControl',\n  deps: [\n    'Auth',\n    'Alert',\n    'Brand',\n    'Client',\n    'Presence',\n    'AccountInfo',\n    'Subscription',\n    'ExtensionInfo',\n    'NumberValidate',\n    'RegionSettings',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    { dep: 'Prefix', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'Webphone', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'AudioSettings', optional: true },\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'ActiveCallControlOptions', optional: true },\n    { dep: 'RouterInteraction', optional: true },\n  ],\n})\nexport class ActiveCallControl extends RcModuleV2<Deps> {\n  _ttl: number;\n  _timeToRetry: number;\n  _polling: boolean;\n  _enableCache: boolean;\n  private _promise: Promise<void> = null;\n  private _rcCall: RingCentralCall;\n  private _tabActive: boolean;\n  private _connectivity: boolean;\n  private _onCallEndFunc: () => void;\n  private _timeoutId: ReturnType<typeof setTimeout> = null;\n  private _lastSubscriptionMessage: string;\n  private _permissionCheck: boolean;\n  private _autoMergeSignCallIdKey: string;\n  private _autoMergeCallsKey: string;\n  private _enableAutoSwitchFeature: boolean;\n  private _autoMergeWebphoneSessionsMap: Map<WebPhoneSession, boolean>;\n  private _onCallSwitchedFunc: (args: any) => any;\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: deps.activeCallControlOptions?.enableCache ?? true,\n      storageKey: 'activeCallControl',\n    });\n    const { activeCallControlOptions } = this._deps;\n    this._ttl = activeCallControlOptions?.ttl ?? DEFAULT_TTL;\n    this._timeToRetry =\n      activeCallControlOptions?.timeToRetry ?? DEFAULT_TIME_TO_RETRY;\n    this._polling = activeCallControlOptions?.polling ?? false;\n    this._enableCache = activeCallControlOptions?.enableCache ?? true;\n    this._promise = null;\n    this._rcCall = null;\n    this._permissionCheck = activeCallControlOptions?.permissionCheck ?? true;\n    this._enableAutoSwitchFeature =\n      activeCallControlOptions?.enableAutoSwitchFeature ?? false;\n    this._autoMergeSignCallIdKey = `${deps.prefix}-auto-merge-sign-call-id-key`;\n    this._autoMergeCallsKey = `${deps.prefix}-auto-merge-calls-key`;\n    this._autoMergeWebphoneSessionsMap = new Map();\n  }\n\n  async onStateChange() {\n    if (this.ready && this._hasPermission) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n      await this._checkTabActive();\n    }\n  }\n\n  async initModule() {\n    this._createOtherInstanceListener();\n    await super.initModule();\n  }\n\n  _createOtherInstanceListener() {\n    if (!this._deps.tabManager || !this._enableAutoSwitchFeature) {\n      return;\n    }\n    window.addEventListener('storage', (e) => {\n      this._onStorageChangeEvent(e);\n    });\n  }\n\n  _onStorageChangeEvent(e: StorageEvent) {\n    switch (e.key) {\n      case this._autoMergeSignCallIdKey:\n        this._triggerCurrentClientAutoMerge(e);\n        break;\n      case this._autoMergeCallsKey:\n        this._autoMergeCallsHandler(e);\n        break;\n      default:\n        break;\n    }\n  }\n\n  _triggerCurrentClientAutoMerge(e: StorageEvent) {\n    try {\n      const { telephoneSessionId }: { telephoneSessionId: string } = JSON.parse(\n        e.newValue,\n      );\n      const ids = this.rcCallSessions\n        .filter(\n          (s: Session) =>\n            !isRinging(s) &&\n            !!s.webphoneSession &&\n            s.telephonySessionId !== telephoneSessionId,\n        )\n        .map((s: Session) => s.telephonySessionId);\n      const id = uuidV4();\n      const data = { id, ids };\n      if (ids.length) {\n        localStorage.setItem(this._autoMergeCallsKey, JSON.stringify(data));\n      }\n    } catch (err) {\n      console.log('AutoMerge sign event parse error');\n    }\n  }\n\n  async _autoMergeCallsHandler(e: StorageEvent) {\n    if (!this._deps.tabManager.active) return;\n\n    try {\n      const { ids }: { ids: string[] } = JSON.parse(e.newValue);\n      const response = await this._deps.client.service\n        .platform()\n        .get(subscriptionFilters.detailedPresence);\n      const data = await response.json();\n      const activeCalls: ActiveCallInfo[] = data.activeCalls;\n      const callsList = ids\n        // filter calls which are already in current instance.\n        .filter((id) =>\n          this.rcCallSessions.find(\n            (item) => item.telephonySessionId === id && !!item.telephonySession,\n          ),\n        )\n        // transfer id to ActiveCallInfo.\n        .map((telephonySessionId: string) => {\n          const activeCall = activeCalls.find(\n            (call) => call.telephonySessionId === telephonySessionId,\n          );\n          if (!activeCall)\n            console.log(\n              `Auto Switch failed with telephonySessionId ${telephonySessionId}`,\n            );\n          return activeCall;\n        })\n        .filter((item: any) => !!item);\n\n      if (callsList.length) {\n        callsList.forEach(async (activeCall: ActiveCallInfo) => {\n          await this.transferUnmuteHandler(activeCall.telephonySessionId);\n          const switchSession = this._rcCall.switchCallFromActiveCall(\n            activeCall,\n            {\n              homeCountryId: this._deps.regionSettings.homeCountryId,\n            },\n          );\n          this._autoMergeWebphoneSessionsMap.set(\n            switchSession.webphoneSession,\n            true,\n          );\n          switchSession.webphoneSession.mute();\n          switchSession.webphoneSession.once('accepted', async () => {\n            switchSession.webphoneSession.unmute();\n            await switchSession.webphoneSession.hold();\n            this._addTrackToActiveSession();\n          });\n        });\n      }\n    } catch (err) {\n      console.log(err);\n      console.log('auto merge calls from other tabs failed');\n    }\n  }\n\n  _triggerAutoMergeEvent(telephoneSessionId?: string) {\n    if (!this._deps.tabManager || !this._enableAutoSwitchFeature) return;\n\n    const id = uuidV4();\n    const data = {\n      id,\n      telephoneSessionId,\n    };\n    localStorage.setItem(this._autoMergeSignCallIdKey, JSON.stringify(data));\n  }\n\n  _addTrackToActiveSession() {\n    const telephonySessionId = this.activeSessionId;\n    const activeRCCallSession = this.rcCallSessions.find(\n      (s) => s.telephonySessionId === telephonySessionId,\n    );\n    if (activeRCCallSession && activeRCCallSession.webphoneSession) {\n      const { _remoteVideo, _localVideo } = this._deps.webphone;\n      activeRCCallSession.webphoneSession.addTrack(_remoteVideo, _localVideo);\n    }\n  }\n\n  @storage\n  @state\n  data: {\n    activeSessionId: string;\n    busyTimestamp: number;\n    timestamp: number;\n    sessions: ActiveCallControlSessionData[];\n  } = {\n    activeSessionId: null,\n    busyTimestamp: 0,\n    timestamp: 0,\n    sessions: [],\n  };\n\n  @state\n  lastEndedSessionIds: string[] = [];\n\n  // TODO conference call using\n  @state\n  cachedSessions: object[] = [];\n\n  async onInit() {\n    if (!this._hasPermission) return;\n    this._deps.subscription.subscribe([subscribeEvent]);\n    this._rcCall = new RingCentralCall({\n      sdk: this._deps.client.service,\n      subscriptions: null,\n      enableSubscriptionHander: false,\n      callControlOptions: {\n        preloadDevices: false,\n        preloadSessions: false,\n        extensionInfo: {\n          ...this._deps.extensionInfo.info,\n          // TODO: add info type in 'AccountInfo'\n          // @ts-ignore\n          account: this._deps.accountInfo.info,\n        },\n      },\n      webphone: this._deps.webphone?._webphone,\n    });\n    this._rcCall.on(callEvents.NEW, (session: Session) => {\n      this._newSessionHandler(session);\n    });\n    this._rcCall.on(callEvents.WEBPHONE_INVITE, (session: WebPhoneSession) =>\n      this._onWebphoneInvite(session),\n    );\n    this._rcCall.on(\n      callEvents.WEBPHONE_INVITE_SENT,\n      (session: WebPhoneSession) => this._onWebphoneInvite(session),\n    );\n    // workaround of bug:\n    // WebRTC outbound call with wrong sequences of telephony sessions then call log section will not show\n    this._rcCall?._callControl?.on('new', this._updateSessionsHandler);\n    this._tabActive = this._deps.tabManager?.active;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n  }\n\n  onInitOnce() {\n    if (this._deps.webphone) {\n      watch(\n        this,\n        () => this._deps.webphone.connected,\n        (newValue) => {\n          if (newValue && this._deps.webphone._webphone) {\n            this._rcCall.setWebphone(this._deps.webphone._webphone);\n          }\n        },\n      );\n    }\n  }\n\n  onReset() {\n    this.resetState();\n  }\n\n  @action\n  resetState() {\n    this.data.activeSessionId = null;\n    this.data.busyTimestamp = 0;\n    this.data.timestamp = 0;\n    this.data.sessions = [];\n  }\n\n  _shouldFetch() {\n    return !this._deps.tabManager || this._deps.tabManager.active;\n  }\n\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    await this._promise;\n  }\n\n  _clearTimeout() {\n    if (this._timeoutId) clearTimeout(this._timeoutId);\n  }\n\n  _subscriptionHandler() {\n    if (!this.ready) {\n      return;\n    }\n    let { message } = this._deps.subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      telephonySessionsEndPoint.test(message.event) &&\n      message.body\n    ) {\n      message = this._checkRingOutCallDirection(message);\n      this._lastSubscriptionMessage = message;\n      if (this._rcCall) {\n        console.log('notification event:', JSON.stringify(message, null, 2));\n        this._rcCall.onNotificationEvent(message);\n      }\n    }\n  }\n\n  // workaround of PLA bug: https://jira.ringcentral.com/browse/PLA-52742, remove these code after PLA\n  // fixed this bug\n  _checkRingOutCallDirection(message: ExtensionTelephonySessionsEvent) {\n    const { body } = message;\n    const originType = body?.origin?.type;\n    if (originType === 'RingOut') {\n      const { parties } = body;\n      if (Array.isArray(parties) && parties.length) {\n        forEach((party: any) => {\n          if (\n            party.ringOutRole &&\n            party.ringOutRole === 'Initiator' &&\n            party.direction === 'Inbound'\n          ) {\n            const tempFrom = { ...party.from };\n            party.direction = 'Outbound';\n            party.from = party.to;\n            party.to = tempFrom;\n          }\n        }, parties);\n      }\n    }\n    return message;\n  }\n\n  _retry(t = this.timeToRetry) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n        if (!this._deps.tabManager || this._deps.tabManager.active) {\n          this.fetchData();\n        } else {\n          // continue retry checks in case tab becomes main tab\n          this._retry();\n        }\n      }\n    }, t);\n  }\n\n  async _fetchData() {\n    try {\n      await this._syncData();\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  _startPolling(t = this.timestamp + this.ttl + 10 - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._deps.tabManager || this._deps.tabManager?.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  async _syncData() {\n    try {\n      const activeCalls = this._deps.presence.calls;\n      await this._rcCall.loadSessions(activeCalls);\n      this.updateActiveSessions();\n      this._rcCall.sessions.forEach((session: Session) => {\n        this._newSessionHandler(session);\n      });\n    } catch (error) {\n      console.log('sync data error:', error);\n      throw error;\n    }\n  }\n\n  _updateSessionsHandler = () => {\n    this.updateActiveSessions();\n  };\n\n  @action\n  updateActiveSessions() {\n    this.data.timestamp = Date.now();\n    const callControlSessions = this._rcCall?._callControl?.sessions.map(\n      (session: TelephonySession) => {\n        return { ...session.data, party: session.party || {} };\n      },\n    );\n    this.data.sessions = callControlSessions || [];\n  }\n\n  _newSessionHandler(session: Session) {\n    session.removeListener(eventsEnum.STATUS, this._updateSessionsHandler);\n    session.removeListener(eventsEnum.MUTED, this._updateSessionsHandler);\n    session.removeListener(eventsEnum.RECORDINGS, this._updateSessionsHandler);\n    session.removeListener(\n      eventsEnum.DISCONNECTED,\n      this._updateSessionsHandler,\n    );\n    session.on(eventsEnum.STATUS, this._updateSessionsHandler);\n    session.on(eventsEnum.MUTED, this._updateSessionsHandler);\n    session.on(eventsEnum.RECORDINGS, this._updateSessionsHandler);\n    session.on(eventsEnum.DISCONNECTED, this._updateSessionsHandler);\n    // Handle the session update at the end of function to reduce the probability of empty rc call\n    // sessions\n    this._updateSessionsHandler();\n  }\n\n  @action\n  removeActiveSession() {\n    this.data.activeSessionId = null;\n  }\n\n  // count it as load (should only call on container init step)\n  @action\n  setActiveSessionId(telephonySessionId: string) {\n    if (!telephonySessionId) return;\n    this.data.activeSessionId = telephonySessionId;\n  }\n\n  @action\n  setLastEndedSessionIds(session: WebPhoneSession) {\n    /**\n     * don't add incoming call that isn't relied by current app\n     *   to end sessions. this call can be answered by other apps\n     */\n    const normalizedWebphoneSession = normalizeWebphoneSession(session);\n    if (\n      !normalizedWebphoneSession.startTime &&\n      !normalizedWebphoneSession.isToVoicemail &&\n      !normalizedWebphoneSession.isForwarded &&\n      !normalizedWebphoneSession.isReplied\n    ) {\n      return;\n    }\n    const { partyData } = normalizedWebphoneSession;\n    if (!partyData) return;\n    if (this.lastEndedSessionIds.indexOf(partyData.sessionId) === -1) {\n      this.lastEndedSessionIds = [partyData.sessionId]\n        .concat(this.lastEndedSessionIds)\n        .slice(0, 5);\n    }\n  }\n\n  _checkConnectivity() {\n    if (\n      this._deps.connectivityMonitor &&\n      this._deps.connectivityMonitor.ready &&\n      this._connectivity !== this._deps.connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._deps.connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n\n  async _checkTabActive() {\n    if (!this._deps.tabManager || !this._deps.storage || !this._enableCache) {\n      return;\n    }\n    if (this._tabActive !== this._deps.tabManager?.active) {\n      this._tabActive = this._deps.tabManager?.active;\n      if (this._deps.tabManager?.active && this._rcCall) {\n        await this._rcCall.restoreSessions(this.sessions);\n        this._rcCall.sessions.forEach((session: Session) => {\n          this._newSessionHandler(session);\n        });\n      }\n    }\n  }\n\n  _getTrackEventName(name: string) {\n    const currentPath = this._deps.routerInteraction?.currentPath;\n    const showCallLog = this.parentModule.callLogSection?.show;\n    const showNotification = this.parentModule.callLogSection?.showNotification;\n    if (showNotification) {\n      return `${name}/Call notification page`;\n    }\n    if (showCallLog) {\n      return `${name}/Call log page`;\n    }\n    if (currentPath === '/calls') {\n      return `${name}/All calls page`;\n    }\n    if (currentPath.includes('/simplifycallctrl')) {\n      return `${name}/Small call control`;\n    }\n    return name;\n  }\n\n  @action\n  setCallControlBusyTimestamp() {\n    this.data.busyTimestamp = Date.now();\n  }\n\n  @action\n  clearCallControlBusyTimestamp() {\n    this.data.busyTimestamp = 0;\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.mute),\n  ])\n  async mute(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.mute();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (error.response && !error.response._text) {\n        error.response._text = await error.response.clone().text();\n      }\n      if (conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.muteConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.unmute),\n  ])\n  async unmute(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.unmute();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (error.response && !error.response._text) {\n        error.response._text = await error.response.clone().text();\n      }\n      if (conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.unMuteConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  async transferUnmuteHandler(telephonySessionId: string) {\n    try {\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      if (session?.telephonySession?.party?.muted) {\n        await session.unmute();\n      }\n    } catch (error) {\n      // https://jira.ringcentral.com/browse/NTP-1308\n      // Unmute before transfer due to we can not sync the mute status after transfer.\n    }\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.record),\n  ])\n  async startRecord(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      await session.startRecord({ recordingId });\n      this.clearCallControlBusyTimestamp();\n      return true;\n    } catch (error) {\n      this.clearCallControlBusyTimestamp();\n      const { errors = [] } = (await error.response.clone().json()) || {};\n      if (errors.length) {\n        for (const error of errors) {\n          console.error('record fail:', error);\n        }\n        this._deps.alert.danger({\n          message: webphoneErrors.recordError,\n          payload: {\n            errorCode: errors[0].errorCode,\n          },\n        });\n      }\n    }\n  }\n\n  getRecordingId(session: Session) {\n    const recording = session.recordings[0];\n    const recodingId = recording && recording.id;\n    return recodingId;\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.stopRecord),\n  ])\n  async stopRecord(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      await session.stopRecord({ recordingId });\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('stop record error:', error);\n      this.clearCallControlBusyTimestamp();\n      throw error;\n    }\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.hangup),\n  ])\n  async hangUp(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.hangup();\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.error('hangup error', error);\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.voicemail),\n  ])\n  async reject(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.toVoicemail();\n      if (session && session.webphoneSession) {\n        session.webphoneSession.__rc_isToVoicemail = true;\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.confirmSwitch),\n  ])\n  async switch(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      await this.transferUnmuteHandler(telephonySessionId);\n      const switchedSession = await this._rcCall.switchCall(\n        telephonySessionId,\n        {\n          homeCountryId: this._deps.regionSettings.homeCountryId,\n        },\n      );\n      this._triggerAutoMergeEvent(telephonySessionId);\n      await this._holdOtherCalls(telephonySessionId);\n      this.clearCallControlBusyTimestamp();\n      if (typeof this._onCallSwitchedFunc === 'function') {\n        this._onCallSwitchedFunc(switchedSession.sessionId);\n      }\n    } catch (error) {\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.hold),\n  ])\n  async hold(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const { webphoneSession, otherParties = [] } = session;\n      if (\n        // when call is connecting or in voicemail then call control's Hold API will not work\n        // so use webphone hold here\n        (session.direction === callDirection.outbound &&\n          (otherParties[0]?.status.code === PartyStatusCode.proceeding ||\n            otherParties[0]?.status.code === PartyStatusCode.voicemail)) ||\n        isAtMainNumberPromptToneStage(session)\n      ) {\n        await webphoneSession.hold();\n      } else {\n        await session.hold();\n      }\n      if (webphoneSession && webphoneSession.__rc_callStatus) {\n        webphoneSession.__rc_callStatus = sessionStatus.onHold;\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (error.response && !error.response._text) {\n        error.response._text = await error.response.clone().text();\n      }\n      if (conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.holdConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.unhold),\n  ])\n  async unhold(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await this._holdOtherCalls(telephonySessionId);\n      await session.unhold();\n      const { webphoneSession } = session;\n      if (webphoneSession && webphoneSession.__rc_callStatus) {\n        webphoneSession.__rc_callStatus = sessionStatus.connected;\n      }\n      this.setActiveSessionId(telephonySessionId);\n      this._addTrackToActiveSession();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (error.response && !error.response._text) {\n        error.response._text = await error.response.clone().text();\n      }\n      if (conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.unHoldConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({\n          message: callControlError.generalError,\n        });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.transfer)\n  async transfer(transferNumber: string, telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const validatedResult = await this._deps.numberValidate.validateNumbers([\n        transferNumber,\n      ]);\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach(async (error) => {\n          const isHAError: boolean = await this._deps.availabilityMonitor?.checkIfHAError(\n            error,\n          );\n          if (!isHAError) {\n            // TODO: fix `callErrors` type\n            this._deps.alert.warning({\n              message: (callErrors as any)[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          }\n        });\n        return;\n      }\n      // TODO: fix `validatedResult` type in `numberValidate` module.\n      const validPhoneNumber =\n        (validatedResult as any).numbers[0] &&\n        (validatedResult as any).numbers[0].e164;\n      let phoneNumber = validPhoneNumber;\n      if (validPhoneNumber.indexOf('+') === -1) {\n        phoneNumber = [\n          this._deps.accountInfo.mainCompanyNumber,\n          validPhoneNumber,\n        ].join('*');\n      }\n      session.transfer(phoneNumber);\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  // Incomplete Implementation?\n  async flip(flipValue: string, telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      await session.flip({ callFlipId: flipValue });\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.error('flip error', error);\n      this.clearCallControlBusyTimestamp();\n      throw error;\n    }\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.confirmForward),\n  ])\n  async forward(forwardNumber: string, telephonySessionId: string) {\n    const { regionSettings, brand } = this._deps;\n    const session = this._rcCall.sessions.find((s: Session) => {\n      return s.id === telephonySessionId;\n    });\n    if (!session) {\n      return false;\n    }\n    try {\n      let validatedResult;\n      let validPhoneNumber;\n      if (!this._permissionCheck) {\n        validatedResult = validateNumbers(\n          [forwardNumber],\n          regionSettings,\n          brand.id,\n        );\n        validPhoneNumber = validatedResult[0];\n      } else {\n        validatedResult = await this._deps.numberValidate.validateNumbers([\n          forwardNumber,\n        ]);\n        if (!validatedResult.result) {\n          validatedResult.errors.forEach((error) => {\n            this._deps.alert.warning({\n              message: (callErrors as any)[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          });\n          return false;\n        }\n        validPhoneNumber =\n          (validatedResult as any).numbers[0] &&\n          (validatedResult as any).numbers[0].e164;\n      }\n      if (session && session.webphoneSession) {\n        session.webphoneSession.__rc_isForwarded = true;\n      }\n\n      await session.forward(validPhoneNumber, this.acceptOptions);\n      this._deps.alert.success({\n        message: callControlError.forwardSuccess,\n      });\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      return true;\n    } catch (e) {\n      console.error(e);\n      this._deps.alert.warning({\n        message: webphoneErrors.forwardError,\n      });\n      return false;\n    }\n  }\n\n  // DTMF handing by webphone session temporary, due to rc call session doesn't support currently\n  async sendDTMF(dtmfValue: string, telephonySessionId: string) {\n    try {\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      // TODO: using rc call session\n      const { webphoneSession } = session;\n      if (webphoneSession) {\n        await webphoneSession.dtmf(dtmfValue, 100);\n      }\n    } catch (error) {\n      console.log('send dtmf error', error);\n      throw error;\n    }\n  }\n\n  _onWebphoneInvite(session: WebPhoneSession) {\n    const webphoneSession = session;\n    if (!webphoneSession) return;\n    if (!webphoneSession.__rc_creationTime) {\n      webphoneSession.__rc_creationTime = Date.now();\n    }\n    if (!webphoneSession.__rc_lastActiveTime) {\n      webphoneSession.__rc_lastActiveTime = Date.now();\n    }\n    webphoneSession.on('terminated', () => {\n      console.log('Call Event: terminated');\n      // this.setLastEndedSessionIds(webphoneSession);\n      const { telephonySessionId } =\n        this.rcCallSessions.find(\n          (s: Session) => s.webphoneSession === webphoneSession,\n        ) || {};\n      this._setActiveSessionIdFromOnHoldCalls(telephonySessionId);\n    });\n    webphoneSession.on('accepted', () => {\n      const { telephonySessionId } =\n        this.rcCallSessions.find(\n          (s: Session) => s.webphoneSession === webphoneSession,\n        ) || {};\n      if (this._autoMergeWebphoneSessionsMap.get(webphoneSession)) {\n        this._autoMergeWebphoneSessionsMap.delete(webphoneSession);\n      } else {\n        this.setActiveSessionId(telephonySessionId);\n      }\n      this.updateActiveSessions();\n    });\n  }\n\n  /**\n   *if current call is terminated, then pick the first onhold call as active current call;\n   *\n   * @param {Session} session\n   * @memberof ActiveCallControl\n   */\n  _setActiveSessionIdFromOnHoldCalls(telephonySessionId: string) {\n    if (!telephonySessionId) return;\n    if (this.activeSessionId === telephonySessionId) {\n      const onHoldSessions: Session[] = sort(\n        (l, r) =>\n          sortByCreationTimeDesc(\n            normalizeWebphoneSession(l.webphoneSession),\n            normalizeWebphoneSession(r.webphoneSession),\n          ),\n        filter(\n          (s: Session) => isHolding(s) && !!s.webphoneSession,\n          this.rcCallSessions,\n        ),\n      );\n      if (onHoldSessions.length) {\n        this.setActiveSessionId(onHoldSessions[0].telephonySessionId);\n      }\n    }\n  }\n\n  async _holdOtherCalls(telephonySessionId?: string) {\n    const otherSessions = filter((s: Session) => {\n      return (\n        s.telephonySessionId !== telephonySessionId &&\n        s.status === PartyStatusCode.answered &&\n        s.webphoneSession &&\n        !s.webphoneSession.localHold\n      );\n    }, this._rcCall.sessions);\n    if (!otherSessions.length) {\n      return;\n    }\n    const holdOtherSessions = otherSessions.map(async (session) => {\n      const { webphoneSession, otherParties = [] } = session;\n      try {\n        if (\n          // when call is connecting or in voicemail then call control's Hold API will not work\n          // so use webphone hold here\n          (session.direction === callDirection.outbound &&\n            (otherParties[0]?.status.code === PartyStatusCode.proceeding ||\n              otherParties[0]?.status.code === PartyStatusCode.voicemail)) ||\n          isAtMainNumberPromptToneStage(session)\n        ) {\n          await webphoneSession.hold();\n        } else {\n          await session.hold();\n        }\n        if (webphoneSession && webphoneSession.__rc_callStatus) {\n          webphoneSession.__rc_callStatus = sessionStatus.onHold;\n        }\n      } catch (error) {\n        console.log('Hold call fail.', error);\n      }\n    });\n    await Promise.all(holdOtherSessions);\n  }\n\n  async _answer(telephonySessionId: string) {\n    this._triggerAutoMergeEvent(telephonySessionId);\n    this.setCallControlBusyTimestamp();\n    const session = this._rcCall.sessions.find((s: Session) => {\n      return s.id === telephonySessionId;\n    });\n    await this._holdOtherCalls(telephonySessionId);\n    const { webphoneSession } = session;\n    const deviceId = this._deps.webphone?.device?.id;\n    await session.answer({ deviceId });\n    if (webphoneSession && webphoneSession.__rc_callStatus) {\n      webphoneSession.__rc_callStatus = sessionStatus.connected;\n    }\n    this.clearCallControlBusyTimestamp();\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.answer),\n  ])\n  async answer(telephonySessionId: string) {\n    try {\n      await this._answer(telephonySessionId);\n    } catch (error) {\n      console.log('answer failed.');\n    }\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.holdAndAnswer),\n  ])\n  async answerAndHold(telephonySessionId: string) {\n    // currently, the logic is same as answer\n    try {\n      await this._answer(telephonySessionId);\n    } catch (error) {\n      console.log('answer hold failed.', error);\n    }\n  }\n\n  /**\n   * ignore an incoming WebRTC call, after action executed, call will be ignored at current\n   * device and move to \"calls on other device\" section. This call still can be answered at other\n   * device\n   * @param {string} telephonySessionId\n   * @memberof ActiveCallControl\n   */\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.ignore),\n  ])\n  async ignore(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      const { webphoneSession } = session;\n      await webphoneSession.reject();\n      // hack for update sessions, then incoming call log page can re-render\n      setTimeout(() => this.updateActiveSessions(), 0);\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('ignore failed.', error);\n    }\n  }\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.endAndAnswer),\n  ])\n  async answerAndEnd(telephonySessionId: string) {\n    try {\n      if (this.busy) return;\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      const currentActiveCall = this._rcCall.sessions.find(\n        (s: Session) =>\n          s.id !== telephonySessionId &&\n          s.webphoneSession &&\n          s.status === PartyStatusCode.answered,\n      );\n      if (currentActiveCall) {\n        await currentActiveCall.hangup();\n      }\n      const deviceId = this._deps.webphone?.device?.id;\n      await session.answer({ deviceId });\n      const { webphoneSession } = session;\n      if (webphoneSession && webphoneSession.__rc_callStatus) {\n        webphoneSession.__rc_callStatus = sessionStatus.connected;\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('answer and end fail.');\n      console.error(error);\n    }\n  }\n\n  async makeCall(params: ModuleMakeCallParams) {\n    try {\n      if (\n        params.toNumber.length > 6 &&\n        (!this._deps.availabilityMonitor ||\n          !this._deps.availabilityMonitor.isVoIPOnlyMode)\n      ) {\n        const phoneLines = await this._fetchDL();\n        if (phoneLines.length === 0) {\n          this._deps.alert.warning({\n            message: webphoneErrors.noOutboundCallWithoutDL,\n          });\n          return null;\n        }\n      }\n      await this._holdOtherCalls();\n      const sdkMakeCallParams: MakeCallParams = {\n        // type 'callControl' not support webphone's sip device currently.\n        type: 'webphone',\n        toNumber: params.toNumber,\n        fromNumber: params.fromNumber,\n        homeCountryId: params.homeCountryId,\n      };\n      const session = await this._rcCall.makeCall(sdkMakeCallParams);\n      this._triggerAutoMergeEvent();\n      return session;\n    } catch (error) {\n      console.log('make call fail.', error);\n    }\n  }\n\n  async _fetchDL() {\n    const response = await this._deps.client\n      .account()\n      .extension()\n      .device()\n      .list();\n    const devices = response.records;\n    let phoneLines: any[] = [];\n    devices.forEach((device) => {\n      // wrong type of phoneLines, temporary treat it as any\n      if (!device.phoneLines || (device.phoneLines as any).length === 0) {\n        return;\n      }\n      phoneLines = phoneLines.concat(device.phoneLines);\n    });\n    return phoneLines;\n  }\n\n  getActiveSession(telephonySessionId: string) {\n    return this.activeSessions[telephonySessionId];\n  }\n\n  getRcCallSession(telephoneSessionId: string) {\n    return this.rcCallSessions.find(\n      (session: Session) => session.telephonySessionId === telephoneSessionId,\n    );\n  }\n\n  @computed(({ activeSessionId, activeSessions }: ActiveCallControl) => [\n    activeSessionId,\n    activeSessions,\n  ])\n  get activeSession() {\n    return this.getActiveSession(this.activeSessionId);\n  }\n\n  @computed((that: ActiveCallControl) => [that.sessions, that.timestamp])\n  get activeSessions() {\n    // TODO: add calls type in callMonitor modules\n    const reducer = (accumulator: any, session: any) => {\n      const { id } = session;\n      accumulator[id] = normalizeSession({ session });\n      return accumulator;\n    };\n    return this.sessions.reduce(reducer, {});\n  }\n\n  @computed((that: ActiveCallControl) => [that._deps.presence.calls])\n  get sessionIdToTelephonySessionIdMapping() {\n    // TODO: add calls type in callMonitor modules\n    const reducer = (accumulator: any, call: any) => {\n      const { telephonySessionId, sessionId } = call;\n      accumulator[sessionId] = telephonySessionId;\n      return accumulator;\n    };\n    return this._deps.presence.calls.reduce(reducer, {});\n  }\n\n  /**\n   * Mitigation strategy for avoiding 404/409 on call control endpoings.\n   * This should gradually move towards per session controls rather than\n   * a global busy timeout.\n   */\n  get busy() {\n    return Date.now() - this.busyTimestamp < DEFAULT_BUSY_TIMEOUT;\n  }\n\n  get _hasPermission() {\n    return this._deps.rolesAndPermissions.ringoutEnabled;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get acceptOptions() {\n    return {\n      sessionDescriptionHandlerOptions: {\n        constraints: {\n          audio: {\n            deviceId: this._deps.audioSettings?.inputDeviceId,\n          },\n          video: false,\n        },\n      },\n    };\n  }\n\n  get hasCallInRecording() {\n    return this.sessions.some((session) => isRecording(session));\n  }\n\n  get rcCallSessions() {\n    // workaround of bug:\n    // switch an inbound call then call direction will change to outbound\n    return filter((session: Session) => {\n      const { party, otherParties, direction, status } = session;\n      if (\n        direction === callDirection.outbound &&\n        status !== PartyStatusCode.disconnected\n      ) {\n        const inboundSwitchedParty = getInboundSwitchedParty(otherParties);\n        if (inboundSwitchedParty) {\n          party.direction = inboundSwitchedParty.direction;\n          party.to = inboundSwitchedParty.to;\n          party.from = inboundSwitchedParty.from;\n        }\n      }\n      return session.status !== PartyStatusCode.disconnected;\n    }, this._rcCall?.sessions || []);\n  }\n\n  get activeSessionId() {\n    return this.data.activeSessionId;\n  }\n\n  get busyTimestamp() {\n    return this.data.busyTimestamp;\n  }\n\n  get timestamp() {\n    return this.data.timestamp;\n  }\n\n  get sessions() {\n    return this.data.sessions;\n  }\n\n  @track(trackEvents.dialpadOpen)\n  dialpadOpenTrack() {}\n\n  @track(trackEvents.dialpadClose)\n  dialpadCloseTrack() {}\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.clickTransfer),\n  ])\n  clickTransferTrack() {}\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.forward),\n  ])\n  clickForwardTrack() {}\n\n  @track((that: ActiveCallControl) => [\n    that._getTrackEventName(trackEvents.switch),\n  ])\n  clickSwitchTrack() {}\n}\n"],"file":"ActiveCallControl.js"}