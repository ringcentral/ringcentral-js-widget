{"version":3,"sources":["modules/ActiveCallControlV2/ActiveCallControl.ts"],"names":["DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","DEFAULT_BUSY_TIMEOUT","telephonySessionsEndPoint","subscribeEvent","subscriptionFilters","telephonySessions","ActiveCallControl","name","deps","dep","optional","trackEvents","mute","unmute","hangup","hold","unhold","transfer","activeSessionId","activeSessions","that","sessions","timestamp","_deps","presence","calls","enableCache","activeCallControlOptions","storageKey","_ttl","_timeToRetry","_polling","_enableCache","_promise","_rcCall","_tabActive","_connectivity","_onCallEndFunc","_timeoutId","_lastSubscriptionMessage","_permissionCheck","_autoMergeSignCallIdKey","_autoMergeCallsKey","_enableAutoSwitchFeature","_updateSessionsHandler","updateActiveSessions","ttl","timeToRetry","polling","permissionCheck","enableAutoSwitchFeature","prefix","ready","_hasPermission","_subscriptionHandler","_checkConnectivity","_checkTabActive","_createOtherInstanceListener","tabManager","window","addEventListener","e","_onStorageChangeEvent","key","_triggerCurrentClientAutoMerge","_autoMergeCallsHandler","JSON","parse","newValue","telephoneSessionId","ids","rcCallSessions","filter","s","webphoneSession","telephonySessionId","map","id","data","length","localStorage","setItem","stringify","err","console","log","active","client","service","platform","get","detailedPresence","response","json","activeCalls","callsList","find","item","telephonySession","activeCall","call","forEach","switchSession","switchCallFromActiveCall","once","_addTrackToActiveSession","activeRCCallSession","webphone","_remoteVideo","_localVideo","addTrack","subscription","subscribe","RingCentralCall","sdk","subscriptions","enableSubscriptionHander","callControlOptions","preloadDevices","preloadSessions","extensionInfo","info","account","accountInfo","_webphone","on","callEvents","NEW","session","_newSessionHandler","WEBPHONE_INVITE","_onWebphoneInvite","WEBPHONE_INVITE_SENT","_shouldFetch","fetchData","_retry","_startPolling","connected","setWebphone","resetState","busyTimestamp","_fetchData","clearTimeout","message","test","event","body","_checkRingOutCallDirection","onNotificationEvent","originType","origin","type","parties","Array","isArray","party","ringOutRole","direction","tempFrom","from","to","t","_clearTimeout","setTimeout","Date","now","_syncData","loadSessions","callControlSessions","_callControl","removeListener","eventsEnum","STATUS","MUTED","RECORDINGS","DISCONNECTED","normalizedWebphoneSession","startTime","isToVoicemail","isForwarded","isReplied","partyData","lastEndedSessionIds","indexOf","sessionId","concat","slice","connectivityMonitor","connectivity","storage","restoreSessions","setCallControlBusyTimestamp","clearCallControlBusyTimestamp","alert","warning","callControlError","muteConflictError","availabilityMonitor","checkIfHAError","generalError","unMuteConflictError","recordingId","getRecordingId","startRecord","recording","recordings","recodingId","stopRecord","error","toVoicemail","__rc_isToVoicemail","_triggerAutoMergeEvent","switchCall","_holdOtherCalls","__rc_callStatus","sessionStatus","onHold","holdConflictError","setActiveSessionId","unHoldConflictError","transferNumber","numberValidate","validateNumbers","validatedResult","result","errors","isHAError","callErrors","payload","phoneNumber","validPhoneNumber","numbers","e164","mainCompanyNumber","join","flipValue","flip","callFlipId","forwardNumber","regionSettings","brand","__rc_isForwarded","forward","acceptOptions","success","forwardSuccess","webphoneErrors","forwardError","dtmfValue","dtmf","__rc_creationTime","__rc_lastActiveTime","_setActiveSessionIdFromOnHoldCalls","onHoldSessions","l","r","otherSessions","status","PartyStatusCode","answered","localHold","holdOtherSessions","Promise","all","deviceId","device","answer","reject","busy","currentActiveCall","params","toNumber","isVoIPOnlyMode","_fetchDL","phoneLines","noOutboundCallWithoutDL","sdkMakeCallParams","fromNumber","homeCountryId","makeCall","extension","list","devices","records","getActiveSession","reducer","accumulator","reduce","rolesAndPermissions","ringoutEnabled","sessionDescriptionHandlerOptions","constraints","audio","audioSettings","inputDeviceId","video","some","RcModuleV2","state","action"],"mappings":"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","sourcesContent":["import {\n  RcModuleV2,\n  state,\n  action,\n  storage,\n  computed,\n  track,\n  watch,\n} from '@ringcentral-integration/core';\nimport {\n  RingCentralCall,\n  events as callEvents,\n  MakeCallParams,\n  ActiveCallInfo,\n} from 'ringcentral-call';\nimport { Session, events as eventsEnum } from 'ringcentral-call/lib/Session';\nimport {\n  Session as TelephonySession,\n  PartyStatusCode,\n} from 'ringcentral-call-control/lib/Session';\nimport { WebPhoneSession } from 'ringcentral-web-phone/lib/session';\nimport { filter, sort, forEach } from 'ramda';\nimport { v4 as uuidV4 } from 'uuid';\nimport {\n  ExtensionTelephonySessionsEvent,\n  TelephonySessionsEventPartyInfo,\n} from '@rc-ex/core/definitions';\nimport { Module } from '../../lib/di';\n// eslint-disable-next-line import/no-named-as-default\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport callErrors from '../Call/callErrors';\nimport {\n  normalizeSession,\n  conflictError,\n  isRecording,\n  isHolding,\n  ActiveCallControlSessionData,\n  isRinging,\n} from './helpers';\nimport { trackEvents } from '../Analytics';\nimport callControlError from '../ActiveCallControl/callControlError';\nimport { Deps, ModuleMakeCallParams } from './ActiveCallControl.interface';\nimport validateNumbers from '../../lib/validateNumbers';\nimport { webphoneErrors } from '../Webphone/webphoneErrors';\nimport {\n  normalizeSession as normalizeWebphoneSession,\n  sortByCreationTimeDesc,\n} from '../Webphone/webphoneHelper';\nimport { sessionStatus } from '../Webphone/sessionStatus';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst DEFAULT_BUSY_TIMEOUT = 3 * 1000;\nconst telephonySessionsEndPoint = /\\/telephony\\/sessions$/;\nconst subscribeEvent = subscriptionFilters.telephonySessions;\n\n@Module({\n  name: 'ActiveCallControl',\n  deps: [\n    'Auth',\n    'Alert',\n    'Brand',\n    'Client',\n    'Presence',\n    'AccountInfo',\n    'Subscription',\n    'ExtensionInfo',\n    'NumberValidate',\n    'RegionSettings',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    { dep: 'Prefix', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'Webphone', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'AudioSettings', optional: true },\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'ActiveCallControlOptions', optional: true },\n  ],\n})\nexport class ActiveCallControl extends RcModuleV2<Deps> {\n  _ttl: number;\n  _timeToRetry: number;\n  _polling: boolean;\n  _enableCache: boolean;\n  private _promise: Promise<void> = null;\n  private _rcCall: RingCentralCall;\n  private _tabActive: boolean;\n  private _connectivity: boolean;\n  private _onCallEndFunc: () => void;\n  private _timeoutId: number;\n  private _lastSubscriptionMessage: string;\n  private _permissionCheck: boolean;\n  private _autoMergeSignCallIdKey: string;\n  private _autoMergeCallsKey: string;\n  private _enableAutoSwitchFeature: boolean;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: deps.activeCallControlOptions?.enableCache ?? true,\n      storageKey: 'activeCallControl',\n    });\n    const { activeCallControlOptions } = this._deps;\n    this._ttl = activeCallControlOptions?.ttl ?? DEFAULT_TTL;\n    this._timeToRetry =\n      activeCallControlOptions?.timeToRetry ?? DEFAULT_TIME_TO_RETRY;\n    this._polling = activeCallControlOptions?.polling ?? false;\n    this._enableCache = activeCallControlOptions?.enableCache ?? true;\n    this._promise = null;\n    this._rcCall = null;\n    this._permissionCheck = activeCallControlOptions?.permissionCheck ?? true;\n    this._enableAutoSwitchFeature =\n      activeCallControlOptions?.enableAutoSwitchFeature ?? false;\n    this._autoMergeSignCallIdKey = `${deps.prefix}-auto-merge-sign-call-id-key`;\n    this._autoMergeCallsKey = `${deps.prefix}-auto-merge-calls-key`;\n  }\n\n  async onStateChange() {\n    if (this.ready && this._hasPermission) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n      await this._checkTabActive();\n    }\n  }\n\n  async initModule() {\n    this._createOtherInstanceListener();\n    await super.initModule();\n  }\n\n  _createOtherInstanceListener() {\n    if (!this._deps.tabManager || !this._enableAutoSwitchFeature) {\n      return;\n    }\n    window.addEventListener('storage', (e) => {\n      this._onStorageChangeEvent(e);\n    });\n  }\n\n  _onStorageChangeEvent(e: StorageEvent) {\n    switch (e.key) {\n      case this._autoMergeSignCallIdKey:\n        this._triggerCurrentClientAutoMerge(e);\n        break;\n      case this._autoMergeCallsKey:\n        this._autoMergeCallsHandler(e);\n        break;\n      default:\n        break;\n    }\n  }\n\n  _triggerCurrentClientAutoMerge(e: StorageEvent) {\n    try {\n      const { telephoneSessionId }: { telephoneSessionId: string } = JSON.parse(\n        e.newValue,\n      );\n      const ids = this.rcCallSessions\n        .filter(\n          (s: Session) =>\n            !isRinging(s) &&\n            !!s.webphoneSession &&\n            s.telephonySessionId !== telephoneSessionId,\n        )\n        .map((s: Session) => s.telephonySessionId);\n      const id = uuidV4();\n      const data = { id, ids };\n      if (ids.length) {\n        localStorage.setItem(this._autoMergeCallsKey, JSON.stringify(data));\n      }\n    } catch (err) {\n      console.log('AutoMerge sign event parse error');\n    }\n  }\n\n  async _autoMergeCallsHandler(e: StorageEvent) {\n    if (!this._deps.tabManager.active) return;\n\n    try {\n      const { ids }: { ids: string[] } = JSON.parse(e.newValue);\n      const response = await this._deps.client.service\n        .platform()\n        .get(subscriptionFilters.detailedPresence);\n      const data = await response.json();\n      const activeCalls: ActiveCallInfo[] = data.activeCalls;\n      const callsList = ids\n        // filter calls which are already in current instance.\n        .filter((id) =>\n          this.rcCallSessions.find(\n            (item) => item.telephonySessionId === id && !!item.telephonySession,\n          ),\n        )\n        // transfer id to ActiveCallInfo.\n        .map((telephonySessionId: string) => {\n          const activeCall = activeCalls.find(\n            (call) => call.telephonySessionId === telephonySessionId,\n          );\n          if (!activeCall)\n            console.log(\n              `Auto Switch failed with telephonySessionId ${telephonySessionId}`,\n            );\n          return activeCall;\n        })\n        .filter((item: any) => !!item);\n\n      if (callsList.length) {\n        callsList.forEach((activeCall: ActiveCallInfo) => {\n          const switchSession = this._rcCall.switchCallFromActiveCall(\n            activeCall,\n          );\n          switchSession.webphoneSession.once('accepted', async () => {\n            await switchSession.webphoneSession.hold();\n            this._addTrackToActiveSession();\n          });\n        });\n      }\n    } catch (err) {\n      console.log(err);\n      console.log('auto merge calls from other tabs failed');\n    }\n  }\n\n  _triggerAutoMergeEvent(telephoneSessionId?: string) {\n    if (!this._deps.tabManager || !this._enableAutoSwitchFeature) return;\n\n    const id = uuidV4();\n    const data = {\n      id,\n      telephoneSessionId,\n    };\n    localStorage.setItem(this._autoMergeSignCallIdKey, JSON.stringify(data));\n  }\n\n  _addTrackToActiveSession() {\n    const telephonySessionId = this.activeSessionId;\n    const activeRCCallSession = this.rcCallSessions.find(\n      (s) => s.telephonySessionId === telephonySessionId,\n    );\n    if (activeRCCallSession && activeRCCallSession.webphoneSession) {\n      const { _remoteVideo, _localVideo } = this._deps.webphone;\n      activeRCCallSession.webphoneSession.addTrack(_remoteVideo, _localVideo);\n    }\n  }\n\n  get activeSessionId() {\n    return this.data.activeSessionId;\n  }\n\n  get busyTimestamp() {\n    return this.data.busyTimestamp;\n  }\n\n  get timestamp() {\n    return this.data.timestamp;\n  }\n\n  get sessions() {\n    return this.data.sessions;\n  }\n\n  @storage\n  @state\n  data: {\n    activeSessionId: string;\n    busyTimestamp: number;\n    timestamp: number;\n    sessions: ActiveCallControlSessionData[];\n  } = {\n    activeSessionId: null,\n    busyTimestamp: 0,\n    timestamp: 0,\n    sessions: [],\n  };\n\n  @state\n  lastEndedSessionIds: string[] = [];\n\n  // TODO conference call using\n  @state\n  cachedSessions: object[] = [];\n\n  async onInit() {\n    if (!this._hasPermission) return;\n    this._deps.subscription.subscribe([subscribeEvent]);\n    this._rcCall = new RingCentralCall({\n      sdk: this._deps.client.service,\n      subscriptions: null,\n      enableSubscriptionHander: false,\n      callControlOptions: {\n        preloadDevices: false,\n        preloadSessions: false,\n        extensionInfo: {\n          ...this._deps.extensionInfo.info,\n          // TODO: add info type in 'AccountInfo'\n          // @ts-ignore\n          account: this._deps.accountInfo.info,\n        },\n      },\n      webphone: this._deps.webphone?._webphone,\n    });\n    this._rcCall.on(callEvents.NEW, (session: Session) => {\n      this._newSessionHandler(session);\n    });\n    this._rcCall.on(callEvents.WEBPHONE_INVITE, (session: WebPhoneSession) =>\n      this._onWebphoneInvite(session),\n    );\n    this._rcCall.on(\n      callEvents.WEBPHONE_INVITE_SENT,\n      (session: WebPhoneSession) => this._onWebphoneInvite(session),\n    );\n    this._tabActive = this._deps.tabManager?.active;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    if (this._deps.webphone) {\n      watch(\n        this,\n        () => this._deps.webphone.connected,\n        (newValue) => {\n          if (newValue && this._deps.webphone._webphone) {\n            this._rcCall.setWebphone(this._deps.webphone._webphone);\n          }\n        },\n      );\n    }\n  }\n\n  onReset() {\n    this.resetState();\n  }\n\n  @action\n  resetState() {\n    this.data.activeSessionId = null;\n    this.data.busyTimestamp = 0;\n    this.data.timestamp = 0;\n    this.data.sessions = [];\n  }\n\n  _shouldFetch() {\n    return !this._deps.tabManager || this._deps.tabManager.active;\n  }\n\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    await this._promise;\n  }\n\n  _clearTimeout() {\n    if (this._timeoutId) clearTimeout(this._timeoutId);\n  }\n\n  _subscriptionHandler() {\n    if (!this.ready) {\n      return;\n    }\n    let { message } = this._deps.subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      telephonySessionsEndPoint.test(message.event) &&\n      message.body\n    ) {\n      message = this._checkRingOutCallDirection(message);\n      this._lastSubscriptionMessage = message;\n      if (this._rcCall) {\n        this._rcCall.onNotificationEvent(message);\n      }\n    }\n  }\n\n  // workaround of PLA bug: https://jira.ringcentral.com/browse/PLA-52742, remove these code after PLA\n  // fixed this bug\n  _checkRingOutCallDirection(message: ExtensionTelephonySessionsEvent) {\n    const { body } = message;\n    const originType = body?.origin?.type;\n    if (originType === 'RingOut') {\n      const { parties } = body;\n      if (Array.isArray(parties) && parties.length) {\n        forEach((party: any) => {\n          if (\n            party.ringOutRole &&\n            party.ringOutRole === 'Initiator' &&\n            party.direction === 'Inbound'\n          ) {\n            const tempFrom = { ...party.from };\n            party.direction = 'Outbound';\n            party.from = party.to;\n            party.to = tempFrom;\n          }\n        }, parties);\n      }\n    }\n    return message;\n  }\n\n  _retry(t = this.timeToRetry) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n        if (!this._deps.tabManager || this._deps.tabManager.active) {\n          this.fetchData();\n        } else {\n          // continue retry checks in case tab becomes main tab\n          this._retry();\n        }\n      }\n    }, t);\n  }\n\n  async _fetchData() {\n    try {\n      await this._syncData();\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  _startPolling(t = this.timestamp + this.ttl + 10 - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._deps.tabManager || this._deps.tabManager?.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  async _syncData() {\n    try {\n      const activeCalls = this._deps.presence.calls;\n      await this._rcCall.loadSessions(activeCalls);\n      this.updateActiveSessions();\n      this._rcCall.sessions.forEach((session: Session) => {\n        this._newSessionHandler(session);\n      });\n    } catch (error) {\n      console.log('sync data error:', error);\n      throw error;\n    }\n  }\n\n  _updateSessionsHandler = () => {\n    this.updateActiveSessions();\n  };\n\n  @action\n  updateActiveSessions() {\n    this.data.timestamp = Date.now();\n    const callControlSessions = this._rcCall?._callControl?.sessions.map(\n      (session: TelephonySession) => {\n        return { ...session.data, party: session.party || {} };\n      },\n    );\n    this.data.sessions = callControlSessions || [];\n  }\n\n  _newSessionHandler(session: Session) {\n    session.removeListener(eventsEnum.STATUS, this._updateSessionsHandler);\n    session.removeListener(eventsEnum.MUTED, this._updateSessionsHandler);\n    session.removeListener(eventsEnum.RECORDINGS, this._updateSessionsHandler);\n    session.removeListener(\n      eventsEnum.DISCONNECTED,\n      this._updateSessionsHandler,\n    );\n    session.on(eventsEnum.STATUS, this._updateSessionsHandler);\n    session.on(eventsEnum.MUTED, this._updateSessionsHandler);\n    session.on(eventsEnum.RECORDINGS, this._updateSessionsHandler);\n    session.on(eventsEnum.DISCONNECTED, this._updateSessionsHandler);\n    // Handle the session update at the end of function to reduce the probability of empty rc call\n    // sessions\n    this._updateSessionsHandler();\n  }\n\n  @action\n  removeActiveSession() {\n    this.data.activeSessionId = null;\n  }\n\n  // count it as load (should only call on container init step)\n  @action\n  setActiveSessionId(telephonySessionId: string) {\n    if (!telephonySessionId) return;\n    this.data.activeSessionId = telephonySessionId;\n  }\n\n  @action\n  setLastEndedSessionIds(session: WebPhoneSession) {\n    /**\n     * don't add incoming call that isn't relied by current app\n     *   to end sessions. this call can be answered by other apps\n     */\n    const normalizedWebphoneSession = normalizeWebphoneSession(session);\n    if (\n      !normalizedWebphoneSession.startTime &&\n      !normalizedWebphoneSession.isToVoicemail &&\n      !normalizedWebphoneSession.isForwarded &&\n      !normalizedWebphoneSession.isReplied\n    ) {\n      return;\n    }\n    const { partyData } = normalizedWebphoneSession;\n    if (!partyData) return;\n    if (this.lastEndedSessionIds.indexOf(partyData.sessionId) === -1) {\n      this.lastEndedSessionIds = [partyData.sessionId]\n        .concat(this.lastEndedSessionIds)\n        .slice(0, 5);\n    }\n  }\n\n  _checkConnectivity() {\n    if (\n      this._deps.connectivityMonitor &&\n      this._deps.connectivityMonitor.ready &&\n      this._connectivity !== this._deps.connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._deps.connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n\n  async _checkTabActive() {\n    if (!this._deps.tabManager || !this._deps.storage || !this._enableCache) {\n      return;\n    }\n    if (this._tabActive !== this._deps.tabManager?.active) {\n      this._tabActive = this._deps.tabManager?.active;\n      if (this._deps.tabManager?.active && this._rcCall) {\n        await this._rcCall.restoreSessions(this.sessions);\n        this._rcCall.sessions.forEach((session: Session) => {\n          this._newSessionHandler(session);\n        });\n      }\n    }\n  }\n\n  @action\n  setCallControlBusyTimestamp() {\n    this.data.busyTimestamp = Date.now();\n  }\n\n  @action\n  clearCallControlBusyTimestamp() {\n    this.data.busyTimestamp = 0;\n  }\n\n  @track(trackEvents.mute)\n  async mute(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.mute();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.muteConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.unmute)\n  async unmute(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.unmute();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.unMuteConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  async startRecord(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      await session.startRecord({ recordingId });\n      this.clearCallControlBusyTimestamp();\n      return true;\n    } catch (error) {\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  getRecordingId(session: Session) {\n    const recording = session.recordings[0];\n    const recodingId = recording && recording.id;\n    return recodingId;\n  }\n\n  async stopRecord(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      await session.stopRecord({ recordingId });\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('stop record error:', error);\n      this.clearCallControlBusyTimestamp();\n      throw error;\n    }\n  }\n\n  @track(trackEvents.hangup)\n  async hangUp(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.hangup();\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.error('hangup error', error);\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  async reject(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.toVoicemail();\n      if (session && session.webphoneSession) {\n        session.webphoneSession.__rc_isToVoicemail = true;\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  async switch(telephonySessionId: string) {\n    try {\n      this._triggerAutoMergeEvent(telephonySessionId);\n\n      this.setCallControlBusyTimestamp();\n      await this._rcCall.switchCall(telephonySessionId);\n      await this._holdOtherCalls(telephonySessionId);\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.hold)\n  async hold(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.hold();\n      const { webphoneSession } = session;\n      if (webphoneSession && webphoneSession.__rc_callStatus) {\n        webphoneSession.__rc_callStatus = sessionStatus.onHold;\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.holdConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.unhold)\n  async unhold(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await this._holdOtherCalls(telephonySessionId);\n      await session.unhold();\n      const { webphoneSession } = session;\n      if (webphoneSession && webphoneSession.__rc_callStatus) {\n        webphoneSession.__rc_callStatus = sessionStatus.connected;\n      }\n      this.setActiveSessionId(telephonySessionId);\n      this._addTrackToActiveSession();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.unHoldConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({\n          message: callControlError.generalError,\n        });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.transfer)\n  async transfer(transferNumber: string, telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const validatedResult = await this._deps.numberValidate.validateNumbers([\n        transferNumber,\n      ]);\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach(async (error) => {\n          const isHAError: boolean = await this._deps.availabilityMonitor?.checkIfHAError(\n            error,\n          );\n          if (!isHAError) {\n            // TODO: fix `callErrors` type\n            this._deps.alert.warning({\n              message: (callErrors as any)[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          }\n        });\n        return;\n      }\n      // TODO: fix `validatedResult` type in `numberValidate` module.\n      const validPhoneNumber =\n        (validatedResult as any).numbers[0] &&\n        (validatedResult as any).numbers[0].e164;\n      let phoneNumber = validPhoneNumber;\n      if (validPhoneNumber.indexOf('+') === -1) {\n        phoneNumber = [\n          this._deps.accountInfo.mainCompanyNumber,\n          validPhoneNumber,\n        ].join('*');\n      }\n      session.transfer(phoneNumber);\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  // Incomplete Implementation?\n  async flip(flipValue: string, telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      await session.flip({ callFlipId: flipValue });\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.error('flip error', error);\n      this.clearCallControlBusyTimestamp();\n      throw error;\n    }\n  }\n\n  async forward(forwardNumber: string, telephonySessionId: string) {\n    const { regionSettings, brand } = this._deps;\n    const session = this._rcCall.sessions.find((s: Session) => {\n      return s.id === telephonySessionId;\n    });\n    if (!session) {\n      return false;\n    }\n    try {\n      let validatedResult;\n      let validPhoneNumber;\n      if (!this._permissionCheck) {\n        validatedResult = validateNumbers(\n          [forwardNumber],\n          regionSettings,\n          brand.id,\n        );\n        validPhoneNumber = validatedResult[0];\n      } else {\n        validatedResult = await this._deps.numberValidate.validateNumbers([\n          forwardNumber,\n        ]);\n        if (!validatedResult.result) {\n          validatedResult.errors.forEach((error) => {\n            this._deps.alert.warning({\n              message: (callErrors as any)[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          });\n          return false;\n        }\n        validPhoneNumber =\n          (validatedResult as any).numbers[0] &&\n          (validatedResult as any).numbers[0].e164;\n      }\n      if (session && session.webphoneSession) {\n        session.webphoneSession.__rc_isForwarded = true;\n      }\n\n      await session.forward(validPhoneNumber, this.acceptOptions);\n      this._deps.alert.success({\n        message: callControlError.forwardSuccess,\n      });\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      return true;\n    } catch (e) {\n      console.error(e);\n      this._deps.alert.warning({\n        message: webphoneErrors.forwardError,\n      });\n      return false;\n    }\n  }\n\n  // DTMF handing by webphone session temporary, due to rc call session doesn't support currently\n  async sendDTMF(dtmfValue: string, telephonySessionId: string) {\n    try {\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      // TODO: using rc call session\n      const { webphoneSession } = session;\n      if (webphoneSession) {\n        await webphoneSession.dtmf(dtmfValue, 100);\n      }\n    } catch (error) {\n      console.log('send dtmf error', error);\n      throw error;\n    }\n  }\n\n  _onWebphoneInvite(session: WebPhoneSession) {\n    const webphoneSession = session;\n    if (!webphoneSession) return;\n    if (!webphoneSession.__rc_creationTime) {\n      webphoneSession.__rc_creationTime = Date.now();\n    }\n    if (!webphoneSession.__rc_lastActiveTime) {\n      webphoneSession.__rc_lastActiveTime = Date.now();\n    }\n    webphoneSession.on('terminated', () => {\n      console.log('Call Event: terminated');\n      //this.setLastEndedSessionIds(webphoneSession);\n      const { telephonySessionId } =\n        this.rcCallSessions.find(\n          (s: Session) => s.webphoneSession === webphoneSession,\n        ) || {};\n      this._setActiveSessionIdFromOnHoldCalls(telephonySessionId);\n    });\n    webphoneSession.on('accepted', () => {\n      const { telephonySessionId } =\n        this.rcCallSessions.find(\n          (s: Session) => s.webphoneSession === webphoneSession,\n        ) || {};\n      this.setActiveSessionId(telephonySessionId);\n      this.updateActiveSessions();\n    });\n  }\n\n  /**\n   *if current call is terminated, then pick the first onhold call as active current call;\n   *\n   * @param {Session} session\n   * @memberof ActiveCallControl\n   */\n  _setActiveSessionIdFromOnHoldCalls(telephonySessionId: string) {\n    if (!telephonySessionId) return;\n    if (this.activeSessionId === telephonySessionId) {\n      const onHoldSessions: Session[] = sort(\n        (l, r) =>\n          sortByCreationTimeDesc(\n            normalizeWebphoneSession(l.webphoneSession),\n            normalizeWebphoneSession(r.webphoneSession),\n          ),\n        filter(\n          (s: Session) => isHolding(s) && !!s.webphoneSession,\n          this.rcCallSessions,\n        ),\n      );\n      if (onHoldSessions.length) {\n        this.setActiveSessionId(onHoldSessions[0].telephonySessionId);\n      }\n    }\n  }\n\n  async _holdOtherCalls(telephonySessionId?: string) {\n    const otherSessions = filter(\n      (s: Session) =>\n        s.telephonySessionId !== telephonySessionId &&\n        s.status === PartyStatusCode.answered &&\n        s.webphoneSession &&\n        !s.webphoneSession.localHold,\n      this._rcCall.sessions,\n    );\n    if (!otherSessions.length) {\n      return;\n    }\n    const holdOtherSessions = otherSessions.map(async (session) => {\n      try {\n        await session.hold();\n        const { webphoneSession } = session;\n        if (webphoneSession && webphoneSession.__rc_callStatus) {\n          webphoneSession.__rc_callStatus = sessionStatus.onHold;\n        }\n      } catch (error) {\n        console.log('Hold call fail.', error);\n      }\n    });\n    await Promise.all(holdOtherSessions);\n  }\n\n  async answer(telephonySessionId: string) {\n    try {\n      this._triggerAutoMergeEvent(telephonySessionId);\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      await this._holdOtherCalls(telephonySessionId);\n      const { webphoneSession } = session;\n      const deviceId = this._deps.webphone?.device?.id;\n      await session.answer({ deviceId });\n      if (webphoneSession && webphoneSession.__rc_callStatus) {\n        webphoneSession.__rc_callStatus = sessionStatus.connected;\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('answer failed.');\n    }\n  }\n\n  /**\n   * ignore an incoming WebRTC call, after action executed, call will be ignored at current\n   * device and move to \"calls on other device\" section. This call still can be answered at other\n   * device\n   * @param {string} telephonySessionId\n   * @memberof ActiveCallControl\n   */\n  async ignore(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      const { webphoneSession } = session;\n      await webphoneSession.reject();\n      // hack for update sessions, then incoming call log page can re-render\n      setTimeout(() => this.updateActiveSessions(), 0);\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('ignore failed.', error);\n    }\n  }\n\n  async answerAndHold(telephonySessionId: string) {\n    // currently, the logic is same as answer\n    try {\n      await this.answer(telephonySessionId);\n    } catch (error) {\n      console.log('answer hold failed.', error);\n    }\n  }\n\n  async answerAndEnd(telephonySessionId: string) {\n    try {\n      if (this.busy) return;\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      const currentActiveCall = this._rcCall.sessions.find(\n        (s: Session) =>\n          s.id !== telephonySessionId &&\n          s.webphoneSession &&\n          s.status === PartyStatusCode.answered,\n      );\n      if (currentActiveCall) {\n        await currentActiveCall.hangup();\n      }\n      const deviceId = this._deps.webphone?.device?.id;\n      await session.answer({ deviceId });\n      const { webphoneSession } = session;\n      if (webphoneSession && webphoneSession.__rc_callStatus) {\n        webphoneSession.__rc_callStatus = sessionStatus.connected;\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('answer and end fail.');\n      console.error(error);\n    }\n  }\n\n  async makeCall(params: ModuleMakeCallParams) {\n    try {\n      if (\n        params.toNumber.length > 6 &&\n        (!this._deps.availabilityMonitor ||\n          !this._deps.availabilityMonitor.isVoIPOnlyMode)\n      ) {\n        const phoneLines = await this._fetchDL();\n        if (phoneLines.length === 0) {\n          this._deps.alert.warning({\n            message: webphoneErrors.noOutboundCallWithoutDL,\n          });\n          return null;\n        }\n      }\n      this._triggerAutoMergeEvent();\n      await this._holdOtherCalls();\n      const sdkMakeCallParams: MakeCallParams = {\n        // type 'callControl' not support webphone's sip device currently.\n        type: 'webphone',\n        toNumber: params.toNumber,\n        fromNumber: params.fromNumber,\n        homeCountryId: params.homeCountryId,\n      };\n      const session = await this._rcCall.makeCall(sdkMakeCallParams);\n      return session;\n    } catch (error) {\n      console.log('make call fail.', error);\n    }\n  }\n\n  async _fetchDL() {\n    const response = await this._deps.client\n      .account()\n      .extension()\n      .device()\n      .list();\n    const devices = response.records;\n    let phoneLines: any[] = [];\n    devices.forEach((device) => {\n      // wrong type of phoneLines, temporary treat it as any\n      if (!device.phoneLines || (device.phoneLines as any).length === 0) {\n        return;\n      }\n      phoneLines = phoneLines.concat(device.phoneLines);\n    });\n    return phoneLines;\n  }\n\n  getActiveSession(telephonySessionId: string) {\n    return this.activeSessions[telephonySessionId];\n  }\n\n  @computed(({ activeSessionId, activeSessions }: ActiveCallControl) => [\n    activeSessionId,\n    activeSessions,\n  ])\n  get activeSession() {\n    return this.getActiveSession(this.activeSessionId);\n  }\n\n  @computed((that: ActiveCallControl) => [that.sessions, that.timestamp])\n  get activeSessions() {\n    // TODO: add calls type in callMonitor modules\n    const reducer = (accumulator: any, session: any) => {\n      const { id } = session;\n      accumulator[id] = normalizeSession({ session });\n      return accumulator;\n    };\n    return this.sessions.reduce(reducer, {});\n  }\n\n  @computed((that: ActiveCallControl) => [that._deps.presence.calls])\n  get sessionIdToTelephonySessionIdMapping() {\n    // TODO: add calls type in callMonitor modules\n    const reducer = (accumulator: any, call: any) => {\n      const { telephonySessionId, sessionId } = call;\n      accumulator[sessionId] = telephonySessionId;\n      return accumulator;\n    };\n    return this._deps.presence.calls.reduce(reducer, {});\n  }\n\n  /**\n   * Mitigation strategy for avoiding 404/409 on call control endpoings.\n   * This should gradually move towards per session controls rather than\n   * a global busy timeout.\n   */\n  get busy() {\n    return Date.now() - this.busyTimestamp < DEFAULT_BUSY_TIMEOUT;\n  }\n\n  get _hasPermission() {\n    return this._deps.rolesAndPermissions.ringoutEnabled;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get acceptOptions() {\n    return {\n      sessionDescriptionHandlerOptions: {\n        constraints: {\n          audio: {\n            deviceId: this._deps.audioSettings?.inputDeviceId,\n          },\n          video: false,\n        },\n      },\n    };\n  }\n\n  get hasCallInRecording() {\n    return this.sessions.some((session) => isRecording(session));\n  }\n\n  get rcCallSessions() {\n    return this._rcCall?.sessions || [];\n  }\n}\n"],"file":"ActiveCallControl.js"}