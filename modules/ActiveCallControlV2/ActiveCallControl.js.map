{"version":3,"sources":["modules/ActiveCallControlV2/ActiveCallControl.ts"],"names":["DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","DEFAULT_BUSY_TIMEOUT","telephonySessionsEndPoint","subscribeEvent","subscriptionFilters","telephonySessions","ActiveCallControl","name","deps","dep","optional","trackEvents","mute","unmute","hangup","hold","unhold","transfer","activeSessionId","activeSessions","that","_deps","presence","calls","sessions","timestamp","enableCache","activeCallControlOptions","storageKey","_ttl","_timeToRetry","_polling","_enableCache","_promise","_rcCall","_tabActive","_connectivity","_onCallEndFunc","_timeoutId","_lastSubscriptionMessage","_permissionCheck","_updateSessionsHandler","updateActiveSessions","ttl","timeToRetry","polling","permissionCheck","ready","_hasPermission","_subscriptionHandler","_checkConnectivity","_checkTabActive","subscription","subscribe","RingCentralCall","sdk","client","service","subscriptions","enableSubscriptionHander","callControlOptions","preloadDevices","preloadSessions","extensionInfo","info","account","accountInfo","webphone","_webphone","on","callEvents","NEW","session","_newSessionHandler","WEBPHONE_INVITE","_onWebphoneInvite","tabManager","active","_shouldFetch","fetchData","_retry","_startPolling","connected","newValue","setWebphone","resetState","data","busyTimestamp","_fetchData","clearTimeout","storage","message","test","event","body","onNotificationEvent","t","_clearTimeout","setTimeout","Date","now","_syncData","activeCalls","loadSessions","forEach","console","log","callControlSessions","_callControl","map","removeListener","eventsEnum","STATUS","MUTED","RECORDINGS","DISCONNECTED","telephonySessionId","normalizedWebphoneSession","startTime","isToVoicemail","isForwarded","isReplied","partyData","lastEndedSessionIds","indexOf","sessionId","concat","slice","connectivityMonitor","connectivity","restoreSessions","setCallControlBusyTimestamp","find","s","id","clearCallControlBusyTimestamp","alert","warning","callControlError","muteConflictError","availabilityMonitor","checkIfHAError","generalError","unMuteConflictError","recordingId","getRecordingId","startRecord","recording","recordings","recodingId","stopRecord","error","toVoicemail","webphoneSession","__rc_isToVoicemail","__rc_callStatus","sessionStatus","onHold","holdConflictError","_holdOtherCalls","setActiveSessionId","unHoldConflictError","transferNumber","numberValidate","validateNumbers","validatedResult","result","errors","isHAError","callErrors","type","payload","phoneNumber","validPhoneNumber","numbers","e164","mainCompanyNumber","join","flipValue","flip","callFlipId","forwardNumber","regionSettings","brand","__rc_isForwarded","forward","acceptOptions","success","forwardSuccess","webphoneErrors","forwardError","dtmfValue","dtmf","__rc_creationTime","__rc_lastActiveTime","setLastEndedSessionIds","rcCallSessions","_setActiveSessionIdFromOnHoldCalls","onHoldSessions","l","r","length","otherSessions","status","PartyStatusCode","answered","localHold","holdOtherSessions","Promise","all","deviceId","device","answer","reject","busy","currentActiveCall","params","toNumber","isVoIPOnlyMode","_fetchDL","phoneLines","noOutboundCallWithoutDL","sdkMakeCallParams","fromNumber","homeCountryId","makeCall","extension","list","response","devices","records","getActiveSession","reducer","accumulator","call","reduce","rolesAndPermissions","ringoutEnabled","sessionDescriptionHandlerOptions","constraints","audio","audioSettings","inputDeviceId","video","some","RcModuleV2","state","action"],"mappings":"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","sourcesContent":["import {\n  RcModuleV2,\n  state,\n  action,\n  storage,\n  computed,\n  track,\n  watch,\n} from '@ringcentral-integration/core';\nimport {\n  RingCentralCall,\n  events as callEvents,\n  MakeCallParams,\n} from 'ringcentral-call';\nimport { Session, events as eventsEnum } from 'ringcentral-call/lib/Session';\nimport {\n  Session as TelephonySession,\n  SessionData,\n  PartyStatusCode,\n} from 'ringcentral-call-control/lib/Session';\nimport { WebPhoneSession } from 'ringcentral-web-phone/lib/session';\nimport { filter, sort } from 'ramda';\nimport { Module } from '../../lib/di';\n// eslint-disable-next-line import/no-named-as-default\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport callErrors from '../Call/callErrors';\nimport {\n  normalizeSession,\n  conflictError,\n  isRecording,\n  isHolding,\n} from './helpers';\nimport { trackEvents } from '../Analytics';\nimport callControlError from '../ActiveCallControl/callControlError';\nimport { Deps, ModuleMakeCallParams } from './ActiveCallControl.interface';\nimport validateNumbers from '../../lib/validateNumbers';\nimport { webphoneErrors } from '../Webphone/webphoneErrors';\nimport {\n  normalizeSession as normalizeWebphoneSession,\n  sortByCreationTimeDesc,\n} from '../Webphone/webphoneHelper';\nimport { sessionStatus } from '../Webphone/sessionStatus';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst DEFAULT_BUSY_TIMEOUT = 3 * 1000;\nconst telephonySessionsEndPoint = /\\/telephony\\/sessions$/;\nconst subscribeEvent = subscriptionFilters.telephonySessions;\n\n@Module({\n  name: 'ActiveCallControl',\n  deps: [\n    'Auth',\n    'Alert',\n    'Brand',\n    'Client',\n    'Presence',\n    'AccountInfo',\n    'Subscription',\n    'ExtensionInfo',\n    'NumberValidate',\n    'RegionSettings',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    { dep: 'Storage', optional: true },\n    { dep: 'Webphone', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'AudioSettings', optional: true },\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'ActiveCallControlOptions', optional: true },\n  ],\n})\nexport class ActiveCallControl extends RcModuleV2<Deps> {\n  _ttl: number;\n  _timeToRetry: number;\n  _polling: boolean;\n  _enableCache: boolean;\n  private _promise: Promise<void> = null;\n  private _rcCall: RingCentralCall;\n  private _tabActive: boolean;\n  private _connectivity: boolean;\n  private _onCallEndFunc: () => void;\n  private _timeoutId: number;\n  private _lastSubscriptionMessage: string;\n  private _permissionCheck: boolean;\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: deps.activeCallControlOptions?.enableCache ?? true,\n      storageKey: 'activeCallControl',\n    });\n    const { activeCallControlOptions } = this._deps;\n    this._ttl = activeCallControlOptions?.ttl ?? DEFAULT_TTL;\n    this._timeToRetry =\n      activeCallControlOptions?.timeToRetry ?? DEFAULT_TIME_TO_RETRY;\n    this._polling = activeCallControlOptions?.polling ?? false;\n    this._enableCache = activeCallControlOptions?.enableCache ?? true;\n    this._promise = null;\n    this._rcCall = null;\n    this._permissionCheck = activeCallControlOptions?.permissionCheck ?? true;\n  }\n\n  async onStateChange() {\n    if (this.ready && this._hasPermission) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n      await this._checkTabActive();\n    }\n  }\n\n  get activeSessionId() {\n    return this.data.activeSessionId;\n  }\n\n  get busyTimestamp() {\n    return this.data.busyTimestamp;\n  }\n\n  get timestamp() {\n    return this.data.timestamp;\n  }\n\n  get sessions() {\n    return this.data.sessions;\n  }\n\n  @storage\n  @state\n  data: {\n    activeSessionId: string;\n    busyTimestamp: number;\n    timestamp: number;\n    sessions: SessionData[];\n  } = {\n    activeSessionId: null,\n    busyTimestamp: 0,\n    timestamp: 0,\n    sessions: [],\n  };\n\n  @state\n  lastEndedSessionIds: string[] = [];\n\n  // TODO conference call using\n  @state\n  cachedSessions: object[] = [];\n\n  async onInit() {\n    if (!this._hasPermission) return;\n    this._deps.subscription.subscribe([subscribeEvent]);\n    this._rcCall = new RingCentralCall({\n      sdk: this._deps.client.service,\n      subscriptions: null,\n      enableSubscriptionHander: false,\n      callControlOptions: {\n        preloadDevices: false,\n        preloadSessions: false,\n        extensionInfo: {\n          ...this._deps.extensionInfo.info,\n          // TODO: add info type in 'AccountInfo'\n          // @ts-ignore\n          account: this._deps.accountInfo.info,\n        },\n      },\n      webphone: this._deps.webphone?._webphone,\n    });\n    this._rcCall.on(callEvents.NEW, (session: Session) => {\n      this._newSessionHandler(session);\n    });\n    this._rcCall.on(callEvents.WEBPHONE_INVITE, (session: WebPhoneSession) =>\n      this._onWebphoneInvite(session),\n    );\n    this._tabActive = this._deps.tabManager?.active;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    if (this._deps.webphone) {\n      watch(\n        this,\n        () => this._deps.webphone.connected,\n        (newValue) => {\n          if (newValue && this._deps.webphone._webphone) {\n            this._rcCall.setWebphone(this._deps.webphone._webphone);\n          }\n        },\n      );\n    }\n  }\n\n  onReset() {\n    this.resetState();\n  }\n\n  @action\n  resetState() {\n    this.data.activeSessionId = null;\n    this.data.busyTimestamp = 0;\n    this.data.timestamp = 0;\n    this.data.sessions = [];\n  }\n\n  _shouldFetch() {\n    return !this._deps.tabManager || this._deps.tabManager.active;\n  }\n\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    await this._promise;\n  }\n\n  _clearTimeout() {\n    if (this._timeoutId) clearTimeout(this._timeoutId);\n  }\n\n  _subscriptionHandler() {\n    if (\n      !this.ready ||\n      (this._deps.storage &&\n        this._deps.tabManager &&\n        !this._deps.tabManager?.active)\n    ) {\n      return;\n    }\n    const { message } = this._deps.subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      telephonySessionsEndPoint.test(message.event) &&\n      message.body\n    ) {\n      this._lastSubscriptionMessage = message;\n      if (this._rcCall) {\n        this._rcCall.onNotificationEvent(message);\n      }\n    }\n  }\n\n  _retry(t = this.timeToRetry) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n        if (!this._deps.tabManager || this._deps.tabManager.active) {\n          this.fetchData();\n        } else {\n          // continue retry checks in case tab becomes main tab\n          this._retry();\n        }\n      }\n    }, t);\n  }\n\n  async _fetchData() {\n    try {\n      await this._syncData();\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  _startPolling(t = this.timestamp + this.ttl + 10 - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._deps.tabManager || this._deps.tabManager?.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  async _syncData() {\n    try {\n      const activeCalls = this._deps.presence.calls;\n      await this._rcCall.loadSessions(activeCalls);\n      this.updateActiveSessions();\n      this._rcCall.sessions.forEach((session: Session) => {\n        this._newSessionHandler(session);\n      });\n    } catch (error) {\n      console.log('sync data error:', error);\n      throw error;\n    }\n  }\n\n  _updateSessionsHandler = () => {\n    this.updateActiveSessions();\n  };\n\n  @action\n  updateActiveSessions() {\n    this.data.timestamp = Date.now();\n    const callControlSessions = this._rcCall?._callControl?.sessions.map(\n      (session: TelephonySession) => {\n        return session.data;\n      },\n    );\n    this.data.sessions = callControlSessions || [];\n  }\n\n  _newSessionHandler(session: Session) {\n    session.removeListener(eventsEnum.STATUS, this._updateSessionsHandler);\n    session.removeListener(eventsEnum.MUTED, this._updateSessionsHandler);\n    session.removeListener(eventsEnum.RECORDINGS, this._updateSessionsHandler);\n    session.removeListener(\n      eventsEnum.DISCONNECTED,\n      this._updateSessionsHandler,\n    );\n    session.on(eventsEnum.STATUS, this._updateSessionsHandler);\n    session.on(eventsEnum.MUTED, this._updateSessionsHandler);\n    session.on(eventsEnum.RECORDINGS, this._updateSessionsHandler);\n    session.on(eventsEnum.DISCONNECTED, this._updateSessionsHandler);\n    // Handle the session update at the end of function to reduce the probability of empty rc call\n    // sessions\n    this._updateSessionsHandler();\n  }\n\n  @action\n  removeActiveSession() {\n    this.data.activeSessionId = null;\n  }\n\n  // count it as load (should only call on container init step)\n  @action\n  setActiveSessionId(telephonySessionId: string) {\n    if (!telephonySessionId) return;\n    this.data.activeSessionId = telephonySessionId;\n  }\n\n  @action\n  setLastEndedSessionIds(session: WebPhoneSession) {\n    /**\n     * don't add incoming call that isn't relied by current app\n     *   to end sessions. this call can be answered by other apps\n     */\n    const normalizedWebphoneSession = normalizeWebphoneSession(session);\n    if (\n      !normalizedWebphoneSession.startTime &&\n      !normalizedWebphoneSession.isToVoicemail &&\n      !normalizedWebphoneSession.isForwarded &&\n      !normalizedWebphoneSession.isReplied\n    ) {\n      return;\n    }\n    const { partyData } = normalizedWebphoneSession;\n    if (!partyData) return;\n    if (this.lastEndedSessionIds.indexOf(partyData.sessionId) === -1) {\n      this.lastEndedSessionIds = [partyData.sessionId]\n        .concat(this.lastEndedSessionIds)\n        .slice(0, 5);\n    }\n  }\n\n  _checkConnectivity() {\n    if (\n      this._deps.connectivityMonitor &&\n      this._deps.connectivityMonitor.ready &&\n      this._connectivity !== this._deps.connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._deps.connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n\n  async _checkTabActive() {\n    if (!this._deps.tabManager || !this._deps.storage || !this._enableCache) {\n      return;\n    }\n    if (this._tabActive !== this._deps.tabManager?.active) {\n      this._tabActive = this._deps.tabManager?.active;\n      if (this._deps.tabManager?.active && this._rcCall) {\n        await this._rcCall.restoreSessions(this.sessions);\n        this._rcCall.sessions.forEach((session: Session) => {\n          this._newSessionHandler(session);\n        });\n      }\n    }\n  }\n\n  @action\n  setCallControlBusyTimestamp() {\n    this.data.busyTimestamp = Date.now();\n  }\n\n  @action\n  clearCallControlBusyTimestamp() {\n    this.data.busyTimestamp = 0;\n  }\n\n  @track(trackEvents.mute)\n  async mute(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.mute();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.muteConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.unmute)\n  async unmute(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.unmute();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.unMuteConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  async startRecord(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      await session.startRecord({ recordingId });\n      this.clearCallControlBusyTimestamp();\n      return true;\n    } catch (error) {\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  getRecordingId(session: Session) {\n    const recording = session.recordings[0];\n    const recodingId = recording && recording.id;\n    return recodingId;\n  }\n\n  async stopRecord(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      await session.stopRecord({ recordingId });\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('stop record error:', error);\n      this.clearCallControlBusyTimestamp();\n      throw error;\n    }\n  }\n\n  @track(trackEvents.hangup)\n  async hangUp(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.hangup();\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.error('hangup error', error);\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  async reject(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.toVoicemail();\n      if (session && session.webphoneSession) {\n        session.webphoneSession.__rc_isToVoicemail = true;\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.hold)\n  async hold(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.hold();\n      const { webphoneSession } = session;\n      if (webphoneSession && webphoneSession.__rc_callStatus) {\n        webphoneSession.__rc_callStatus = sessionStatus.onHold;\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.holdConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.unhold)\n  async unhold(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await this._holdOtherCalls(telephonySessionId);\n      await session.unhold();\n      const { webphoneSession } = session;\n      if (webphoneSession && webphoneSession.__rc_callStatus) {\n        webphoneSession.__rc_callStatus = sessionStatus.connected;\n      }\n      this.setActiveSessionId(telephonySessionId);\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.unHoldConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({\n          message: callControlError.generalError,\n        });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.transfer)\n  async transfer(transferNumber: string, telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const validatedResult = await this._deps.numberValidate.validateNumbers([\n        transferNumber,\n      ]);\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach(async (error) => {\n          const isHAError: boolean = await this._deps.availabilityMonitor?.checkIfHAError(\n            error,\n          );\n          if (!isHAError) {\n            // TODO: fix `callErrors` type\n            this._deps.alert.warning({\n              message: (callErrors as any)[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          }\n        });\n        return;\n      }\n      // TODO: fix `validatedResult` type in `numberValidate` module.\n      const validPhoneNumber =\n        (validatedResult as any).numbers[0] &&\n        (validatedResult as any).numbers[0].e164;\n      let phoneNumber = validPhoneNumber;\n      if (validPhoneNumber.indexOf('+') === -1) {\n        phoneNumber = [\n          this._deps.accountInfo.mainCompanyNumber,\n          validPhoneNumber,\n        ].join('*');\n      }\n      session.transfer(phoneNumber);\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  // Incomplete Implementation?\n  async flip(flipValue: string, telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      await session.flip({ callFlipId: flipValue });\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.error('flip error', error);\n      this.clearCallControlBusyTimestamp();\n      throw error;\n    }\n  }\n\n  async forward(forwardNumber: string, telephonySessionId: string) {\n    const { regionSettings, brand } = this._deps;\n    const session = this._rcCall.sessions.find((s: Session) => {\n      return s.id === telephonySessionId;\n    });\n    if (!session) {\n      return false;\n    }\n    try {\n      let validatedResult;\n      let validPhoneNumber;\n      if (!this._permissionCheck) {\n        validatedResult = validateNumbers(\n          [forwardNumber],\n          regionSettings,\n          brand.id,\n        );\n        validPhoneNumber = validatedResult[0];\n      } else {\n        validatedResult = await this._deps.numberValidate.validateNumbers([\n          forwardNumber,\n        ]);\n        if (!validatedResult.result) {\n          validatedResult.errors.forEach((error) => {\n            this._deps.alert.warning({\n              message: (callErrors as any)[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          });\n          return false;\n        }\n        validPhoneNumber =\n          (validatedResult as any).numbers[0] &&\n          (validatedResult as any).numbers[0].e164;\n      }\n      if (session && session.webphoneSession) {\n        session.webphoneSession.__rc_isForwarded = true;\n      }\n\n      await session.forward(validPhoneNumber, this.acceptOptions);\n      this._deps.alert.success({\n        message: callControlError.forwardSuccess,\n      });\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      return true;\n    } catch (e) {\n      console.error(e);\n      this._deps.alert.warning({\n        message: webphoneErrors.forwardError,\n      });\n      return false;\n    }\n  }\n\n  // DTMF handing by webphone session temporary, due to rc call session doesn't support currently\n  async sendDTMF(dtmfValue: string, telephonySessionId: string) {\n    try {\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      // TODO: using rc call session\n      const { webphoneSession } = session;\n      if (webphoneSession) {\n        await webphoneSession.dtmf(dtmfValue, 100);\n      }\n    } catch (error) {\n      console.log('send dtmf error', error);\n      throw error;\n    }\n  }\n\n  _onWebphoneInvite(session: WebPhoneSession) {\n    const webphoneSession = session;\n    if (!webphoneSession) return;\n    if (!webphoneSession.__rc_creationTime) {\n      webphoneSession.__rc_creationTime = Date.now();\n    }\n    if (!webphoneSession.__rc_lastActiveTime) {\n      webphoneSession.__rc_lastActiveTime = Date.now();\n    }\n    webphoneSession.on('terminated', () => {\n      console.log('Call Event: terminated');\n      this.setLastEndedSessionIds(webphoneSession);\n      const { telephonySessionId } =\n        this.rcCallSessions.find(\n          (s: Session) => s.webphoneSession === webphoneSession,\n        ) || {};\n      this._setActiveSessionIdFromOnHoldCalls(telephonySessionId);\n    });\n    webphoneSession.on('accepted', () => {\n      const { telephonySessionId } =\n        this.rcCallSessions.find(\n          (s: Session) => s.webphoneSession === webphoneSession,\n        ) || {};\n      this.setActiveSessionId(telephonySessionId);\n      this.updateActiveSessions();\n    });\n  }\n\n  /**\n   *if current call is terminated, then pick the first onhold call as active current call;\n   *\n   * @param {Session} session\n   * @memberof ActiveCallControl\n   */\n  _setActiveSessionIdFromOnHoldCalls(telephonySessionId: string) {\n    if (!telephonySessionId) return;\n    if (this.activeSessionId === telephonySessionId) {\n      const onHoldSessions: Session[] = sort(\n        (l, r) =>\n          sortByCreationTimeDesc(\n            normalizeWebphoneSession(l.webphoneSession),\n            normalizeWebphoneSession(r.webphoneSession),\n          ),\n        filter(\n          (s: Session) => isHolding(s) && !!s.webphoneSession,\n          this.rcCallSessions,\n        ),\n      );\n      if (onHoldSessions.length) {\n        this.setActiveSessionId(onHoldSessions[0].telephonySessionId);\n      }\n    }\n  }\n\n  async _holdOtherCalls(telephonySessionId?: string) {\n    const otherSessions = filter(\n      (s: Session) =>\n        s.telephonySessionId !== telephonySessionId &&\n        s.status === PartyStatusCode.answered &&\n        s.webphoneSession &&\n        !s.webphoneSession.localHold,\n      this._rcCall.sessions,\n    );\n    if (!otherSessions.length) {\n      return;\n    }\n    const holdOtherSessions = otherSessions.map(async (session) => {\n      try {\n        await session.hold();\n        const { webphoneSession } = session;\n        if (webphoneSession && webphoneSession.__rc_callStatus) {\n          webphoneSession.__rc_callStatus = sessionStatus.onHold;\n        }\n      } catch (error) {\n        console.log('Hold call fail.', error);\n      }\n    });\n    await Promise.all(holdOtherSessions);\n  }\n\n  async answer(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      await this._holdOtherCalls(telephonySessionId);\n      const { webphoneSession } = session;\n      const deviceId = this._deps.webphone?.device?.id;\n      await session.answer({ deviceId });\n      if (webphoneSession && webphoneSession.__rc_callStatus) {\n        webphoneSession.__rc_callStatus = sessionStatus.connected;\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('answer failed.');\n    }\n  }\n\n  /**\n   * ignore an incoming WebRTC call, after action executed, call will be ignored at current\n   * device and move to \"calls on other device\" section. This call still can be answered at other\n   * device\n   * @param {string} telephonySessionId\n   * @memberof ActiveCallControl\n   */\n  async ignore(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      const { webphoneSession } = session;\n      await webphoneSession.reject();\n      // hack for update sessions, then incoming call log page can re-render\n      setTimeout(() => this.updateActiveSessions(), 0);\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('ignore failed.', error);\n    }\n  }\n\n  async answerAndHold(telephonySessionId: string) {\n    // currently, the logic is same as answer\n    try {\n      await this.answer(telephonySessionId);\n    } catch (error) {\n      console.log('answer hold failed.', error);\n    }\n  }\n\n  async answerAndEnd(telephonySessionId: string) {\n    try {\n      if (this.busy) return;\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      const currentActiveCall = this._rcCall.sessions.find(\n        (s: Session) =>\n          s.id !== telephonySessionId &&\n          s.webphoneSession &&\n          s.status === PartyStatusCode.answered,\n      );\n      if (currentActiveCall) {\n        await currentActiveCall.hangup();\n      }\n      const deviceId = this._deps.webphone?.device?.id;\n      await session.answer({ deviceId });\n      const { webphoneSession } = session;\n      if (webphoneSession && webphoneSession.__rc_callStatus) {\n        webphoneSession.__rc_callStatus = sessionStatus.connected;\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('answer and end fail.');\n      console.error(error);\n    }\n  }\n\n  async makeCall(params: ModuleMakeCallParams) {\n    try {\n      if (\n        params.toNumber.length > 6 &&\n        (!this._deps.availabilityMonitor ||\n          !this._deps.availabilityMonitor.isVoIPOnlyMode)\n      ) {\n        const phoneLines = await this._fetchDL();\n        if (phoneLines.length === 0) {\n          this._deps.alert.warning({\n            message: webphoneErrors.noOutboundCallWithoutDL,\n          });\n          return null;\n        }\n      }\n      await this._holdOtherCalls();\n      const sdkMakeCallParams: MakeCallParams = {\n        // type 'callControl' not support webphone's sip device currently.\n        type: 'webphone',\n        toNumber: params.toNumber,\n        fromNumber: params.fromNumber,\n        homeCountryId: params.homeCountryId,\n      };\n      const session = await this._rcCall.makeCall(sdkMakeCallParams);\n      return session;\n    } catch (error) {\n      console.log('make call fail.', error);\n    }\n  }\n\n  async _fetchDL() {\n    const response = await this._deps.client\n      .account()\n      .extension()\n      .device()\n      .list();\n    const devices = response.records;\n    let phoneLines: any[] = [];\n    devices.forEach((device) => {\n      // wrong type of phoneLines, temporary treat it as any\n      if (!device.phoneLines || (device.phoneLines as any).length === 0) {\n        return;\n      }\n      phoneLines = phoneLines.concat(device.phoneLines);\n    });\n    return phoneLines;\n  }\n\n  getActiveSession(telephonySessionId: string) {\n    return this.activeSessions[telephonySessionId];\n  }\n\n  @computed(({ activeSessionId, activeSessions }: ActiveCallControl) => [\n    activeSessionId,\n    activeSessions,\n  ])\n  get activeSession() {\n    return this.getActiveSession(this.activeSessionId);\n  }\n\n  @computed((that: ActiveCallControl) => [\n    that._deps.presence.calls,\n    that.sessions,\n    that.timestamp,\n  ])\n  get activeSessions() {\n    // TODO: add calls type in callMonitor modules\n    const reducer = (accumulator: any, call: any) => {\n      const { telephonySessionId } = call;\n      const session = this.sessions.find((s) => s.id === telephonySessionId);\n      if (!session) {\n        return accumulator;\n      }\n      accumulator[telephonySessionId] = normalizeSession({\n        session,\n        call,\n      });\n      return accumulator;\n    };\n    return this._deps.presence.calls.reduce(reducer, {});\n  }\n\n  @computed((that: ActiveCallControl) => [that._deps.presence.calls])\n  get sessionIdToTelephonySessionIdMapping() {\n    // TODO: add calls type in callMonitor modules\n    const reducer = (accumulator: any, call: any) => {\n      const { telephonySessionId, sessionId } = call;\n      accumulator[sessionId] = telephonySessionId;\n      return accumulator;\n    };\n    return this._deps.presence.calls.reduce(reducer, {});\n  }\n\n  /**\n   * Mitigation strategy for avoiding 404/409 on call control endpoings.\n   * This should gradually move towards per session controls rather than\n   * a global busy timeout.\n   */\n  get busy() {\n    return Date.now() - this.busyTimestamp < DEFAULT_BUSY_TIMEOUT;\n  }\n\n  get _hasPermission() {\n    return this._deps.rolesAndPermissions.ringoutEnabled;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get acceptOptions() {\n    return {\n      sessionDescriptionHandlerOptions: {\n        constraints: {\n          audio: {\n            deviceId: this._deps.audioSettings?.inputDeviceId,\n          },\n          video: false,\n        },\n      },\n    };\n  }\n\n  get hasCallInRecording() {\n    return this.sessions.some((session) => isRecording(session));\n  }\n\n  get rcCallSessions() {\n    return this._rcCall?.sessions || [];\n  }\n}\n"],"file":"ActiveCallControl.js"}