{"version":3,"sources":["modules/ActiveCallControlV2/ActiveCallControl.ts"],"names":["DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","DEFAULT_BUSY_TIMEOUT","telephonySessionsEndPoint","subscribeEvent","subscriptionFilters","telephonySessions","ActiveCallControl","name","deps","dep","optional","trackEvents","mute","unmute","hangup","hold","unhold","activeSessionId","activeSessions","that","_deps","callMonitor","calls","sessions","timestamp","enableCache","activeCallControlOptions","storageKey","_ttl","_timeToRetry","_polling","_enableCache","_promise","_rcCall","_tabActive","_connectivity","_onCallEndFunc","_timeoutId","_lastSubscriptionMessage","_updateSessionsHandler","updateActiveSessions","ttl","timeToRetry","polling","ready","_hasPermission","_subscriptionHandler","_checkConnectivity","_checkTabActive","subscription","subscribe","RingCentralCall","sdk","client","service","subscriptions","enableSubscriptionHander","callControlOptions","preloadDevices","preloadSessions","extensionInfo","info","account","accountInfo","on","session","_newSessionHandler","tabManager","active","_shouldFetch","fetchData","_retry","_startPolling","webphone","connected","newValue","_webphone","setWebphone","resetState","busyTimestamp","_fetchData","clearTimeout","storage","message","test","event","body","onNotificationEvent","t","_clearTimeout","setTimeout","Date","now","_syncData","activeCalls","loadSessions","forEach","console","log","_callControl","map","data","removeListener","telephonySessionId","connectivityMonitor","connectivity","restoreSessions","setCallControlBusyTimestamp","find","s","id","clearCallControlBusyTimestamp","alert","warning","callControlError","muteConflictError","availabilityMonitor","checkIfHAError","generalError","unMuteConflictError","recordingId","getRecordingId","startRecord","recording","recordings","recodingId","stopRecord","error","toVoicemail","holdConflictError","unHoldConflictError","transferNumber","numberValidate","validateNumbers","validatedResult","result","errors","isHAError","callErrors","type","payload","phoneNumber","validPhoneNumber","numbers","e164","indexOf","mainCompanyNumber","join","transfer","flipValue","flip","callFlipId","dtmfValue","webphoneSession","dtmf","getActiveSession","reducer","accumulator","call","reduce","sessionId","rolesAndPermissions","ringoutEnabled","RcModuleV2","state","action"],"mappings":"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","sourcesContent":["import {\n  RcModuleV2,\n  state,\n  action,\n  storage,\n  computed,\n  track,\n  watch,\n} from '@ringcentral-integration/core';\nimport { RingCentralCall } from 'ringcentral-call';\nimport { Session } from 'ringcentral-call/lib/Session';\nimport {\n  Session as TelephonySession,\n  SessionData,\n} from 'ringcentral-call-control/lib/Session';\nimport { WebPhoneSession } from 'ringcentral-web-phone/lib/session';\nimport { Module } from '../../lib/di';\n// eslint-disable-next-line import/no-named-as-default\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport callErrors from '../Call/callErrors';\nimport { normalizeSession, conflictError } from './helpers';\nimport { trackEvents } from '../Analytics';\nimport callControlError from '../ActiveCallControl/callControlError';\nimport { Deps } from './ActiveCallControl.interface';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst DEFAULT_BUSY_TIMEOUT = 3 * 1000;\nconst telephonySessionsEndPoint = /\\/telephony\\/sessions$/;\nconst subscribeEvent = subscriptionFilters.telephonySessions;\n\n@Module({\n  name: 'ActiveCallControl',\n  deps: [\n    'Client',\n    'Auth',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    'CallMonitor',\n    'Alert',\n    'NumberValidate',\n    'AccountInfo',\n    'ExtensionInfo',\n    'Subscription',\n    { dep: 'Webphone', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'ActiveCallControlOptions', optional: true },\n    { dep: 'AvailabilityMonitor', optional: true },\n  ],\n})\nexport class ActiveCallControl extends RcModuleV2<Deps> {\n  _ttl: number;\n  _timeToRetry: number;\n  _polling: boolean;\n  _enableCache: boolean;\n  private _promise: Promise<void> = null;\n  private _rcCall: RingCentralCall;\n  private _tabActive: boolean;\n  private _connectivity: boolean;\n  private _onCallEndFunc: () => void;\n  private _timeoutId: NodeJS.Timeout;\n  private _lastSubscriptionMessage: string;\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: deps.activeCallControlOptions?.enableCache ?? true,\n      storageKey: 'activeCallControl',\n    });\n    const { activeCallControlOptions } = this._deps;\n    this._ttl = activeCallControlOptions?.ttl ?? DEFAULT_TTL;\n    this._timeToRetry =\n      activeCallControlOptions?.timeToRetry ?? DEFAULT_TIME_TO_RETRY;\n    this._polling = activeCallControlOptions?.polling ?? false;\n    this._enableCache = activeCallControlOptions?.enableCache ?? true;\n    this._promise = null;\n    this._rcCall = null;\n  }\n\n  async onStateChange() {\n    if (this.ready && this._hasPermission) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n      await this._checkTabActive();\n    }\n  }\n\n  @storage\n  @state\n  activeSessionId: string = null;\n\n  @storage\n  @state\n  busyTimestamp: number = 0;\n\n  @storage\n  @state\n  timestamp: number = 0;\n\n  @storage\n  @state\n  sessions: SessionData[] = [];\n\n  async onInit() {\n    if (!this._hasPermission) return;\n    this._deps.subscription.subscribe([subscribeEvent]);\n    this._rcCall = new RingCentralCall({\n      sdk: this._deps.client.service,\n      subscriptions: null,\n      enableSubscriptionHander: false,\n      callControlOptions: {\n        preloadDevices: false,\n        preloadSessions: false,\n        extensionInfo: {\n          ...this._deps.extensionInfo.info,\n          // TODO: add info type in 'AccountInfo'\n          // @ts-ignore\n          account: this._deps.accountInfo.info,\n        },\n      },\n    });\n    this._rcCall.on('new', (session: Session) => {\n      this._newSessionHandler(session);\n    });\n    this._tabActive = this._deps.tabManager?.active;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    if (this._deps.webphone) {\n      watch(\n        this,\n        () => this._deps.webphone.connected,\n        (newValue) => {\n          if (newValue && this._deps.webphone._webphone) {\n            this._rcCall.setWebphone(this._deps.webphone._webphone);\n          }\n        },\n      );\n    }\n  }\n\n  onReset() {\n    this.resetState();\n  }\n\n  @action\n  resetState() {\n    this.activeSessionId = null;\n    this.busyTimestamp = 0;\n    this.timestamp = 0;\n    this.sessions = [];\n  }\n\n  _shouldFetch() {\n    return !this._deps.tabManager || this._deps.tabManager.active;\n  }\n\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    await this._promise;\n  }\n\n  _clearTimeout() {\n    if (this._timeoutId) clearTimeout(this._timeoutId);\n  }\n\n  _subscriptionHandler() {\n    if (\n      !this.ready ||\n      (this._deps.storage &&\n        this._deps.tabManager &&\n        !this._deps.tabManager?.active)\n    ) {\n      return;\n    }\n    const { message } = this._deps.subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      telephonySessionsEndPoint.test(message.event) &&\n      message.body\n    ) {\n      this._lastSubscriptionMessage = message;\n      if (this._rcCall) {\n        this._rcCall.onNotificationEvent(message);\n      }\n    }\n  }\n\n  _retry(t = this.timeToRetry) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n        if (!this._deps.tabManager || this._deps.tabManager.active) {\n          this.fetchData();\n        } else {\n          // continue retry checks in case tab becomes main tab\n          this._retry();\n        }\n      }\n    }, t);\n  }\n\n  async _fetchData() {\n    try {\n      await this._syncData();\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  _startPolling(t = this.timestamp + this.ttl + 10 - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._deps.tabManager || this._deps.tabManager?.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  async _syncData() {\n    try {\n      const activeCalls = this._deps.callMonitor.calls;\n      await this._rcCall.loadSessions(activeCalls);\n      this.updateActiveSessions();\n      this._rcCall.sessions.forEach((session: Session) => {\n        this._newSessionHandler(session);\n      });\n    } catch (error) {\n      console.log('sync data error:', error);\n      throw error;\n    }\n  }\n\n  _updateSessionsHandler = () => {\n    this.updateActiveSessions();\n  };\n\n  @action\n  updateActiveSessions() {\n    this.timestamp = Date.now();\n    this.sessions =\n      this._rcCall?._callControl?.sessions.map((session: TelephonySession) => {\n        return session.data;\n      }) || [];\n  }\n\n  _newSessionHandler(session: Session) {\n    this._updateSessionsHandler();\n    session.removeListener('status', this._updateSessionsHandler);\n    session.removeListener('muted', this._updateSessionsHandler);\n    session.removeListener('recordings', this._updateSessionsHandler);\n    session.on('status', this._updateSessionsHandler);\n    session.on('muted', this._updateSessionsHandler);\n    session.on('recordings', this._updateSessionsHandler);\n  }\n\n  @action\n  removeActiveSession() {\n    this.activeSessionId = null;\n  }\n\n  // count it as load (should only call on container init step)\n  @action\n  setActiveSessionId(telephonySessionId: string) {\n    this.activeSessionId = telephonySessionId;\n  }\n\n  _checkConnectivity() {\n    if (\n      this._deps.connectivityMonitor &&\n      this._deps.connectivityMonitor.ready &&\n      this._connectivity !== this._deps.connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._deps.connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n\n  async _checkTabActive() {\n    if (!this._deps.tabManager || !this._deps.storage || !this._enableCache) {\n      return;\n    }\n    if (this._tabActive !== this._deps.tabManager?.active) {\n      this._tabActive = this._deps.tabManager?.active;\n      if (this._deps.tabManager?.active && this._rcCall) {\n        await this._rcCall.restoreSessions(this.sessions);\n        this._rcCall.sessions.forEach((session: Session) => {\n          this._newSessionHandler(session);\n        });\n      }\n    }\n  }\n\n  @action\n  setCallControlBusyTimestamp() {\n    this.busyTimestamp = Date.now();\n  }\n\n  @action\n  clearCallControlBusyTimestamp() {\n    this.busyTimestamp = 0;\n  }\n\n  @track(trackEvents.mute)\n  async mute(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.mute();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.muteConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.unmute)\n  async unmute(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.unmute();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.unMuteConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  async startRecord(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      await session.startRecord(recordingId);\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  getRecordingId(session: Session) {\n    const recording = session.recordings[0];\n    const recodingId = recording && recording.id;\n    return recodingId;\n  }\n\n  async stopRecord(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      await session.stopRecord(recordingId);\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.log('stop record error:', error);\n      this.clearCallControlBusyTimestamp();\n      throw error;\n    }\n  }\n\n  @track(trackEvents.hangup)\n  async hangUp(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.hangup();\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.error('hangup error', error);\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  async reject(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.toVoicemail();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.hold)\n  async hold(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.hold();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.holdConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  @track(trackEvents.unhold)\n  async unhold(telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      await session.unhold();\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (await conflictError(error)) {\n        this._deps.alert.warning({\n          message: callControlError.unHoldConflictError,\n        });\n      } else if (\n        !(await this._deps.availabilityMonitor?.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({\n          message: callControlError.generalError,\n        });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  async transfer(transferNumber: string, telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find(\n        (s: Session) => s.id === telephonySessionId,\n      );\n      const validatedResult = await this._deps.numberValidate.validateNumbers([\n        transferNumber,\n      ]);\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach(async (error) => {\n          const isHAError: boolean = await this._deps.availabilityMonitor?.checkIfHAError(\n            error,\n          );\n          if (!isHAError) {\n            // TODO: fix `callErrors` type\n            this._deps.alert.warning({\n              message: (callErrors as any)[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          }\n        });\n        return;\n      }\n      // TODO: fix `validatedResult` type in `numberValidate` module.\n      const validPhoneNumber =\n        (validatedResult as any).numbers[0] &&\n        (validatedResult as any).numbers[0].e164;\n      let phoneNumber = validPhoneNumber;\n      if (validPhoneNumber.indexOf('+') === -1) {\n        phoneNumber = [\n          this._deps.accountInfo.mainCompanyNumber,\n          validPhoneNumber,\n        ].join('*');\n      }\n      session.transfer(phoneNumber);\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      if (!(await this._deps.availabilityMonitor?.checkIfHAError(error))) {\n        this._deps.alert.warning({ message: callControlError.generalError });\n      }\n      this.clearCallControlBusyTimestamp();\n    }\n  }\n\n  // Incomplete Implementation?\n  async flip(flipValue: string, telephonySessionId: string) {\n    try {\n      this.setCallControlBusyTimestamp();\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      await session.flip({ callFlipId: flipValue });\n      this.clearCallControlBusyTimestamp();\n    } catch (error) {\n      console.error('flip error', error);\n      this.clearCallControlBusyTimestamp();\n      throw error;\n    }\n  }\n\n  async forward() {\n    // No implement at the moment\n    // Need to check the API document\n  }\n\n  // DTMF handing by webphone session temporary, due to rc call session doesn't support currently\n  async sendDTMF(dtmfValue: string, telephonySessionId: string) {\n    try {\n      const session = this._rcCall.sessions.find((s: Session) => {\n        return s.id === telephonySessionId;\n      });\n      // TODO: using rc call session\n      const { webphoneSession } = session;\n      if (webphoneSession) {\n        await webphoneSession.dtmf(dtmfValue, 100);\n      }\n    } catch (error) {\n      console.log('send dtmf error', error);\n      throw error;\n    }\n  }\n\n  getActiveSession(telephonySessionId: string) {\n    return this.activeSessions[telephonySessionId];\n  }\n\n  @computed(({ activeSessionId, activeSessions }: ActiveCallControl) => [\n    activeSessionId,\n    activeSessions,\n  ])\n  get activeSession() {\n    return this.getActiveSession(this.activeSessionId);\n  }\n\n  @computed((that: ActiveCallControl) => [\n    that._deps.callMonitor.calls,\n    that.sessions,\n    that.timestamp,\n  ])\n  get activeSessions() {\n    // TODO: add calls type in callMonitor modules\n    const reducer = (accumulator: any, call: any) => {\n      const { telephonySessionId } = call;\n      const session = this.sessions.find((s) => s.id === telephonySessionId);\n      if (!session) {\n        return accumulator;\n      }\n      accumulator[telephonySessionId] = normalizeSession({\n        session,\n        call,\n      });\n      return accumulator;\n    };\n    return this._deps.callMonitor.calls.reduce(reducer, {});\n  }\n\n  @computed((that: ActiveCallControl) => [that._deps.callMonitor.calls])\n  get sessionIdToTelephonySessionIdMapping() {\n    // TODO: add calls type in callMonitor modules\n    const reducer = (accumulator: any, call: any) => {\n      const { telephonySessionId, sessionId } = call;\n      accumulator[sessionId] = telephonySessionId;\n      return accumulator;\n    };\n    return this._deps.callMonitor.calls.reduce(reducer, {});\n  }\n\n  /**\n   * Mitigation strategy for avoiding 404/409 on call control endpoings.\n   * This should gradually move towards per session controls rather than\n   * a global busy timeout.\n   */\n  get busy() {\n    return Date.now() - this.busyTimestamp < DEFAULT_BUSY_TIMEOUT;\n  }\n\n  get _hasPermission() {\n    return this._deps.rolesAndPermissions.ringoutEnabled;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n}\n"],"file":"ActiveCallControl.js"}