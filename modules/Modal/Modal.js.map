{"version":3,"sources":["modules/Modal/Modal.tsx"],"names":["Modal","name","deps","that","modalIds","modalMapping","id","data","open","push","filter","modalId","_setListItem","props","_getId","_open","onOK","rest","Promise","resolve","alert","e","onCancel","cancelText","_close","confirm","disableBackdropClick","fullScreen","size","okText","onExited","_removeListItem","uuid","v4","map","RcModuleV2","state","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n} from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport * as uuid from 'uuid';\n\nimport {\n  AlertModalProps,\n  ConfirmModalProps,\n  DepsModules,\n  ModalItem,\n  ModalMappingType,\n} from './Modal.interface';\n\n@Module({\n  name: 'Modal',\n  deps: [],\n})\nexport class Modal extends RcModuleV2<DepsModules> {\n  @state\n  modalIds: string[] = [];\n\n  @state\n  modalMapping: ModalMappingType = {};\n\n  @computed((that: Modal) => [that.modalIds, that.modalMapping])\n  get modals() {\n    return this.modalIds.map((id) => this.modalMapping[id]);\n  }\n\n  @action\n  private _setListItem(id: string, data: ModalItem) {\n    if (data.open) {\n      this.modalIds.push(id);\n    }\n    this.modalMapping[id] = data;\n  }\n\n  @action\n  private _removeListItem(id: string) {\n    this.modalIds = this.modalIds.filter((modalId) => modalId !== id);\n    delete this.modalMapping[id];\n  }\n\n  private _close(id: string) {\n    if (this.modalMapping[id]) {\n      this._setListItem(id, { ...this.modalMapping[id], open: false });\n    }\n  }\n\n  alert(props: AlertModalProps) {\n    const id = this._getId();\n    return this._open(id, props);\n  }\n\n  /**\n   * ### This will be a `promise method`, resolve when `onOK` complete.\n   */\n  alertSync({ onOK, ...rest }: AlertModalProps) {\n    return new Promise<string>((resolve) => {\n      const id = this.alert({\n        ...rest,\n        onOK: async (e) => {\n          await onOK(e);\n          resolve(id);\n        },\n      });\n    });\n  }\n\n  confirm({ onCancel, ...rest }: ConfirmModalProps) {\n    const id = this._getId();\n    return this._open(id, {\n      cancelText: 'cancel',\n      onCancel: (e) => {\n        if (onCancel) onCancel(e);\n        this._close(id);\n      },\n      ...rest,\n    });\n  }\n\n  /**\n   * ### This will be a `promise method`, resolve when `onOK` or `onCancel` complete.\n   */\n  confirmSync({ onCancel, onOK, ...rest }: ConfirmModalProps) {\n    return new Promise<string>((resolve) => {\n      const id = this.confirm({\n        ...rest,\n        onOK: async (e) => {\n          await onOK(e);\n          resolve(id);\n        },\n        onCancel: (e) => {\n          if (onCancel) onCancel(e);\n          resolve(null);\n        },\n      });\n    });\n  }\n\n  close(id: string) {\n    this._close(id);\n  }\n\n  private _open(id: string, { onOK, ...rest }: ModalItem) {\n    this._setListItem(id, {\n      // default modal props\n      disableBackdropClick: true,\n      fullScreen: false,\n      open: true,\n      size: 'xsmall',\n      okText: 'ok',\n      ...rest,\n      onOK: (e) => {\n        onOK(e);\n        this._close(id);\n      },\n      onExited: () => {\n        this._removeListItem(id);\n      },\n    });\n    return id;\n  }\n\n  private _getId() {\n    return uuid.v4();\n  }\n}\n"],"file":"Modal.js"}