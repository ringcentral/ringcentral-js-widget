{"version":3,"sources":["modules/RcVideoV2/RcVideo.ts"],"names":["RcVideo","name","deps","dep","optional","preferences","isInstantMeeting","settingLocks","personalMeeting","initialVideoSetting","transformedPreferences","transformedSettingLocks","currentUser","extensionName","brandName","extensionId","accountId","delegator","loginUser","enableCache","storageKey","_showAdminLock","_showSaveAsDefault","_isInstantMeeting","_enableWaitingRoom","_enablePersonalMeeting","_enableScheduleOnBehalf","_enableReloadAfterSchedule","_createMeetingPromise","_deps","rcVideoOptions","showAdminLock","showSaveAsDefault","enableWaitingRoom","enablePersonalMeeting","enableScheduleOnBehalf","enableReloadAfterSchedule","settings","personalVideo","savedDefaultSetting","info","patch","meeting","videoConfiguration","isRCV","ready","status","videoStatus","isPreferencesChanged","delegatorList","delegators","_initMeeting","_initDelegators","updateDelegator","onInit","usePersonalMeetingId","_initMeetingSettings","_updateDelegator","userExtensionId","length","user","Number","_updateVideoStatus","initializing","_initPersonalMeeting","_initPreferences","initialized","_getPreferences","password_instant","_updatePreference","_updateMeetingSettingLocks","console","log","client","service","platform","get","meetingResult","json","_savePersonalMeeting","error","_resetPersonalMeeting","_errorHandle","result","processedDelegators","push","_updateDelegatorList","allowJoinBeforeHost","isOnlyAuthUserJoin","isOnlyCoworkersJoin","allowScreenSharing","muteAudio","muteVideo","isMeetingSecret","notShowAgain","waitingRoomMode","updateInfo","_saved","_saveDefaultVideoSetting","password","isSecret","isAlertSuccess","isScheduling","creating","meetingDetail","saveAsDefault","saveAsDefaultSetting","RCV_WAITTING_ROOM_API_KEYS","post","newMeeting","updateMeetingSettings","_getDialinNumbers","dialInNumber","getExtensionInfo","extensionInfo","savePreferencesChanges","setTimeout","alert","success","message","meetingStatus","scheduledSuccess","created","meetingResponse","idle","createMeeting","expiresIn","type","RcVideoTypes","phoneNumbers","Array","isArray","defaultPhoneNumber","find","obj","phoneNumber","id","RCV_PREFERENCES_IDS","res","list","forEach","value","readOnly","account","extension","_updateMeetingPreferences","preferenceId","send","method","url","body","isOverwrite","preferencesPayload","dirtyPreferences","Object","entries","filter","kvPairs","newValue","oldValue","isLocked","Promise","all","map","_saveSinglePreference","meetingId","shortId","updating","updatedSuccess","updated","personalVideoSetting","defaultVideoSetting","processedMeeting","_updateMeetingSettings","_comparePreferences","_updateIsPreferencesChanged","errors","MeetingErrors","warning","response","clone","errorCode","permissionName","danger","insufficientPermissions","payload","availabilityMonitor","checkIfHAError","internalError","accountInfo","brand","processedSettings","meetingPassword","isMeetingPasswordValid","settingLock","savedSetting","savedDefaultVideoSetting","startTime","topic","Date","ASSISTED_USERS_MYSELF","isLoginUser","RcModuleV2","storage","state","action","proxify","background"],"mappings":"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","sourcesContent":["import {\n  state,\n  action,\n  computed,\n  RcModuleV2,\n  storage,\n} from '@ringcentral-integration/core';\nimport { ObjectMapValue } from '@ringcentral-integration/core/lib/ObjectMap';\nimport { find, omit } from 'ramda';\nimport { Module } from '../../lib/di';\nimport { Deps, RcvDelegator } from './RcVideo.interface';\nimport background from '../../lib/background';\nimport proxify from '../../lib/proxy/proxify';\nimport meetingStatus from '../Meeting/meetingStatus';\nimport { videoStatus } from './videoStatus';\nimport { MeetingErrors } from '../Meeting';\nimport { ASSISTED_USERS_MYSELF, RcvWaitingRoomModeProps } from './constants';\nimport { getInitializedStartTime } from '../../helpers/meetingHelper';\nimport {\n  getDefaultVideoSettings,\n  validatePasswordSettings,\n  generateRandomPassword,\n  getTopic,\n  pruneMeetingObject,\n  RcVideoTypes,\n  transformPreferences,\n  reversePreferences,\n  comparePreferences,\n  transformSettingLocks,\n  getLockedPreferences,\n  RCV_PREFERENCES_IDS,\n  RCV_WAITTING_ROOM_API_KEYS,\n  patchWaitingRoomRelated,\n  assignObject,\n} from './videoHelper';\nimport {\n  RcVideoAPI,\n  RcVMeetingModel,\n  RcVSettingLocks,\n  RcVPreferencesGET,\n  RcVSettingLocksGET,\n  RcVPreferences,\n  RcVDialInNumberGET,\n  RcVPreferencesAPIResult,\n  RcVPreferenceDataItem,\n} from '../../interfaces/Rcv.model';\nimport { IMeeting } from '../../interfaces/Meeting.interface';\n\n@Module({\n  name: 'RcVideo',\n  deps: [\n    'Alert',\n    'Client',\n    'Brand',\n    'Storage',\n    'AccountInfo',\n    'ExtensionInfo',\n    'VideoConfiguration',\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'RcVideoOptions', optional: true },\n  ],\n})\nexport class RcVideo extends RcModuleV2<Deps> implements IMeeting {\n  protected _showAdminLock: boolean;\n  protected _showSaveAsDefault: boolean;\n  protected _isInstantMeeting: boolean;\n  protected _enableWaitingRoom: boolean;\n  protected _enablePersonalMeeting: boolean;\n  protected _enableScheduleOnBehalf: boolean;\n  protected _enableReloadAfterSchedule: boolean;\n\n  constructor(deps: Deps) {\n    super({\n      enableCache: true,\n      storageKey: 'RcVideo',\n      deps,\n    });\n    this._showAdminLock = this._deps.rcVideoOptions?.showAdminLock ?? false;\n    this._showSaveAsDefault =\n      this._deps.rcVideoOptions?.showSaveAsDefault ?? false;\n    this._isInstantMeeting =\n      this._deps.rcVideoOptions?.isInstantMeeting ?? false;\n    this._enableWaitingRoom =\n      this._deps.rcVideoOptions?.enableWaitingRoom ?? false;\n    this._enablePersonalMeeting =\n      this._deps.rcVideoOptions?.enablePersonalMeeting ?? false;\n    this._enableScheduleOnBehalf =\n      this._deps.rcVideoOptions?.enableScheduleOnBehalf ?? false;\n    this._enableReloadAfterSchedule =\n      this._deps.rcVideoOptions?.enableReloadAfterSchedule ?? true;\n  }\n\n  get enableScheduleOnBehalf() {\n    return this._enableScheduleOnBehalf;\n  }\n\n  @storage\n  @state\n  personalVideo: Partial<RcVideoAPI> = null;\n\n  // when migrate to rcv v2, computed defaultVideoSetting has conflict with storage key 'defaultVideoSetting'\n  // rcv save as default toggle has not opened yet, so change the key into 'savedDefaultSetting'\n  @storage\n  @state\n  savedDefaultSetting: Partial<RcVMeetingModel> = {};\n\n  @state\n  meeting: Partial<RcVMeetingModel> = {};\n\n  @state\n  videoStatus: ObjectMapValue<typeof videoStatus> = videoStatus.idle;\n\n  @state\n  preferences: RcVPreferencesGET = {};\n\n  @state\n  isPreferencesChanged: boolean = false;\n\n  @state\n  settingLocks: RcVSettingLocksGET = {};\n\n  @state\n  delegator: RcvDelegator = null;\n\n  @state\n  delegators: RcvDelegator[] = [];\n\n  @action\n  protected _savePersonalMeeting(settings: Partial<RcVideoAPI>) {\n    this.personalVideo = {\n      ...this.personalVideo,\n      ...settings,\n    };\n  }\n\n  @action\n  protected _resetPersonalMeeting() {\n    this.personalVideo = {};\n  }\n\n  @action\n  protected _saveDefaultVideoSetting(settings: Partial<RcVMeetingModel>) {\n    this.savedDefaultSetting = {\n      ...this.savedDefaultSetting,\n      ...settings,\n    };\n  }\n\n  @action\n  protected _updateMeetingSettings(\n    info: Partial<RcVMeetingModel>,\n    patch: boolean = true,\n  ) {\n    this.meeting = patch\n      ? {\n          ...this.meeting,\n          ...info,\n        }\n      : (info as RcVMeetingModel);\n  }\n\n  _shouldInit() {\n    return super._shouldInit() && this._deps.videoConfiguration.isRCV;\n  }\n\n  _shouldReset() {\n    return (\n      super._shouldReset() ||\n      (this.ready && !this._deps.videoConfiguration.isRCV)\n    );\n  }\n\n  @action\n  protected _updateVideoStatus(status: ObjectMapValue<typeof videoStatus>) {\n    this.videoStatus = status;\n  }\n\n  @action\n  protected _updateMeetingPreferences(preferences: RcVPreferencesGET) {\n    this.preferences = preferences;\n  }\n\n  @action\n  protected _updateIsPreferencesChanged(isPreferencesChanged: boolean) {\n    this.isPreferencesChanged = isPreferencesChanged;\n  }\n\n  @action\n  protected _updateMeetingSettingLocks(settingLocks: RcVSettingLocksGET) {\n    this.settingLocks = settingLocks;\n  }\n\n  @action\n  protected _updateDelegator(delegator: RcvDelegator) {\n    this.delegator = delegator;\n  }\n\n  @action\n  protected _updateDelegatorList(delegatorList: RcvDelegator[]) {\n    this.delegators = delegatorList;\n  }\n\n  @proxify\n  async onInit() {\n    await this._initMeeting();\n    if (this._enableScheduleOnBehalf) {\n      await this._initDelegators();\n      this.updateDelegator(this.loginUser);\n    }\n  }\n\n  /**\n   * Init basic meeting information\n   * also load meeting setting from previous one.\n   */\n  @background\n  async init() {\n    await this.onInit();\n  }\n\n  @proxify\n  async reload() {\n    await this.onInit();\n  }\n\n  @proxify\n  async switchUsePersonalMeetingId(usePersonalMeetingId: boolean) {\n    this._initMeetingSettings(usePersonalMeetingId);\n  }\n\n  @proxify\n  async updateDelegator(delegator: RcvDelegator) {\n    this._updateDelegator(delegator);\n  }\n\n  @proxify\n  async updateScheduleFor(userExtensionId: string) {\n    if (!userExtensionId || !this.delegators || this.delegators.length === 0) {\n      return;\n    }\n\n    const delegator: RcvDelegator = find(\n      (user: RcvDelegator) => user.extensionId === userExtensionId,\n      this.delegators,\n    );\n\n    if (!delegator) {\n      return;\n    }\n\n    this.updateDelegator(delegator);\n\n    this._initMeeting(Number(delegator.extensionId));\n  }\n\n  protected async _initMeeting(extensionId = this.extensionId) {\n    this._updateVideoStatus(videoStatus.initializing);\n\n    if (this._enablePersonalMeeting) {\n      await this._initPersonalMeeting(this.accountId, extensionId);\n    }\n    await this._initPreferences(this.accountId, extensionId);\n\n    this._initMeetingSettings(false);\n\n    this._updateVideoStatus(videoStatus.initialized);\n  }\n\n  async _initPreferences(\n    accountId: number = this.accountId,\n    extensionId: number = this.extensionId,\n  ) {\n    try {\n      const { preferences, settingLocks } = await this._getPreferences(\n        accountId,\n        extensionId,\n      );\n      // TODO Remove the next line after rcv implement ui to manage password_instant\n      preferences.password_instant = false;\n\n      this._updatePreference(preferences);\n      this._updateMeetingSettingLocks(settingLocks);\n    } catch (errors) {\n      console.log('preference error:', errors);\n      // this._errorHandle(errors);\n    }\n  }\n\n  async _initPersonalMeeting(\n    accountId: number = this.accountId,\n    extensionId: number = this.extensionId,\n  ) {\n    try {\n      const meetingResult = await this._deps.client.service\n        .platform()\n        .get('/rcvideo/v1/bridges', {\n          default: true,\n          accountId,\n          extensionId,\n        });\n      const meeting = (await meetingResult.json()) as RcVideoAPI;\n      this._savePersonalMeeting(meeting);\n    } catch (errors) {\n      console.error('fetch personal meeting error:', errors);\n      this._resetPersonalMeeting();\n      this._errorHandle(errors);\n    }\n  }\n\n  protected async _initDelegators() {\n    try {\n      const result = await this._deps.client.service\n        .platform()\n        .get('/rcvideo/v1/accounts/~/extensions/~/delegators');\n      const delegators = (await result.json()) as RcvDelegator[];\n      // to make sure it will equal to v1\n      const processedDelegators = delegators;\n      if (processedDelegators.length) {\n        processedDelegators.push(this.loginUser);\n      }\n      this._updateDelegatorList(processedDelegators);\n    } catch (errors) {\n      this._errorHandle(errors);\n    }\n  }\n\n  saveAsDefaultSetting(meeting: RcVMeetingModel) {\n    const {\n      allowJoinBeforeHost,\n      isOnlyAuthUserJoin,\n      isOnlyCoworkersJoin,\n      allowScreenSharing,\n      muteAudio,\n      muteVideo,\n      isMeetingSecret,\n      notShowAgain,\n      waitingRoomMode,\n    } = meeting;\n    const updateInfo: {\n      allowJoinBeforeHost: boolean;\n      isOnlyAuthUserJoin: boolean;\n      isOnlyCoworkersJoin: boolean;\n      allowScreenSharing: boolean;\n      muteAudio: boolean;\n      muteVideo: boolean;\n      isMeetingSecret: boolean;\n      waitingRoomMode: RcvWaitingRoomModeProps;\n      _saved?: boolean;\n    } = {\n      allowJoinBeforeHost,\n      isOnlyAuthUserJoin,\n      isOnlyCoworkersJoin,\n      allowScreenSharing,\n      muteAudio,\n      muteVideo,\n      isMeetingSecret,\n      waitingRoomMode,\n    };\n    if (notShowAgain) {\n      updateInfo._saved = notShowAgain;\n    }\n\n    this._saveDefaultVideoSetting(updateInfo);\n  }\n\n  validatePasswordSettings(password: string, isSecret: boolean): boolean {\n    return validatePasswordSettings(password, isSecret);\n  }\n\n  protected _createMeetingPromise: any = null;\n\n  @proxify\n  async createMeeting(\n    meeting: RcVMeetingModel,\n    { isAlertSuccess = true }: { isAlertSuccess?: boolean } = {},\n  ) {\n    if (this.isScheduling) return this._createMeetingPromise;\n    try {\n      this._updateVideoStatus(videoStatus.creating);\n\n      let meetingDetail: RcVideoAPI = pruneMeetingObject(meeting);\n\n      if (this._showSaveAsDefault && meeting.saveAsDefault) {\n        this.saveAsDefaultSetting(meeting);\n      }\n\n      if (!this.enableWaitingRoom) {\n        meetingDetail = omit([RCV_WAITTING_ROOM_API_KEYS], meetingDetail);\n      }\n\n      this._createMeetingPromise = this._deps.client.service\n        .platform()\n        .post('/rcvideo/v1/bridges', meetingDetail);\n\n      const result = await this._createMeetingPromise;\n      const newMeeting = await result.json();\n\n      this.updateMeetingSettings({\n        ...meeting,\n        saveAsDefault: false,\n      });\n\n      // After Create\n      const dialInNumber = await this._getDialinNumbers();\n      const extensionInfo = await this.getExtensionInfo(\n        this.currentUser.extensionId,\n      );\n      // sync preferences changes to rcv backend\n      if (meeting.saveAsDefault) {\n        await this.savePreferencesChanges(meeting);\n      }\n      // this will also fetch preference from rcv backend\n      if (this._enableReloadAfterSchedule) {\n        await this._initMeeting(Number(this.currentUser.extensionId));\n      }\n\n      if (isAlertSuccess) {\n        setTimeout(() => {\n          this._deps.alert.success({\n            message: meetingStatus.scheduledSuccess,\n          });\n        }, 50);\n      }\n\n      this._updateVideoStatus(videoStatus.created);\n\n      const meetingResponse = {\n        extensionInfo,\n        dialInNumber,\n        meeting: { ...meeting, ...newMeeting },\n      };\n\n      return {\n        ...meetingResponse,\n        ...meeting,\n      };\n    } catch (errors) {\n      console.log('failed to create rcv:', errors);\n      this._updateVideoStatus(videoStatus.idle);\n      this._errorHandle(errors);\n      return null;\n    } finally {\n      this._createMeetingPromise = null;\n    }\n  }\n\n  async startMeeting(\n    meeting: RcVMeetingModel,\n    isAlertSuccess: boolean = true,\n  ): Promise<any> {\n    // When user click on button \"start\", client create bridge type=0, but doesn't send time-to-life for this bridge. Backend has default ttl = 24 hours.\n    return this.createMeeting(\n      {\n        ...meeting,\n        expiresIn: null,\n        type: RcVideoTypes.meeting,\n      },\n      { isAlertSuccess },\n    );\n  }\n\n  protected async _getDialinNumbers(): Promise<string> {\n    const result = await this._deps.client.service\n      .platform()\n      .get('/rcvideo/v1/dial-in-numbers');\n    const { phoneNumbers } = (await result.json()) as RcVDialInNumberGET;\n    if (Array.isArray(phoneNumbers)) {\n      const defaultPhoneNumber = phoneNumbers.find((obj) => obj.default);\n      if (defaultPhoneNumber) {\n        return defaultPhoneNumber.phoneNumber;\n      }\n    }\n    return null;\n  }\n\n  protected async _getPreferences(\n    accountId: number = this.accountId,\n    extensionId: number = this.extensionId,\n  ): Promise<RcVPreferencesAPIResult> {\n    const res = await this._deps.client.service\n      .platform()\n      .get(\n        `/rcvideo/v1/account/${accountId}/extension/${extensionId}/preferences`,\n        {\n          id: RCV_PREFERENCES_IDS,\n        },\n      );\n    const list: Array<RcVPreferenceDataItem> = await res.json();\n    const preferences: RcVPreferencesGET = {};\n    const settingLocks: RcVSettingLocksGET = {};\n\n    list.forEach(({ id, value, readOnly }) => {\n      assignObject(preferences, value, id);\n      assignObject(settingLocks, readOnly, id);\n    });\n    return { preferences, settingLocks };\n  }\n\n  @proxify\n  async getExtensionInfo(extensionId: string) {\n    if (Number(extensionId) === this.extensionId) {\n      return this._deps.extensionInfo.info;\n    }\n    return this._deps.client.account().extension(extensionId).get();\n  }\n\n  protected _updatePreference(preferences: Partial<RcVPreferencesGET>) {\n    this._updateMeetingPreferences(preferences);\n  }\n\n  protected async _saveSinglePreference(\n    preferenceId: keyof RcVPreferencesGET,\n    value: boolean,\n  ): Promise<void> {\n    return this._deps.client.service.platform().send({\n      method: 'PATCH',\n      url: `/rcvideo/v1/account/~/extension/~/preferences/${preferenceId}`,\n      body: { value },\n    });\n  }\n\n  /**\n   * Determined the different between client and server, then save them to the server.\n   * @param preferences preference fileds in meeting object\n   * @param isOverwrite if true, dispatch updateMeetingPreferences on success\n   */\n  async savePreferencesChanges(\n    preferences: RcVPreferences,\n    isOverwrite = false,\n  ): Promise<void> {\n    const preferencesPayload = reversePreferences(\n      preferences,\n      this._isInstantMeeting,\n    );\n    type PreferenceEntries = [keyof RcVPreferencesGET, boolean];\n    const dirtyPreferences = Object.entries(preferencesPayload).filter(\n      (kvPairs): kvPairs is PreferenceEntries => {\n        const [preferenceId, newValue] = kvPairs as PreferenceEntries;\n        const oldValue = this.preferences[preferenceId];\n        const isLocked = this.settingLocks[preferenceId];\n        // hack for watingRoom, it will change locked option\n        return newValue !== oldValue && !isLocked;\n      },\n    );\n    try {\n      await Promise.all(\n        dirtyPreferences.map(([preferenceId, newValue]: PreferenceEntries) => {\n          return this._saveSinglePreference(preferenceId, newValue);\n        }),\n      );\n      if (isOverwrite) {\n        this._updatePreference(preferencesPayload);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  @proxify\n  async getMeeting(\n    meetingId: string,\n    accountId: number = this.accountId,\n    extensionId: number = this.extensionId,\n  ): Promise<RcVideoAPI> {\n    const result = await this._deps.client.service\n      .platform()\n      .get('/rcvideo/v1/bridges', {\n        shortId: meetingId,\n        accountId,\n        extensionId,\n      });\n    const meeting = (await result.json()) as RcVideoAPI;\n    return meeting;\n  }\n\n  @proxify\n  async updateMeeting(\n    meetingId: string,\n    meeting: RcVMeetingModel,\n    { isAlertSuccess = false }: { isAlertSuccess?: boolean } = {},\n  ) {\n    try {\n      this._updateVideoStatus(videoStatus.updating);\n\n      let meetingDetail: RcVideoAPI = pruneMeetingObject(meeting);\n\n      if (this._showSaveAsDefault && meeting.saveAsDefault) {\n        this.saveAsDefaultSetting(meeting);\n      }\n\n      if (!this.enableWaitingRoom) {\n        meetingDetail = omit([RCV_WAITTING_ROOM_API_KEYS], meetingDetail);\n      }\n      if (this._showSaveAsDefault && meeting.saveAsDefault) {\n        this.saveAsDefaultSetting(meeting);\n      }\n      const meetingResult = await this._deps.client.service.platform().send({\n        method: 'PATCH',\n        url: `/rcvideo/v1/bridges/${meeting.id}`,\n        body: meetingDetail,\n      });\n\n      // After Update\n      const dialInNumber = await this._getDialinNumbers();\n      const extensionInfo = await this.getExtensionInfo(\n        this.currentUser.extensionId,\n      );\n      if (meeting.saveAsDefault) {\n        await this.savePreferencesChanges(meeting, true);\n      }\n\n      if (isAlertSuccess) {\n        setTimeout(() => {\n          this._deps.alert.success({\n            message: meetingStatus.updatedSuccess,\n          });\n        }, 50);\n      }\n\n      const newMeeting = await meetingResult.json();\n      this._updateVideoStatus(videoStatus.updated);\n\n      const meetingResponse = {\n        extensionInfo,\n        dialInNumber,\n        meeting: { ...meeting, ...newMeeting },\n      };\n      if (this.personalMeeting && newMeeting.id === this.personalMeeting.id) {\n        this._savePersonalMeeting(newMeeting);\n      }\n      return meetingResponse;\n    } catch (errors) {\n      this._updateVideoStatus(videoStatus.idle);\n      this._errorHandle(errors);\n      return null;\n    }\n  }\n\n  protected _initMeetingSettings(usePersonalMeetingId: boolean) {\n    if (usePersonalMeetingId) {\n      this.updateMeetingSettings({\n        ...this.personalVideoSetting,\n      });\n    } else {\n      this.updateMeetingSettings({\n        ...this.defaultVideoSetting,\n      });\n    }\n  }\n\n  @proxify\n  async updateMeetingSettings(\n    meeting: Partial<RcVMeetingModel>,\n    patch: boolean = true,\n  ) {\n    let processedMeeting = meeting;\n    if (this.enableWaitingRoom) {\n      processedMeeting = {\n        ...meeting,\n        ...patchWaitingRoomRelated(\n          {\n            ...(this.meeting as RcVMeetingModel),\n            ...meeting,\n          },\n          this.transformedPreferences,\n          true,\n        ),\n      };\n    }\n    this._updateMeetingSettings(processedMeeting, patch);\n    this._comparePreferences();\n  }\n\n  protected _comparePreferences() {\n    this._updateIsPreferencesChanged(\n      comparePreferences(\n        this.transformedPreferences,\n        this.meeting as RcVMeetingModel,\n      ),\n    );\n  }\n\n  protected async _errorHandle(errors: any) {\n    if (errors instanceof MeetingErrors) {\n      for (const error of errors.all) {\n        this._deps.alert.warning(error);\n      }\n    } else if (errors && errors.response) {\n      const {\n        errorCode,\n        permissionName,\n      } = await errors.response.clone().json();\n      if (errorCode === 'InsufficientPermissions' && permissionName) {\n        this._deps.alert.danger({\n          message: meetingStatus.insufficientPermissions,\n          payload: {\n            permissionName,\n          },\n        });\n      } else if (\n        !this._deps.availabilityMonitor ||\n        !(await this._deps.availabilityMonitor.checkIfHAError(errors))\n      ) {\n        this._deps.alert.danger({\n          message: meetingStatus.internalError,\n        });\n      }\n    }\n  }\n\n  get personalMeeting(): Partial<RcVideoAPI> {\n    return this._enablePersonalMeeting ? this.personalVideo : null;\n  }\n\n  get savedDefaultVideoSetting(): Partial<RcVMeetingModel> {\n    return this._showSaveAsDefault ? this.savedDefaultSetting : null;\n  }\n\n  get extensionName(): string {\n    return this._deps.extensionInfo.info && this._deps.extensionInfo.info.name;\n  }\n\n  get extensionId(): number {\n    return this._deps.extensionInfo.info.id;\n  }\n\n  get accountId(): number {\n    return this._deps.accountInfo.id;\n  }\n\n  get brandName(): string {\n    return this._deps.brand.name;\n  }\n\n  get isInitializing(): boolean {\n    return this.videoStatus === videoStatus.initializing;\n  }\n\n  get isScheduling(): boolean {\n    return this.videoStatus === videoStatus.creating;\n  }\n\n  get showSaveAsDefault(): boolean {\n    return this._showSaveAsDefault;\n  }\n\n  get showAdminLock(): boolean {\n    return this._showAdminLock;\n  }\n\n  get enablePersonalMeeting(): boolean {\n    return this._enablePersonalMeeting;\n  }\n\n  get enableWaitingRoom(): boolean {\n    return this._enableWaitingRoom;\n  }\n\n  get isInstantMeeting(): boolean {\n    return this._isInstantMeeting;\n  }\n\n  @computed<RcVideo>(({ preferences, isInstantMeeting }) => [\n    preferences,\n    isInstantMeeting,\n  ])\n  get transformedPreferences(): RcVPreferences {\n    return transformPreferences(this.preferences, this.isInstantMeeting);\n  }\n\n  @computed<RcVideo>(({ settingLocks, isInstantMeeting }) => [\n    settingLocks,\n    isInstantMeeting,\n  ])\n  get transformedSettingLocks(): RcVSettingLocks {\n    return transformSettingLocks(this.settingLocks, this.isInstantMeeting);\n  }\n\n  @computed<RcVideo>(\n    ({\n      personalMeeting,\n      initialVideoSetting,\n      transformedPreferences,\n      transformedSettingLocks,\n    }) => [\n      personalMeeting,\n      initialVideoSetting,\n      transformedPreferences,\n      transformedSettingLocks,\n    ],\n  )\n  get personalVideoSetting() {\n    if (!this.personalMeeting) {\n      return null;\n    }\n    const processedSettings = {\n      ...this.initialVideoSetting,\n      ...this.personalMeeting,\n      ...getLockedPreferences(\n        this.transformedSettingLocks,\n        this.transformedPreferences,\n      ),\n      meetingPassword:\n        this.personalMeeting.meetingPassword || generateRandomPassword(10),\n      isMeetingPasswordValid: true, // assume personal meeting password is valid\n      id: this.personalMeeting.id,\n      usePersonalMeetingId: true,\n      settingLock: {\n        ...this.transformedSettingLocks,\n      },\n    } as RcVMeetingModel;\n    if (this.enableWaitingRoom) {\n      return {\n        ...processedSettings,\n        ...patchWaitingRoomRelated(\n          processedSettings,\n          this.transformedPreferences,\n        ),\n      };\n    }\n    return processedSettings;\n  }\n\n  @computed<RcVideo>(\n    ({\n      initialVideoSetting,\n      transformedPreferences,\n      transformedSettingLocks,\n    }) => [\n      initialVideoSetting,\n      transformedPreferences,\n      transformedSettingLocks,\n    ],\n  )\n  get defaultVideoSetting(): RcVMeetingModel {\n    const savedSetting = this._showSaveAsDefault\n      ? this.savedDefaultVideoSetting\n      : null;\n    return {\n      ...this.initialVideoSetting,\n      ...savedSetting,\n      ...this.transformedPreferences,\n      meetingPassword: generateRandomPassword(10),\n      isMeetingPasswordValid: true, // generated random password is valid\n      id: null,\n      usePersonalMeetingId: false,\n      settingLock: {\n        ...this.transformedSettingLocks,\n      },\n    };\n  }\n\n  @computed<RcVideo>(({ currentUser, extensionName, brandName }) => [\n    currentUser,\n    extensionName,\n    brandName,\n  ])\n  get initialVideoSetting(): RcVMeetingModel {\n    const startTime = getInitializedStartTime();\n    let extensionName = this.extensionName;\n    if (this.currentUser?.extensionId !== `${this.extensionId}`) {\n      extensionName = this.currentUser?.name;\n    }\n    const topic = getTopic(extensionName, this.brandName);\n    return getDefaultVideoSettings({\n      topic,\n      startTime: new Date(startTime),\n      accountId: this.currentUser.accountId,\n      extensionId: this.currentUser.extensionId,\n    });\n  }\n\n  @computed<RcVideo>(({ extensionId, accountId }) => [extensionId, accountId])\n  get loginUser(): RcvDelegator {\n    return {\n      name: ASSISTED_USERS_MYSELF,\n      id: `${this.extensionId}`,\n      extensionId: `${this.extensionId}`,\n      accountId: `${this.accountId}`,\n      isLoginUser: true,\n    };\n  }\n\n  @computed<RcVideo>(({ delegator, loginUser }) => [delegator, loginUser])\n  get currentUser(): RcvDelegator {\n    return this.delegator || this.loginUser;\n  }\n}\n"],"file":"RcVideo.js"}