{"version":3,"sources":["modules/GlipPosts/index.js"],"names":["glipPostsRegExp","glipGroupRegExp","subscriptionFilter","DEFAULT_LOAD_TTL","GlipPosts","deps","dep","optional","client","auth","subscription","storage","rolesAndPermissions","loadTtl","options","actionTypes","_reducer","_client","ensureExist","_auth","_rolesAndPermissions","_subscription","_fetchPromises","_lastMessage","_loadTtl","_storage","_readTimeStorageKey","registerReducer","key","reducer","_newPostListeners","listen","push","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_hasPermission","initSuccess","_shouldReset","resetSuccess","_shouldHandleSubscriptionMessage","_processSubscription","loggedIn","ready","pending","message","test","event","body","eventType","post","indexOf","createSuccess","groupId","record","oldRecordId","id","isSendByMe","creatorId","ownerId","forEach","recordCount","lastPosts","postsMap","fetchTime","fetchTimeMap","Date","now","fetchPosts","pageToken","fetch","params","glip","groups","posts","list","response","fetchSuccess","records","lastPageToken","navigation","fetchError","promise","pageInfo","pageInfos","prevPageToken","text","postInputs","mentions","length","mention","matcherId","replace","fakeId","fakeRecord","sendStatus","status","creating","creationTime","create","updatePostInput","createError","fileName","rawFile","platform","service","name","headers","json","console","error","time","updateReadTime","textValue","state","glipPostsStore","moduleStatuses","getItem","fetchTimes","hasGlipPermission","RcModule","proxify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GAAG,cAAxB;AACA,IAAMC,eAAe,GAAG,eAAxB;AAEA,IAAMC,kBAAkB,GAAG,aAA3B;AAEA,IAAMC,gBAAgB,GAAG,KAAK,EAAL,GAAU,IAAnC;IAYqBC,S,WAVpB,gBAAO;AACNC,EAAAA,IAAI,EAAE,CACJ,QADI,EAEJ,MAFI,EAGJ,cAHI,EAIJ,SAJI,EAKJ,qBALI,EAMJ;AAAEC,IAAAA,GAAG,EAAE,kBAAP;AAA2BC,IAAAA,QAAQ,EAAE;AAArC,GANI;AADA,CAAP,C;;;;;AAWC;;;;;;;;AAQA,2BAQG;AAAA;;AAAA;;AAAA,QAPDC,MAOC,QAPDA,MAOC;AAAA,QANDC,IAMC,QANDA,IAMC;AAAA,QALDC,YAKC,QALDA,YAKC;AAAA,QAJDC,OAIC,QAJDA,OAIC;AAAA,QAHDC,mBAGC,QAHDA,mBAGC;AAAA,4BAFDC,OAEC;AAAA,QAFDA,OAEC,6BAFSV,gBAET;AAAA,QADEW,OACF;;AAAA;;AACD,qGACKA,OADL;AAEEC,MAAAA,WAAW,EAAXA;AAFF;AAIA,UAAKC,QAAL,GAAgB,4BAAW,MAAKD,WAAhB,CAAhB;AAEA,UAAKE,OAAL,GAAe,2CAAMC,uBAAN,iBAAkBV,MAAlB,EAA0B,QAA1B,CAAf;AACA,UAAKW,KAAL,GAAa,2CAAMD,uBAAN,iBAAkBT,IAAlB,EAAwB,MAAxB,CAAb;AACA,UAAKW,oBAAL,GAA4B,2CAAMF,uBAAN,iBAC1BN,mBAD0B,EAE1B,qBAF0B,CAA5B;AAIA,UAAKS,aAAL,GAAqB,2CAAMH,uBAAN,iBAAkBR,YAAlB,EAAgC,cAAhC,CAArB;AACA,UAAKY,cAAL,GAAsB,EAAtB;AACA,UAAKC,YAAL,GAAoB,IAApB;AACA,UAAKC,QAAL,GAAgBX,OAAhB;AAEA,UAAKY,QAAL,GAAgBd,OAAhB;AACA,UAAKe,mBAAL,GAA2B,kBAA3B;;AACA,UAAKD,QAAL,CAAcE,eAAd,CAA8B;AAC5BC,MAAAA,GAAG,EAAE,MAAKF,mBADkB;AAE5BG,MAAAA,OAAO,EAAE,6CAA4B,MAAKd,WAAjC;AAFmB,KAA9B;;AAIA,UAAKe,iBAAL,GAAyB,EAAzB;AAxBC;AAyBF;;;;uCAEkBC,M,EAAQ;AACzB,UAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChC,aAAKD,iBAAL,CAAuBE,IAAvB,CAA4BD,MAA5B;AACD;AACF;;;iCAEY;AAAA;;AACX,WAAKE,KAAL,CAAWC,SAAX,CAAqB;AAAA,eAAM,MAAI,CAACC,cAAL,EAAN;AAAA,OAArB;AACD;;;;;;;;mBAGK,KAAKC,WAAL,E;;;;;AACF,mBAAKH,KAAL,CAAWI,QAAX,CAAoB;AAClBC,gBAAAA,IAAI,EAAE,KAAKvB,WAAL,CAAiBwB;AADL,eAApB;;kBAGK,KAAKC,c;;;;;;;;AACV,mBAAKP,KAAL,CAAWI,QAAX,CAAoB;AAClBC,gBAAAA,IAAI,EAAE,KAAKvB,WAAL,CAAiB0B;AADL,eAApB;;AAGA,mBAAKpB,aAAL,CAAmBa,SAAnB,CAA6BhC,kBAA7B;;;;;;AACK,kBAAI,KAAKwC,YAAL,EAAJ,EAAyB;AAC9B,qBAAKT,KAAL,CAAWI,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKvB,WAAL,CAAiB4B;AADL,iBAApB;AAGA,qBAAKrB,cAAL,GAAsB,EAAtB;AACD,eALM,MAKA,IAAI,KAAKsB,gCAAL,EAAJ,EAA6C;AAClD,qBAAKC,oBAAL;AACD;;;;;;;;;;;kCAGW;AACZ,aACE,KAAK1B,KAAL,CAAW2B,QAAX,IACA,KAAKzB,aAAL,CAAmB0B,KADnB,IAEA,KAAK3B,oBAAL,CAA0B2B,KAF1B,IAGA,KAAKC,OAJP;AAMD;;;mCAEc;AACb,aACE,CAAC,CAAC,KAAK7B,KAAL,CAAW2B,QAAZ,IACC,CAAC,KAAK1B,oBAAL,CAA0B2B,KAD5B,IAEC,CAAC,KAAK1B,aAAL,CAAmB0B,KAFtB,KAGA,KAAKA,KAJP;AAMD;;;uDAEkC;AACjC,aAAO,CAAC,EACN,KAAKA,KAAL,IACA,KAAK1B,aADL,IAEA,KAAKA,aAAL,CAAmB0B,KAFnB,IAGA,KAAK1B,aAAL,CAAmB4B,OAHnB,IAIA,KAAK5B,aAAL,CAAmB4B,OAAnB,KAA+B,KAAK1B,YAL9B,CAAR;AAOD;;;2CAEsB;AAAA,UACb0B,OADa,GACD,KAAK5B,aADJ,CACb4B,OADa;AAErB,WAAK1B,YAAL,GAAoB0B,OAApB;;AACA,UACEA,OAAO,KACNjD,eAAe,CAACkD,IAAhB,CAAqBD,OAAO,CAACE,KAA7B,KACClD,eAAe,CAACiD,IAAhB,CAAqBD,OAAO,CAACE,KAA7B,CAFK,CAAP,IAGAF,OAAO,CAACG,IAJV,EAKE;AAAA,4BAC+BH,OAAO,CAACG,IADvC;AAAA,YACQC,SADR,iBACQA,SADR;AAAA,YACsBC,IADtB;;AAEA,YAAID,SAAS,CAACE,OAAV,CAAkB,MAAlB,MAA8B,CAAlC,EAAqC;AACnC;AACD;;AACD,YAAIF,SAAS,KAAK,aAAlB,EAAiC;AAC/B;AACD;;AACD,aAAKpB,KAAL,CAAWI,QAAX,CAAoB;AAClBC,UAAAA,IAAI,EAAE,KAAKvB,WAAL,CAAiByC,aADL;AAElBC,UAAAA,OAAO,EAAEH,IAAI,CAACG,OAFI;AAGlBC,UAAAA,MAAM,EAAEJ,IAHU;AAIlBK,UAAAA,WAAW,EAAEL,IAAI,CAACM,EAJA;AAKlBC,UAAAA,UAAU,EACRP,IAAI,CAACQ,SAAL,KAAmB,KAAK3C,KAAL,CAAW4C,OAA9B,IAAyCV,SAAS,KAAK;AANvC,SAApB;;AAQA,YAAIA,SAAS,KAAK,WAAd,IAA6BC,IAAI,CAACQ,SAAL,KAAmB,KAAK3C,KAAL,CAAW4C,OAA/D,EAAwE;AACtE,eAAKjC,iBAAL,CAAuBkC,OAAvB,CAA+B,UAACjC,MAAD,EAAY;AACzCA,YAAAA,MAAM,CAACuB,IAAD,CAAN;AACD,WAFD;AAGD;AACF;AACF;;;8BAGeG,O;;;;;;;;;AAASQ,cAAAA,W,8DAAc,E;AAC/BC,cAAAA,S,GAAY,KAAKC,QAAL,CAAcV,OAAd,C;AACZW,cAAAA,S,GAAY,KAAKC,YAAL,CAAkBZ,OAAlB,C;;oBACdS,SAAS,IAAIE,SAAb,IAA0BE,IAAI,CAACC,GAAL,KAAaH,SAAb,GAAyB,KAAK5C,Q;;;;;;;;;8CAGtD,KAAKgD,UAAL,CAAgBf,OAAhB,EAAyBQ,WAAzB,C;;;;;;;;;;;+BAISR,O;;;;;;;;;;;AAASQ,cAAAA,W,8DAAc,E;AAAIQ,cAAAA,S;;kBACrChB,O;;;;;;;;AAGL,kBAAI,CAAC,KAAKnC,cAAL,CAAoBmC,OAApB,CAAL,EAAmC;AACjC,qBAAKnC,cAAL,CAAoBmC,OAApB,IAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAE5B,0BAAA,MAAI,CAACxB,KAAL,CAAWI,QAAX,CAAoB;AAClBC,4BAAAA,IAAI,EAAE,MAAI,CAACvB,WAAL,CAAiB2D;AADL,2BAApB;;AAGMC,0BAAAA,MALsB,GAKb;AAAEV,4BAAAA,WAAW,EAAXA;AAAF,2BALa;;AAM5B,8BAAIQ,SAAJ,EAAe;AACbE,4BAAAA,MAAM,CAACF,SAAP,GAAmBA,SAAnB;AACD;;AAR2B;AAAA,0DASL,MAAI,CAACxD,OAAL,CACpB2D,IADoB,GAEpBC,MAFoB,CAEbpB,OAFa,EAGpBqB,KAHoB,GAIpBC,IAJoB,CAIfJ,MAJe,CATK;;AAAA;AAStBK,0BAAAA,QATsB;;AAc5B,0BAAA,MAAI,CAAC/C,KAAL,CAAWI,QAAX,CAAoB;AAClBC,4BAAAA,IAAI,EAAE,MAAI,CAACvB,WAAL,CAAiBkE,YADL;AAElBxB,4BAAAA,OAAO,EAAPA,OAFkB;AAGlByB,4BAAAA,OAAO,EAAEF,QAAQ,CAACE,OAHA;AAIlBC,4BAAAA,aAAa,EAAEV,SAJG;AAKlBW,4BAAAA,UAAU,EAAEJ,QAAQ,CAACI;AALH,2BAApB;;AAd4B;AAAA;;AAAA;AAAA;AAAA;;AAsB5B,0BAAA,MAAI,CAACnD,KAAL,CAAWI,QAAX,CAAoB;AAClBC,4BAAAA,IAAI,EAAE,MAAI,CAACvB,WAAL,CAAiBsE;AADL,2BAApB;;AAtB4B;AA0B9B,0BAAA,MAAI,CAAC/D,cAAL,CAAoBmC,OAApB,IAA+B,IAA/B;;AA1B8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAD,EAA/B;AA4BD;;AACK6B,cAAAA,O,GAAU,KAAKhE,cAAL,CAAoBmC,OAApB,C;;8CACV6B,O;;;;;;;;;;;iCAIW7B,O,EAASQ,W;;;;;;AACpBsB,cAAAA,Q,GAAW,KAAKC,SAAL,CAAe/B,OAAf,C;AACXgB,cAAAA,S,GAAYc,QAAQ,IAAIA,QAAQ,CAACE,a;;kBAClChB,S;;;;;;;;;8CAGC,KAAKD,UAAL,CAAgBf,OAAhB,EAAyBQ,WAAzB,EAAsCQ,SAAtC,C;;;;;;;;;;;;;;;;;AAIOhB,cAAAA,O,SAAAA,O;AACTiC,cAAAA,I,GAAO,KAAKC,UAAL,CAAgBlC,OAAhB,KAA4B,KAAKkC,UAAL,CAAgBlC,OAAhB,EAAyBiC,I;AAC1DE,cAAAA,Q,GACJ,KAAKD,UAAL,CAAgBlC,OAAhB,KAA4B,KAAKkC,UAAL,CAAgBlC,OAAhB,EAAyBmC,Q;;oBACnD,yBAAQF,IAAR,KAAiB,CAACjC,O;;;;;;;;AAGtB,kBAAImC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAlC,EAAqC;AACnCD,gBAAAA,QAAQ,CAAC5B,OAAT,CAAiB,UAAC8B,OAAD,EAAa;AAC5B,sBAAI,CAACA,OAAO,CAACC,SAAb,EAAwB;AACtB;AACD;;AACDL,kBAAAA,IAAI,GAAGA,IAAI,CAACM,OAAL,CACLF,OAAO,CAACA,OADH,uBAESA,OAAO,CAACC,SAFjB,OAAP;AAID,iBARD;AASD;;AACKE,cAAAA,M,aAAY3B,IAAI,CAACC,GAAL,E;AACZ2B,cAAAA,U,GAAa;AACjBtC,gBAAAA,EAAE,EAAEqC,MADa;AAEjBxC,gBAAAA,OAAO,EAAPA,OAFiB;AAGjBK,gBAAAA,SAAS,EAAE,KAAK3C,KAAL,CAAW4C,OAHL;AAIjBoC,gBAAAA,UAAU,EAAEC,mBAAOC,QAJF;AAKjBC,gBAAAA,YAAY,YAAK,IAAIhC,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAAL,CALK;AAMjBmB,gBAAAA,IAAI,EAAJA,IANiB;AAOjBpD,gBAAAA,IAAI,EAAE;AAPW,e;;AAUjB,mBAAKL,KAAL,CAAWI,QAAX,CAAoB;AAClBC,gBAAAA,IAAI,EAAE,KAAKvB,WAAL,CAAiBwF,MADL;AAElB9C,gBAAAA,OAAO,EAAPA,OAFkB;AAGlBC,gBAAAA,MAAM,EAAEwC;AAHU,eAApB;AAKA,mBAAKM,eAAL,CAAqB;AAAEd,gBAAAA,IAAI,EAAE,EAAR;AAAYjC,gBAAAA,OAAO,EAAPA,OAAZ;AAAqBmC,gBAAAA,QAAQ,EAAE;AAA/B,eAArB;;8CACqB,KAAK3E,OAAL,CAClB2D,IADkB,GAElBC,MAFkB,CAEXpB,OAFW,EAGlBqB,KAHkB,GAIlBxB,IAJkB,CAIb;AACJoC,gBAAAA,IAAI,EAAJA;AADI,eAJa,C;;;AAAfhC,cAAAA,M;AAON,mBAAKzB,KAAL,CAAWI,QAAX,CAAoB;AAClBC,gBAAAA,IAAI,EAAE,KAAKvB,WAAL,CAAiByC,aADL;AAElBC,gBAAAA,OAAO,EAAPA,OAFkB;AAGlBC,gBAAAA,MAAM,EAANA,MAHkB;AAIlBC,gBAAAA,WAAW,EAAEsC;AAJK,eAApB;;;;;;;AAOAC,cAAAA,UAAU,CAACC,UAAX,GAAwBC,mBAAOK,WAA/B;AACA,mBAAKxE,KAAL,CAAWI,QAAX,CAAoB;AAClBC,gBAAAA,IAAI,EAAE,KAAKvB,WAAL,CAAiB0F,WADL;AAElB/C,gBAAAA,MAAM,EAAEwC,UAFU;AAGlBzC,gBAAAA,OAAO,EAAPA,OAHkB;AAIlBE,gBAAAA,WAAW,EAAEsC;AAJK,eAApB;AAMA,mBAAKO,eAAL,CAAqB;AAAEd,gBAAAA,IAAI,EAAJA,IAAF;AAAQjC,gBAAAA,OAAO,EAAPA,OAAR;AAAiBmC,gBAAAA,QAAQ,EAARA;AAAjB,eAArB;;;;;;;;;;;;;;;;;AAKac,cAAAA,Q,SAAAA,Q,EAAUjD,O,SAAAA,O,EAASkD,O,SAAAA,O;;AAE1BC,cAAAA,Q,GAAW,KAAK3F,OAAL,CAAa4F,OAAb,CAAqBD,QAArB,E;AACXxD,cAAAA,I,GAAOuD,O;;8CACUC,QAAQ,CAACtD,IAAT,CACrB,aADqB,EAErBF,IAFqB,EAGrB;AAAEK,gBAAAA,OAAO,EAAPA,OAAF;AAAWqD,gBAAAA,IAAI,EAAEJ;AAAjB,eAHqB,EAIrB;AACEK,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT;AADX,eAJqB,C;;;AAAjB/B,cAAAA,Q;gDAUCA,QAAQ,CAACgC,IAAT,E;;;;;AAEPC,cAAAA,OAAO,CAACC,KAAR;;;gDAEK,I;;;;;;;;;;;mCAIMzD,O,EAAS0D,I,EAAM;AAC5B,WAAKlF,KAAL,CAAWI,QAAX,CAAoB;AAClBC,QAAAA,IAAI,EAAE,KAAKvB,WAAL,CAAiBqG,cADL;AAElB3D,QAAAA,OAAO,EAAPA,OAFkB;AAGlB0D,QAAAA,IAAI,EAAJA;AAHkB,OAApB;AAKD;;;2CAG4C;AAAA,UAA3BzB,IAA2B,SAA3BA,IAA2B;AAAA,UAArBjC,OAAqB,SAArBA,OAAqB;AAAA,UAAZmC,QAAY,SAAZA,QAAY;AAC3C,WAAK3D,KAAL,CAAWI,QAAX,CAAoB;AAClBC,QAAAA,IAAI,EAAE,KAAKvB,WAAL,CAAiByF,eADL;AAElB/C,QAAAA,OAAO,EAAPA,OAFkB;AAGlBmC,QAAAA,QAAQ,EAARA,QAHkB;AAIlByB,QAAAA,SAAS,EAAE3B;AAJO,OAApB;AAMD;;;wBAEc;AACb,aAAO,KAAK4B,KAAL,CAAWC,cAAlB;AACD;;;wBAEY;AACX,aAAO,KAAKD,KAAL,CAAWlB,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKA,MAAL,KAAgBoB,2BAAezE,KAAtC;AACD;;;wBAEgB;AACf,aAAO,KAAKuE,KAAL,CAAW3B,UAAlB;AACD;;;wBAEiB;AAChB,aAAO,KAAKlE,QAAL,CAAcgG,OAAd,CAAsB,KAAK/F,mBAA3B,CAAP;AACD;;;wBAEe;AACd,aAAO,KAAK4F,KAAL,CAAW9B,SAAlB;AACD;;;wBAEkB;AACjB,aAAO,KAAK8B,KAAL,CAAWI,UAAlB;AACD;;;wBAEoB;AACnB,aAAO,KAAKtG,oBAAL,CAA0BuG,iBAAjC;AACD;;;;EArUoCC,qB,+DAsIpCC,mB,oJAUAA,mB,uJAuCAA,mB,mJAUAA,mB,+IA6DAA,mB,uJAsBAA,mB,8JASAA,mB","sourcesContent":["import { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport isBlank from '../../lib/isBlank';\nimport proxify from '../../lib/proxy/proxify';\n\nimport actionTypes from './actionTypes';\nimport getReducer, { getGlipPostsReadTimeReducer } from './getReducer';\nimport status from './status';\n\nconst glipPostsRegExp = /glip\\/posts$/;\nconst glipGroupRegExp = /glip\\/groups$/;\n\nconst subscriptionFilter = '/glip/posts';\n\nconst DEFAULT_LOAD_TTL = 30 * 60 * 1000;\n\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    'Subscription',\n    'Storage',\n    'RolesAndPermissions',\n    { dep: 'GlipPostsOptions', optional: true },\n  ],\n})\nexport default class GlipPosts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Auth} params.auth - auth module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermission module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   */\n  constructor({\n    client,\n    auth,\n    subscription,\n    storage,\n    rolesAndPermissions,\n    loadTtl = DEFAULT_LOAD_TTL,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._reducer = getReducer(this.actionTypes);\n\n    this._client = this::ensureExist(client, 'client');\n    this._auth = this::ensureExist(auth, 'auth');\n    this._rolesAndPermissions = this::ensureExist(\n      rolesAndPermissions,\n      'rolesAndPermissions',\n    );\n    this._subscription = this::ensureExist(subscription, 'subscription');\n    this._fetchPromises = {};\n    this._lastMessage = null;\n    this._loadTtl = loadTtl;\n\n    this._storage = storage;\n    this._readTimeStorageKey = 'glipPostReadTime';\n    this._storage.registerReducer({\n      key: this._readTimeStorageKey,\n      reducer: getGlipPostsReadTimeReducer(this.actionTypes),\n    });\n    this._newPostListeners = [];\n  }\n\n  addNewPostListener(listen) {\n    if (typeof listen === 'function') {\n      this._newPostListeners.push(listen);\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (!this._hasPermission) return;\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      this._subscription.subscribe(subscriptionFilter);\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n      this._fetchPromises = {};\n    } else if (this._shouldHandleSubscriptionMessage()) {\n      this._processSubscription();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this._subscription.ready &&\n      this._rolesAndPermissions.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._auth.loggedIn ||\n        !this._rolesAndPermissions.ready ||\n        !this._subscription.ready) &&\n      this.ready\n    );\n  }\n\n  _shouldHandleSubscriptionMessage() {\n    return !!(\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    );\n  }\n\n  _processSubscription() {\n    const { message } = this._subscription;\n    this._lastMessage = message;\n    if (\n      message &&\n      (glipPostsRegExp.test(message.event) ||\n        glipGroupRegExp.test(message.event)) &&\n      message.body\n    ) {\n      const { eventType, ...post } = message.body;\n      if (eventType.indexOf('Post') !== 0) {\n        return;\n      }\n      if (eventType === 'PostRemoved') {\n        return;\n      }\n      this.store.dispatch({\n        type: this.actionTypes.createSuccess,\n        groupId: post.groupId,\n        record: post,\n        oldRecordId: post.id,\n        isSendByMe:\n          post.creatorId === this._auth.ownerId && eventType === 'PostAdded',\n      });\n      if (eventType === 'PostAdded' && post.creatorId !== this._auth.ownerId) {\n        this._newPostListeners.forEach((listen) => {\n          listen(post);\n        });\n      }\n    }\n  }\n\n  @proxify\n  async loadPosts(groupId, recordCount = 20) {\n    const lastPosts = this.postsMap[groupId];\n    const fetchTime = this.fetchTimeMap[groupId];\n    if (lastPosts && fetchTime && Date.now() - fetchTime < this._loadTtl) {\n      return;\n    }\n    await this.fetchPosts(groupId, recordCount);\n  }\n\n  @proxify\n  async fetchPosts(groupId, recordCount = 20, pageToken) {\n    if (!groupId) {\n      return;\n    }\n    if (!this._fetchPromises[groupId]) {\n      this._fetchPromises[groupId] = (async () => {\n        try {\n          this.store.dispatch({\n            type: this.actionTypes.fetch,\n          });\n          const params = { recordCount };\n          if (pageToken) {\n            params.pageToken = pageToken;\n          }\n          const response = await this._client\n            .glip()\n            .groups(groupId)\n            .posts()\n            .list(params);\n          this.store.dispatch({\n            type: this.actionTypes.fetchSuccess,\n            groupId,\n            records: response.records,\n            lastPageToken: pageToken,\n            navigation: response.navigation,\n          });\n        } catch (e) {\n          this.store.dispatch({\n            type: this.actionTypes.fetchError,\n          });\n        }\n        this._fetchPromises[groupId] = null;\n      })();\n    }\n    const promise = this._fetchPromises[groupId];\n    await promise;\n  }\n\n  @proxify\n  async loadNextPage(groupId, recordCount) {\n    const pageInfo = this.pageInfos[groupId];\n    const pageToken = pageInfo && pageInfo.prevPageToken;\n    if (!pageToken) {\n      return;\n    }\n    await this.fetchPosts(groupId, recordCount, pageToken);\n  }\n\n  @proxify\n  async create({ groupId }) {\n    let text = this.postInputs[groupId] && this.postInputs[groupId].text;\n    const mentions =\n      this.postInputs[groupId] && this.postInputs[groupId].mentions;\n    if (isBlank(text) || !groupId) {\n      return;\n    }\n    if (mentions && mentions.length > 0) {\n      mentions.forEach((mention) => {\n        if (!mention.matcherId) {\n          return;\n        }\n        text = text.replace(\n          mention.mention,\n          `![:Person](${mention.matcherId})`,\n        );\n      });\n    }\n    const fakeId = `${Date.now()}`;\n    const fakeRecord = {\n      id: fakeId,\n      groupId,\n      creatorId: this._auth.ownerId,\n      sendStatus: status.creating,\n      creationTime: `${new Date(Date.now())}`,\n      text,\n      type: 'TextMessage',\n    };\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.create,\n        groupId,\n        record: fakeRecord,\n      });\n      this.updatePostInput({ text: '', groupId, mentions: [] });\n      const record = await this._client\n        .glip()\n        .groups(groupId)\n        .posts()\n        .post({\n          text,\n        });\n      this.store.dispatch({\n        type: this.actionTypes.createSuccess,\n        groupId,\n        record,\n        oldRecordId: fakeId,\n      });\n    } catch (e) {\n      fakeRecord.sendStatus = status.createError;\n      this.store.dispatch({\n        type: this.actionTypes.createError,\n        record: fakeRecord,\n        groupId,\n        oldRecordId: fakeId,\n      });\n      this.updatePostInput({ text, groupId, mentions });\n    }\n  }\n\n  @proxify\n  async sendFile({ fileName, groupId, rawFile }) {\n    try {\n      const platform = this._client.service.platform();\n      const body = rawFile;\n      const response = await platform.post(\n        '/glip/files',\n        body,\n        { groupId, name: fileName },\n        {\n          headers: {\n            'Content-Type': 'application/octet-stream',\n          },\n        },\n      );\n      return response.json();\n    } catch (e) {\n      console.error(e);\n    }\n    return null;\n  }\n\n  @proxify\n  updateReadTime(groupId, time) {\n    this.store.dispatch({\n      type: this.actionTypes.updateReadTime,\n      groupId,\n      time,\n    });\n  }\n\n  @proxify\n  updatePostInput({ text, groupId, mentions }) {\n    this.store.dispatch({\n      type: this.actionTypes.updatePostInput,\n      groupId,\n      mentions,\n      textValue: text,\n    });\n  }\n\n  get postsMap() {\n    return this.state.glipPostsStore;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get postInputs() {\n    return this.state.postInputs;\n  }\n\n  get readTimeMap() {\n    return this._storage.getItem(this._readTimeStorageKey);\n  }\n\n  get pageInfos() {\n    return this.state.pageInfos;\n  }\n\n  get fetchTimeMap() {\n    return this.state.fetchTimes;\n  }\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.hasGlipPermission;\n  }\n}\n"],"file":"index.js"}