{"version":3,"sources":["modules/Call/index.js"],"names":["TO_NUMBER","FROM_NUMBER","ANONYMOUS","Call","deps","dep","optional","alert","brand","storage","callingSettings","softphone","ringout","webphone","numberValidate","regionSettings","rolesAndPermissions","internationalCheck","permissionCheck","availabilityMonitor","options","actionTypes","callActionTypes","_brand","_alert","ensureExist","_storage","_storageKey","_reducer","_callingSettings","_ringout","_softphone","_webphone","_numberValidate","_regionSettings","_rolesAndPermissions","_internationalCheck","_availabilityMonitor","_callSettingMode","_permissionCheck","registerReducer","key","reducer","lastPhoneNumber","lastRecipient","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_initCallModule","initSuccess","_shouldReset","_resetCallModule","ready","_processCall","pending","callingMode","callingModes","connect","resetSuccess","disconnect","oldCallSettingMode","value","toNumberChanged","data","entityId","startTime","isIdle","toNumberMatched","cleanToNumberEntities","input","phoneNumber","recipient","fromNumber","isConference","session","extendedControls","toNumber","extension","trim","length","warning","message","callErrors","noToNumber","callSettingMode","_getValidatedNumbers","validatedNumbers","_getNumbers","_makeCall","connectSuccess","connectError","payload","ringoutErrors","firstLegConnectFailed","connectFailed","danger","networkError","checkIfHAError","internalError","isWebphone","theFromNumber","myLocation","waitingValidateNumbers","push","number","parsedToNumber","parsedFromNumber","numbers","map","x","validatedResult","id","toNumberIndex","findIndex","fromNumberIndex","validateNumbers","result","errors","forEach","error","international","permissions","InternationalCalls","originalString","parsedToNumberE164","e164","subAddress","join","parsedFromNumberE164","homeCountryId","makeCall","split","prompt","ringoutPrompt","state","status","callStatus","idle","getItem","toNumberEntities","RcModule","proxify"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport extractControls from '@ringcentral-integration/phone-number/lib/extractControls';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport callingModes from '../CallingSettings/callingModes';\nimport proxify from '../../lib/proxy/proxify';\nimport ensureExist from '../../lib/ensureExist';\n\nimport callActionTypes from './actionTypes';\nimport getCallReducer, {\n  getLastPhoneNumberReducer,\n  getLastRecipientReducer,\n} from './getCallReducer';\n\nimport callStatus from './callStatus';\nimport callErrors from './callErrors';\nimport ringoutErrors from '../Ringout/ringoutErrors';\nimport validateNumbers from '../../lib/validateNumbers';\n\nconst TO_NUMBER = 'toNumber';\nconst FROM_NUMBER = 'fromNumber';\nconst ANONYMOUS = 'anonymous';\n\n/**\n * @class\n * @description Call managing module\n */\n@Module({\n  deps: [\n    'Alert',\n    'Storage',\n    'Brand',\n    'Softphone',\n    'Ringout',\n    'NumberValidate',\n    'RegionSettings',\n    'CallingSettings',\n    'RolesAndPermissions',\n    { dep: 'Webphone', optional: true },\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'CallOptions', optional: true },\n  ],\n})\nexport default class Call extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Brand} params.brand - brand module instance\n   * @param {Alert} params.alert - alert module instance\n   * @param {Client} params.client - client module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {CallingSettings} params.callingSettings - callingSettings module instance\n   * @param {Softphone} params.softphone - softphone module instance\n   * @param {Ringout} params.ringout - ringout module instance\n   * @param {Webphone} params.webphone - webphone module instance\n   * @param {NumberValidate} params.numberValidate - numberValidate module instance\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   */\n  constructor({\n    alert,\n    brand,\n    storage,\n    callingSettings,\n    softphone,\n    ringout,\n    webphone,\n    numberValidate,\n    regionSettings,\n    rolesAndPermissions,\n    internationalCheck = true,\n    permissionCheck = true,\n    availabilityMonitor,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: callActionTypes,\n    });\n\n    this._brand = brand;\n\n    this._alert = this::ensureExist(alert, 'alert');\n    this._storage = this::ensureExist(storage, 'storage');\n    this._storageKey = 'callData';\n    this._reducer = getCallReducer(this.actionTypes);\n    this._callingSettings = this::ensureExist(\n      callingSettings,\n      'callingSettings',\n    );\n    this._ringout = this::ensureExist(ringout, 'ringout');\n    this._softphone = this::ensureExist(softphone, 'softphone');\n    this._webphone = webphone;\n    this._numberValidate = this::ensureExist(numberValidate, 'numberValidate');\n    this._regionSettings = this::ensureExist(regionSettings, 'regionSettings');\n    this._rolesAndPermissions = this::ensureExist(\n      rolesAndPermissions,\n      'rolesAndPermissions',\n    );\n    this._internationalCheck = internationalCheck;\n    this._availabilityMonitor = availabilityMonitor;\n    this._callSettingMode = null;\n    this._permissionCheck = permissionCheck;\n\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: combineReducers({\n        lastPhoneNumber: getLastPhoneNumberReducer(this.actionTypes),\n        lastRecipient: getLastRecipientReducer(this.actionTypes),\n      }),\n    });\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this._initCallModule();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetCallModule();\n    } else if (this.ready) {\n      await this._processCall();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._numberValidate.ready &&\n      this._callingSettings.ready &&\n      this._storage.ready &&\n      this._regionSettings.ready &&\n      (!this._webphone || this._webphone.ready) &&\n      (!this._availabilityMonitor || this._availabilityMonitor.ready) &&\n      this._ringout.ready &&\n      this._softphone.ready &&\n      this._rolesAndPermissions.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._numberValidate.ready ||\n        !this._callingSettings.ready ||\n        !this._regionSettings.ready ||\n        (!!this._webphone && !this._webphone.ready) ||\n        (!!this._availabilityMonitor && !this._availabilityMonitor.ready) ||\n        !this._ringout.ready ||\n        !this._softphone.ready ||\n        !this._rolesAndPermissions.ready ||\n        !this._storage.ready) &&\n      this.ready\n    );\n  }\n\n  async _initCallModule() {\n    this._callSettingMode = this._callingSettings.callingMode;\n    if (this._callSettingMode === callingModes.webphone && this._webphone) {\n      await this._webphone.connect();\n    }\n  }\n\n  _resetCallModule() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n    this._callSettingMode = this._callingSettings.callingMode;\n    if (this._callSettingMode === callingModes.webphone && this._webphone) {\n      this._webphone.disconnect();\n    }\n  }\n\n  async _processCall() {\n    const oldCallSettingMode = this._callSettingMode;\n    if (\n      this._callingSettings.callingMode !== oldCallSettingMode &&\n      this._webphone\n    ) {\n      this._callSettingMode = this._callingSettings.callingMode;\n      if (oldCallSettingMode === callingModes.webphone) {\n        this._webphone.disconnect();\n      } else if (this._callSettingMode === callingModes.webphone) {\n        await this._webphone.connect();\n      }\n    }\n  }\n\n  @proxify\n  async onToNumberChange(value) {\n    this.store.dispatch({\n      type: this.actionTypes.toNumberChanged,\n      data: value,\n    });\n  }\n\n  // save the click to dial entity, only when call took place\n  onToNumberMatch({ entityId, startTime }) {\n    if (this.isIdle) {\n      this.store.dispatch({\n        type: this.actionTypes.toNumberMatched,\n        data: { entityId, startTime },\n      });\n    }\n  }\n\n  cleanToNumberEntities() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanToNumberEntities,\n    });\n  }\n\n  @proxify\n  async call({\n    phoneNumber: input,\n    recipient,\n    fromNumber,\n    isConference = false,\n  }) {\n    let session = null;\n    if (this.isIdle) {\n      const { phoneNumber, extendedControls } = extractControls(input);\n      const toNumber =\n        (recipient && (recipient.phoneNumber || recipient.extension)) ||\n        phoneNumber;\n      if (!toNumber || `${toNumber}`.trim().length === 0) {\n        this._alert.warning({\n          message: callErrors.noToNumber,\n        });\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.connect,\n          isConference,\n          phoneNumber,\n          recipient,\n          callSettingMode: this._callSettingMode, // for Track\n        });\n        try {\n          let validatedNumbers;\n          if (this._permissionCheck) {\n            validatedNumbers = await this._getValidatedNumbers({\n              toNumber,\n              fromNumber,\n              isConference,\n            });\n          } else {\n            validatedNumbers = this._getNumbers({\n              toNumber,\n              fromNumber,\n              isConference,\n            });\n          }\n          if (validatedNumbers) {\n            session = await this._makeCall({\n              ...validatedNumbers,\n              extendedControls,\n            });\n            this.store.dispatch({\n              type: this.actionTypes.connectSuccess,\n              callSettingMode: this._callSettingMode, // for Track\n            });\n          } else {\n            this.store.dispatch({\n              type: this.actionTypes.connectError,\n            });\n          }\n        } catch (error) {\n          if (!error.message && error.type && callErrors[error.type]) {\n            // validate format error\n            this._alert.warning({\n              message: callErrors[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          } else if (error.message === ringoutErrors.firstLegConnectFailed) {\n            this._alert.warning({\n              message: callErrors.connectFailed,\n              payload: error,\n            });\n          } else if (error.message === 'Failed to fetch') {\n            this._alert.danger({\n              message: callErrors.networkError,\n              payload: error,\n            });\n          } else if (error.message !== 'Refresh token has expired') {\n            if (\n              !this._availabilityMonitor ||\n              !this._availabilityMonitor.checkIfHAError(error)\n            ) {\n              this._alert.danger({\n                message: callErrors.internalError,\n                payload: error,\n              });\n            }\n          }\n          this.store.dispatch({\n            type: this.actionTypes.connectError,\n          });\n          throw error;\n        }\n      }\n    }\n    return session;\n  }\n\n  @proxify\n  _getNumbers({ toNumber, fromNumber, isConference }) {\n    const isWebphone =\n      this._callingSettings.callingMode === callingModes.webphone;\n    const theFromNumber =\n      fromNumber ||\n      (isWebphone\n        ? this._callingSettings.fromNumber\n        : this._callingSettings.myLocation);\n\n    if (isWebphone && (theFromNumber === null || theFromNumber === '')) {\n      return null;\n    }\n\n    const waitingValidateNumbers = [];\n\n    if (!isConference) {\n      waitingValidateNumbers.push({\n        type: TO_NUMBER,\n        number: toNumber,\n      });\n    }\n\n    if (\n      theFromNumber &&\n      theFromNumber.length > 0 &&\n      !(isWebphone && theFromNumber === ANONYMOUS)\n    ) {\n      waitingValidateNumbers.push({\n        type: FROM_NUMBER,\n        number: theFromNumber,\n      });\n    }\n\n    let parsedToNumber;\n    let parsedFromNumber;\n\n    if (waitingValidateNumbers.length) {\n      const numbers = waitingValidateNumbers.map((x) => x.number);\n      const validatedResult = validateNumbers(\n        numbers,\n        this._regionSettings,\n        this._brand.id,\n      );\n      const toNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === TO_NUMBER,\n      );\n      const fromNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === FROM_NUMBER,\n      );\n      parsedToNumber = validatedResult[toNumberIndex];\n      parsedFromNumber = validatedResult[fromNumberIndex];\n    }\n    if (isWebphone && theFromNumber === ANONYMOUS) {\n      parsedFromNumber = ANONYMOUS;\n    }\n    return {\n      toNumber: parsedToNumber || toNumber,\n      fromNumber: parsedFromNumber,\n    };\n  }\n\n  @proxify\n  async _getValidatedNumbers({ toNumber, fromNumber, isConference }) {\n    const isWebphone =\n      this._callingSettings.callingMode === callingModes.webphone;\n    const theFromNumber =\n      fromNumber ||\n      (isWebphone\n        ? this._callingSettings.fromNumber\n        : this._callingSettings.myLocation);\n\n    if (isWebphone && (theFromNumber === null || theFromNumber === '')) {\n      return null;\n    }\n\n    const waitingValidateNumbers = [];\n\n    if (!isConference) {\n      waitingValidateNumbers.push({\n        type: TO_NUMBER,\n        number: toNumber,\n      });\n    }\n\n    if (\n      theFromNumber &&\n      theFromNumber.length > 0 &&\n      !(isWebphone && theFromNumber === ANONYMOUS)\n    ) {\n      waitingValidateNumbers.push({\n        type: FROM_NUMBER,\n        number: theFromNumber,\n      });\n    }\n\n    let parsedToNumber;\n    let parsedFromNumber;\n    if (waitingValidateNumbers.length) {\n      const numbers = waitingValidateNumbers.map((x) => x.number);\n      const validatedResult = await this._numberValidate.validateNumbers(\n        numbers,\n      );\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach((error) => {\n          // this._alert.warning({\n          //   message: callErrors[error.type],\n          //   payload: {\n          //     phoneNumber: error.phoneNumber\n          //   }\n          // });\n          throw error;\n        });\n        return null;\n      }\n      const toNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === TO_NUMBER,\n      );\n      const fromNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === FROM_NUMBER,\n      );\n      parsedToNumber = validatedResult.numbers[toNumberIndex];\n      parsedFromNumber = validatedResult.numbers[fromNumberIndex];\n    }\n    if (this._internationalCheck) {\n      if (\n        parsedToNumber &&\n        parsedToNumber.international &&\n        !this._rolesAndPermissions.permissions.InternationalCalls\n      ) {\n        const error = {\n          phoneNumber: parsedToNumber.originalString,\n          type: 'noInternational',\n        };\n        throw error;\n      }\n    }\n\n    let parsedToNumberE164 = toNumber;\n    if (parsedToNumber) {\n      parsedToNumberE164 = parsedToNumber.e164;\n      // add ext back if any\n      if (parsedToNumber.e164 && parsedToNumber.subAddress) {\n        parsedToNumberE164 = [\n          parsedToNumber.e164,\n          parsedToNumber.subAddress,\n        ].join('*');\n      }\n    }\n\n    // using e164 in response to call\n    let parsedFromNumberE164;\n    if (parsedFromNumber) {\n      parsedFromNumberE164 = parsedFromNumber.e164;\n      // add ext back if any\n      if (parsedFromNumber.e164 && parsedFromNumber.subAddress) {\n        parsedFromNumberE164 = [\n          parsedFromNumber.e164,\n          parsedFromNumber.subAddress,\n        ].join('*');\n      }\n    }\n    if (isWebphone && theFromNumber === ANONYMOUS) {\n      parsedFromNumberE164 = ANONYMOUS;\n    }\n    return {\n      toNumber: parsedToNumberE164,\n      fromNumber: parsedFromNumberE164,\n    };\n  }\n\n  @proxify\n  async _makeCall({\n    toNumber,\n    fromNumber,\n    callingMode = this._callingSettings.callingMode,\n    extendedControls = [],\n  }) {\n    const homeCountryId = this._regionSettings.homeCountryId;\n    let session;\n    switch (callingMode) {\n      case callingModes.softphone:\n        session = this._softphone.makeCall(toNumber);\n        break;\n      case callingModes.ringout:\n        session = await this._ringout.makeCall({\n          fromNumber,\n          toNumber: toNumber && toNumber.split('*')[0], // remove extension number in ringout mode\n          prompt: this._callingSettings.ringoutPrompt,\n        });\n        break;\n      case callingModes.webphone:\n        if (this._webphone) {\n          session = await this._webphone.makeCall({\n            fromNumber,\n            toNumber,\n            homeCountryId,\n            extendedControls,\n          });\n        }\n        break;\n      default:\n        break;\n    }\n    return session;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get callStatus() {\n    return this.state.callStatus;\n  }\n\n  get isIdle() {\n    return this.state.callStatus === callStatus.idle;\n  }\n\n  get lastPhoneNumber() {\n    return this._storage.getItem(this._storageKey).lastPhoneNumber;\n  }\n\n  get lastRecipient() {\n    return this._storage.getItem(this._storageKey).lastRecipient;\n  }\n\n  get toNumber() {\n    return this.state.toNumber;\n  }\n\n  get toNumberEntities() {\n    return this.state.toNumberEntities;\n  }\n}\n"],"file":"index.js"}