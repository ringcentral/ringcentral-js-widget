{"version":3,"sources":["modules/TabManager/TabManager.ts"],"names":["TabManager","_tabbie","enabled","state","status","moduleStatuses","ready","active","id","hasMultipleTabs","event","tabs","isFirstTab","options","actionTypes","Tabbie","prefix","_reducer","store","initSuccess","checkIsMain","type","dispatch","on","events","mainTabIdChanged","mainTabId","args","send","checkTabAliveById","RcModule","proxify"],"mappings":"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","sourcesContent":["import moduleStatuses from '../../enums/moduleStatuses';\nimport { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\nimport { Tabbie } from '../../lib/Tabbie';\nimport actionTypes from './actionTypes';\nimport getTabManagerReducer from './getTabManagerReducer';\nimport proxify from '../../lib/proxy/proxify';\n\ninterface TabManagerEvent {\n  name: string;\n  args: any[];\n}\n\n/**\n * @class\n * @description To handle data between different tabs\n */\n@Module()\nexport default class TabManager extends RcModule<\n  Record<string, any>,\n  typeof actionTypes\n> {\n  _tabbie: Tabbie;\n\n  get enable() {\n    return this._tabbie.enabled;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get active() {\n    return this.state.active;\n  }\n\n  get id() {\n    return this._tabbie.id;\n  }\n\n  get hasMultipleTabs() {\n    return this._tabbie.hasMultipleTabs;\n  }\n\n  get event(): TabManagerEvent {\n    return this.state.event;\n  }\n\n  get tabs() {\n    return this._tabbie.tabs;\n  }\n\n  get isFirstTab() {\n    return this._tabbie.isFirstTab;\n  }\n\n  constructor({ ...options }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._tabbie = new Tabbie({\n      prefix: this.prefix,\n    });\n    this._reducer = getTabManagerReducer(this.actionTypes);\n  }\n\n  async initialize() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n      active: await this._tabbie.checkIsMain(),\n    });\n\n    if (this._tabbie.enabled) {\n      this._tabbie.on(\n        this._tabbie.events.mainTabIdChanged,\n        async (mainTabId) => {\n          this.store.dispatch({\n            type: this.actionTypes.mainTabIdChanged,\n            mainTabId,\n            active: await this._tabbie.checkIsMain(),\n          });\n        },\n      );\n\n      this._tabbie.on(this._tabbie.events.event, (event, ...args) => {\n        this.store.dispatch({\n          type: this.actionTypes.event,\n          event,\n          args,\n        });\n      });\n    }\n  }\n\n  @proxify\n  async send(event: string, ...args: any[]) {\n    this._tabbie.send(event, ...args);\n  }\n\n  @proxify\n  async checkIsMain() {\n    return this._tabbie.checkIsMain();\n  }\n\n  /**\n   * check tab alive state by tabId\n   * @param id tabId you want to check\n   */\n  @proxify\n  async checkTabAliveById(id: string) {\n    return this._tabbie.checkTabAliveById(id);\n  }\n}\n"],"file":"TabManager.js"}