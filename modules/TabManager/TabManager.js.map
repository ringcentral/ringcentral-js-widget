{"version":3,"sources":["modules/TabManager/TabManager.ts"],"names":["TabManager","state","status","moduleStatuses","ready","active","_tabbie","id","hasMultipleTabs","event","tabs","isFirstTab","options","actionTypes","Tabbie","prefix","_reducer","store","initSuccess","checkIsMain","type","dispatch","enabled","on","events","mainTabIdChanged","mainTabId","args","send","checkTabAliveById","RcModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAYqBA,U;AALrB;;;;OAIC,iB;;;;;;;wBAOc;AACX,aAAO,KAAKC,KAAL,CAAWC,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKD,KAAL,CAAWC,MAAX,KAAsBC,2BAAeC,KAA5C;AACD;;;wBAEY;AACX,aAAO,KAAKH,KAAL,CAAWI,MAAlB;AACD;;;wBAEQ;AACP,aAAO,KAAKC,OAAL,CAAaC,EAApB;AACD;;;wBAEqB;AACpB,aAAO,KAAKD,OAAL,CAAaE,eAApB;AACD;;;wBAE4B;AAC3B,aAAO,KAAKP,KAAL,CAAWQ,KAAlB;AACD;;;wBAEU;AACT,aAAO,KAAKH,OAAL,CAAaI,IAApB;AACD;;;wBAEgB;AACf,aAAO,KAAKJ,OAAL,CAAaK,UAApB;AACD;;;AAED,4BAA4B;AAAA;;AAAA,QAAXC,OAAW;;AAAA;;AAC1B,8DACKA,OADL;AAEEC,MAAAA,WAAW,EAAXA;AAFF;AAD0B,UAlC5BP,OAkC4B;AAK1B,UAAKA,OAAL,GAAe,IAAIQ,cAAJ,CAAW;AACxBC,MAAAA,MAAM,EAAE,MAAKA;AADW,KAAX,CAAf;AAGA,UAAKC,QAAL,GAAgB,sCAAqB,MAAKH,WAA1B,CAAhB;AAR0B;AAS3B;;;;;;;;;;;;+BAGC,KAAKI,K;+BACG,KAAKJ,WAAL,CAAiBK,W;;uBACT,KAAKZ,OAAL,CAAaa,WAAb,E;;;;;AADdC,kBAAAA,I;AACAf,kBAAAA,M;;;6BAFSgB,Q;;AAKX,oBAAI,KAAKf,OAAL,CAAagB,OAAjB,EAA0B;AACxB,uBAAKhB,OAAL,CAAaiB,EAAb,CACE,KAAKjB,OAAL,CAAakB,MAAb,CAAoBC,gBADtB;AAAA,wFAEE,iBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA,4CACE,MAAI,CAACT,KADP;AAAA,4CAEU,MAAI,CAACJ,WAAL,CAAiBY,gBAF3B;AAAA,4CAGIC,SAHJ;AAAA;AAAA,qCAIkB,MAAI,CAACpB,OAAL,CAAaa,WAAb,EAJlB;;AAAA;AAAA;AAAA;AAEIC,gCAAAA,IAFJ;AAGIM,gCAAAA,SAHJ;AAIIrB,gCAAAA,MAJJ;AAAA;;AAAA,0CACagB,QADb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF;;AAAA;AAAA;AAAA;AAAA;;AAWA,uBAAKf,OAAL,CAAaiB,EAAb,CAAgB,KAAKjB,OAAL,CAAakB,MAAb,CAAoBf,KAApC,EAA2C,UAACA,KAAD,EAAoB;AAAA,sDAATkB,IAAS;AAATA,sBAAAA,IAAS;AAAA;;AAC7D,oBAAA,MAAI,CAACV,KAAL,CAAWI,QAAX,CAAoB;AAClBD,sBAAAA,IAAI,EAAE,MAAI,CAACP,WAAL,CAAiBJ,KADL;AAElBA,sBAAAA,KAAK,EAALA,KAFkB;AAGlBkB,sBAAAA,IAAI,EAAJA;AAHkB,qBAApB;AAKD,mBAND;AAOD;;;;;;;;;;;;;;;;;;yBAGElB,K,EAA+B;AAAA;;AAAA,yCAAbkB,IAAa;AAAbA,QAAAA,IAAa;AAAA;;AAClC,4BAAKrB,OAAL,EAAasB,IAAb,uBAAkBnB,KAAlB,SAA4BkB,IAA5B;AACD;;;;;;;;;kDAGQ,KAAKrB,OAAL,CAAaa,WAAb,E;;;;;;;;;;;;;;;;AAGT;;;;;;;sCAIkBZ,E,EAAY;AAC5B,aAAO,KAAKD,OAAL,CAAauB,iBAAb,CAA+BtB,EAA/B,CAAP;AACD;;;;EA3FqCuB,qB","sourcesContent":["import moduleStatuses from '../../enums/moduleStatuses';\nimport { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\nimport { Tabbie } from '../../lib/Tabbie';\nimport actionTypes from './actionTypes';\nimport getTabManagerReducer from './getTabManagerReducer';\n\ninterface TabManagerEvent {\n  name: string;\n  args: any[];\n}\n\n/**\n * @class\n * @description To handle data between different tabs\n */\n@Module()\nexport default class TabManager extends RcModule<\n  Record<string, any>,\n  typeof actionTypes\n> {\n  _tabbie: Tabbie;\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get active() {\n    return this.state.active;\n  }\n\n  get id() {\n    return this._tabbie.id;\n  }\n\n  get hasMultipleTabs() {\n    return this._tabbie.hasMultipleTabs;\n  }\n\n  get event(): TabManagerEvent {\n    return this.state.event;\n  }\n\n  get tabs() {\n    return this._tabbie.tabs;\n  }\n\n  get isFirstTab() {\n    return this._tabbie.isFirstTab;\n  }\n\n  constructor({ ...options }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._tabbie = new Tabbie({\n      prefix: this.prefix,\n    });\n    this._reducer = getTabManagerReducer(this.actionTypes);\n  }\n\n  async initialize() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n      active: await this._tabbie.checkIsMain(),\n    });\n\n    if (this._tabbie.enabled) {\n      this._tabbie.on(\n        this._tabbie.events.mainTabIdChanged,\n        async (mainTabId) => {\n          this.store.dispatch({\n            type: this.actionTypes.mainTabIdChanged,\n            mainTabId,\n            active: await this._tabbie.checkIsMain(),\n          });\n        },\n      );\n\n      this._tabbie.on(this._tabbie.events.event, (event, ...args) => {\n        this.store.dispatch({\n          type: this.actionTypes.event,\n          event,\n          args,\n        });\n      });\n    }\n  }\n\n  send(event: string, ...args: any[]) {\n    this._tabbie.send(event, ...args);\n  }\n\n  async checkIsMain() {\n    return this._tabbie.checkIsMain();\n  }\n\n  /**\n   * check tab alive state by tabId\n   * @param id tabId you want to check\n   */\n  checkTabAliveById(id: string) {\n    return this._tabbie.checkTabAliveById(id);\n  }\n}\n"],"file":"TabManager.js"}