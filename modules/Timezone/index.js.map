{"version":3,"sources":["modules/Timezone/index.ts"],"names":["Timezone","deps","auth","client","storage","options","actionTypes","CACHE_TTL","_auth","_client","_storage","_storageKey","_localeTimezone","_reducer","registerReducer","key","reducer","store","subscribe","_onStateChange","pending","ready","dispatch","type","init","_initTimezones","initSuccess","updateCacheExpiredAt","resetSuccess","dictionary","timezone","get","data","records","updateTimezones","timezones","cacheExpiredAt","Date","state","status","getItem","moduleStatuses","bias","String","getTimezoneOffset","find","RcModule","proxify"],"mappings":"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","sourcesContent":["import Client from 'ringcentral-client';\nimport { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\nimport getTimezoneReducer from './getTimezoneReducer';\nimport actionTypes, { TimezoneActionTypes } from './actionTypes';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport proxify from '../../lib/proxy/proxify';\n\ninterface ITimezoneResponse {\n  navigation: {\n    firstPage: { uri: string };\n    lastPage: { uri: string };\n  };\n  paging: {\n    page: number;\n    pageEnd: number;\n    pageStart: number;\n    perPage: number;\n    totalElements: number;\n    totalPages: number;\n  };\n  records: ITimezone[];\n}\n\ninterface ITimezone {\n  id: string;\n  bias: string;\n  description: string;\n  name: string;\n  uri?: string;\n}\n\n/**\n * @class\n * @description timezone module\n */\n@Module({\n  deps: ['Auth', 'Client', 'Storage'],\n})\nexport default class Timezone extends RcModule<\n  Record<string, any>,\n  TimezoneActionTypes\n> {\n  private CACHE_TTL = 60 * 60e3;\n\n  private _auth: any;\n  private _client: Client;\n  private _storage: any;\n  private _storageKey: string;\n  private _localeTimezone: ITimezone;\n\n  _reducer: any;\n\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({ auth, client, storage, ...options }) {\n    super({\n      actionTypes,\n      ...options,\n    });\n    this._auth = auth;\n    this._client = client;\n    this._storage = storage;\n\n    this._reducer = getTimezoneReducer(this.actionTypes);\n    this._storageKey = 'timezone';\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: this._reducer,\n    });\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (\n      this.pending &&\n      this._auth.ready &&\n      this._storage.ready\n      // && this.shouldUpdateTimezones\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      await this._initTimezones();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      this.updateCacheExpiredAt();\n    }\n    if (this.ready && !this._auth.ready && !this._storage.ready) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  @proxify\n  private async _initTimezones() {\n    const data = await this._client\n      .dictionary()\n      .timezone()\n      .get();\n    const { records = [] } = data as ITimezoneResponse;\n    this.updateTimezones(records);\n  }\n\n  @proxify\n  updateTimezones(timezones: ITimezone[]) {\n    this.store.dispatch({\n      type: this.actionTypes.updateTimezones,\n      timezones,\n    });\n  }\n\n  @proxify\n  updateCacheExpiredAt() {\n    const cacheExpiredAt = +new Date() + this.CACHE_TTL;\n    this.store.dispatch({\n      type: this.actionTypes.updateCacheExpiredAt,\n      cacheExpiredAt,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get storage() {\n    if (!this._storage.ready) {\n      return {};\n    }\n    return this._storage.getItem(this._storageKey) || {};\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get timezones(): ITimezone[] {\n    const { timezones = [] } = this.storage;\n    return timezones;\n  }\n\n  get cacheExpiredAt() {\n    const { cacheExpiredAt = null } = this.storage;\n    return cacheExpiredAt;\n  }\n\n  get localeTimezone() {\n    if (!this._localeTimezone) {\n      const bias = String(-new Date().getTimezoneOffset());\n      this._localeTimezone = this.timezones.find(\n        (timezone) => timezone.bias === bias,\n      );\n    }\n    return this._localeTimezone;\n  }\n\n  get shouldUpdateTimezones() {\n    return !this.cacheExpiredAt || this.cacheExpiredAt < +new Date();\n  }\n}\n"],"file":"index.js"}