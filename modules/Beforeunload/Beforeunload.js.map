{"version":3,"sources":["modules/Beforeunload/Beforeunload.ts"],"names":["UNLOAD_EVENT_NAME","Beforeunload","name","deps","dep","optional","_list","value","_bindState","length","window","removeEventListener","_beforeunloadHandler","addEventListener","event","checkShouldBlock","preventDefault","returnValue","cb","index","list","indexOf","_removeItem","fn","i","splice","RcModuleV2"],"mappings":"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","sourcesContent":["import { RcModuleV2 } from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nconst UNLOAD_EVENT_NAME = 'beforeunload';\n\ntype BeforeunloadFn = () => boolean;\n\n@Module({\n  name: 'Beforeunload',\n  deps: [{ dep: 'BeforeunloadOptions', optional: true }],\n})\nexport class Beforeunload extends RcModuleV2 {\n  private get list() {\n    return this._list;\n  }\n\n  private set list(value) {\n    this._list = value;\n\n    if (this._bindState && this._list.length === 0) {\n      window.removeEventListener(UNLOAD_EVENT_NAME, this._beforeunloadHandler);\n      // TODO: binding event here, that will not emit when close tab, not sure why\n      // window.removeEventListener('unload', this._onAfterUnload);\n      this._bindState = false;\n    } else if (!this._bindState && this._list.length > 0) {\n      window.addEventListener(UNLOAD_EVENT_NAME, this._beforeunloadHandler);\n      // TODO: binding event here, that will not emit when close tab, not sure why\n      // window.addEventListener('unload', this._onAfterUnload);\n      this._bindState = true;\n    }\n  }\n\n  private _list: BeforeunloadFn[] = [];\n\n  private _bindState = false;\n\n  constructor() {\n    super({\n      deps: {},\n    });\n  }\n\n  /**\n   * add method into window event beforeunload\n   * @param cb a callback with boolean, if return `true` that will block browser close.\n   */\n  add(cb: BeforeunloadFn) {\n    const index = this.list.indexOf(cb);\n\n    if (index === -1) {\n      this.list = [...this.list, cb];\n      return this.list.length;\n    }\n\n    return index;\n  }\n\n  /**\n   * remove check from check list.\n   * @param cb a callback that you add previous.\n   */\n  remove(cb: BeforeunloadFn) {\n    const index = this.list.indexOf(cb);\n\n    if (index > -1) {\n      this._removeItem(index);\n    }\n\n    return index;\n  }\n\n  /**\n   * clear all check methods\n   */\n  clear() {\n    this.list = [];\n  }\n\n  /**\n   * check all should block callback, and return should we need block\n   */\n  checkShouldBlock() {\n    for (const fn of this._list) {\n      if (fn()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * that method will trigger after check not leave success\n   */\n  onAfterUnload(cb: () => void) {\n    window.addEventListener('unload', () => {\n      if (this.checkShouldBlock()) {\n        cb();\n      }\n    });\n  }\n\n  private _removeItem(i: number) {\n    const list = [...this.list];\n    list.splice(i, 1);\n\n    this.list = list;\n  }\n\n  private _beforeunloadHandler = (event: BeforeUnloadEvent) => {\n    if (this.checkShouldBlock()) {\n      event.preventDefault();\n      event.returnValue = '';\n      return;\n    }\n\n    // Guarantee the browser unload by removing the returnValue property of the event\n    delete event.returnValue;\n  };\n}\n"],"file":"Beforeunload.js"}