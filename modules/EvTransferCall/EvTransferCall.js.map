{"version":3,"sources":["modules/EvTransferCall/EvTransferCall.ts"],"names":["EvTransferCall","name","deps","dep","optional","evClient","evCallMonitor","evCall","evSubscription","evWorkingState","storage","modal","locale","alert","evSessionConfig","enableCache","modules","storageKey","_eventEmitter","AsyncEventEmitter","_internalTransferCallbacks","cancelTemplate","_sendVoiceMailModalId","_incomingTransferCallModalId","_transferNotificationId","_transferDest","getTransferPhoneBook","_modules","getCurrentCall","currentCall","transferPhoneBook","map","item","_parsedDestination","phoneNumber","destination","countryCode","countryId","type","formatTypes","e164","e","getTransferAgentAvailable","transferAgentList","transferAgentId","find","agentId","available","data","state","receivedCall","cancelable","isTransferCancelable","transferType","transferTypes","phoneBook","transferPhoneBookSelectedIndex","transferRecipientNumber","transferRecipientCountryId","stayOnCall","value","currentAgent","index","transferStatus","isConfigSuccessByLocal","setTransferStatus","transferStatuses","idle","addCallEndedHook","closeModals","subscribe","EvCallbackTypes","DIRECT_AGENT_TRANSFER","internalTransferCallback","status","directTransferStatues","ACCEPTED","directTransferTypes","WARM","setCancelableTransfer","showNotificationLoadingCancel","REJECTED","SUCCEEDED","includes","showNotificationLoadingSpinner","DIRECT_AGENT_TRANSFER_NOTIF","directTransferNotificationTypes","PENDING","hasReceivedCall","setReceivedCall","_showIncomingTransferCallModal","CANCELLED","onTransferStart","info","message","transferEvents","START","loading","backdrop","ttl","isInternalTransfer","onTransferSuccess","closeLoadingNotification","success","transferSuccesses","TRANSFER_CONNECTED","onTransferError","_showSendVoiceMailModal","danger","transferErrors","TRANSFER_ERROR","onTransferEnd","console","log","update","action","dismiss","handler","on","END","ERROR","SUCCESS","close","fetchDirectAgentList","result","agents","error","Array","isArray","changeAgentList","rejectDirectAgentTransferCall","uii","setWorkingStateWorking","setTimeout","sendVoicemailDirectAgentTransfer","VOICEMAIL","SEND_VOICEMAIL_SUCCESS","SEND_VOICEMAIL_ERROR","cancelInternalTransfer","Error","transferring","cancelDirectAgentTransfer","Promise","resolve","reject","CANCEL","COLD","cancelWarmTransferCall","warn","parsePhoneBookNumber","manualEntry","parseManualEntryNumber","EvTypeError","RECIPIENT_NUMBER_ERROR","toNumber","CONTACT_ID_ERROR","transferPhoneBookSelected","parseNumber","asyncEmit","internal","internalTransferCall","transferCall","dialDest","TYPE_ERROR","messageTypes","NO_SUPPORT_COUNTRY","INVALID_NUMBER","callErrors","noToNumber","AGENT_ID_ERROR","fetchAgentList","warmDirectAgentTransfer","coldDirectAgentTransfer","transferArgs","warmTransferCall","coldTransferCall","allowTransfer","endedCall","allowManualInternationalTransfer","warmTransferIntlCall","coldTransferIntlCall","templates","confirm","title","i18n","getString","currentLocale","okText","content","cancelText","onOK","sendVoicemailToAgent","acceptTransferCall","onCancel","rejectTransferCall","allowDirectAgentTransfer","RcModuleV2"],"mappings":"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","sourcesContent":["import {\n  action,\n  createSelector,\n  RcModuleState,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { format, formatTypes } from '@ringcentral-integration/phone-number';\nimport { alpha3ToAlpha2 } from 'i18n-iso-countries';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport callErrors from 'ringcentral-integration/modules/Call/callErrors';\n\nimport { messageTypes } from '../../enums';\nimport { directTransferNotificationTypes } from '../../enums/directTransferNotificationTypes';\nimport { directTransferStatues } from '../../enums/directTransferStatues';\nimport { directTransferTypes } from '../../enums/directTransferTypes';\nimport { transferErrors } from '../../enums/transferErrors';\nimport { transferEvents } from '../../enums/transferEvents';\nimport { TransferStatus, transferStatuses } from '../../enums/transferStatuses';\nimport { transferSuccesses } from '../../enums/transferSuccesses';\nimport { EvTransferType, transferTypes } from '../../enums/transferTypes';\nimport { Handler } from '../../interfaces/Common.interface';\nimport { EvCallData } from '../../interfaces/EvData.interface';\nimport { AsyncEventEmitter } from '../../lib/asyncEventEmitter';\nimport { checkCountryCode } from '../../lib/checkCountryCode';\nimport {\n  EvDirectAgentListItem,\n  EvReceivedTransferCall,\n} from '../../lib/EvClient';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport { EvTypeError } from '../../lib/EvTypeError';\nimport { parseNumber } from '../../lib/parseNumber';\nimport {\n  DepsModules,\n  InternalTransferCallbacks,\n  State,\n  TransferCall,\n} from './EvTransferCall.inerface';\nimport i18n from './i18n';\n\ntype EvTransferCallState = RcModuleState<EvTransferCall, State>;\n\n@Module({\n  name: 'EvTransferCall',\n  deps: [\n    'EvClient',\n    'EvCallMonitor',\n    'EvCall',\n    'EvSubscription',\n    'EvWorkingState',\n    'Storage',\n    'Modal',\n    'Locale',\n    'Alert',\n    'EvSessionConfig',\n    { dep: 'EvTransferCallOptions', optional: true },\n  ],\n})\nclass EvTransferCall extends RcModuleV2<DepsModules, EvTransferCallState>\n  implements TransferCall {\n  protected _eventEmitter = new AsyncEventEmitter();\n  protected _internalTransferCallbacks: InternalTransferCallbacks = {};\n\n  // alertTemplate: ModalTemplate;\n  cancelTemplate: React.ReactNode;\n\n  private _sendVoiceMailModalId: string = null;\n  private _incomingTransferCallModalId: string = null;\n  private _transferNotificationId: string = null;\n  private _transferDest: string = null;\n\n  constructor({\n    evClient,\n    evCallMonitor,\n    evCall,\n    evSubscription,\n    evWorkingState,\n    storage,\n    modal,\n    locale,\n    alert,\n    evSessionConfig,\n    enableCache = true,\n  }) {\n    super({\n      modules: {\n        evClient,\n        evCallMonitor,\n        evCall,\n        evSubscription,\n        evWorkingState,\n        storage,\n        modal,\n        locale,\n        alert,\n        evSessionConfig,\n      },\n      enableCache,\n      storageKey: 'EvTransferCall',\n    });\n  }\n\n  @storage\n  @state\n  receivedCall: EvReceivedTransferCall = null;\n\n  @storage\n  @state\n  isTransferCancelable = false;\n\n  @storage\n  @state\n  transferStatus: TransferStatus = transferStatuses.idle;\n\n  @storage\n  @state\n  transferType: EvTransferType = transferTypes.phoneBook;\n\n  @storage\n  @state\n  transferAgentId = null;\n\n  @storage\n  @state\n  transferAgentList: EvDirectAgentListItem[] = [];\n\n  @storage\n  @state\n  transferPhoneBookSelectedIndex: number = null;\n\n  @storage\n  @state\n  transferRecipientNumber = '';\n\n  @storage\n  @state\n  transferRecipientCountryId = 'USA';\n\n  @storage\n  @state\n  stayOnCall = true;\n\n  get transferring() {\n    return this.transferStatus === transferStatuses.loading;\n  }\n\n  get evClient() {\n    return this._modules.evClient;\n  }\n\n  get allowManualInternationalTransfer() {\n    return this._modules.evCall.getCurrentCall()\n      ?.allowManualInternationalTransfer;\n  }\n\n  get allowInternalTransfer() {\n    return (\n      this._modules.evCall.getCurrentCall()?.allowDirectAgentTransfer !== '0'\n    );\n  }\n\n  get isInternalTransfer() {\n    return this.transferType === transferTypes.internal;\n  }\n\n  getTransferPhoneBook = createSelector(\n    () => this._modules.evCall.getCurrentCall(),\n    (currentCall) =>\n      currentCall.transferPhoneBook?.map((item) => {\n        let _parsedDestination: string;\n        try {\n          _parsedDestination = format({\n            phoneNumber: item.destination,\n            countryCode: alpha3ToAlpha2(item.countryId),\n            type: formatTypes.e164,\n          });\n        } catch (e) {\n          //\n        }\n        return {\n          ...item,\n          _parsedDestination,\n        };\n      }) || [],\n  );\n\n  @action\n  setReceivedCall(data) {\n    this.state.receivedCall = data;\n  }\n\n  @action\n  setCancelableTransfer(cancelable) {\n    this.state.isTransferCancelable = cancelable;\n  }\n\n  @action\n  resetTransferStatus() {\n    this.state.receivedCall = null;\n    this.state.transferType = transferTypes.phoneBook;\n    this.state.transferAgentId = null;\n    this.state.transferAgentList = [];\n    this.state.transferPhoneBookSelectedIndex = null;\n    this.state.transferRecipientNumber = '';\n    this.state.transferRecipientCountryId = 'USA';\n    this.state.stayOnCall = true;\n    this.state.isTransferCancelable = false;\n    this._sendVoiceMailModalId = null;\n    this._incomingTransferCallModalId = null;\n    this._transferDest = null;\n  }\n\n  @action\n  changeStayOnCall(value: boolean) {\n    this.state.stayOnCall = !value;\n  }\n\n  @action\n  changeRecipientCountryId(countryId) {\n    this.state.transferRecipientCountryId = countryId;\n  }\n\n  @action\n  changeTransferType(type) {\n    this.state.transferType = type;\n  }\n\n  @action\n  changeAgentList(data) {\n    const currentAgent = data.find(\n      ({ agentId }) => agentId === this.transferAgentId,\n    );\n    if (!currentAgent) {\n      this.state.transferAgentId = null;\n    }\n    this.state.transferAgentList = data;\n  }\n\n  @action\n  changeRecipientNumber(phoneNumber) {\n    this.state.transferRecipientNumber = phoneNumber;\n  }\n\n  @action\n  changeTransferPhoneBookSelected(index) {\n    this.state.transferPhoneBookSelectedIndex = index;\n  }\n\n  @action\n  changeTransferAgentId(agentId) {\n    this.state.transferAgentId = agentId;\n  }\n\n  @action\n  setTransferStatus(transferStatus) {\n    this.state.transferStatus = transferStatus;\n  }\n\n  getTransferAgentAvailable = createSelector(\n    () => this.transferAgentList,\n    () => this.transferAgentId,\n    (transferAgentList, transferAgentId) => {\n      return transferAgentList.find((item) => item.agentId === transferAgentId)\n        .available;\n    },\n  );\n\n  onInit() {\n    if (!this._modules.evSessionConfig.isConfigSuccessByLocal) {\n      this.setTransferStatus(transferStatuses.idle);\n    }\n  }\n\n  onInitOnce() {\n    this._modules.evCallMonitor.addCallEndedHook(() => {\n      this.closeModals();\n    });\n\n    this._modules.evSubscription.subscribe(\n      EvCallbackTypes.DIRECT_AGENT_TRANSFER,\n      (data) => {\n        const internalTransferCallback = this._internalTransferCallbacks[\n          data.type\n        ];\n        if (\n          data.status === directTransferStatues.ACCEPTED &&\n          data.type === directTransferTypes.WARM\n        ) {\n          if (!this.getTransferAgentAvailable()) {\n            this.setCancelableTransfer(true);\n            this.showNotificationLoadingCancel();\n          }\n          return;\n        }\n        if (\n          [\n            directTransferStatues.REJECTED,\n            directTransferStatues.SUCCEEDED,\n          ].includes(data.status) &&\n          data.type === directTransferTypes.WARM\n        ) {\n          this.setCancelableTransfer(false);\n          this.showNotificationLoadingSpinner();\n        }\n        if (internalTransferCallback) {\n          return internalTransferCallback(data);\n        }\n      },\n    );\n\n    this._modules.evSubscription.subscribe(\n      EvCallbackTypes.DIRECT_AGENT_TRANSFER_NOTIF,\n      (data) => {\n        if (data.status === directTransferNotificationTypes.PENDING) {\n          const hasReceivedCall = !!this.receivedCall;\n          this.setReceivedCall(data);\n          if (!hasReceivedCall) {\n            this._showIncomingTransferCallModal();\n          }\n        }\n\n        if (data.status === directTransferNotificationTypes.CANCELLED) {\n          this.closeModals();\n\n          this.setReceivedCall(null);\n        }\n      },\n    );\n\n    this.onTransferStart(() => {\n      this._transferNotificationId = this._modules.alert.info({\n        message: transferEvents.START,\n        loading: true,\n        backdrop: true,\n        ttl: 0,\n      });\n      if (!this.isInternalTransfer) {\n        this.setCancelableTransfer(true);\n        this.showNotificationLoadingCancel();\n      }\n    });\n\n    this.onTransferSuccess(() => {\n      this.closeLoadingNotification();\n\n      this._modules.alert.success({\n        message: transferSuccesses.TRANSFER_CONNECTED,\n      });\n    });\n\n    this.onTransferError(({ message }) => {\n      this.closeLoadingNotification();\n\n      if (this.isInternalTransfer) {\n        this._showSendVoiceMailModal();\n      } else if (message !== 'Transfer CANCELED') {\n        this._modules.alert.danger({ message: transferErrors.TRANSFER_ERROR });\n      }\n    });\n\n    // End transfer message will come after success and error.\n    this.onTransferEnd(() => {\n      console.log('==onTransferEnd==');\n    });\n  }\n\n  private showNotificationLoadingSpinner() {\n    this._modules.alert.update(this._transferNotificationId, {\n      message: transferEvents.START,\n      loading: true,\n    });\n  }\n\n  private showNotificationLoadingCancel() {\n    this._modules.alert.update(this._transferNotificationId, {\n      message: transferEvents.START,\n      action: this.cancelTemplate,\n    });\n  }\n\n  closeLoadingNotification() {\n    if (this._transferNotificationId) {\n      this._modules.alert.dismiss(this._transferNotificationId);\n      this._transferNotificationId = null;\n    }\n  }\n\n  onTransferStart(handler: Handler) {\n    if (typeof handler === 'function') {\n      this._eventEmitter.on(transferEvents.START, handler);\n    }\n  }\n\n  onTransferEnd(handler: Handler) {\n    if (typeof handler === 'function') {\n      this._eventEmitter.on(transferEvents.END, handler);\n    }\n  }\n\n  onTransferError(handler: Handler) {\n    if (typeof handler === 'function') {\n      this._eventEmitter.on(transferEvents.ERROR, handler);\n    }\n  }\n\n  onTransferSuccess(handler: Handler) {\n    if (typeof handler === 'function') {\n      this._eventEmitter.on(transferEvents.SUCCESS, handler);\n    }\n  }\n\n  closeModals() {\n    // close send voice modal.\n    if (this._sendVoiceMailModalId) {\n      this._modules.modal.close(this._sendVoiceMailModalId);\n    }\n    // close ignore/accept transfer modal.\n    if (this._incomingTransferCallModalId) {\n      this._modules.modal.close(this._incomingTransferCallModalId);\n    }\n  }\n\n  async fetchAgentList() {\n    let data;\n    try {\n      const result = await this.evClient.fetchDirectAgentList();\n      if (result) {\n        data = result.agents;\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      if (Array.isArray(data)) {\n        this.changeAgentList(data);\n      }\n    }\n  }\n\n  rejectTransferCall() {\n    if (!this.receivedCall) return;\n    this._modules.evClient.rejectDirectAgentTransferCall(this.receivedCall.uii);\n    this.setReceivedCall(null);\n  }\n\n  acceptTransferCall() {\n    if (!this.receivedCall) return;\n    this._modules.evWorkingState.setWorkingStateWorking();\n    // TODO: need check why add timeout here?\n    setTimeout(() => this.setReceivedCall(null), 6000);\n  }\n\n  sendVoicemailToAgent() {\n    this.setTransferStatus(transferStatuses.loading);\n    this._modules.evClient.sendVoicemailDirectAgentTransfer(\n      this.transferAgentId,\n    );\n    this._internalTransferCallbacks.VOICEMAIL = (data) => {\n      if (data.status === directTransferStatues.ACCEPTED) {\n        this._modules.alert.success({\n          message: transferSuccesses.SEND_VOICEMAIL_SUCCESS,\n        });\n      } else {\n        this._modules.alert.danger({\n          message: transferErrors.SEND_VOICEMAIL_ERROR,\n        });\n      }\n    };\n  }\n\n  async cancelTransfer() {\n    try {\n      await this.cancelInternalTransfer();\n    } catch (e) {\n      console.error(e);\n      throw new Error(`'cancelInternalTransfer' failed.`);\n    }\n    this.closeLoadingNotification();\n  }\n\n  async cancelInternalTransfer() {\n    if (this.transferring) {\n      if (this.isInternalTransfer) {\n        this._modules.evClient.cancelDirectAgentTransfer(this.transferAgentId);\n        await new Promise((resolve, reject) => {\n          this._internalTransferCallbacks.CANCEL = (data) => {\n            if (this.stayOnCall) {\n              this._internalTransferCallbacks.WARM(data);\n            } else {\n              this._internalTransferCallbacks.COLD(data);\n            }\n            if (data.status === directTransferStatues.SUCCEEDED) {\n              resolve(data);\n            } else {\n              reject(data);\n            }\n          };\n        });\n      } else if (this._transferDest) {\n        this._modules.evClient.cancelWarmTransferCall(this._transferDest);\n      } else {\n        console.warn('Unexpected cancel transfer');\n      }\n    }\n  }\n\n  parseNumber() {\n    switch (this.transferType) {\n      case transferTypes.phoneBook:\n        return this.parsePhoneBookNumber();\n      case transferTypes.manualEntry:\n        return this.parseManualEntryNumber();\n      default:\n        break;\n    }\n  }\n\n  getNumber() {\n    switch (this.transferType) {\n      case transferTypes.phoneBook:\n        return this.getTransferPhoneBook()[this.transferPhoneBookSelectedIndex]\n          ?.destination;\n      case transferTypes.manualEntry:\n        return this.transferRecipientNumber;\n      default:\n        break;\n    }\n  }\n\n  private parseManualEntryNumber() {\n    if (!this.transferRecipientNumber) {\n      throw new EvTypeError({\n        type: transferErrors.RECIPIENT_NUMBER_ERROR,\n        data: `Abnormal Transfer: this.transferRecipientNumber -> ${this.transferRecipientNumber}`,\n      });\n    }\n    checkCountryCode(this.transferRecipientNumber);\n    const toNumber = parseNumber(this.transferRecipientNumber);\n    return { toNumber, countryId: this.transferRecipientCountryId };\n  }\n\n  private parsePhoneBookNumber() {\n    if (this.transferPhoneBookSelectedIndex === null) {\n      throw new EvTypeError({\n        type: transferErrors.CONTACT_ID_ERROR,\n        data: `Abnormal Transfer: this.transferPhoneBookSelected -> ${this.transferPhoneBookSelectedIndex}`,\n      });\n    }\n    const transferPhoneBookSelected = this.getTransferPhoneBook()[\n      this.transferPhoneBookSelectedIndex\n    ];\n    checkCountryCode(transferPhoneBookSelected.destination);\n    const toNumber = parseNumber(transferPhoneBookSelected.destination);\n    return { toNumber, countryId: transferPhoneBookSelected.countryId };\n  }\n\n  async transfer() {\n    try {\n      const { toNumber, countryId } = this.parseNumber() || {};\n      await this._eventEmitter.asyncEmit(transferEvents.START);\n      this.setTransferStatus(transferStatuses.loading);\n      switch (this.transferType) {\n        case transferTypes.internal:\n          await this.internalTransferCall();\n          break;\n        case transferTypes.phoneBook:\n        case transferTypes.manualEntry:\n          await this.transferCall({\n            dialDest: toNumber,\n            countryId,\n          });\n          break;\n        default:\n          throw new EvTypeError({\n            type: transferErrors.TYPE_ERROR,\n            data: `Abnormal Transfer: this.transferType -> ${this.transferType}`,\n          });\n      }\n      await this._eventEmitter.asyncEmit(transferEvents.SUCCESS);\n    } catch (e) {\n      switch (e.type) {\n        case messageTypes.NO_SUPPORT_COUNTRY:\n          return this._modules.alert.danger({\n            message: messageTypes.NO_SUPPORT_COUNTRY,\n            ttl: 0,\n          });\n        case messageTypes.INVALID_NUMBER:\n          return this._modules.alert.danger({\n            message: callErrors.noToNumber,\n          });\n        default:\n          await this._eventEmitter.asyncEmit(transferEvents.ERROR, e);\n          throw e;\n      }\n    } finally {\n      this.setTransferStatus(transferStatuses.idle);\n      await this._eventEmitter.asyncEmit(transferEvents.END);\n    }\n  }\n\n  async internalTransferCall() {\n    if (!this.transferAgentId) {\n      throw new EvTypeError({\n        type: transferErrors.AGENT_ID_ERROR,\n        data: `Abnormal Transfer: this.transferAgentId -> ${this.transferAgentId}`,\n      });\n    }\n    // it should update agent list before internal transfer call, in order to transfer with cancelable feature.\n    try {\n      await this.fetchAgentList();\n    } catch (e) {\n      console.warn(`fetch agent list error`);\n      console.error(e);\n    }\n    if (this.stayOnCall) {\n      this.evClient.warmDirectAgentTransfer(this.transferAgentId);\n      await new Promise((resolve, reject) => {\n        this._internalTransferCallbacks.WARM = (data) => {\n          if (\n            data.status === directTransferStatues.SUCCEEDED &&\n            data.type === directTransferTypes.WARM\n          ) {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        };\n      });\n    } else {\n      this.evClient.coldDirectAgentTransfer(this.transferAgentId);\n      await new Promise((resolve, reject) => {\n        this._internalTransferCallbacks.COLD = (data) => {\n          if (data.status === directTransferStatues.ACCEPTED) {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        };\n      });\n    }\n  }\n\n  async transferCall(transferArgs: { dialDest: string; countryId: string }) {\n    if (this.stayOnCall) {\n      await this.warmTransferCall(transferArgs);\n    } else {\n      await this.coldTransferCall(transferArgs);\n    }\n  }\n\n  checkAllowTransfer(currentCall: EvCallData) {\n    return currentCall.allowTransfer && !currentCall.endedCall;\n  }\n\n  async warmTransferCall({ dialDest, countryId }) {\n    if (countryId !== 'USA') {\n      if (this.allowManualInternationalTransfer) {\n        this._transferDest = dialDest;\n        await this.evClient.warmTransferIntlCall({\n          dialDest,\n          countryId,\n        });\n      } else {\n        throw new Error(\n          `Unexpected Error: ban transferring international call`,\n        );\n      }\n    } else {\n      this._transferDest = dialDest;\n      // TODO: remove the temporary regression debugging log\n      console.log('[warmTransferCall]');\n      await this.evClient.warmTransferCall({ dialDest });\n    }\n  }\n\n  async coldTransferCall({ dialDest, countryId }) {\n    if (countryId !== 'USA') {\n      if (this.allowManualInternationalTransfer) {\n        await this.evClient.coldTransferIntlCall({\n          dialDest,\n          countryId,\n        });\n      } else {\n        // TODO handle to ban transferring international call\n      }\n    } else {\n      await this.evClient.coldTransferCall({ dialDest });\n    }\n  }\n\n  setCancelTemplate(templates: React.ReactNode) {\n    this.cancelTemplate = templates;\n  }\n\n  private _showSendVoiceMailModal() {\n    this._sendVoiceMailModalId = this._modules.modal.confirm({\n      title: i18n.getString(\n        'transferModalTitle',\n        this._modules.locale.currentLocale,\n      ),\n      okText: i18n.getString(\n        'sendVoicemail',\n        this._modules.locale.currentLocale,\n      ),\n      content: i18n.getString(\n        'transferFailedContent',\n        this._modules.locale.currentLocale,\n      ),\n      cancelText: i18n.getString(\n        'selectOtherAgents',\n        this._modules.locale.currentLocale,\n      ),\n      onOK: () => {\n        this.sendVoicemailToAgent();\n      },\n    });\n  }\n\n  private _showIncomingTransferCallModal() {\n    this._incomingTransferCallModalId = this._modules.modal.confirm({\n      title: i18n.getString(\n        'incomingTransferTitle',\n        this._modules.locale.currentLocale,\n      ),\n      content: i18n.getString(\n        'incomingTransferContent',\n        this._modules.locale.currentLocale,\n      ),\n      okText: i18n.getString(\n        'acceptIncomingTransfer',\n        this._modules.locale.currentLocale,\n      ),\n      cancelText: i18n.getString(\n        'ignoreIncomingTransfer',\n        this._modules.locale.currentLocale,\n      ),\n      onOK: () => {\n        this.acceptTransferCall();\n      },\n      onCancel: () => {\n        this.rejectTransferCall();\n      },\n    });\n  }\n}\n\nexport { EvTransferCall };\n"],"file":"EvTransferCall.js"}