{"version":3,"sources":["modules/CallV2/Call.ts"],"names":["TO_NUMBER","FROM_NUMBER","ANONYMOUS","Call","name","deps","dep","optional","_","callSettingMode","callingModes","webphone","trackEvents","callAttemptWebRTC","callAttempt","outboundWebRTCCallConnected","outboundCallConnected","enableCache","storageKey","_internationalCheck","_permissionCheck","_callSettingMode","_useCallControlToMakeCall","_deps","callOptions","internationalCheck","permissionCheck","useCallControlToMakeCall","data","toNumberEntities","push","isConference","phoneNumber","recipient","callStatus","connecting","lastPhoneNumber","lastRecipient","idle","ready","_processCall","_initCallModule","_resetCallModule","cleanToNumberEntities","callingSettings","callingMode","connect","disconnect","oldCallSettingMode","entityId","startTime","isIdle","toNumberMatched","input","fromNumber","session","extendedControls","toNumber","extension","trim","length","alert","warning","message","callErrors","noToNumber","_getValidatedNumbers","validatedNumbers","_getNumbers","_makeCall","connectSuccess","connectError","type","payload","ringoutErrors","firstLegConnectFailed","connectFailed","danger","networkError","includes","noInternational","availabilityMonitor","checkIfHAError","internalError","isWebphone","theFromNumber","myLocation","waitingValidateNumbers","number","parsedToNumber","parsedFromNumber","numbers","map","x","validatedResult","regionSettings","brand","id","toNumberIndex","findIndex","fromNumberIndex","numberValidate","validateNumbers","result","errors","forEach","error","international","rolesAndPermissions","permissions","InternationalCalls","originalString","parsedToNumberE164","e164","subAddress","join","parsedFromNumberE164","homeCountryId","softphone","jupiter","ringout","makeCall","split","prompt","ringoutPrompt","activeCallControl","RcModuleV2","state","storage","action","proxify"],"mappings":"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","sourcesContent":["// TODO: fix `@ringcentral-integration/phone-number` type\n// @ts-ignore\nimport extractControls from '@ringcentral-integration/phone-number/lib/extractControls';\nimport {\n  RcModuleV2,\n  state,\n  storage,\n  action,\n  track,\n} from '@ringcentral-integration/core';\nimport { Module } from '../../lib/di';\nimport callingModes from '../CallingSettings/callingModes';\nimport proxify from '../../lib/proxy/proxify';\nimport { Deps, ToNumberMatched, Recipient } from './Call.interface';\n\nimport { callStatus } from './callStatus';\nimport { callErrors } from './callErrors';\nimport { ringoutErrors } from '../Ringout/ringoutErrors';\nimport validateNumbers from '../../lib/validateNumbers';\nimport { trackEvents } from '../Analytics';\n\nconst TO_NUMBER = 'toNumber';\nconst FROM_NUMBER = 'fromNumber';\nconst ANONYMOUS = 'anonymous';\n\n/**\n * @class\n * @description Call managing module\n */\n@Module({\n  name: 'Call',\n  deps: [\n    'Alert',\n    'Storage',\n    'Brand',\n    'Softphone',\n    'Ringout',\n    'NumberValidate',\n    'RegionSettings',\n    'CallingSettings',\n    'RolesAndPermissions',\n    { dep: 'Webphone', optional: true },\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'CallOptions', optional: true },\n    { dep: 'ActiveCallControl', optional: true },\n  ],\n})\nexport class Call extends RcModuleV2<Deps> {\n  _internationalCheck: boolean;\n  _permissionCheck: boolean;\n  _callSettingMode: string = null;\n  _useCallControlToMakeCall: boolean;\n\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Brand} params.brand - brand module instance\n   * @param {Alert} params.alert - alert module instance\n   * @param {Client} params.client - client module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {CallingSettings} params.callingSettings - callingSettings module instance\n   * @param {Softphone} params.softphone - softphone module instance\n   * @param {Ringout} params.ringout - ringout module instance\n   * @param {Webphone} params.webphone - webphone module instance\n   * @param {NumberValidate} params.numberValidate - numberValidate module instance\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {ActiveCallControl} params.activeCallControl - ActiveCallControl module instance\n   */\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'callData',\n    });\n    this._internationalCheck =\n      this._deps.callOptions?.internationalCheck ?? true;\n    this._permissionCheck = this._deps.callOptions?.permissionCheck ?? true;\n    this._useCallControlToMakeCall =\n      this._deps.callOptions?.useCallControlToMakeCall ?? false;\n  }\n\n  @state\n  callStatus = callStatus.idle;\n\n  @state\n  toNumberEntities: ToNumberMatched[] = [];\n\n  get lastPhoneNumber() {\n    return this.data.lastPhoneNumber;\n  }\n\n  get lastRecipient() {\n    return this.data.lastRecipient;\n  }\n\n  @storage\n  @state\n  data: {\n    lastPhoneNumber: string;\n    lastRecipient: Recipient;\n  } = {\n    lastPhoneNumber: null,\n    lastRecipient: null,\n  };\n\n  @action\n  toNumberMatched(data: ToNumberMatched) {\n    this.toNumberEntities.push(data);\n  }\n\n  @action\n  cleanToNumberEntities() {\n    this.toNumberEntities = [];\n  }\n\n  @track((_: Call, { callSettingMode }) => [\n    callSettingMode === callingModes.webphone\n      ? trackEvents.callAttemptWebRTC\n      : trackEvents.callAttempt,\n    { callSettingMode },\n  ])\n  @action\n  connect({\n    isConference,\n    phoneNumber = null,\n    recipient = null,\n    callSettingMode,\n  }: {\n    isConference: boolean;\n    phoneNumber: string;\n    recipient: Recipient;\n    callSettingMode: string;\n  }) {\n    this.callStatus = callStatus.connecting;\n    if (!isConference) {\n      this.data.lastPhoneNumber = phoneNumber;\n      this.data.lastRecipient = recipient;\n    }\n  }\n\n  @track((_: Call, callSettingMode) => [\n    callSettingMode === callingModes.webphone\n      ? trackEvents.outboundWebRTCCallConnected\n      : trackEvents.outboundCallConnected,\n    { callSettingMode },\n  ])\n  @action\n  connectSuccess(callSettingMode: string) {\n    this.callStatus = callStatus.idle;\n  }\n\n  @action\n  connectError() {\n    this.callStatus = callStatus.idle;\n  }\n\n  async onStateChange() {\n    if (this.ready) {\n      await this._processCall();\n    }\n  }\n\n  onInit() {\n    this._initCallModule();\n  }\n\n  onReset() {\n    this._resetCallModule();\n    this.cleanToNumberEntities();\n  }\n\n  async _initCallModule() {\n    this._callSettingMode = this._deps.callingSettings.callingMode;\n    if (\n      this._callSettingMode === callingModes.webphone &&\n      this._deps.webphone\n    ) {\n      await this._deps.webphone.connect();\n    }\n  }\n\n  _resetCallModule() {\n    this._callSettingMode = this._deps.callingSettings.callingMode;\n    if (\n      this._callSettingMode === callingModes.webphone &&\n      this._deps.webphone\n    ) {\n      this._deps.webphone.disconnect();\n    }\n  }\n\n  async _processCall() {\n    const oldCallSettingMode = this._callSettingMode;\n    if (\n      this._deps.callingSettings.callingMode !== oldCallSettingMode &&\n      this._deps.webphone\n    ) {\n      this._callSettingMode = this._deps.callingSettings.callingMode;\n      if (oldCallSettingMode === callingModes.webphone) {\n        this._deps.webphone.disconnect();\n      } else if (this._callSettingMode === callingModes.webphone) {\n        await this._deps.webphone.connect();\n      }\n    }\n  }\n\n  // save the click to dial entity, only when call took place\n  onToNumberMatch({ entityId, startTime }: ToNumberMatched) {\n    if (this.isIdle) {\n      this.toNumberMatched({ entityId, startTime });\n    }\n  }\n\n  @proxify\n  async call({\n    phoneNumber: input,\n    recipient,\n    fromNumber,\n    isConference = false,\n  }: {\n    phoneNumber: string;\n    recipient: Recipient;\n    fromNumber: string;\n    isConference?: boolean;\n  }) {\n    let session = null;\n    if (this.isIdle) {\n      const { phoneNumber, extendedControls } = extractControls(input);\n      const toNumber =\n        (recipient && (recipient.phoneNumber || recipient.extension)) ||\n        phoneNumber;\n      if (!toNumber || `${toNumber}`.trim().length === 0) {\n        this._deps.alert.warning({\n          message: callErrors.noToNumber,\n        });\n      } else {\n        this.connect({\n          isConference,\n          phoneNumber,\n          recipient,\n          callSettingMode: this._callSettingMode,\n        });\n        try {\n          let validatedNumbers;\n          if (this._permissionCheck) {\n            validatedNumbers = await this._getValidatedNumbers({\n              toNumber,\n              fromNumber,\n              isConference,\n            });\n          } else {\n            validatedNumbers = this._getNumbers({\n              toNumber,\n              fromNumber,\n              isConference,\n            });\n          }\n          if (validatedNumbers) {\n            session = await this._makeCall({\n              ...validatedNumbers,\n              extendedControls,\n            });\n            this.connectSuccess(this._callSettingMode);\n          } else {\n            this.connectError();\n          }\n        } catch (error) {\n          if (!error.message && error.type && (callErrors as any)[error.type]) {\n            // validate format error\n            this._deps.alert.warning({\n              message: (callErrors as any)[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          } else if (error.message === ringoutErrors.firstLegConnectFailed) {\n            this._deps.alert.warning({\n              message: callErrors.connectFailed,\n              payload: error,\n            });\n          } else if (error.message === 'Failed to fetch') {\n            this._deps.alert.danger({\n              message: callErrors.networkError,\n              payload: error,\n            });\n          } else if (\n            typeof error.message === 'string' &&\n            error.message.includes('[InternationalCalls] is not available')\n          ) {\n            // ringout call may not have international permission, then first leg can't be create\n            // directly, customer will not be able to hear the voice prompt, so show a warning\n            this._deps.alert.danger({\n              message: callErrors.noInternational,\n            });\n          } else if (error.message !== 'Refresh token has expired') {\n            if (\n              !this._deps.availabilityMonitor ||\n              !this._deps.availabilityMonitor.checkIfHAError(error)\n            ) {\n              this._deps.alert.danger({\n                message: callErrors.internalError,\n                payload: error,\n              });\n            }\n          }\n          this.connectError();\n          throw error;\n        }\n      }\n    }\n    return session;\n  }\n\n  @proxify\n  _getNumbers({\n    toNumber,\n    fromNumber,\n    isConference,\n  }: {\n    toNumber: string;\n    fromNumber: string;\n    isConference: boolean;\n  }) {\n    const isWebphone =\n      this._deps.callingSettings.callingMode === callingModes.webphone;\n    const theFromNumber =\n      fromNumber ||\n      (isWebphone\n        ? this._deps.callingSettings.fromNumber\n        : this._deps.callingSettings.myLocation);\n\n    if (isWebphone && (theFromNumber === null || theFromNumber === '')) {\n      return null;\n    }\n\n    const waitingValidateNumbers = [];\n\n    if (!isConference) {\n      waitingValidateNumbers.push({\n        type: TO_NUMBER,\n        number: toNumber,\n      });\n    }\n\n    if (\n      theFromNumber &&\n      theFromNumber.length > 0 &&\n      !(isWebphone && theFromNumber === ANONYMOUS)\n    ) {\n      waitingValidateNumbers.push({\n        type: FROM_NUMBER,\n        number: theFromNumber,\n      });\n    }\n\n    let parsedToNumber;\n    let parsedFromNumber;\n\n    if (waitingValidateNumbers.length) {\n      const numbers = waitingValidateNumbers.map((x) => x.number);\n      const validatedResult = validateNumbers(\n        numbers,\n        this._deps.regionSettings,\n        this._deps.brand.id,\n      );\n      const toNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === TO_NUMBER,\n      );\n      const fromNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === FROM_NUMBER,\n      );\n      parsedToNumber = validatedResult[toNumberIndex];\n      parsedFromNumber = validatedResult[fromNumberIndex];\n    }\n    if (isWebphone && theFromNumber === ANONYMOUS) {\n      parsedFromNumber = ANONYMOUS;\n    }\n    return {\n      toNumber: parsedToNumber || toNumber,\n      fromNumber: parsedFromNumber,\n    };\n  }\n\n  @proxify\n  async _getValidatedNumbers({\n    toNumber,\n    fromNumber,\n    isConference,\n  }: {\n    toNumber: string;\n    fromNumber: string;\n    isConference: boolean;\n  }) {\n    const isWebphone =\n      this._deps.callingSettings.callingMode === callingModes.webphone;\n    const theFromNumber =\n      fromNumber ||\n      (isWebphone\n        ? this._deps.callingSettings.fromNumber\n        : this._deps.callingSettings.myLocation);\n\n    if (isWebphone && (theFromNumber === null || theFromNumber === '')) {\n      return null;\n    }\n\n    const waitingValidateNumbers = [];\n\n    if (!isConference) {\n      waitingValidateNumbers.push({\n        type: TO_NUMBER,\n        number: toNumber,\n      });\n    }\n\n    if (\n      theFromNumber &&\n      theFromNumber.length > 0 &&\n      !(isWebphone && theFromNumber === ANONYMOUS)\n    ) {\n      waitingValidateNumbers.push({\n        type: FROM_NUMBER,\n        number: theFromNumber,\n      });\n    }\n\n    let parsedToNumber;\n    let parsedFromNumber;\n    if (waitingValidateNumbers.length) {\n      const numbers = waitingValidateNumbers.map((x) => x.number);\n      const validatedResult = await this._deps.numberValidate.validateNumbers(\n        numbers,\n      );\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach((error) => {\n          // this._deps.alert.warning({\n          //   message: callErrors[error.type],\n          //   payload: {\n          //     phoneNumber: error.phoneNumber\n          //   }\n          // });\n          throw error;\n        });\n        return null;\n      }\n      const toNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === TO_NUMBER,\n      );\n      const fromNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === FROM_NUMBER,\n      );\n      // TODO: fix `validatedResult` type in `numberValidate` module.\n      parsedToNumber = (validatedResult as any).numbers[toNumberIndex];\n      parsedFromNumber = (validatedResult as any).numbers[fromNumberIndex];\n    }\n    if (this._internationalCheck) {\n      if (\n        parsedToNumber &&\n        parsedToNumber.international &&\n        // TODO: fix `rolesAndPermissions` module type\n        !(this._deps.rolesAndPermissions.permissions as any).InternationalCalls\n      ) {\n        const error = {\n          phoneNumber: parsedToNumber.originalString,\n          type: 'noInternational',\n        };\n        throw error;\n      }\n    }\n\n    let parsedToNumberE164 = toNumber;\n    if (parsedToNumber) {\n      parsedToNumberE164 = parsedToNumber.e164;\n      // add ext back if any\n      if (parsedToNumber.e164 && parsedToNumber.subAddress) {\n        parsedToNumberE164 = [\n          parsedToNumber.e164,\n          parsedToNumber.subAddress,\n        ].join('*');\n      }\n    }\n\n    // using e164 in response to call\n    let parsedFromNumberE164;\n    if (parsedFromNumber) {\n      parsedFromNumberE164 = parsedFromNumber.e164;\n      // add ext back if any\n      if (parsedFromNumber.e164 && parsedFromNumber.subAddress) {\n        parsedFromNumberE164 = [\n          parsedFromNumber.e164,\n          parsedFromNumber.subAddress,\n        ].join('*');\n      }\n    }\n    if (isWebphone && theFromNumber === ANONYMOUS) {\n      parsedFromNumberE164 = ANONYMOUS;\n    }\n    return {\n      toNumber: parsedToNumberE164,\n      fromNumber: parsedFromNumberE164,\n    };\n  }\n\n  @proxify\n  async _makeCall({\n    toNumber,\n    fromNumber,\n    callingMode = this._deps.callingSettings.callingMode,\n    extendedControls = [],\n  }: {\n    toNumber: string;\n    fromNumber: string;\n    callingMode?: string;\n    extendedControls?: string[];\n  }) {\n    const homeCountryId = this._deps.regionSettings.homeCountryId;\n    let session;\n    switch (callingMode) {\n      case callingModes.softphone:\n      case callingModes.jupiter:\n        session = this._deps.softphone.makeCall(toNumber, callingMode);\n        break;\n      case callingModes.ringout:\n        session = await this._deps.ringout.makeCall({\n          fromNumber,\n          toNumber: toNumber && toNumber.split('*')[0], // remove extension number in ringout mode\n          prompt: this._deps.callingSettings.ringoutPrompt,\n        });\n        break;\n      case callingModes.webphone: {\n        if (this._deps.activeCallControl && this._useCallControlToMakeCall) {\n          session = await this._deps.activeCallControl.makeCall({\n            fromNumber,\n            toNumber,\n            homeCountryId,\n            extendedControls,\n          });\n        } else if (this._deps.webphone) {\n          // TODO: fix `webphone` module type\n          session = (await this._deps.webphone.makeCall({\n            fromNumber,\n            toNumber,\n            homeCountryId,\n            extendedControls,\n          })) as any;\n        }\n        break;\n      }\n\n      default:\n        break;\n    }\n    return session;\n  }\n\n  get isIdle() {\n    return this.callStatus === callStatus.idle;\n  }\n}\n"],"file":"Call.js"}