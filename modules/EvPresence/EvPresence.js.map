{"version":3,"sources":["modules/EvPresence/EvPresence.ts"],"names":["EvPresence","name","deps","dep","optional","that","callIds","callsMapping","otherCallIds","callLogsIds","enableCache","storageKey","evPresenceEvents","EventEmitter","showOffHookInitError","_deps","evAgentSession","clearCalls","recordId","caseId","objectValue","objectType","call","rawCallsMapping","uii","timestamp","queueDts","gate","_getCurrentGateData","session","id","_getCallEncodeId","agentId","evAuth","index","indexOf","unshift","dropSession","filter","callId","endedCall","includes","callLogsIndex","res","isHold","holdState","status","dialoutStatus","onConfigSuccess","push","calls","length","setDialoutStatus","dialoutStatuses","idle","_bindSubscription","evSettings","setOffhookInit","setOffhookTerm","evSubscription","subscribe","EvCallbackTypes","OFFHOOK_INIT","data","emit","alert","danger","message","messageTypes","OFFHOOK_INIT_ERROR","OFFHOOK_TERM","OFFHOOK_TERM_ERROR","console","error","ADD_SESSION","addNewSession","ADD_SESSION_ERROR","DROP_SESSION","DROP_SESSION_ERROR","HOLD","setCallHoldStatus","HOLD_ERROR","NEW_CALL","addNewCall","END_CALL","isManualOffhook","evClient","offhookTerm","removeEndedCall","currentGateId","queue","number","currentQueueGroup","availableRequeueQueues","find","gates","some","gateId","gateGroupId","sessionId","encodeUii","map","RcModuleV2","storage","state","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAOA;;AACA;;AAGA;;AASA;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeMA,U,WAbL,gBAAO;AACNC,EAAAA,IAAI,EAAE,YADA;AAENC,EAAAA,IAAI,EAAE,CACJ,gBADI,EAEJ,UAFI,EAGJ,QAHI,EAIJ,SAJI,EAKJ,YALI,EAMJ,gBANI,EAOJ,OAPI,EAQJ;AAAEC,IAAAA,GAAG,EAAE,iBAAP;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GARI;AAFA,CAAP,C,UAiGE,oBAAS,UAACC,IAAD;AAAA,SAAsB,CAACA,IAAI,CAACC,OAAN,EAAeD,IAAI,CAACE,YAApB,CAAtB;AAAA,CAAT,C,UAOA,oBAAS,UAACF,IAAD;AAAA,SAAsB,CAACA,IAAI,CAACG,YAAN,EAAoBH,IAAI,CAACE,YAAzB,CAAtB;AAAA,CAAT,C,UAKA,oBAAS,UAACF,IAAD;AAAA,SAAsB,CAACA,IAAI,CAACI,WAAN,EAAmBJ,IAAI,CAACE,YAAxB,CAAtB;AAAA,CAAT,C;;;;;AA3FD,sBAAYL,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA,IADI;AAEJQ,MAAAA,WAAW,EAAE,IAFT;AAGJC,MAAAA,UAAU,EAAE;AAHR,KAAN;AADsB,UAJxBC,gBAIwB,GAJL,IAAIC,kBAAJ,EAIK;AAAA,UAFxBC,oBAEwB,GAFD,IAEC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAMtB,UAAKC,KAAL,CAAWC,cAAX,CAA0BC,UAA1B,GAAuC,YAAM;AAC3C,YAAKA,UAAL;AACD,KAFD;;AANsB;AASvB,G,CAED;;;;;AAKA;gCAEYC,Q,EAAkB;AAC5B,WAAKA,QAAL,GAAgBA,QAAhB;AACD,K,CAED;;;;AAKA;8BAEUC,M,EAAgB;AACxB,WAAKA,MAAL,GAAcA,MAAd;AACD,K,CAED;;;;AAKA;mCAEeC,W,EAAqB;AAClC,WAAKA,WAAL,GAAmBA,WAAnB;AACD,K,CAED;;;;AAKA;kCAEcC,U,EAAoB;AAChC,WAAKA,UAAL,GAAkBA,UAAlB;AACD;;;+BA4CUC,I,EAAkB;AAC3B;AACA,WAAKC,eAAL,CAAqBD,IAAI,CAACE,GAA1B,oCACKF,IADL;AAEE;AACA;AACAG,QAAAA,SAAS,EAAE,0BAAaH,IAAI,CAACI,QAAlB,CAJb;AAKEC,QAAAA,IAAI,EAAE,KAAKC,mBAAL,CAAyBN,IAAzB,CALR;AAME;AACAJ,QAAAA,QAAQ,EAAE,KAAKA,QAPjB;AAQEC,QAAAA,MAAM,EAAE,KAAKA,MARf;AASEC,QAAAA,WAAW,EAAE,KAAKA,WATpB;AAUEC,QAAAA,UAAU,EAAE,KAAKA;AAVnB;AAYD;;;kCAGaQ,O,EAAmC;AAC/C,UAAMC,EAAE,GAAG,KAAKC,gBAAL,CAAsBF,OAAtB,CAAX;;AACA,UAAIA,OAAO,CAACG,OAAR,KAAoB,KAAKjB,KAAL,CAAWkB,MAAX,CAAkBD,OAA1C,EAAmD;AACjD;AACA,YAAME,KAAK,GAAG,KAAK5B,OAAL,CAAa6B,OAAb,CAAqBL,EAArB,CAAd;;AACA,YAAII,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,eAAK5B,OAAL,CAAa8B,OAAb,CAAqBN,EAArB;AACD;AACF,OAND,MAMO;AACL;AACA,YAAMI,MAAK,GAAG,KAAK1B,YAAL,CAAkB2B,OAAlB,CAA0BL,EAA1B,CAAd;;AACA,YAAII,MAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,eAAK1B,YAAL,CAAkB4B,OAAlB,CAA0BN,EAA1B;AACD;AACF;;AAED,WAAKvB,YAAL,CAAkBuB,EAAlB,oCACK,KAAKP,eAAL,CAAqBM,OAAO,CAACL,GAA7B,CADL;AAEEK,QAAAA,OAAO,EAAPA;AAFF;AAID;;;gCAGWQ,Y,EAAwC;AAClD,UAAMP,EAAE,GAAG,KAAKC,gBAAL,CAAsBM,YAAtB,CAAX;;AACA,WAAK7B,YAAL,GAAoB,KAAKA,YAAL,CAAkB8B,MAAlB,CAAyB,UAACC,MAAD;AAAA,eAAYA,MAAM,KAAKT,EAAvB;AAAA,OAAzB,CAApB;AACD;;;oCAGeU,S,EAAwB;AACtC,UAAMV,EAAE,GAAG,KAAKC,gBAAL,CAAsBS,SAAtB,CAAX,CADsC,CAEtC;;;AACA,WAAKlC,OAAL,GAAe,KAAKA,OAAL,CAAagC,MAAb,CAAoB,UAACC,MAAD;AAAA,eAAYA,MAAM,KAAKT,EAAvB;AAAA,OAApB,CAAf,CAHsC,CAItC;;AACA,WAAKtB,YAAL,GAAoB,KAAKA,YAAL,CAAkB8B,MAAlB,CAClB,UAACC,MAAD;AAAA,eAAY,CAACA,MAAM,CAACE,QAAP,CAAgBD,SAAS,CAAChB,GAA1B,CAAb;AAAA,OADkB,CAApB,CALsC,CAStC;;AACA,UAAMkB,aAAa,GAAG,KAAKjC,WAAL,CAAiB0B,OAAjB,CAAyBL,EAAzB,CAAtB;;AACA,UAAIY,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxB,aAAKjC,WAAL,CAAiB2B,OAAjB,CAAyBN,EAAzB;AACD;;AACD,UAAI,KAAKvB,YAAL,CAAkBuB,EAAlB,CAAJ,EAA2B;AACzB,aAAKvB,YAAL,CAAkBuB,EAAlB,EAAsBU,SAAtB,GAAkCA,SAAlC;AACD;AACF;;;sCAGiBG,G,EAAqB;AACrC,UAAMb,EAAE,GAAG,KAAKC,gBAAL,CAAsBY,GAAtB,CAAX;;AACA,WAAKpC,YAAL,CAAkBuB,EAAlB,EAAsBc,MAAtB,GAA+BD,GAAG,CAACE,SAAnC;AACD;;;iCAGY;AACX,WAAKvC,OAAL,GAAe,EAAf;AACA,WAAKE,YAAL,GAAoB,EAApB;AACD;;;qCAGgBsC,M,EAA6B;AAC5C,UAAI,KAAKC,aAAL,KAAuBD,MAA3B,EAAmC;AACjC,aAAKC,aAAL,GAAqBD,MAArB;AACD;AACF;;;iCAEY;AAAA;;AACX,WAAK/B,KAAL,CAAWC,cAAX,CAA0BgC,eAA1B,CAA0CC,IAA1C,CAA+C,YAAM;AACnD,YAAI,MAAI,CAACC,KAAL,CAAWC,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,UAAA,MAAI,CAACC,gBAAL,CAAsBC,uBAAgBC,IAAtC;AACD;AACF,OAJD;;AAMA,WAAKC,iBAAL;AACD;;;qCAEgB;AACf,WAAKxC,KAAL,CAAWyC,UAAX,CAAsBC,cAAtB;AACD;;;qCAEgB;AACf,WAAK1C,KAAL,CAAWyC,UAAX,CAAsBE,cAAtB;AACD;;;wCAE2B;AAAA;;AAC1B,WAAK3C,KAAL,CAAW4C,cAAX,CAA0BC,SAA1B,CACEC,+BAAgBC,YADlB,EAEE,UAACC,IAAD,EAAiC;AAC/B,QAAA,MAAI,CAACnD,gBAAL,CAAsBoD,IAAtB,CAA2BH,+BAAgBC,YAA3C,EAAyDC,IAAzD;;AACA,YAAIA,IAAI,CAACjB,MAAL,KAAgB,IAApB,EAA0B;AACxB,UAAA,MAAI,CAACW,cAAL,GADwB,CAExB;;AACD,SAHD,MAGO,IAAI,MAAI,CAAC3C,oBAAT,EAA+B;AACpC,UAAA,MAAI,CAACC,KAAL,CAAWkD,KAAX,CAAiBC,MAAjB,CAAwB;AACtBC,YAAAA,OAAO,EAAEC,oBAAaC;AADA,WAAxB;;AAGA,UAAA,MAAI,CAACX,cAAL;;AACA,UAAA,MAAI,CAAC5C,oBAAL,GAA4B,IAA5B;AACD;AACF,OAdH;;AAgBA,WAAKC,KAAL,CAAW4C,cAAX,CAA0BC,SAA1B,CACEC,+BAAgBS,YADlB,EAEE,UAACP,IAAD,EAAiC;AAC/B,YAAIA,IAAI,CAACjB,MAAL,KAAgB,IAApB,EAA0B;AACxB,UAAA,MAAI,CAACY,cAAL;AACD,SAFD,MAEO;AACL,UAAA,MAAI,CAAC3C,KAAL,CAAWkD,KAAX,CAAiBC,MAAjB,CAAwB;AACtBC,YAAAA,OAAO,EAAEC,oBAAaG;AADA,WAAxB;;AAGAC,UAAAA,OAAO,CAACC,KAAR,CAAcV,IAAd;AACD;AACF,OAXH;;AAaA,WAAKhD,KAAL,CAAW4C,cAAX,CAA0BC,SAA1B,CAAoCC,+BAAgBa,WAApD,EAAiE,UAACX,IAAD,EAAU;AACzE,YAAIA,IAAI,CAACjB,MAAL,KAAgB,IAApB,EAA0B;AACxB,UAAA,MAAI,CAAC6B,aAAL,CAAmBZ,IAAnB;AACD,SAFD,MAEO;AACL,UAAA,MAAI,CAAChD,KAAL,CAAWkD,KAAX,CAAiBC,MAAjB,CAAwB;AACtBC,YAAAA,OAAO,EAAEC,oBAAaQ;AADA,WAAxB;AAGD;AACF,OARD;;AASA,WAAK7D,KAAL,CAAW4C,cAAX,CAA0BC,SAA1B,CACEC,+BAAgBgB,YADlB,EAEE,UAACd,IAAD,EAAU;AACR,YAAIA,IAAI,CAACjB,MAAL,KAAgB,IAApB,EAA0B;AACxB,UAAA,MAAI,CAACT,WAAL,CAAiB0B,IAAjB;AACD,SAFD,MAEO;AACL,UAAA,MAAI,CAAChD,KAAL,CAAWkD,KAAX,CAAiBC,MAAjB,CAAwB;AACtBC,YAAAA,OAAO,EAAEC,oBAAaU;AADA,WAAxB;AAGD;AACF,OAVH;;AAYA,WAAK/D,KAAL,CAAW4C,cAAX,CAA0BC,SAA1B,CAAoCC,+BAAgBkB,IAApD,EAA0D,UAAChB,IAAD,EAAU;AAClE,YAAIA,IAAI,CAACjB,MAAL,KAAgB,IAApB,EAA0B;AACxB,UAAA,MAAI,CAACkC,iBAAL,CAAuBjB,IAAvB;AACD,SAFD,MAEO;AACL,UAAA,MAAI,CAAChD,KAAL,CAAWkD,KAAX,CAAiBC,MAAjB,CAAwB;AACtBC,YAAAA,OAAO,EAAEC,oBAAaa;AADA,WAAxB;AAGD;AACF,OARD;;AAUA,WAAKlE,KAAL,CAAW4C,cAAX,CAA0BC,SAA1B,CAAoCC,+BAAgBqB,QAApD,EAA8D,UAACnB,IAAD,EAAU;AACtE,QAAA,MAAI,CAACoB,UAAL,CAAgBpB,IAAhB;AACD,OAFD;;AAIA,WAAKhD,KAAL,CAAW4C,cAAX,CAA0BC,SAA1B,CAAoCC,+BAAgBuB,QAApD,EAA8D,UAACrB,IAAD,EAAU;AACtE,YAAMjC,EAAE,GAAG,MAAI,CAACC,gBAAL,CAAsBgC,IAAtB,CAAX;;AACA,YAAI,CAAC,MAAI,CAACxD,YAAL,CAAkBuB,EAAlB,CAAL,EAA4B;;AAC5B,YAAI,CAAC,MAAI,CAACf,KAAL,CAAWyC,UAAX,CAAsB6B,eAA3B,EAA4C;AAC1C,UAAA,MAAI,CAACtE,KAAL,CAAWuE,QAAX,CAAoBC,WAApB;AACD;;AACD,QAAA,MAAI,CAACC,eAAL,CAAqBzB,IAArB;AACD,OAPD;AAQD;;;wCAE2BzC,I,EAAgD;AAC1E,UAAMmE,aAAa,GAAGnE,IAAI,CAACoE,KAAL,CAAWC,MAAjC;;AACA,UAAMC,iBAAiB,GAAG,KAAK7E,KAAL,CAAWkB,MAAX,CAAkB4D,sBAAlB,CAAyCC,IAAzC,CACxB,gBAAe;AAAA,YAAZC,KAAY,QAAZA,KAAY;AACb,eAAOA,KAAK,CAACC,IAAN,CAAW;AAAA,cAAGC,MAAH,SAAGA,MAAH;AAAA,iBAAgBA,MAAM,KAAKR,aAA3B;AAAA,SAAX,CAAP;AACD,OAHuB,CAA1B;;AAKA,aAAO;AACLQ,QAAAA,MAAM,EAAER,aADH;AAELS,QAAAA,WAAW,EAAEN,iBAAF,aAAEA,iBAAF,uBAAEA,iBAAiB,CAAEM;AAF3B,OAAP;AAID;;;4CAKqC;AAAA,UAFpC1E,GAEoC,SAFpCA,GAEoC;AAAA,UADpC2E,SACoC,SADpCA,SACoC;AACpC,aAAO,KAAKpF,KAAL,CAAWuE,QAAX,CAAoBc,SAApB,CAA8B;AAAED,QAAAA,SAAS,EAATA,SAAF;AAAa3E,QAAAA,GAAG,EAAHA;AAAb,OAA9B,CAAP;AACD;;;wBApNW;AAAA;;AACV,aAAO,KAAKlB,OAAL,CACJ+F,GADI,CACA,UAACvE,EAAD;AAAA,eAAQ,MAAI,CAACvB,YAAL,CAAkBuB,EAAlB,CAAR;AAAA,OADA,EAEJQ,MAFI,CAEG,UAAChB,IAAD;AAAA,eAAU,CAAC,CAACA,IAAZ;AAAA,OAFH,CAAP;AAGD;;;wBAGgB;AAAA;;AACf,aAAO,KAAKd,YAAL,CAAkB6F,GAAlB,CAAsB,UAACvE,EAAD;AAAA,eAAQ,MAAI,CAACvB,YAAL,CAAkBuB,EAAlB,CAAR;AAAA,OAAtB,CAAP;AACD;;;wBAGc;AAAA;;AACb,aAAO,KAAKrB,WAAL,CAAiB4F,GAAjB,CAAqB,UAACvE,EAAD;AAAA,eAAQ,MAAI,CAACvB,YAAL,CAAkBuB,EAAlB,CAAR;AAAA,OAArB,CAAP;AACD;;;;EAnGsBwE,gB,oFAiBtBC,a,EACAC,W;;;;;WACkB,E;;iEAGlBC,Y,iKAMAF,a,EACAC,W;;;;;WACgB,E;;+DAGhBC,Y,oKAMAF,a,EACAC,W;;;;;WACqB,E;;oEAGrBC,Y,wKAMAF,a,EACAC,W;;;;;WACoB,E;;mEAGpBC,Y,oKAKAF,a,EACAC,W;;;;;WACmB,E;;iFAEnBD,a,EACAC,W;;;;;WACwB,E;;gFAExBD,a,EACAC,W;;;;;WACuB,E;;iFAEvBD,a,EACAC,W;;;;;WACmC,E;;oFAEnCD,a,EACAC,W;;;;;WACsC,E;;mFAEtCD,a,EACAC,W;;;;;WACoCnD,uBAAgBC,I;;ggBAmBpDmD,Y,wJAiBAA,Y,yJAuBAA,Y,2JAMAA,Y,iKAoBAA,Y,4JAMAA,Y,2JAMAA,Y","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport EventEmitter from 'events';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { Mapping } from 'ringcentral-widgets/typings';\n\nimport {\n  dialoutStatuses,\n  DialoutStatusesType,\n  messageTypes,\n} from '../../enums';\nimport {\n  EvCallData,\n  EvEvRequeueCallGate,\n} from '../../interfaces/EvData.interface';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport {\n  EvAddSessionNotification,\n  EvBaseCall,\n  EvDropSessionNotification,\n  EvEndedCall,\n  EvHoldResponse,\n  EvOffhookInitResponse,\n  EvOffhookTermResponse,\n} from '../../lib/EvClient/interfaces';\nimport { Deps, Presence } from './EvPresence.interface';\nimport { getTimeStamp } from './helper';\n\n@Module({\n  name: 'EvPresence',\n  deps: [\n    'EvSubscription',\n    'EvClient',\n    'EvAuth',\n    'Storage',\n    'EvSettings',\n    'EvAgentSession',\n    'Alert',\n    { dep: 'PresenceOptions', optional: true },\n  ],\n})\nclass EvPresence extends RcModuleV2<Deps> implements Presence {\n  evPresenceEvents = new EventEmitter();\n\n  showOffHookInitError = true;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvPresence',\n    });\n    this._deps.evAgentSession.clearCalls = () => {\n      this.clearCalls();\n    };\n  }\n\n  // temporary code for test screen pop sf object when inbound call\n  @storage\n  @state\n  recordId: string = '';\n\n  // temporary code for test screen pop sf object when inbound call\n  @action\n  setRecordId(recordId: string) {\n    this.recordId = recordId;\n  }\n\n  // temporary code for test screen pop sf object when inbound call\n  @storage\n  @state\n  caseId: string = '';\n\n  // temporary code for test screen pop sf object when inbound call\n  @action\n  setCaseId(caseId: string) {\n    this.caseId = caseId;\n  }\n\n  // temporary code for test screen pop sf object when inbound call\n  @storage\n  @state\n  objectValue: string = '';\n\n  // temporary code for test screen pop sf object when inbound call\n  @action\n  setObjectValue(objectValue: string) {\n    this.objectValue = objectValue;\n  }\n\n  // temporary code for test screen pop sf object when inbound call\n  @storage\n  @state\n  objectType: string = '';\n\n  // temporary code for test screen pop sf object when inbound call\n  @action\n  setObjectType(objectType: string) {\n    this.objectType = objectType;\n  }\n\n  @storage\n  @state\n  callIds: string[] = [];\n\n  @storage\n  @state\n  otherCallIds: string[] = [];\n\n  @storage\n  @state\n  callLogsIds: string[] = [];\n\n  @storage\n  @state\n  callsMapping: Mapping<EvCallData> = {};\n\n  @storage\n  @state\n  rawCallsMapping: Mapping<EvCallData> = {};\n\n  @storage\n  @state\n  dialoutStatus: DialoutStatusesType = dialoutStatuses.idle;\n\n  @computed((that: EvPresence) => [that.callIds, that.callsMapping])\n  get calls() {\n    return this.callIds\n      .map((id) => this.callsMapping[id])\n      .filter((call) => !!call);\n  }\n\n  @computed((that: EvPresence) => [that.otherCallIds, that.callsMapping])\n  get otherCalls() {\n    return this.otherCallIds.map((id) => this.callsMapping[id]);\n  }\n\n  @computed((that: EvPresence) => [that.callLogsIds, that.callsMapping])\n  get callLogs() {\n    return this.callLogsIds.map((id) => this.callsMapping[id]);\n  }\n\n  @action\n  addNewCall(call: EvBaseCall) {\n    // note: rawCallsMapping index is raw call uii.\n    this.rawCallsMapping[call.uii] = {\n      ...call,\n      // input timezone in second arg if EV reponse has timezone propoty\n      // default timezone is 'America/New_York'\n      timestamp: getTimeStamp(call.queueDts),\n      gate: this._getCurrentGateData(call),\n      // temporary code for test screen pop sf object when inbound call\n      recordId: this.recordId,\n      caseId: this.caseId,\n      objectValue: this.objectValue,\n      objectType: this.objectType,\n    };\n  }\n\n  @action\n  addNewSession(session: EvAddSessionNotification) {\n    const id = this._getCallEncodeId(session);\n    if (session.agentId === this._deps.evAuth.agentId) {\n      // related to current agent session\n      const index = this.callIds.indexOf(id);\n      if (index === -1) {\n        this.callIds.unshift(id);\n      }\n    } else {\n      // other session without current agent\n      const index = this.otherCallIds.indexOf(id);\n      if (index === -1) {\n        this.otherCallIds.unshift(id);\n      }\n    }\n\n    this.callsMapping[id] = {\n      ...this.rawCallsMapping[session.uii],\n      session,\n    };\n  }\n\n  @action\n  dropSession(dropSession: EvDropSessionNotification) {\n    const id = this._getCallEncodeId(dropSession);\n    this.otherCallIds = this.otherCallIds.filter((callId) => callId !== id);\n  }\n\n  @action\n  removeEndedCall(endedCall: EvEndedCall) {\n    const id = this._getCallEncodeId(endedCall);\n    // remove current agent session call with uii.\n    this.callIds = this.callIds.filter((callId) => callId !== id);\n    // remove other call session with uii.\n    this.otherCallIds = this.otherCallIds.filter(\n      (callId) => !callId.includes(endedCall.uii),\n    );\n\n    // add call with id (encodeUii({ uii, sessionId }))\n    const callLogsIndex = this.callLogsIds.indexOf(id);\n    if (callLogsIndex === -1) {\n      this.callLogsIds.unshift(id);\n    }\n    if (this.callsMapping[id]) {\n      this.callsMapping[id].endedCall = endedCall;\n    }\n  }\n\n  @action\n  setCallHoldStatus(res: EvHoldResponse) {\n    const id = this._getCallEncodeId(res);\n    this.callsMapping[id].isHold = res.holdState;\n  }\n\n  @action\n  clearCalls() {\n    this.callIds = [];\n    this.otherCallIds = [];\n  }\n\n  @action\n  setDialoutStatus(status: DialoutStatusesType) {\n    if (this.dialoutStatus !== status) {\n      this.dialoutStatus = status;\n    }\n  }\n\n  onInitOnce() {\n    this._deps.evAgentSession.onConfigSuccess.push(() => {\n      if (this.calls.length === 0) {\n        this.setDialoutStatus(dialoutStatuses.idle);\n      }\n    });\n\n    this._bindSubscription();\n  }\n\n  setOffhookInit() {\n    this._deps.evSettings.setOffhookInit();\n  }\n\n  setOffhookTerm() {\n    this._deps.evSettings.setOffhookTerm();\n  }\n\n  private _bindSubscription() {\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.OFFHOOK_INIT,\n      (data: EvOffhookInitResponse) => {\n        this.evPresenceEvents.emit(EvCallbackTypes.OFFHOOK_INIT, data);\n        if (data.status === 'OK') {\n          this.setOffhookInit();\n          // when that is reject integrated softphone, we not alert error\n        } else if (this.showOffHookInitError) {\n          this._deps.alert.danger({\n            message: messageTypes.OFFHOOK_INIT_ERROR,\n          });\n          this.setOffhookTerm();\n          this.showOffHookInitError = true;\n        }\n      },\n    );\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.OFFHOOK_TERM,\n      (data: EvOffhookTermResponse) => {\n        if (data.status === 'OK') {\n          this.setOffhookTerm();\n        } else {\n          this._deps.alert.danger({\n            message: messageTypes.OFFHOOK_TERM_ERROR,\n          });\n          console.error(data);\n        }\n      },\n    );\n    this._deps.evSubscription.subscribe(EvCallbackTypes.ADD_SESSION, (data) => {\n      if (data.status === 'OK') {\n        this.addNewSession(data);\n      } else {\n        this._deps.alert.danger({\n          message: messageTypes.ADD_SESSION_ERROR,\n        });\n      }\n    });\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.DROP_SESSION,\n      (data) => {\n        if (data.status === 'OK') {\n          this.dropSession(data);\n        } else {\n          this._deps.alert.danger({\n            message: messageTypes.DROP_SESSION_ERROR,\n          });\n        }\n      },\n    );\n    this._deps.evSubscription.subscribe(EvCallbackTypes.HOLD, (data) => {\n      if (data.status === 'OK') {\n        this.setCallHoldStatus(data);\n      } else {\n        this._deps.alert.danger({\n          message: messageTypes.HOLD_ERROR,\n        });\n      }\n    });\n\n    this._deps.evSubscription.subscribe(EvCallbackTypes.NEW_CALL, (data) => {\n      this.addNewCall(data);\n    });\n\n    this._deps.evSubscription.subscribe(EvCallbackTypes.END_CALL, (data) => {\n      const id = this._getCallEncodeId(data);\n      if (!this.callsMapping[id]) return;\n      if (!this._deps.evSettings.isManualOffhook) {\n        this._deps.evClient.offhookTerm();\n      }\n      this.removeEndedCall(data);\n    });\n  }\n\n  private _getCurrentGateData(call: Partial<EvCallData>): EvEvRequeueCallGate {\n    const currentGateId = call.queue.number;\n    const currentQueueGroup = this._deps.evAuth.availableRequeueQueues.find(\n      ({ gates }) => {\n        return gates.some(({ gateId }) => gateId === currentGateId);\n      },\n    );\n    return {\n      gateId: currentGateId,\n      gateGroupId: currentQueueGroup?.gateGroupId,\n    };\n  }\n\n  private _getCallEncodeId({\n    uii,\n    sessionId,\n  }: Partial<EvAddSessionNotification>) {\n    return this._deps.evClient.encodeUii({ sessionId, uii });\n  }\n}\n\nexport { EvPresence };\n"],"file":"EvPresence.js"}