{"version":3,"sources":["modules/EvPresence/EvPresence.ts"],"names":["EvPresence","name","deps","dep","optional","evSubscription","evClient","storage","evAuth","evSettings","evSessionConfig","alert","enableCache","modules","storageKey","evPresenceEvents","EventEmitter","showOffHookInitError","getCalls","callIds","callsMapping","map","id","filter","call","getOtherCalls","otherCallIds","getCallLogs","callLogsIds","recordId","state","caseId","objectValue","objectType","rawCallsMapping","uii","timestamp","queueDts","gate","_getCurrentGateData","session","_getCallEncodeId","agentId","_modules","index","indexOf","unshift","dropSession","callId","endedCall","includes","callLogsIndex","res","isHold","holdState","status","dialoutStatus","_bindSubscription","isConfigSuccessByLocal","clearCalls","length","dialoutStatuses","idle","setDialoutStatus","offhookInitHandle","offhookTermHandle","subscribe","EvCallbackTypes","OFFHOOK_INIT","data","emit","offhookInit","danger","message","messageTypes","OFFHOOK_INIT_ERROR","OFFHOOK_TERM","offhookTerm","OFFHOOK_TERM_ERROR","console","error","ADD_SESSION","addNewSession","ADD_SESSION_ERROR","DROP_SESSION","DROP_SESSION_ERROR","HOLD","setCallHoldStatus","HOLD_ERROR","NEW_CALL","addNewCall","END_CALL","isManualOffhook","removeEndedCall","currentGateId","queue","number","currentQueueGroup","getAvailableRequeueQueues","find","gates","some","gateId","gateGroupId","sessionId","encodeUii","RcModuleV2","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleState,\n  RcModuleV2,\n  state,\n  storage,\n  createSelector,\n} from '@ringcentral-integration/core';\nimport EventEmitter from 'events';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { Mapping } from 'ringcentral-widgets/typings';\n\nimport {\n  dialoutStatuses,\n  DialoutStatusesType,\n  messageTypes,\n} from '../../enums';\nimport {\n  EvCallData,\n  EvEvRequeueCallGate,\n} from '../../interfaces/EvData.interface';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport {\n  EvAddSessionNotification,\n  EvBaseCall,\n  EvDropSessionNotification,\n  EvEndedCall,\n  EvHoldResponse,\n  EvOffhookInitResponse,\n  EvOffhookTermResponse,\n} from '../../lib/EvClient/interfaces';\nimport { DepsModules, Presence, State } from './EvPresence.interface';\nimport { getTimeStamp } from './helper';\n\ntype EvPresenceState = RcModuleState<EvPresence, State>;\n\n@Module({\n  name: 'EvPresence',\n  deps: [\n    'EvSubscription',\n    'EvClient',\n    'EvAuth',\n    'Storage',\n    'EvSettings',\n    'EvSessionConfig',\n    'Alert',\n    { dep: 'PresenceOptions', optional: true },\n  ],\n})\nclass EvPresence extends RcModuleV2<DepsModules, EvPresenceState>\n  implements Presence {\n  evPresenceEvents = new EventEmitter();\n\n  showOffHookInitError = true;\n\n  constructor({\n    evSubscription,\n    evClient,\n    storage,\n    evAuth,\n    evSettings,\n    evSessionConfig,\n    alert,\n    enableCache = true,\n  }) {\n    super({\n      modules: {\n        evSubscription,\n        evClient,\n        evAuth,\n        storage,\n        evSettings,\n        evSessionConfig,\n        alert,\n      },\n      enableCache,\n      storageKey: 'EvPresence',\n    });\n  }\n\n  // temporary code for test screen pop sf object when inbound call\n  @storage\n  @state\n  recordId: string = '';\n\n  // temporary code for test screen pop sf object when inbound call\n  @action\n  setRecordId(recordId: string) {\n    this.state.recordId = recordId;\n  }\n\n  // temporary code for test screen pop sf object when inbound call\n  @storage\n  @state\n  caseId: string = '';\n\n  // temporary code for test screen pop sf object when inbound call\n  @action\n  setCaseId(caseId: string) {\n    this.state.caseId = caseId;\n  }\n\n  // temporary code for test screen pop sf object when inbound call\n  @storage\n  @state\n  objectValue: string = '';\n\n  // temporary code for test screen pop sf object when inbound call\n  @action\n  setObjectValue(objectValue: string) {\n    this.state.objectValue = objectValue;\n  }\n\n  // temporary code for test screen pop sf object when inbound call\n  @storage\n  @state\n  objectType: string = '';\n\n  // temporary code for test screen pop sf object when inbound call\n  @action\n  setObjectType(objectType: string) {\n    this.state.objectType = objectType;\n  }\n\n  @storage\n  @state\n  callIds: string[] = [];\n\n  @storage\n  @state\n  otherCallIds: string[] = [];\n\n  @storage\n  @state\n  callLogsIds: string[] = [];\n\n  @storage\n  @state\n  callsMapping: Mapping<EvCallData> = {};\n\n  @storage\n  @state\n  rawCallsMapping: Mapping<EvCallData> = {};\n\n  @storage\n  @state\n  dialoutStatus: DialoutStatusesType = dialoutStatuses.idle;\n\n  getCalls = createSelector(\n    () => this.callIds,\n    () => this.callsMapping,\n    (callIds, callsMapping) =>\n      callIds.map((id) => callsMapping[id]).filter((call) => !!call),\n  );\n\n  getOtherCalls = createSelector(\n    () => this.otherCallIds,\n    () => this.callsMapping,\n    (otherCallIds, callsMapping) => otherCallIds.map((id) => callsMapping[id]),\n  );\n\n  getCallLogs = createSelector(\n    () => this.callLogsIds,\n    () => this.callsMapping,\n    (callLogsIds, callsMapping) => callLogsIds.map((id) => callsMapping[id]),\n  );\n\n  @action\n  addNewCall(call: EvBaseCall) {\n    // note: rawCallsMapping‘s index is raw call uii.\n    this.state.rawCallsMapping[call.uii] = {\n      ...call,\n      // input timezone in second arg if EV reponse has timezone propoty\n      // default timezone is 'America/New_York'\n      timestamp: getTimeStamp(call.queueDts),\n      gate: this._getCurrentGateData(call),\n      // temporary code for test screen pop sf object when inbound call\n      recordId: this.state.recordId,\n      caseId: this.state.caseId,\n      objectValue: this.state.objectValue,\n      objectType: this.state.objectType,\n    };\n  }\n\n  @action\n  addNewSession(session: EvAddSessionNotification) {\n    const id = this._getCallEncodeId(session);\n    if (session.agentId === this._modules.evAuth.agentId) {\n      // related to current agent session\n      const index = this.state.callIds.indexOf(id);\n      if (index === -1) {\n        this.state.callIds.unshift(id);\n      }\n    } else {\n      // other session without current agent\n      const index = this.state.otherCallIds.indexOf(id);\n      if (index === -1) {\n        this.state.otherCallIds.unshift(id);\n      }\n    }\n\n    this.state.callsMapping[id] = {\n      ...this.rawCallsMapping[session.uii],\n      session,\n    };\n  }\n\n  @action\n  dropSession(dropSession: EvDropSessionNotification) {\n    const id = this._getCallEncodeId(dropSession);\n    this.state.otherCallIds = this.state.otherCallIds.filter(\n      (callId) => callId !== id,\n    );\n  }\n\n  @action\n  removeEndedCall(endedCall: EvEndedCall) {\n    const id = this._getCallEncodeId(endedCall);\n    // remove current agent session call with uii.\n    this.state.callIds = this.state.callIds.filter((callId) => callId !== id);\n    // remove other call session with uii.\n    this.state.otherCallIds = this.state.otherCallIds.filter(\n      (callId) => !callId.includes(endedCall.uii),\n    );\n\n    // add call with id (encodeUii({ uii, sessionId }))\n    const callLogsIndex = this.callLogsIds.indexOf(id);\n    if (callLogsIndex === -1) {\n      this.state.callLogsIds.unshift(id);\n    }\n    if (this.callsMapping[id]) {\n      this.state.callsMapping[id].endedCall = endedCall;\n    }\n  }\n\n  @action\n  setCallHoldStatus(res: EvHoldResponse) {\n    const id = this._getCallEncodeId(res);\n    this.state.callsMapping[id].isHold = res.holdState;\n  }\n\n  @action\n  clearCalls() {\n    this.state.callIds = [];\n    this.state.otherCallIds = [];\n  }\n\n  @action\n  setDialoutStatus(status: DialoutStatusesType) {\n    if (this.state.dialoutStatus !== status) {\n      this.state.dialoutStatus = status;\n    }\n  }\n\n  onInitOnce() {\n    this._bindSubscription();\n  }\n\n  onInit() {\n    if (!this._modules.evSessionConfig.isConfigSuccessByLocal) {\n      this.clearCalls();\n    }\n\n    if (\n      this.getCalls().length === 0 &&\n      this.dialoutStatus !== dialoutStatuses.idle\n    ) {\n      this.setDialoutStatus(dialoutStatuses.idle);\n    }\n  }\n\n  offhookInit() {\n    this._modules.evSettings.offhookInitHandle();\n  }\n\n  offhookTerm() {\n    this._modules.evSettings.offhookTermHandle();\n  }\n\n  private _bindSubscription() {\n    this._modules.evSubscription.subscribe(\n      EvCallbackTypes.OFFHOOK_INIT,\n      (data: EvOffhookInitResponse) => {\n        this.evPresenceEvents.emit(EvCallbackTypes.OFFHOOK_INIT, data);\n        if (data.status === 'OK') {\n          this.offhookInit();\n          // when that is reject integrated softphone, we not alert error\n        } else if (this.showOffHookInitError) {\n          this._modules.alert.danger({\n            message: messageTypes.OFFHOOK_INIT_ERROR,\n          });\n          this._modules.evSettings.offhookTermHandle();\n          this.showOffHookInitError = true;\n        }\n      },\n    );\n    this._modules.evSubscription.subscribe(\n      EvCallbackTypes.OFFHOOK_TERM,\n      (data: EvOffhookTermResponse) => {\n        if (data.status === 'OK') {\n          this.offhookTerm();\n        } else {\n          this._modules.alert.danger({\n            message: messageTypes.OFFHOOK_TERM_ERROR,\n          });\n          console.error(data);\n        }\n      },\n    );\n    this._modules.evSubscription.subscribe(\n      EvCallbackTypes.ADD_SESSION,\n      (data) => {\n        if (data.status === 'OK') {\n          this.addNewSession(data);\n        } else {\n          this._modules.alert.danger({\n            message: messageTypes.ADD_SESSION_ERROR,\n          });\n        }\n      },\n    );\n    this._modules.evSubscription.subscribe(\n      EvCallbackTypes.DROP_SESSION,\n      (data) => {\n        if (data.status === 'OK') {\n          this.dropSession(data);\n        } else {\n          this._modules.alert.danger({\n            message: messageTypes.DROP_SESSION_ERROR,\n          });\n        }\n      },\n    );\n    this._modules.evSubscription.subscribe(EvCallbackTypes.HOLD, (data) => {\n      if (data.status === 'OK') {\n        this.setCallHoldStatus(data);\n      } else {\n        this._modules.alert.danger({\n          message: messageTypes.HOLD_ERROR,\n        });\n      }\n    });\n\n    this._modules.evSubscription.subscribe(EvCallbackTypes.NEW_CALL, (data) => {\n      this.addNewCall(data);\n    });\n\n    this._modules.evSubscription.subscribe(EvCallbackTypes.END_CALL, (data) => {\n      const id = this._getCallEncodeId(data);\n      if (!this.callsMapping[id]) return;\n      if (!this._modules.evSettings.isManualOffhook) {\n        this._modules.evClient.offhookTerm();\n      }\n      this.removeEndedCall(data);\n    });\n  }\n\n  private _getCurrentGateData(call: Partial<EvCallData>): EvEvRequeueCallGate {\n    const currentGateId = call.queue.number;\n    const currentQueueGroup = this._modules.evAuth\n      .getAvailableRequeueQueues()\n      .find(({ gates }) => {\n        return gates.some(({ gateId }) => gateId === currentGateId);\n      });\n    return {\n      gateId: currentGateId,\n      gateGroupId: currentQueueGroup?.gateGroupId,\n    };\n  }\n\n  private _getCallEncodeId({\n    uii,\n    sessionId,\n  }: Partial<EvAddSessionNotification>) {\n    return this._modules.evClient.encodeUii({ sessionId, uii });\n  }\n}\n\nexport { EvPresence };\n"],"file":"EvPresence.js"}