{"version":3,"sources":["modules/EvPresence/EvPresence.ts"],"names":["EvPresence","name","deps","dep","optional","that","callIds","callsMapping","otherCallIds","callLogsIds","_deps","evCallDataSource","rawCallsMapping","enableCache","storageKey","beforeunloadHandler","eventEmitter","evPresenceEvents","EventEmitter","showOffHookInitError","status","dialoutStatus","isOffhooking","isOffhook","_checkBeforeunload","isManualOffhook","offhooking","call","addNewCall","session","addNewSession","dropSession","endedCall","removeEndedCall","res","setCallHoldStatus","clearCalls","_bindSubscription","evSubscription","subscribe","EvCallbackTypes","OFFHOOK_INIT","data","emit","setOffhookInit","alert","danger","message","messageTypes","OFFHOOK_INIT_ERROR","setOffhookTerm","OFFHOOK_TERM","OFFHOOK_TERM_ERROR","console","error","ADD_SESSION","ADD_SESSION_ERROR","DROP_SESSION","DROP_SESSION_ERROR","HOLD","HOLD_ERROR","NEW_CALL","END_CALL","id","evClient","encodeUii","offhookTerm","beforeunload","add","remove","map","filter","dialoutStatuses","callConnected","RcModuleV2","storage","state","idle","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport EventEmitter from 'events';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport {\n  dialoutStatuses,\n  DialoutStatusesType,\n  messageTypes,\n} from '../../enums';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport {\n  EvAddSessionNotification,\n  EvBaseCall,\n  EvDropSessionNotification,\n  EvEndedCall,\n  EvHoldResponse,\n  EvOffhookInitResponse,\n  EvOffhookTermResponse,\n} from '../../lib/EvClient/interfaces';\nimport { Deps, Presence } from './EvPresence.interface';\n\n@Module({\n  name: 'EvPresence',\n  deps: [\n    'EvSubscription',\n    'EvCallDataSource',\n    'EvClient',\n    'Storage',\n    'Beforeunload',\n    'Alert',\n    { dep: 'PresenceOptions', optional: true },\n  ],\n})\nclass EvPresence extends RcModuleV2<Deps> implements Presence {\n  beforeunloadHandler = () => false;\n  eventEmitter = this._deps.evCallDataSource.eventEmitter;\n\n  evPresenceEvents = new EventEmitter();\n\n  showOffHookInitError = true;\n\n  get callIds() {\n    return this._deps.evCallDataSource.callIds;\n  }\n\n  get otherCallIds() {\n    return this._deps.evCallDataSource.otherCallIds;\n  }\n\n  get callLogsIds() {\n    return this._deps.evCallDataSource.callLogsIds;\n  }\n\n  get callsMapping() {\n    return this._deps.evCallDataSource.callsMapping;\n  }\n\n  get rawCallsMapping() {\n    return this._deps.evCallDataSource.rawCallsMapping;\n  }\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvPresence',\n    });\n  }\n\n  @storage\n  @state\n  isOffhook = false;\n\n  @storage\n  @state\n  isManualOffhook = false;\n\n  @storage\n  @state\n  isOffhooking = false;\n\n  @storage\n  @state\n  dialoutStatus: DialoutStatusesType = dialoutStatuses.idle;\n\n  @computed((that: EvPresence) => [that.callIds, that.callsMapping])\n  get calls() {\n    return this.callIds\n      .map((id) => this.callsMapping[id])\n      .filter((call) => !!call);\n  }\n\n  @computed((that: EvPresence) => [that.otherCallIds, that.callsMapping])\n  get otherCalls() {\n    return this.otherCallIds.map((id) => this.callsMapping[id]);\n  }\n\n  @computed((that: EvPresence) => [that.callLogsIds, that.callsMapping])\n  get callLogs() {\n    return this.callLogsIds.map((id) => this.callsMapping[id]);\n  }\n\n  @action\n  setDialoutStatus(status: DialoutStatusesType) {\n    if (this.dialoutStatus !== status) {\n      this.dialoutStatus = status;\n    }\n  }\n\n  @action\n  setOffhookInit() {\n    this.isOffhooking = false;\n    this.isOffhook = true;\n    this._checkBeforeunload();\n  }\n\n  @action\n  setOffhookTerm() {\n    this.isOffhooking = false;\n    this.isOffhook = false;\n    this.isManualOffhook = false;\n    this._checkBeforeunload();\n  }\n\n  @action\n  setIsManualOffhook(isManualOffhook: boolean) {\n    this.isManualOffhook = isManualOffhook;\n  }\n\n  @action\n  setOffhook(status: boolean) {\n    this.isOffhook = status;\n    this._checkBeforeunload();\n  }\n\n  @action\n  setOffhooking(offhooking: boolean) {\n    this.isOffhooking = offhooking;\n  }\n\n  addNewCall(call: EvBaseCall) {\n    this._deps.evCallDataSource.addNewCall(call);\n  }\n\n  addNewSession(session: EvAddSessionNotification) {\n    this._deps.evCallDataSource.addNewSession(session);\n  }\n\n  dropSession(dropSession: EvDropSessionNotification) {\n    this._deps.evCallDataSource.dropSession(dropSession);\n  }\n\n  removeEndedCall(endedCall: EvEndedCall) {\n    this._deps.evCallDataSource.removeEndedCall(endedCall);\n  }\n\n  setCallHoldStatus(res: EvHoldResponse) {\n    this._deps.evCallDataSource.setCallHoldStatus(res);\n  }\n\n  clearCalls() {\n    this._deps.evCallDataSource.clearCalls();\n  }\n\n  onInitOnce() {\n    this._bindSubscription();\n  }\n\n  private _bindSubscription() {\n    this._deps.evSubscription\n      .subscribe(\n        EvCallbackTypes.OFFHOOK_INIT,\n        (data: EvOffhookInitResponse) => {\n          this.evPresenceEvents.emit(EvCallbackTypes.OFFHOOK_INIT, data);\n          if (data.status === 'OK') {\n            this.setOffhookInit();\n          } else {\n            // when that is reject integrated softphone, we not alert error\n            if (this.showOffHookInitError) {\n              this._deps.alert.danger({\n                message: messageTypes.OFFHOOK_INIT_ERROR,\n              });\n            }\n            this.setOffhookTerm();\n            this.showOffHookInitError = true;\n          }\n        },\n      )\n      .subscribe(\n        EvCallbackTypes.OFFHOOK_TERM,\n        (data: EvOffhookTermResponse) => {\n          if (data.status === 'OK') {\n            this.setOffhookTerm();\n          } else {\n            this._deps.alert.danger({\n              message: messageTypes.OFFHOOK_TERM_ERROR,\n            });\n            console.error(data);\n          }\n        },\n      )\n      .subscribe(EvCallbackTypes.ADD_SESSION, (data) => {\n        if (data.status === 'OK') {\n          this.addNewSession(data);\n        } else {\n          this._deps.alert.danger({\n            message: messageTypes.ADD_SESSION_ERROR,\n          });\n        }\n      })\n      .subscribe(EvCallbackTypes.DROP_SESSION, (data) => {\n        if (data.status === 'OK') {\n          this.dropSession(data);\n        } else {\n          this._deps.alert.danger({\n            message: messageTypes.DROP_SESSION_ERROR,\n          });\n        }\n      })\n      .subscribe(EvCallbackTypes.HOLD, (data) => {\n        if (data.status === 'OK') {\n          this.setCallHoldStatus(data);\n        } else {\n          this._deps.alert.danger({\n            message: messageTypes.HOLD_ERROR,\n          });\n        }\n      })\n      .subscribe(EvCallbackTypes.NEW_CALL, (data) => {\n        this.addNewCall(data);\n      })\n      .subscribe(EvCallbackTypes.END_CALL, (data) => {\n        const id = this._deps.evClient.encodeUii(data);\n        if (!this.callsMapping[id]) return;\n        if (!this.isManualOffhook) {\n          this._deps.evClient.offhookTerm();\n        }\n        this.removeEndedCall(data);\n      });\n  }\n\n  private _checkBeforeunload() {\n    if (this.isOffhook) {\n      this._deps.beforeunload.add(this.beforeunloadHandler);\n    } else {\n      this._deps.beforeunload.remove(this.beforeunloadHandler);\n    }\n  }\n\n  get isCallConnected() {\n    return this.dialoutStatus === dialoutStatuses.callConnected;\n  }\n}\n\nexport { EvPresence };\n"],"file":"EvPresence.js"}