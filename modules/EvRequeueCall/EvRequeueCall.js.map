{"version":3,"sources":["modules/EvRequeueCall/EvRequeueCall.ts"],"names":["EvRequeueCall","name","deps","dep","optional","evClient","storage","activeCallControl","evAuth","alert","enableCache","modules","storageKey","selectedQueueGroupId","selectedGateId","stayOnCall","requeuing","state","setStatus","loadingId","_modules","info","message","requeueEvents","START","loading","requeueCall","maintain","queueId","result","status","EvTypeError","type","hold","success","SUCCESS","danger","FAILURE","dismiss","currentCall","endedCall","allowRequeue","agentPermissions","allowCrossQueueRequeue","callType","requeueType","_hasRequeueQueues","queues","availableQueues","length","shortcuts","requeueShortcuts","RcModuleV2","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAOA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuBMA,a,WAXL,gBAAO;AACNC,EAAAA,IAAI,EAAE,eADA;AAENC,EAAAA,IAAI,EAAE,CACJ,UADI,EAEJ,SAFI,EAGJ,mBAHI,EAIJ,QAJI,EAKJ,OALI,EAMJ;AAAEC,IAAAA,GAAG,EAAE,sBAAP;AAA+BC,IAAAA,QAAQ,EAAE;AAAzC,GANI;AAFA,CAAP,C;;;;;AAaC,+BAOG;AAAA;;AAAA,QANDC,QAMC,QANDA,QAMC;AAAA,QALDC,OAKC,QALDA,OAKC;AAAA,QAJDC,iBAIC,QAJDA,iBAIC;AAAA,QAHDC,MAGC,QAHDA,MAGC;AAAA,QAFDC,KAEC,QAFDA,KAEC;AAAA,gCADDC,WACC;AAAA,QADDA,WACC,iCADa,IACb;;AAAA;;AACD,8BAAM;AACJC,MAAAA,OAAO,EAAE;AACPN,QAAAA,QAAQ,EAARA,QADO;AAEPC,QAAAA,OAAO,EAAPA,OAFO;AAGPC,QAAAA,iBAAiB,EAAjBA,iBAHO;AAIPC,QAAAA,MAAM,EAANA,MAJO;AAKPC,QAAAA,KAAK,EAALA;AALO,OADL;AAQJC,MAAAA,WAAW,EAAXA,WARI;AASJE,MAAAA,UAAU,EAAE;AATR,KAAN;;AADC;;AAAA;;AAAA;;AAAA;;AAAA;AAYF;;;;qCAwBuB;AAAA,UAJtBC,oBAIsB,SAJtBA,oBAIsB;AAAA,UAHtBC,cAGsB,SAHtBA,cAGsB;AAAA,UAFtBC,UAEsB,SAFtBA,UAEsB;AAAA,UADtBC,SACsB,SADtBA,SACsB;AACtB,WAAKC,KAAL,CAAWJ,oBAAX,GACEA,oBADF,aACEA,oBADF,cACEA,oBADF,GAC0B,KAAKA,oBAD/B;AAEA,WAAKI,KAAL,CAAWH,cAAX,GAA4BA,cAA5B,aAA4BA,cAA5B,cAA4BA,cAA5B,GAA8C,KAAKA,cAAnD;AACA,WAAKG,KAAL,CAAWF,UAAX,GAAwBA,UAAxB,aAAwBA,UAAxB,cAAwBA,UAAxB,GAAsC,KAAKA,UAA3C;AACA,WAAKE,KAAL,CAAWD,SAAX,GAAuBA,SAAvB,aAAuBA,SAAvB,cAAuBA,SAAvB,GAAoC,KAAKA,SAAzC;AACD;;;;;;;;;;;AAKG,qBAAKE,SAAL,CAAe;AAAEF,kBAAAA,SAAS,EAAE;AAAb,iBAAf;AACAG,gBAAAA,SAAS,GAAG,KAAKC,QAAL,CAAcX,KAAd,CAAoBY,IAApB,CAAyB;AACnCC,kBAAAA,OAAO,EAAEC,qBAAcC,KADY;AAEnCC,kBAAAA,OAAO,EAAE;AAF0B,iBAAzB,CAAZ;;uBAKqB,KAAKL,QAAL,CAAcf,QAAd,CAAuBqB,WAAvB,CAAmC;AACtDC,kBAAAA,QAAQ,EAAE,KAAKZ,UADuC;AAEtDa,kBAAAA,OAAO,EAAE,KAAKd;AAFwC,iBAAnC,C;;;AAAfe,gBAAAA,M;;sBAKFA,MAAM,CAACC,MAAP,KAAkB,S;;;;;sBACd,IAAIC,wBAAJ,CAAgB;AAAEC,kBAAAA,IAAI,EAAE;AAAR,iBAAhB,C;;;qBAEJ,KAAKjB,U;;;;;;uBACD,KAAKK,QAAL,CAAcb,iBAAd,CAAgC0B,IAAhC,E;;;AAER,qBAAKb,QAAL,CAAcX,KAAd,CAAoByB,OAApB,CAA4B;AAAEZ,kBAAAA,OAAO,EAAEC,qBAAcY;AAAzB,iBAA5B;;;;;;;;;AAEA,qBAAKf,QAAL,CAAcX,KAAd,CAAoB2B,MAApB,CAA2B;AACzBd,kBAAAA,OAAO,EAAEC,qBAAcc;AADE,iBAA3B;;sBAGM,IAAIN,wBAAJ,CAAgB;AAAEC,kBAAAA,IAAI,EAAET,qBAAcc;AAAtB,iBAAhB,C;;;;AAEN,qBAAKnB,SAAL,CAAe;AAAEF,kBAAAA,SAAS,EAAE;AAAb,iBAAf;;AACA,qBAAKI,QAAL,CAAcX,KAAd,CAAoB6B,OAApB,CAA4BnB,SAA5B;;;;;;;;;;;;;;;;;;;;sCAIcoB,W,EAAyB;AACzC,UAAIV,MAAM,GAAG,IAAb;;AACA,UAAI,CAACU,WAAW,CAACC,SAAjB,EAA4B;AAC1B,YAAI,CAACD,WAAW,CAACE,YAAjB,EAA+B;AAC7BZ,UAAAA,MAAM,GAAG,KAAT;AACD,SAFD,MAEO,IACL,CAAC,KAAKT,QAAL,CAAcZ,MAAd,CAAqBkC,gBAArB,CAAsCC,sBAAvC,IACAJ,WAAW,CAACK,QAAZ,KAAyB,UADzB,IAEAL,WAAW,CAACM,WAAZ,KAA4B,UAHvB,EAIL;AACAhB,UAAAA,MAAM,GAAG,KAAT;AACD,SANM,MAMA,IAAI,CAAC,KAAKiB,iBAAL,CAAuBP,WAAvB,CAAL,EAA0C;AAC/CV,UAAAA,MAAM,GAAG,KAAT;AACD;AACF;;AACD,aAAOA,MAAP;AACD;;;sCAEyBU,W,EAAyB;AACjD,UAAIV,MAAM,GAAG,KAAb;;AACA,UAAIU,WAAW,CAACM,WAAZ,KAA4B,UAAhC,EAA4C;AAC1C,YAAME,MAAM,GAAG,KAAK3B,QAAL,CAAcZ,MAAd,CAAqBwC,eAApC;AACAnB,QAAAA,MAAM,GAAGkB,MAAM,IAAIA,MAAM,CAACE,MAAP,GAAgB,CAAnC;AACD,OAHD,MAGO;AACL,YAAMC,SAAS,GAAGX,WAAW,CAACY,gBAA9B;AACAtB,QAAAA,MAAM,GAAGqB,SAAS,IAAIA,SAAS,CAACD,MAAV,GAAmB,CAAzC;AACD;;AAED,aAAOpB,MAAP;AACD;;;;EAlHyBuB,gB,gGAuBzB9C,a,EACAW,W;;;;;WAC8B,E;;mFAE9BX,a,EACAW,W;;;;;WACwB,E;;+EAExBX,a,EACAW,W;;;;;WACqB,K;;8EAErBX,a,EACAW,W;;;;;WACoB,K;;+DAEpBoC,Y","sourcesContent":["import {\n  action,\n  RcModuleState,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport { requeueEvents } from '../../enums';\nimport { EvCallData } from '../../interfaces/EvData.interface';\nimport { EvTypeError } from '../../lib/EvTypeError';\nimport { DepsModules, RequeueCall, State } from './EvRequeueCall.inerface';\n\ntype EvRequeueCallStatus = Partial<\n  Pick<\n    EvRequeueCall,\n    'selectedQueueGroupId' | 'selectedGateId' | 'stayOnCall' | 'requeuing'\n  >\n>;\n\ntype EvRequeueCallState = RcModuleState<EvRequeueCall, State>;\n\n@Module({\n  name: 'EvRequeueCall',\n  deps: [\n    'EvClient',\n    'Storage',\n    'ActiveCallControl',\n    'EvAuth',\n    'Alert',\n    { dep: 'EvRequeueCallOptions', optional: true },\n  ],\n})\nclass EvRequeueCall extends RcModuleV2<DepsModules, EvRequeueCallState>\n  implements RequeueCall {\n  constructor({\n    evClient,\n    storage,\n    activeCallControl,\n    evAuth,\n    alert,\n    enableCache = true,\n  }) {\n    super({\n      modules: {\n        evClient,\n        storage,\n        activeCallControl,\n        evAuth,\n        alert,\n      },\n      enableCache,\n      storageKey: 'EvRequeueCall',\n    });\n  }\n\n  @storage\n  @state\n  selectedQueueGroupId: string = '';\n\n  @storage\n  @state\n  selectedGateId: string = '';\n\n  @storage\n  @state\n  stayOnCall: boolean = false;\n\n  @storage\n  @state\n  requeuing: boolean = false;\n\n  @action\n  setStatus({\n    selectedQueueGroupId,\n    selectedGateId,\n    stayOnCall,\n    requeuing,\n  }: EvRequeueCallStatus) {\n    this.state.selectedQueueGroupId =\n      selectedQueueGroupId ?? this.selectedQueueGroupId;\n    this.state.selectedGateId = selectedGateId ?? this.selectedGateId;\n    this.state.stayOnCall = stayOnCall ?? this.stayOnCall;\n    this.state.requeuing = requeuing ?? this.requeuing;\n  }\n\n  async requeueCall() {\n    let loadingId: string;\n    try {\n      this.setStatus({ requeuing: true });\n      loadingId = this._modules.alert.info({\n        message: requeueEvents.START,\n        loading: true,\n      });\n\n      const result = await this._modules.evClient.requeueCall({\n        maintain: this.stayOnCall,\n        queueId: this.selectedGateId,\n      });\n\n      if (result.status === 'FAILURE') {\n        throw new EvTypeError({ type: 'Requeue' });\n      }\n      if (this.stayOnCall) {\n        await this._modules.activeCallControl.hold();\n      }\n      this._modules.alert.success({ message: requeueEvents.SUCCESS });\n    } catch (error) {\n      this._modules.alert.danger({\n        message: requeueEvents.FAILURE,\n      });\n      throw new EvTypeError({ type: requeueEvents.FAILURE });\n    } finally {\n      this.setStatus({ requeuing: false });\n      this._modules.alert.dismiss(loadingId);\n    }\n  }\n\n  checkAllowRequeue(currentCall: EvCallData) {\n    let result = true;\n    if (!currentCall.endedCall) {\n      if (!currentCall.allowRequeue) {\n        result = false;\n      } else if (\n        !this._modules.evAuth.agentPermissions.allowCrossQueueRequeue &&\n        currentCall.callType === 'OUTBOUND' &&\n        currentCall.requeueType === 'ADVANCED'\n      ) {\n        result = false;\n      } else if (!this._hasRequeueQueues(currentCall)) {\n        result = false;\n      }\n    }\n    return result;\n  }\n\n  private _hasRequeueQueues(currentCall: EvCallData) {\n    let result = false;\n    if (currentCall.requeueType === 'ADVANCED') {\n      const queues = this._modules.evAuth.availableQueues;\n      result = queues && queues.length > 0;\n    } else {\n      const shortcuts = currentCall.requeueShortcuts;\n      result = shortcuts && shortcuts.length > 0;\n    }\n\n    return result;\n  }\n}\n\nexport { EvRequeueCall };\n"],"file":"EvRequeueCall.js"}