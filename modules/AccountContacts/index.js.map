{"version":3,"sources":["modules/AccountContacts/index.js"],"names":["MaximumBatchGetPresence","DEFAULT_TTL","DEFAULT_PRESENCETTL","DEFAULT_AVATARTTL","DEFAULT_AVATARQUERYINTERVAL","AccountContacts","deps","dep","optional","client","companyContacts","ttl","avatarTtl","presenceTtl","avatarQueryInterval","options","actionTypes","_client","ensureExist","_companyContacts","_ttl","_avatarTtl","_presenceTtl","_avatarQueryInterval","_reducer","store","subscribe","_onStateChange","_shouldInit","dispatch","type","initSuccess","_shouldReset","resetSuccess","ready","pending","contact","useCache","id","hasProfileImage","imageId","profileImages","Date","now","timestamp","image","imageUrl","account","extension","profileImage","get","response","URL","_response","blob","createObjectURL","fetchImageSuccess","console","error","Promise","resolve","presenceId","presences","presence","_getPresenceContexts","push","clearTimeout","enqueueTimeoutId","length","_processQueryPresences","setTimeout","phoneNumber","contacts","entityType","getPresenceContexts","map","x","_batchQueryPresences","responses","presenceMap","forEach","ctx","dndStatus","presenceStatus","telephonyStatus","userStatus","batchFetchPresenceSuccess","presenceSet","accountExtensionMap","acc","item","all","accountId","ids","resp","json","platform","service","url","batchResponses","batch","data","errorCode","warn","state","status","directoryContacts","RcModule","proxify","selector","filteredContacts","result","sourceName","emails","email","extensionNumber","phoneNumbers","phoneType","phoneTypes","profileImageUrl","contactStatus","name","firstName","lastName","phone","direct"],"mappings":"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","sourcesContent":["import { reduce, forEach, map, join, keys } from 'ramda';\nimport phoneTypes from '../../enums/phoneTypes';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport ensureExist from '../../lib/ensureExist';\nimport { addPhoneToContact, getMatchContacts } from '../../lib/contactHelper';\nimport { batchGetApi } from '../../lib/batchApiHelper';\nimport proxify from '../../lib/proxy/proxify';\nimport { selector } from '../../lib/selector';\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\n\nconst MaximumBatchGetPresence = 30;\nconst DEFAULT_TTL = 30 * 60 * 1000; // 30 mins\nconst DEFAULT_PRESENCETTL = 10 * 60 * 1000; // 10 mins\nconst DEFAULT_AVATARTTL = 2 * 60 * 60 * 1000; // 2 hour\nconst DEFAULT_AVATARQUERYINTERVAL = 2 * 1000; // 2 seconds\n\n/**\n * @class\n * @description Contacts managing module\n */\n@Module({\n  deps: [\n    'Client',\n    { dep: 'CompanyContacts' },\n    { dep: 'AccountContactsOptions', optional: true },\n  ],\n})\nexport default class AccountContacts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {CompanyContacts} params.companyContacts - companyContacts module instance\n   * @param {Number} params.ttl - timestamp of local cache, default 30 mins\n   * @param {Number} params.avatarTtl - timestamp of avatar local cache, default 2 hour\n   * @param {Number} params.presenceTtl - timestamp of presence local cache, default 10 mins\n   * @param {Number} params.needCheckStatus - If it's necessary to check extension's status\n   * @param {Number} params.avatarQueryInterval - interval of query avatar, default 2 seconds\n   */\n  constructor({\n    client,\n    companyContacts,\n    ttl = DEFAULT_TTL,\n    avatarTtl = DEFAULT_AVATARTTL,\n    presenceTtl = DEFAULT_PRESENCETTL,\n    avatarQueryInterval = DEFAULT_AVATARQUERYINTERVAL,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = this::ensureExist(client, 'client');\n    this._companyContacts = this::ensureExist(\n      companyContacts,\n      'companyContacts',\n    );\n    this._ttl = ttl;\n    this._avatarTtl = avatarTtl;\n    this._presenceTtl = presenceTtl;\n    this._avatarQueryInterval = avatarQueryInterval;\n\n    this._reducer = getReducer(this.actionTypes);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  _shouldInit() {\n    return this._companyContacts.ready && this.pending;\n  }\n\n  _shouldReset() {\n    return !this._companyContacts.ready && this.ready;\n  }\n\n  // interface of contact source\n  @proxify\n  async getProfileImage(contact, useCache = true) {\n    if (\n      !contact ||\n      !contact.id ||\n      contact.type !== 'company' ||\n      !contact.hasProfileImage\n    ) {\n      return null;\n    }\n\n    const imageId = contact.id;\n    if (\n      useCache &&\n      this.profileImages[imageId] &&\n      Date.now() - this.profileImages[imageId].timestamp < this._avatarTtl\n    ) {\n      const image = this.profileImages[imageId].imageUrl;\n      return image;\n    }\n    let imageUrl = null;\n    try {\n      const response = await this._client\n        .account(contact.account.id)\n        .extension(contact.id)\n        .profileImage('195x195')\n        .get();\n      imageUrl = URL.createObjectURL(await response._response.blob());\n      this.store.dispatch({\n        type: this.actionTypes.fetchImageSuccess,\n        imageId,\n        imageUrl,\n        ttl: this._avatarTtl,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n    return imageUrl;\n  }\n\n  // interface of contact source\n  @proxify\n  getPresence(contact, useCache = true) {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company') {\n        resolve(null);\n        return;\n      }\n\n      const presenceId = `${contact.id}`;\n      if (\n        useCache &&\n        this.presences[presenceId] &&\n        Date.now() - this.presences[presenceId].timestamp < this._presenceTtl\n      ) {\n        const { presence } = this.presences[presenceId];\n        resolve(presence);\n        return;\n      }\n\n      if (!this._getPresenceContexts) {\n        this._getPresenceContexts = [];\n      }\n      this._getPresenceContexts.push({\n        contact,\n        resolve,\n      });\n\n      clearTimeout(this.enqueueTimeoutId);\n      if (this._getPresenceContexts.length === MaximumBatchGetPresence) {\n        this._processQueryPresences(this._getPresenceContexts);\n        this._getPresenceContexts = null;\n      } else {\n        this.enqueueTimeoutId = setTimeout(() => {\n          this._processQueryPresences(this._getPresenceContexts);\n          this._getPresenceContexts = null;\n        }, 1000);\n      }\n    });\n  }\n\n  // interface of contact source\n  matchPhoneNumber(phoneNumber) {\n    return getMatchContacts({\n      contacts: this.contacts,\n      phoneNumber,\n      entityType: 'rcContact',\n    });\n  }\n\n  async _processQueryPresences(getPresenceContexts) {\n    const contacts = getPresenceContexts.map((x) => x.contact);\n    const responses = await this._batchQueryPresences(contacts);\n    const presenceMap = {};\n    getPresenceContexts.forEach((ctx) => {\n      const response = responses[ctx.contact.id];\n      if (!response) {\n        ctx.resolve(null);\n        return;\n      }\n      const {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      } = response;\n      const presenceId = ctx.contact.id;\n      presenceMap[presenceId] = {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      };\n      ctx.resolve(presenceMap[presenceId]);\n    });\n    this.store.dispatch({\n      type: this.actionTypes.batchFetchPresenceSuccess,\n      presenceMap,\n      ttl: this._presenceTtl,\n    });\n  }\n\n  async _batchQueryPresences(contacts) {\n    const presenceSet = {};\n    try {\n      const accountExtensionMap = reduce(\n        (acc, item) => {\n          if (!acc[item.account.id]) {\n            acc[item.account.id] = [];\n          }\n          acc[item.account.id].push(item.id);\n          return acc;\n        },\n        {},\n        contacts,\n      );\n      const batchResponses = await Promise.all(\n        map(async (accountId) => {\n          if (accountExtensionMap[accountId].length > 1) {\n            const ids = join(',', accountExtensionMap[accountId]);\n            // extract json data now so the data appears in the same format\n            // as single requests\n            return map(\n              (resp) => resp.json(),\n              await batchGetApi({\n                platform: this._client.service.platform(),\n                url: `/account/${accountId}/extension/${ids}/presence`,\n              }),\n            );\n          }\n          // wrap single request response data in array to keep the same\n          // format as batch requests\n          return [\n            await this._client\n              .account(accountId)\n              .extension(accountExtensionMap[accountId][0])\n              .presence()\n              .get(),\n          ];\n        }, keys(accountExtensionMap)),\n      );\n      // treat all data as batch since the data is normalized\n      forEach(\n        (batch) =>\n          forEach((data) => {\n            if (data.errorCode) {\n              console.warn(data);\n              return;\n            }\n            presenceSet[data.extension.id] = data;\n          }, batch),\n        batchResponses,\n      );\n    } catch (e) {\n      console.error(e);\n    }\n    return presenceSet;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get profileImages() {\n    return this.state.profileImages;\n  }\n\n  get presences() {\n    return this.state.presences;\n  }\n\n  // interface of contact source\n  get sourceName() {\n    return 'company';\n  }\n\n  // interface of contact source\n  @selector\n  directoryContacts = [\n    () => this._companyContacts.filteredContacts,\n    () => this.profileImages,\n    () => this.presences,\n    (contacts, profileImages, presences) =>\n      reduce(\n        (result, item) => {\n          const id = `${item.id}`;\n          const contact = {\n            ...item,\n            type: this.sourceName,\n            id,\n            emails: [item.email],\n            extensionNumber: item.extensionNumber,\n            hasProfileImage: !!item.profileImage,\n            phoneNumbers: [\n              {\n                phoneNumber: item.extensionNumber,\n                phoneType: phoneTypes.extension,\n              },\n            ],\n            profileImageUrl: profileImages[id] && profileImages[id].imageUrl,\n            presence: presences[id] && presences[id].presence,\n            contactStatus: item.status,\n          };\n          contact.name = item.name\n            ? item.name\n            : `${contact.firstName || ''} ${contact.lastName || ''}`;\n          if (isBlank(contact.extensionNumber)) {\n            return result;\n          }\n          if (item.phoneNumbers && item.phoneNumbers.length > 0) {\n            item.phoneNumbers.forEach((phone) => {\n              if (phone.type) {\n                contact.phoneNumbers.push({\n                  ...phone,\n                  phoneType: phoneTypes.direct,\n                });\n              }\n            });\n          }\n          result.push(contact);\n          return result;\n        },\n        [],\n        contacts,\n      ),\n  ];\n\n  get contacts() {\n    return this.directoryContacts;\n  }\n\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"],"file":"index.js"}