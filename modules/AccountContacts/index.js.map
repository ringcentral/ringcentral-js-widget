{"version":3,"sources":["modules/AccountContacts/index.js"],"names":["MaximumBatchGetPresence","DEFAULT_TTL","DEFAULT_PRESENCETTL","DEFAULT_AVATARTTL","DEFAULT_AVATARQUERYINTERVAL","AccountContacts","deps","dep","optional","client","companyContacts","extensionInfo","ttl","avatarTtl","presenceTtl","avatarQueryInterval","options","actionTypes","_client","ensureExist","call","_companyContacts","_extensionInfo","_ttl","_avatarTtl","_presenceTtl","_avatarQueryInterval","_reducer","store","subscribe","_onStateChange","_shouldInit","dispatch","type","initSuccess","_shouldReset","resetSuccess","ready","pending","contact","useCache","id","hasProfileImage","imageId","profileImages","Date","now","timestamp","image","imageUrl","account","extension","profileImage","get","response","URL","blob","createObjectURL","fetchImageSuccess","console","error","Promise","resolve","presenceId","presences","presence","_getPresenceContexts","push","clearTimeout","enqueueTimeoutId","length","_processQueryPresences","setTimeout","contactId","contacts","find","x","searchFilter","searchString","isMultipleSiteEnabled","site","entityType","phoneSources","siteCode","code","phoneNumber","concat","ivrContacts","rcContact","findPhoneNumber","getPresenceContexts","map","_batchQueryPresences","responses","presenceMap","forEach","ctx","dndStatus","presenceStatus","telephonyStatus","userStatus","batchFetchPresenceSuccess","presenceSet","accountExtensionMap","acc","item","all","accountId","ids","resp","json","platform","service","url","batchResponses","batch","data","errorCode","warn","state","status","directoryContacts","RcModule","proxify","selector","filteredContacts","result","sourceName","emails","email","extensionNumber","phoneNumbers","phoneType","phoneTypes","profileImageUrl","contactStatus","name","firstName","lastName","phone","direct"],"mappings":"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","sourcesContent":["import { reduce, forEach, map, join, keys } from 'ramda';\nimport { phoneSources } from '../../enums/phoneSources';\nimport { phoneTypes } from '../../enums/phoneTypes';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport ensureExist from '../../lib/ensureExist';\nimport { batchGetApi } from '../../lib/batchApiHelper';\nimport {\n  getFilterContacts,\n  getSearchForPhoneNumbers,\n  getMatchContactsByPhoneNumber,\n  getFindPhoneNumber,\n} from '../../lib/contactHelper';\nimport proxify from '../../lib/proxy/proxify';\nimport { selector } from '../../lib/selector';\nimport { actionTypes } from './actionTypes';\nimport getReducer from './getReducer';\n\nconst MaximumBatchGetPresence = 30;\nconst DEFAULT_TTL = 30 * 60 * 1000; // 30 mins\nconst DEFAULT_PRESENCETTL = 10 * 60 * 1000; // 10 mins\nconst DEFAULT_AVATARTTL = 2 * 60 * 60 * 1000; // 2 hour\nconst DEFAULT_AVATARQUERYINTERVAL = 2 * 1000; // 2 seconds\n\n/**\n * @class\n * @description Contacts managing module\n */\n@Module({\n  deps: [\n    'Client',\n    'ExtensionInfo',\n    { dep: 'CompanyContacts' },\n    { dep: 'AccountContactsOptions', optional: true },\n  ],\n})\nexport default class AccountContacts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {ExtensionInfo} params.extensionInfo - current user extension info\n   * @param {CompanyContacts} params.companyContacts - companyContacts module instance\n   * @param {Number} params.ttl - timestamp of local cache, default 30 mins\n   * @param {Number} params.avatarTtl - timestamp of avatar local cache, default 2 hour\n   * @param {Number} params.presenceTtl - timestamp of presence local cache, default 10 mins\n   * @param {Number} params.needCheckStatus - If it's necessary to check extension's status\n   * @param {Number} params.avatarQueryInterval - interval of query avatar, default 2 seconds\n   */\n  constructor({\n    client,\n    companyContacts,\n    extensionInfo,\n    ttl = DEFAULT_TTL,\n    avatarTtl = DEFAULT_AVATARTTL,\n    presenceTtl = DEFAULT_PRESENCETTL,\n    avatarQueryInterval = DEFAULT_AVATARQUERYINTERVAL,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = ensureExist.call(this, client, 'client');\n    this._companyContacts = ensureExist.call(\n      this,\n      companyContacts,\n      'companyContacts',\n    );\n    this._extensionInfo = extensionInfo;\n    this._ttl = ttl;\n    this._avatarTtl = avatarTtl;\n    this._presenceTtl = presenceTtl;\n    this._avatarQueryInterval = avatarQueryInterval;\n\n    this._reducer = getReducer(this.actionTypes);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  _shouldInit() {\n    return this._companyContacts.ready && this.pending;\n  }\n\n  _shouldReset() {\n    return !this._companyContacts.ready && this.ready;\n  }\n\n  // interface of ContactSource\n  @proxify\n  async getProfileImage(contact, useCache = true) {\n    if (\n      !contact ||\n      !contact.id ||\n      contact.type !== 'company' ||\n      !contact.hasProfileImage\n    ) {\n      return null;\n    }\n\n    const imageId = contact.id;\n    if (\n      useCache &&\n      this.profileImages[imageId] &&\n      Date.now() - this.profileImages[imageId].timestamp < this._avatarTtl\n    ) {\n      const image = this.profileImages[imageId].imageUrl;\n      return image;\n    }\n    let imageUrl = null;\n    try {\n      const response = await this._client\n        .account(contact.account.id)\n        .extension(contact.id)\n        .profileImage('195x195')\n        .get();\n      imageUrl = URL.createObjectURL(await response.blob());\n      this.store.dispatch({\n        type: this.actionTypes.fetchImageSuccess,\n        imageId,\n        imageUrl,\n        ttl: this._avatarTtl,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n    return imageUrl;\n  }\n\n  // interface of ContactSource\n  @proxify\n  getPresence(contact, useCache = true) {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company') {\n        resolve(null);\n        return;\n      }\n\n      const presenceId = `${contact.id}`;\n      if (\n        useCache &&\n        this.presences[presenceId] &&\n        Date.now() - this.presences[presenceId].timestamp < this._presenceTtl\n      ) {\n        const { presence } = this.presences[presenceId];\n        resolve(presence);\n        return;\n      }\n\n      if (!this._getPresenceContexts) {\n        this._getPresenceContexts = [];\n      }\n      this._getPresenceContexts.push({\n        contact,\n        resolve,\n      });\n\n      clearTimeout(this.enqueueTimeoutId);\n      if (this._getPresenceContexts.length === MaximumBatchGetPresence) {\n        this._processQueryPresences(this._getPresenceContexts);\n        this._getPresenceContexts = null;\n      } else {\n        this.enqueueTimeoutId = setTimeout(() => {\n          this._processQueryPresences(this._getPresenceContexts);\n          this._getPresenceContexts = null;\n        }, 1000);\n      }\n    });\n  }\n\n  // interface of ContactSource\n  findContact(contactId) {\n    return this.contacts.find((x) => x.id === contactId);\n  }\n\n  // interface of ContactSource\n  filterContacts(searchFilter) {\n    return getFilterContacts(this.contacts, searchFilter);\n  }\n\n  // interface of ContactSource\n  searchForPhoneNumbers(searchString) {\n    const { isMultipleSiteEnabled, site } = this._extensionInfo;\n    return getSearchForPhoneNumbers({\n      contacts: this.contacts,\n      searchString,\n      entityType: phoneSources.contact,\n      options: { isMultipleSiteEnabled, siteCode: site?.code },\n    });\n  }\n\n  // interface of ContactSource\n  matchContactsByPhoneNumber(phoneNumber) {\n    const { isMultipleSiteEnabled, site } = this._extensionInfo;\n    return getMatchContactsByPhoneNumber({\n      contacts: this.contacts.concat(this._companyContacts.ivrContacts),\n      phoneNumber,\n      entityType: phoneSources.rcContact,\n      findPhoneNumber: getFindPhoneNumber({\n        phoneNumber,\n        options: {\n          isMultipleSiteEnabled,\n          siteCode: site?.code,\n        },\n      }),\n    });\n  }\n\n  async _processQueryPresences(getPresenceContexts) {\n    const contacts = getPresenceContexts.map((x) => x.contact);\n    const responses = await this._batchQueryPresences(contacts);\n    const presenceMap = {};\n    getPresenceContexts.forEach((ctx) => {\n      const response = responses[ctx.contact.id];\n      if (!response) {\n        ctx.resolve(null);\n        return;\n      }\n      const {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      } = response;\n      const presenceId = ctx.contact.id;\n      presenceMap[presenceId] = {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      };\n      ctx.resolve(presenceMap[presenceId]);\n    });\n    this.store.dispatch({\n      type: this.actionTypes.batchFetchPresenceSuccess,\n      presenceMap,\n      ttl: this._presenceTtl,\n    });\n  }\n\n  async _batchQueryPresences(contacts) {\n    const presenceSet = {};\n    try {\n      const accountExtensionMap = reduce(\n        (acc, item) => {\n          if (!acc[item.account.id]) {\n            acc[item.account.id] = [];\n          }\n          acc[item.account.id].push(item.id);\n          return acc;\n        },\n        {},\n        contacts,\n      );\n      const batchResponses = await Promise.all(\n        map(async (accountId) => {\n          if (accountExtensionMap[accountId].length > 1) {\n            const ids = join(',', accountExtensionMap[accountId]);\n            // extract json data now so the data appears in the same format\n            // as single requests\n            return Promise.all(\n              map(\n                async (resp) => resp.json(),\n                await batchGetApi({\n                  platform: this._client.service.platform(),\n                  url: `/restapi/v1.0/account/${accountId}/extension/${ids}/presence`,\n                }),\n              ),\n            );\n          }\n          // wrap single request response data in array to keep the same\n          // format as batch requests\n          return [\n            await this._client\n              .account(accountId)\n              .extension(accountExtensionMap[accountId][0])\n              .presence()\n              .get(),\n          ];\n        }, keys(accountExtensionMap)),\n      );\n      // treat all data as batch since the data is normalized\n      forEach(\n        (batch) =>\n          forEach((data) => {\n            if (data.errorCode) {\n              console.warn(data);\n              return;\n            }\n            presenceSet[data.extension.id] = data;\n          }, batch),\n        batchResponses,\n      );\n    } catch (e) {\n      console.error(e);\n    }\n    return presenceSet;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get profileImages() {\n    return this.state.profileImages;\n  }\n\n  get presences() {\n    return this.state.presences;\n  }\n\n  // interface of ContactSource\n  get sourceName() {\n    return 'company';\n  }\n\n  // interface of ContactSource\n  @selector\n  directoryContacts = [\n    () => this._companyContacts.filteredContacts,\n    () => this.profileImages,\n    () => this.presences,\n    (contacts, profileImages, presences) =>\n      reduce(\n        (result, item) => {\n          const id = `${item.id}`;\n          const contact = {\n            ...item,\n            type: this.sourceName,\n            id,\n            emails: [item.email],\n            extensionNumber: item.extensionNumber,\n            hasProfileImage: !!item.profileImage,\n            phoneNumbers: [\n              {\n                phoneNumber: item.extensionNumber,\n                phoneType: phoneTypes.extension,\n              },\n            ],\n            profileImageUrl: profileImages[id] && profileImages[id].imageUrl,\n            presence: presences[id] && presences[id].presence,\n            contactStatus: item.status,\n          };\n          contact.name = item.name\n            ? item.name\n            : `${contact.firstName || ''} ${contact.lastName || ''}`;\n          if (isBlank(contact.extensionNumber)) {\n            return result;\n          }\n          if (item.phoneNumbers && item.phoneNumbers.length > 0) {\n            item.phoneNumbers.forEach((phone) => {\n              if (phone.type) {\n                contact.phoneNumbers.push({\n                  ...phone,\n                  phoneType: phoneTypes.direct,\n                });\n              }\n            });\n          }\n          result.push(contact);\n          return result;\n        },\n        [],\n        contacts,\n      ),\n  ];\n\n  // interface of ContactSource\n  get contacts() {\n    return this.directoryContacts;\n  }\n\n  // interface of ContactSource\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"],"file":"index.js"}