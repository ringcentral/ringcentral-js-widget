{"version":3,"sources":["modules/AccountContactsV2/AccountContacts.ts"],"names":["MaximumBatchGetPresence","DEFAULT_TTL","DEFAULT_PRESENCETTL","DEFAULT_AVATARTTL","DEFAULT_AVATARQUERYINTERVAL","AccountContacts","name","deps","dep","optional","_deps","presences","profileImages","companyContacts","filteredContacts","_getPresenceContexts","_enqueueTimeoutId","imageId","imageUrl","ttl","data","Object","keys","forEach","key","Date","now","timestamp","URL","revokeObjectURL","presenceMap","presence","ready","pending","contact","useCache","id","type","hasProfileImage","_avatarTtl","image","client","account","extension","profileImage","get","response","blob","createObjectURL","fetchImageSuccess","console","error","Promise","resolve","presenceId","_presenceTtl","push","clearTimeout","length","_processQueryPresences","setTimeout","searchString","extensionInfo","isMultipleSiteEnabled","site","contacts","entityType","phoneSources","options","siteCode","code","phoneNumber","ivrContacts","rcContact","findContact","getPresenceContexts","map","x","_batchQueryPresences","responses","ctx","dndStatus","presenceStatus","telephonyStatus","userStatus","batchFetchPresenceSuccess","presenceSet","accountExtensionMap","acc","item","all","accountId","ids","resp","json","platform","service","url","batchResponses","batch","errorCode","warn","_data","accountContactsOptions","avatarTtl","presenceTtl","avatarQueryInterval","result","sourceName","emails","email","extensionNumber","phoneNumbers","phoneType","phoneTypes","profileImageUrl","contactStatus","status","firstName","lastName","phone","direct","directoryContacts","RcModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import { reduce, forEach, map, join, keys } from 'ramda';\nimport {\n  RcModuleV2,\n  state,\n  action,\n  computed,\n} from '@ringcentral-integration/core';\nimport { PresenceInfoResponse, ValidationError } from '@rc-ex/core/definitions';\nimport { phoneSources } from '../../enums/phoneSources';\nimport { phoneTypes } from '../../enums/phoneTypes';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport { batchGetApi } from '../../lib/batchApiHelper';\nimport {\n  getSearchContacts,\n  getMatchContacts,\n  getFindContact,\n} from '../../lib/contactHelper';\nimport proxify from '../../lib/proxy/proxify';\nimport {\n  Deps,\n  ProfileImages,\n  Presences,\n  Contact,\n  PresenceContexts,\n  PresenceMap,\n} from './AccountContacts.interfaces';\n\nconst MaximumBatchGetPresence = 30;\nconst DEFAULT_TTL = 30 * 60 * 1000; // 30 mins\nconst DEFAULT_PRESENCETTL = 10 * 60 * 1000; // 10 mins\nconst DEFAULT_AVATARTTL = 2 * 60 * 60 * 1000; // 2 hour\nconst DEFAULT_AVATARQUERYINTERVAL = 2 * 1000; // 2 seconds\n\n@Module({\n  name: 'AccountContacts',\n  deps: [\n    'Client',\n    'ExtensionInfo',\n    { dep: 'CompanyContacts' },\n    { dep: 'AccountContactsOptions', optional: true },\n  ],\n})\nexport class AccountContacts extends RcModuleV2<Deps> {\n  protected _getPresenceContexts?: PresenceContexts;\n\n  protected _enqueueTimeoutId: NodeJS.Timeout;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  @state\n  profileImages: ProfileImages = {};\n\n  @state\n  presences: Presences = {};\n\n  @action\n  fetchImageSuccess({\n    imageId,\n    imageUrl,\n    ttl,\n  }: {\n    imageId: string;\n    imageUrl: string;\n    ttl: number;\n  }) {\n    const data: ProfileImages = {};\n    Object.keys(this.profileImages).forEach((key) => {\n      if (Date.now() - this.profileImages[key].timestamp < ttl) {\n        data[key] = this.profileImages[key];\n      } else {\n        URL.revokeObjectURL(this.profileImages[key].imageUrl);\n      }\n    });\n    this.profileImages = data;\n    this.profileImages[imageId] = {\n      imageUrl,\n      timestamp: Date.now(),\n    };\n  }\n\n  @action\n  batchFetchPresenceSuccess({\n    presenceMap = {},\n    ttl,\n  }: {\n    presenceMap?: PresenceMap;\n    ttl: number;\n  }) {\n    const data: Presences = {};\n    Object.keys(this.presences).forEach((key) => {\n      if (Date.now() - this.presences[key].timestamp < ttl) {\n        data[key] = this.presences[key];\n      }\n    });\n    this.presences = data;\n    Object.keys(presenceMap).forEach((key) => {\n      this.presences[key] = {\n        presence: presenceMap[key],\n        timestamp: Date.now(),\n      };\n    });\n  }\n\n  onReset() {\n    Object.keys(this.profileImages).forEach((key) => {\n      URL.revokeObjectURL(this.profileImages[key].imageUrl);\n    });\n    this.profileImages = {};\n    this.presences = {};\n  }\n\n  get _ttl() {\n    return this._deps.accountContactsOptions?.ttl ?? DEFAULT_TTL;\n  }\n\n  get _avatarTtl() {\n    return this._deps.accountContactsOptions?.avatarTtl ?? DEFAULT_AVATARTTL;\n  }\n\n  get _presenceTtl() {\n    return (\n      this._deps.accountContactsOptions?.presenceTtl ?? DEFAULT_PRESENCETTL\n    );\n  }\n\n  get _avatarQueryInterval() {\n    return (\n      this._deps.accountContactsOptions?.avatarQueryInterval ??\n      DEFAULT_AVATARQUERYINTERVAL\n    );\n  }\n\n  _shouldInit() {\n    return this._deps.companyContacts.ready && this.pending;\n  }\n\n  _shouldReset() {\n    return !this._deps.companyContacts.ready && this.ready;\n  }\n\n  // interface of ContactSource\n  @proxify\n  async getProfileImage(contact: Contact, useCache = true) {\n    if (\n      !contact ||\n      !contact.id ||\n      contact.type !== 'company' ||\n      !contact.hasProfileImage\n    ) {\n      return null;\n    }\n\n    const imageId = contact.id;\n    if (\n      useCache &&\n      this.profileImages[imageId] &&\n      Date.now() - this.profileImages[imageId].timestamp < this._avatarTtl\n    ) {\n      const image = this.profileImages[imageId].imageUrl;\n      return image;\n    }\n    let imageUrl = null;\n    try {\n      const response = await this._deps.client\n        .account(contact.account.id)\n        .extension(contact.id)\n        .profileImage('195x195')\n        .get();\n      imageUrl = URL.createObjectURL(await response.blob());\n      this.fetchImageSuccess({\n        imageId,\n        imageUrl,\n        ttl: this._avatarTtl,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n    return imageUrl;\n  }\n\n  // interface of ContactSource\n  @proxify\n  getPresence(contact: Contact, useCache = true) {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company') {\n        resolve(null);\n        return;\n      }\n\n      const presenceId = `${contact.id}`;\n      if (\n        useCache &&\n        this.presences[presenceId] &&\n        Date.now() - this.presences[presenceId].timestamp < this._presenceTtl\n      ) {\n        const { presence } = this.presences[presenceId];\n        resolve(presence);\n        return;\n      }\n\n      if (!this._getPresenceContexts) {\n        this._getPresenceContexts = [];\n      }\n      this._getPresenceContexts.push({\n        contact,\n        resolve,\n      });\n\n      clearTimeout(this._enqueueTimeoutId);\n      if (this._getPresenceContexts.length === MaximumBatchGetPresence) {\n        this._processQueryPresences(this._getPresenceContexts);\n        this._getPresenceContexts = null;\n      } else {\n        this._enqueueTimeoutId = setTimeout(() => {\n          this._processQueryPresences(this._getPresenceContexts);\n          this._getPresenceContexts = null;\n        }, 1000);\n      }\n    });\n  }\n\n  // interface of ContactSource\n  searchContacts(searchString: string) {\n    const { isMultipleSiteEnabled, site } = this._deps.extensionInfo;\n    return getSearchContacts({\n      contacts: this.contacts,\n      searchString,\n      entityType: phoneSources.contact,\n      options: { isMultipleSiteEnabled, siteCode: site?.code },\n    });\n  }\n\n  // interface of ContactSource\n  matchPhoneNumber(phoneNumber: string) {\n    const { isMultipleSiteEnabled, site } = this._deps.extensionInfo;\n    return getMatchContacts({\n      contacts: [...this.contacts, ...this._deps.companyContacts.ivrContacts],\n      phoneNumber,\n      entityType: phoneSources.rcContact,\n      findContact: getFindContact({\n        phoneNumber,\n        options: {\n          isMultipleSiteEnabled,\n          siteCode: site?.code,\n        },\n      }),\n    });\n  }\n\n  async _processQueryPresences(getPresenceContexts: PresenceContexts) {\n    const contacts = getPresenceContexts.map<Contact>((x) => x.contact);\n    const responses = await this._batchQueryPresences(contacts);\n    const presenceMap: PresenceMap = {};\n    getPresenceContexts.forEach((ctx) => {\n      const response = responses[ctx.contact.id];\n      if (!response) {\n        ctx.resolve(null);\n        return;\n      }\n      const {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      } = response;\n      const presenceId = ctx.contact.id;\n      presenceMap[presenceId] = {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      };\n      ctx.resolve(presenceMap[presenceId]);\n    });\n    this.batchFetchPresenceSuccess({\n      presenceMap,\n      ttl: this._presenceTtl,\n    });\n  }\n\n  async _batchQueryPresences(contacts: Contact[]) {\n    const presenceSet: Record<string, PresenceInfoResponse> = {};\n    try {\n      const accountExtensionMap = reduce(\n        (acc: Record<string, string[]>, item) => {\n          if (!acc[item.account.id]) {\n            acc[item.account.id] = [];\n          }\n          acc[item.account.id].push(item.id);\n          return acc;\n        },\n        {},\n        contacts,\n      );\n      const batchResponses = await Promise.all<\n        (PresenceInfoResponse | ValidationError)[]\n      >(\n        map(async (accountId) => {\n          if (accountExtensionMap[accountId].length > 1) {\n            const ids = join(',', accountExtensionMap[accountId]);\n            // extract json data now so the data appears in the same format\n            // as single requests\n            return Promise.all(\n              map(\n                async (resp) => resp.json(),\n                await batchGetApi({\n                  platform: this._deps.client.service.platform(),\n                  url: `/restapi/v1.0/account/${accountId}/extension/${ids}/presence`,\n                }),\n              ),\n            );\n          }\n          // wrap single request response data in array to keep the same\n          // format as batch requests\n          return [\n            await this._deps.client\n              .account(accountId)\n              .extension(accountExtensionMap[accountId][0])\n              .presence()\n              .get(),\n          ];\n        }, keys(accountExtensionMap)),\n      );\n      // treat all data as batch since the data is normalized\n      forEach(\n        (batch) =>\n          forEach((data) => {\n            if ((data as ValidationError).errorCode) {\n              console.warn(data);\n              return;\n            }\n            const _data: PresenceInfoResponse = data;\n            const { id } = _data.extension;\n            presenceSet[id] = _data;\n          }, batch),\n        batchResponses,\n      );\n    } catch (e) {\n      console.error(e);\n    }\n    return presenceSet;\n  }\n\n  // interface of ContactSource\n  get sourceName() {\n    return 'company';\n  }\n\n  // interface of ContactSource\n  @computed<AccountContacts>(({ _deps, presences, profileImages }) => [\n    _deps.companyContacts.filteredContacts,\n    profileImages,\n    presences,\n  ])\n  get directoryContacts(): Contact[] {\n    return reduce(\n      (result, item) => {\n        const id = `${item.id}`;\n        const contact: Contact = {\n          ...item,\n          type: this.sourceName,\n          id,\n          emails: [item.email],\n          extensionNumber: item.extensionNumber,\n          hasProfileImage: !!item.profileImage,\n          phoneNumbers: [\n            {\n              phoneNumber: item.extensionNumber,\n              phoneType: phoneTypes.extension,\n            },\n          ],\n          profileImageUrl:\n            this.profileImages[id] && this.profileImages[id].imageUrl,\n          presence: this.presences[id] && this.presences[id].presence,\n          contactStatus: item.status,\n        };\n        contact.name = item.name\n          ? item.name\n          : `${contact.firstName || ''} ${contact.lastName || ''}`;\n        if (isBlank(contact.extensionNumber)) {\n          return result;\n        }\n        if (item.phoneNumbers && item.phoneNumbers.length > 0) {\n          item.phoneNumbers.forEach((phone) => {\n            if (phone.type) {\n              contact.phoneNumbers.push({\n                ...phone,\n                phoneType: phoneTypes.direct,\n              });\n            }\n          });\n        }\n        result.push(contact);\n        return result;\n      },\n      [],\n      this._deps.companyContacts.filteredContacts,\n    );\n  }\n\n  // interface of ContactSource\n  get contacts() {\n    return this.directoryContacts;\n  }\n\n  // interface of ContactSource\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"],"file":"AccountContacts.js"}