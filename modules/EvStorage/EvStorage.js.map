{"version":3,"sources":["modules/EvStorage/EvStorage.ts"],"names":["EvStorage","name","deps","dep","optional","_disableInactiveTabsWrite","_deps","storageOptions","disableInactiveTabsWrite","storedData","store","subscribe","auth","loginStatus","loggedIn","tabManager","ready","evAuth","evLoginStatus","LOGIN_SUCCESS","pending","dispatch","type","_storageActionTypes","init","agentId","storageKey","prefix","ownerId","_storage","_StorageProvider","getData","newKey","migrationMapping","oldKey","index","setItem","key","_storageReducers","removeItem","initSuccess","data","_storageHandler","value","sync","on","notLoggedIn","resetStorage","status","moduleStatuses","active","currentData","Storage"],"mappings":"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","sourcesContent":["import { Module } from 'ringcentral-integration/lib/di';\n\nimport { Storage } from 'ringcentral-integration/modules/StorageV2';\nimport loginStatus from 'ringcentral-integration/modules/Auth/loginStatus';\nimport moduleStatuses from 'ringcentral-integration/enums/moduleStatuses';\nimport { Deps } from './EvStorage.interface';\nimport { loginStatus as evLoginStatus } from '../../enums/loginStatus';\n\n@Module({\n  name: 'Storage',\n  deps: [\n    'Auth',\n    'EvAuth',\n    { dep: 'TabManager', optional: true },\n    { dep: 'StorageOptions', optional: true },\n  ],\n})\nexport class EvStorage extends Storage<Deps> {\n  constructor(deps: Deps) {\n    super(deps);\n    this._disableInactiveTabsWrite =\n      this._deps.storageOptions?.disableInactiveTabsWrite ?? true;\n  }\n\n  async initModule() {\n    let storedData: Record<string, unknown> = null;\n    this.store.subscribe(async () => {\n      if (\n        this._deps.auth.loginStatus === loginStatus.loggedIn &&\n        (!this._deps.tabManager || this._deps.tabManager.ready) &&\n        this._deps.evAuth.loginStatus === evLoginStatus.LOGIN_SUCCESS &&\n        this.pending\n      ) {\n        this.store.dispatch({\n          type: this._storageActionTypes.init,\n        });\n        const agentId = this._deps.evAuth.agentId;\n        const storageKey = `${this.prefix ? `${this.prefix}-` : ''}storage-${\n          this._deps.auth.ownerId\n        }${agentId ? `-${agentId}` : ''}`;\n\n        this._storage = new this._StorageProvider({\n          storageKey,\n        });\n        storedData = await this._storage.getData();\n        /* migration storage v1 to v2 */\n        /* eslint-disable */\n        for (const newKey in this.migrationMapping) {\n          const oldKey = this.migrationMapping[newKey];\n          if (typeof oldKey === 'string') {\n            if (storedData[oldKey]) {\n              storedData[newKey] = storedData[oldKey];\n            }\n          } else if (typeof oldKey === 'object') {\n            for (const index in oldKey) {\n              if (storedData[oldKey[index]]) {\n                storedData[newKey] = storedData[newKey] ?? {};\n                (storedData[newKey] as Record<string, any>)[index] =\n                  storedData[oldKey[index]];\n              }\n            }\n          }\n          this._storage.setItem(newKey, storedData[newKey]);\n        }\n        /* eslint-enable */\n        /* migration storage v1 to v2 */\n        for (const key in storedData) {\n          if (!this._storageReducers[key]) {\n            delete storedData[key];\n            await this._storage.removeItem(key);\n          }\n        }\n        this.store.dispatch({\n          type: this._storageActionTypes.initSuccess,\n          // storageKey,\n          // To fix same reference in redux store with storedData\n          data: {\n            ...storedData,\n          },\n        });\n        this._storageHandler = ({ key, value }) => {\n          if (this.ready) {\n            storedData[key] = value;\n            this.store.dispatch({\n              type: this._storageActionTypes.sync,\n              key,\n              value,\n            });\n          }\n        };\n        this._storage.on('storage', this._storageHandler);\n      } else if (\n        ((!!this._deps.tabManager && !this._deps.tabManager.ready) ||\n          this._deps.auth.notLoggedIn) &&\n        this.ready\n      ) {\n        this.resetStorage();\n      }\n      if (\n        this.status === moduleStatuses.ready &&\n        (!this._disableInactiveTabsWrite ||\n          !this._deps.tabManager ||\n          this._deps.tabManager.active)\n      ) {\n        // save new data to storage when changed\n        const currentData = this.data;\n        for (const key in currentData) {\n          if (storedData[key] !== currentData[key]) {\n            this._storage.setItem(key, currentData[key]);\n            storedData[key] = currentData[key];\n          }\n        }\n      }\n    });\n  }\n}\n"],"file":"EvStorage.js"}