{"version":3,"sources":["modules/ExtensionPhoneNumber/index.js"],"names":["ExtensionPhoneNumber","deps","dep","optional","client","rolesAndPermissions","options","subscriptionFilters","extensionInfo","subscriptionHandler","message","_subscriptionHandleFn","fetchFunction","params","account","extension","phoneNumber","list","number","country","map","readyCheckFn","_rolesAndPermissions","ready","cleanOnReset","ensureExist","body","hints","includes","subscriptionHints","companyNumbers","fetchData","permissions","ReadUserPhoneNumbers","DataFetcher","selector","data","numbers","phoneNumbers","filter","p","usageType","features","indexOf","status"],"mappings":"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","sourcesContent":["import { find } from 'ramda';\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport removeUri from '../../lib/removeUri';\nimport DataFetcher from '../../lib/DataFetcher';\nimport ensureExist from '../../lib/ensureExist';\nimport { selector } from '../../lib/selector';\nimport subscriptionHints from '../../enums/subscriptionHints';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\n\n/**\n * @class\n * @description Extension phone number list module\n */\n@Module({\n  deps: [\n    'Client',\n    'RolesAndPermissions',\n    { dep: 'ExtensionPhoneNumberOptions', optional: true },\n  ],\n})\nexport default class ExtensionPhoneNumber extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({ client, rolesAndPermissions, ...options }) {\n    super({\n      client,\n      subscriptionFilters: [subscriptionFilters.extensionInfo],\n      subscriptionHandler: async (message) => {\n        await this._subscriptionHandleFn(message);\n      },\n      fetchFunction: async () =>\n        (await fetchList((params) =>\n          client\n            .account()\n            .extension()\n            .phoneNumber()\n            .list(params),\n        )).map((number) => ({\n          ...number,\n          country: removeUri(number.country),\n        })),\n      readyCheckFn: () => this._rolesAndPermissions.ready,\n      cleanOnReset: true,\n      ...options,\n    });\n\n    this._rolesAndPermissions = this::ensureExist(\n      rolesAndPermissions,\n      'rolesAndPermissions',\n    );\n  }\n\n  get _name() {\n    return 'extensionPhoneNumber';\n  }\n\n  async _subscriptionHandleFn(message) {\n    if (\n      message &&\n      message.body &&\n      message.body.hints &&\n      message.body.hints.includes(subscriptionHints.companyNumbers)\n    ) {\n      await this.fetchData();\n    }\n  }\n\n  @selector\n  numbers = [() => this.data, (data) => data || []];\n\n  @selector\n  companyNumbers = [\n    () => this.numbers,\n    (phoneNumbers) =>\n      phoneNumbers.filter((p) => p.usageType === 'CompanyNumber'),\n  ];\n\n  @selector\n  mainCompanyNumber = [\n    () => this.numbers,\n    (phoneNumbers) =>\n      find((p) => p.usageType === 'MainCompanyNumber', phoneNumbers),\n  ];\n\n  @selector\n  directNumbers = [\n    () => this.numbers,\n    (phoneNumbers) =>\n      phoneNumbers.filter((p) => p.usageType === 'DirectNumber'),\n  ];\n\n  @selector\n  callerIdNumbers = [\n    () => this.numbers,\n    (phoneNumbers) =>\n      phoneNumbers.filter(\n        (p) =>\n          (p.features && p.features.indexOf('CallerId') !== -1) ||\n          (p.usageType === 'ForwardedNumber' && p.status === 'PortedIn'),\n      ),\n  ];\n\n  @selector\n  smsSenderNumbers = [\n    () => this.numbers,\n    (phoneNumbers) =>\n      phoneNumbers.filter(\n        (p) => p.features && p.features.indexOf('SmsSender') !== -1,\n      ),\n  ];\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.permissions.ReadUserPhoneNumbers;\n  }\n}\n"],"file":"index.js"}