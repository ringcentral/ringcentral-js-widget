{"version":3,"sources":["modules/ConnectivityManager/index.js"],"names":["ConnectivityManager","deps","dep","optional","auth","oAuth","alert","callingSettings","audioSettings","webphone","connectivityMonitor","availabilityMonitor","options","actionTypes","_auth","_oAuth","_callingSettings","_audioSettings","_webphone","_availabilityMonitor","_alert","_connectivityMonitor","_reducer","_oldConnectivityType","_shouldInit","store","dispatch","type","initSuccess","ready","connectivityType","showConnectivityAlert","subscribe","_onStateChange","pending","isWebphoneMode","showAlert","getUserMedia","connect","force","skipConnectDelay","healthCheck","message","danger","allowDuplicates","alertIds","messages","filter","m","connectivityTypes","map","id","length","dismiss","webphoneUnavailable","_hideAlerts","_showAlert","state","status","moduleStatuses","loggedIn","userMedia","connected","disconnected","connecting","connectFailed","reconnecting","connectError","inactive","proxyRetryCount","isVoIPOnlyMode","isLimitedMode","hasLimitedStatusError","mode","offline","voipOnly","RcModule","proxify","selector","networkLoss","connectivity","isVoIPOnlyModeActivated","isLimitedModeActivated","webphoneAvailable","serverUnavailable","survival"],"mappings":"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","sourcesContent":["import RcModule from 'ringcentral-integration/lib/RcModule';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport ensureExist from 'ringcentral-integration/lib/ensureExist';\nimport { selector } from 'ringcentral-integration/lib/selector';\nimport proxify from 'ringcentral-integration/lib/proxy/proxify';\nimport moduleStatuses from 'ringcentral-integration/enums/moduleStatuses';\nimport actionTypes from './actionTypes';\nimport getConnectivityMangerReducer from './getConnectivityMangerReducer';\nimport connectivityTypes from './connectivityTypes';\n\n/**\n * @class\n * @description Connectivity manager module\n */\n@Module({\n  deps: [\n    'Alert',\n    'OAuth',\n    'Auth',\n    'ConnectivityMonitor',\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'CallingSettings', optional: true },\n    { dep: 'AudioSettings', optional: true },\n    { dep: 'Webphone', optional: true },\n  ],\n})\nexport default class ConnectivityManager extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Alert} params.alert - alert module instance\n   * @param {Client} params.client - client module instance\n   * @param {Environment} params.environment - environment module instance\n   * @param {Number} params.timeToRetry - time to Retry\n   * @param {Number} params.heartBeatInterval - heart beat interval\n   * @param {Function} params.checkConnectionFunc - function to check network\n   */\n  constructor({\n    auth,\n    oAuth,\n    alert,\n    callingSettings,\n    audioSettings,\n    webphone,\n    connectivityMonitor,\n    availabilityMonitor,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._oAuth = oAuth;\n    this._callingSettings = callingSettings;\n    this._audioSettings = audioSettings;\n    this._webphone = webphone;\n    this._availabilityMonitor = availabilityMonitor;\n    this._alert = alert;\n    this._connectivityMonitor = connectivityMonitor;\n    this._reducer = getConnectivityMangerReducer(this.actionTypes);\n    this._oldConnectivityType = '';\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      this.ready &&\n      this.connectivityType !== this._oldConnectivityType\n    ) {\n      this._oldConnectivityType = this.connectivityType;\n      this.showConnectivityAlert();\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _shouldInit() {\n    return (\n      (!this._callingSettings || this._callingSettings.ready) &&\n      (!this._audioSettings || this._audioSettings.ready) &&\n      (!this._webphone || this._webphone.ready) &&\n      (!this._availabilityMonitor || this._availabilityMonitor.ready) &&\n      this.pending\n    );\n  }\n\n  @proxify\n  checkWebphoneAndConnect() {\n    if (\n      !this._callingSettings ||\n      !this._callingSettings.ready ||\n      !this._callingSettings.isWebphoneMode\n    ) {\n      return;\n    }\n    if (this._audioSettings && this._audioSettings.ready) {\n      this._audioSettings.showAlert();\n      this._audioSettings.getUserMedia();\n    }\n    if (this._webphone && this._webphone.ready) {\n      this._webphone.connect({ force: true, skipConnectDelay: true });\n    }\n  }\n\n  @proxify\n  checkStatus() {\n    if (!this._availabilityMonitor) {\n      return;\n    }\n\n    this._availabilityMonitor.healthCheck();\n  }\n\n  _showAlert(message) {\n    if (message) {\n      this._alert.danger({\n        message,\n        allowDuplicates: false,\n      });\n    }\n  }\n\n  _hideAlerts() {\n    const alertIds = this._alert.messages\n      .filter((m) => {\n        for (const type in connectivityTypes) {\n          if (m.message === connectivityTypes[type]) return true;\n        }\n        return false;\n      })\n      .map((m) => m.id);\n    if (alertIds.length) {\n      this._alert.dismiss(alertIds);\n    }\n  }\n\n  @proxify\n  showConnectivityAlert() {\n    if (\n      !this.connectivityType ||\n      this.connectivityType === connectivityTypes.webphoneUnavailable\n    ) {\n      this._hideAlerts();\n    } else {\n      this._showAlert(this.connectivityType);\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get webphoneAvailable() {\n    return (\n      this._webphone &&\n      this._callingSettings &&\n      this._audioSettings &&\n      this._audioSettings.ready &&\n      this._callingSettings.ready &&\n      this._auth.ready &&\n      this._auth.loggedIn &&\n      this._callingSettings.isWebphoneMode &&\n      this._audioSettings.userMedia &&\n      this._webphone.connected\n    );\n  }\n\n  get isWebphoneInitializing() {\n    return (\n      this._callingSettings.isWebphoneMode &&\n      (!this._webphone.ready ||\n        this._webphone.disconnected ||\n        this._webphone.connecting ||\n        this._webphone.connectFailed)\n    );\n  }\n\n  get webphoneConnecting() {\n    return (\n      this._webphone &&\n      this._webphone.ready &&\n      (this._webphone.connecting || this._webphone.reconnecting)\n    );\n  }\n\n  get webphoneUnavailable() {\n    return (\n      this._webphone &&\n      this._callingSettings &&\n      this._audioSettings &&\n      this._audioSettings.ready &&\n      this._auth.ready &&\n      this._auth.loggedIn &&\n      this._callingSettings.isWebphoneMode &&\n      (!this._audioSettings.userMedia ||\n        (this._webphone.reconnecting ||\n          this._webphone.connectError ||\n          this._webphone.inactive))\n    );\n  }\n\n  get proxyRetryCount() {\n    return this._oAuth && this._oAuth.proxyRetryCount > 0;\n  }\n\n  get isVoIPOnlyModeActivated() {\n    return (\n      !!this._availabilityMonitor && this._availabilityMonitor.isVoIPOnlyMode\n    );\n  }\n\n  get isLimitedModeActivated() {\n    return (\n      !!this._availabilityMonitor && this._availabilityMonitor.isLimitedMode\n    );\n  }\n\n  get hasLimitedStatusError() {\n    return (\n      !!this._availabilityMonitor &&\n      this._availabilityMonitor.hasLimitedStatusError\n    );\n  }\n\n  @selector\n  connectivityType = [\n    () => this._connectivityMonitor.networkLoss,\n    () => this._connectivityMonitor.connectivity,\n    () => this.proxyRetryCount,\n    () => this.isVoIPOnlyModeActivated,\n    () => this.isLimitedModeActivated,\n    () => this.webphoneAvailable,\n    () => this.webphoneUnavailable,\n    (\n      networkLoss,\n      connectivity,\n      proxyRetryCount,\n      isVoIPOnlyModeActivated,\n      isLimitedModeActivated,\n      webphoneAvailable,\n      webphoneUnavailable,\n    ) => {\n      if (networkLoss) return connectivityTypes.networkLoss;\n      if (proxyRetryCount) return connectivityTypes.offline;\n      if (!connectivity) return connectivityTypes.offline;\n      if (isVoIPOnlyModeActivated) {\n        if (webphoneAvailable) return connectivityTypes.voipOnly;\n        return connectivityTypes.serverUnavailable;\n      }\n      if (webphoneUnavailable) return connectivityTypes.webphoneUnavailable;\n      if (isLimitedModeActivated) return connectivityTypes.survival;\n      return null;\n    },\n  ];\n\n  @selector\n  mode = [\n    () => this.connectivityType,\n    (connectivityType) => {\n      if (\n        connectivityType === connectivityTypes.networkLoss ||\n        connectivityType === connectivityTypes.serverUnavailable\n      )\n        return connectivityTypes.offline;\n      return connectivityType;\n    },\n  ];\n\n  get isWebphoneUnavailableMode() {\n    return this.mode === connectivityTypes.webphoneUnavailable;\n  }\n\n  get isOfflineMode() {\n    return this.mode === connectivityTypes.offline;\n  }\n\n  get isVoipOnlyMode() {\n    return this.mode === connectivityTypes.voipOnly;\n  }\n}\n"],"file":"index.js"}