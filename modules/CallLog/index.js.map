{"version":3,"sources":["modules/CallLog/index.js"],"names":["DEFAULT_TTL","DEFAULT_REFRESH_LOCK","DEFAULT_TOKEN_EXPIRES_IN","DEFAULT_DAY_SPAN","RECORD_COUNT","LIST_RECORD_COUNT","DEFAULT_TIME_TO_RETRY","SYNC_DELAY","processData","data","records","timestamp","Date","now","syncToken","syncInfo","getISODateFrom","daySpan","d","toISOString","getISODateTo","dateTo","forEach","call","startTime","presenceRegExp","CallLog","deps","dep","optional","auth","client","storage","extensionPhoneNumber","extensionInfo","subscription","rolesAndPermissions","tabManager","ttl","refreshLock","tokenExpiresIn","timeToRetry","polling","disableCache","isLimitList","listRecordCount","options","actionTypes","_subscriptionHandler","message","ready","test","event","body","activeCalls","ownerId","_auth","_storage","_tabManager","active","sync","_onStateChange","loggedIn","_subscription","_extensionPhoneNumber","_extensionInfo","_rolesAndPermissions","status","moduleStatuses","pending","store","dispatch","type","init","_daySpan","token","_tokenExpiresIn","clearToken","permissions","ReadCallLog","_init","initSuccess","reset","_clearTimeout","_promise","resetSuccess","_lastMessage","_client","_isLimitList","_listRecordCount","_callLogStorageKey","_ttl","_timeToRetry","_refreshLock","_polling","_reducer","registerReducer","key","reducer","subscribe","subscriptionFilters","detailedPresence","console","log","_startPolling","dateFrom","perPageParam","perPage","params","account","extension","callLog","list","iSync","callLogSync","syncType","syncTypes","Error","iSyncSuccess","iSyncError","error","fSync","recordCount","length","_fetch","supplementRecords","fSyncSuccess","fSyncError","shouldFSync","_iSync","_fSync","_retry","_sync","_queueSync","state","getItem","ReadPresenceStatus","numbers","filter","usageType","map","phoneNumber","Pollable","selector","calls","result","callResults","stopped","busy","unknown","faxSendError","faxReceiptError","callFailed","faxReceipt","isOutBoundCompanyNumber","from","mainCompanyNumbers","indexOf","isOutBoundFromSelfExtNumber","extensionNumber","action","callActions","ringOutWeb","ringOutPC","ringOutMobile","to","slice","proxify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AAMA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,IAAI,EAAJ,GAAS,IAA7B,C,CACA;;AACA,IAAMC,oBAAoB,GAAG,IAAI,EAAJ,GAAS,IAAtC;AACA,IAAMC,wBAAwB,GAAG,KAAK,EAAL,GAAU,IAA3C;AACA,IAAMC,gBAAgB,GAAG,CAAzB;AACA,IAAMC,YAAY,GAAG,GAArB;AACA,IAAMC,iBAAiB,GAAG,GAA1B;AACA,IAAMC,qBAAqB,GAAG,KAAK,IAAnC;AACA,IAAMC,UAAU,GAAG,KAAK,IAAxB;;AAEO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAChC,SAAO;AACLC,IAAAA,OAAO,EAAED,IAAI,CAACC,OADT;AAELC,IAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAFN;AAGLC,IAAAA,SAAS,EAAEL,IAAI,CAACM,QAAL,CAAcD;AAHpB,GAAP;AAKD;;AAEM,SAASE,cAAT,CAAwBC,OAAxB,EAAiC;AACtC,MAAMC,CAAC,GAAG,6BAAYD,OAAZ,CAAV;AACA,SAAOC,CAAC,CAACC,WAAF,EAAP;AACD;;AAEM,SAASC,YAAT,CAAsBV,OAAtB,EAA+B;AACpC,MAAIW,MAAJ;AACAX,EAAAA,OAAO,CAACY,OAAR,CAAgB,UAACC,IAAD,EAAU;AACxB,QAAI,CAACF,MAAD,IAAWE,IAAI,CAACC,SAAL,GAAiBH,MAAhC,EAAwCA,MAAM,GAAGE,IAAI,CAACC,SAAd;AACzC,GAFD;AAGA,SAAOH,MAAM,IAAI,IAAIT,IAAJ,CAASS,MAAT,EAAiBF,WAAjB,EAAjB;AACD,C,CACD;;;AACA,IAAMM,cAAc,GAAG,yCAAvB;AAEA;;;;;IAiBqBC,O,WAbpB,gBAAO;AACNC,EAAAA,IAAI,EAAE,CACJ,MADI,EAEJ,QAFI,EAGJ,sBAHI,EAIJ,eAJI,EAKJ,cALI,EAMJ,qBANI,EAOJ;AAAEC,IAAAA,GAAG,EAAE,YAAP;AAAqBC,IAAAA,QAAQ,EAAE;AAA/B,GAPI,EAQJ;AAAED,IAAAA,GAAG,EAAE,SAAP;AAAkBC,IAAAA,QAAQ,EAAE;AAA5B,GARI,EASJ;AAAED,IAAAA,GAAG,EAAE,gBAAP;AAAyBC,IAAAA,QAAQ,EAAE;AAAnC,GATI;AADA,CAAP,C;;;;;AAcC;;;;;;;;;;;;;;;;;AAiBA,yBAmBG;AAAA;;AAAA,QAlBDC,IAkBC,QAlBDA,IAkBC;AAAA,QAjBDC,MAiBC,QAjBDA,MAiBC;AAAA,QAhBDC,OAgBC,QAhBDA,OAgBC;AAAA,QAfDC,oBAeC,QAfDA,oBAeC;AAAA,QAdDC,aAcC,QAdDA,aAcC;AAAA,QAbDC,YAaC,QAbDA,YAaC;AAAA,QAZDC,mBAYC,QAZDA,mBAYC;AAAA,QAXDC,UAWC,QAXDA,UAWC;AAAA,wBAVDC,GAUC;AAAA,QAVDA,GAUC,yBAVKtC,WAUL;AAAA,gCATDuC,WASC;AAAA,QATDA,WASC,iCATatC,oBASb;AAAA,mCARDuC,cAQC;AAAA,QARDA,cAQC,oCARgBtC,wBAQhB;AAAA,gCAPDuC,WAOC;AAAA,QAPDA,WAOC,iCAPanC,qBAOb;AAAA,4BANDW,OAMC;AAAA,QANDA,OAMC,6BANSd,gBAMT;AAAA,4BALDuC,OAKC;AAAA,QALDA,OAKC,6BALS,IAKT;AAAA,iCAJDC,YAIC;AAAA,QAJDA,YAIC,kCAJc,KAId;AAAA,gCAHDC,WAGC;AAAA,QAHDA,WAGC,iCAHa,KAGb;AAAA,oCAFDC,eAEC;AAAA,QAFDA,eAEC,qCAFiBxC,iBAEjB;AAAA,QADEyC,OACF;;AAAA;;AACD,8DACKA,OADL;AAEEC,MAAAA,WAAW,EAAXA;AAFF;;AADC,UA6CHC,oBA7CG;AAAA,0EA6CoB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEnB,MAAKC,KAAL,IACAzB,cAAc,CAAC0B,IAAf,CAAoBF,OAAO,CAACG,KAA5B,CADA,IAEAH,OAAO,CAACI,IAFR,IAGAJ,OAAO,CAACI,IAAR,CAAaC,WAHb,IAIA,mCAAcL,OAAO,CAACI,IAAR,CAAaC,WAA3B,CANmB;AAAA;AAAA;AAAA;;AAQXC,gBAAAA,OARW,GAQC,MAAKC,KARN,CAQXD,OARW;AAAA;AAAA,uBASb,uBAAMhD,UAAN,CATa;;AAAA;AAUnB,oBACEgD,OAAO,KAAK,MAAKC,KAAL,CAAWD,OAAvB,KACC,CAAC,MAAKE,QAAN,IAAkB,CAAC,MAAKC,WAAxB,IAAuC,MAAKA,WAAL,CAAiBC,MADzD,CADF,EAGE;AACA,wBAAKC,IAAL;AACD;;AAfkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA7CpB;;AAAA;AAAA;AAAA;AAAA;;AAAA,UAgEHC,cAhEG,wEAgEc;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEb,MAAKL,KAAL,CAAWM,QAAX,KACC,CAAC,MAAKL,QAAN,IAAkB,MAAKA,QAAL,CAAcP,KADjC,MAEC,CAAC,MAAKa,aAAN,IAAuB,MAAKA,aAAL,CAAmBb,KAF3C,MAGC,CAAC,MAAKc,qBAAN,IAA+B,MAAKA,qBAAL,CAA2Bd,KAH3D,MAIC,CAAC,MAAKe,cAAN,IAAwB,MAAKA,cAAL,CAAoBf,KAJ7C,MAKC,CAAC,MAAKQ,WAAN,IAAqB,MAAKA,WAAL,CAAiBR,KALvC,KAMA,MAAKgB,oBAAL,CAA0BhB,KAN1B,IAOA,MAAKiB,MAAL,KAAgBC,2BAAeC,OATlB;AAAA;AAAA;AAAA;;AAWb,oBAAKC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,gBAAAA,IAAI,EAAE,MAAKzB,WAAL,CAAiB0B,IADL;AAElBxD,gBAAAA,OAAO,EAAE,MAAKyD;AAFI,eAApB;;AAIA,kBACE,MAAKC,KAAL,KACC,CAAC,MAAKhE,SAAN,IAAmBC,IAAI,CAACC,GAAL,KAAa,MAAKF,SAAlB,GAA8B,MAAKiE,eADvD,CADF,EAGE;AACA,sBAAKN,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,MAAKzB,WAAL,CAAiB8B;AADL,iBAApB;AAGD;;AAtBY,mBAuBT,MAAKX,oBAAL,CAA0BY,WAA1B,CAAsCC,WAvB7B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAwBL,MAAKC,KAAL,EAxBK;;AAAA;AA0Bb,oBAAKV,KAAL,CAAWC,QAAX,CAAoB;AAClBC,gBAAAA,IAAI,EAAE,MAAKzB,WAAL,CAAiBkC;AADL,eAApB;;AA1Ba;AAAA;;AAAA;AA6BR,kBACL,CAAC,CAAC,MAAKzB,KAAL,CAAWM,QAAZ,IACE,CAAC,CAAC,MAAKL,QAAP,IAAmB,CAAC,MAAKA,QAAL,CAAcP,KADpC,IAEE,MAAKc,qBAAL,IAA8B,CAAC,MAAKA,qBAAL,CAA2Bd,KAF5D,IAGE,MAAKe,cAAL,IAAuB,CAAC,MAAKA,cAAL,CAAoBf,KAH9C,IAIE,MAAKa,aAAL,IAAsB,CAAC,MAAKA,aAAL,CAAmBb,KAJ5C,IAKE,MAAKQ,WAAL,IAAoB,CAAC,MAAKA,WAAL,CAAiBR,KALxC,IAMC,CAAC,MAAKgB,oBAAL,CAA0BhB,KAN7B,KAOA,MAAKA,KARA,EASL;AACA,sBAAKoB,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,MAAKzB,WAAL,CAAiBmC;AADL,iBAApB;;AAGA,sBAAKC,aAAL;;AACA,sBAAKC,QAAL,GAAgB,IAAhB;;AACA,sBAAKd,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,MAAKzB,WAAL,CAAiBsC;AADL,iBAApB;AAGD,eAlBM,MAkBA,IACL,MAAKnC,KAAL,IACA,MAAKa,aADL,IAEA,MAAKA,aAAL,CAAmBb,KAFnB,IAGA,MAAKa,aAAL,CAAmBd,OAHnB,IAIA,MAAKc,aAAL,CAAmBd,OAAnB,KAA+B,MAAKqC,YAL/B,EAML;AACA,sBAAKA,YAAL,GAAoB,MAAKvB,aAAL,CAAmBd,OAAvC;;AACA,sBAAKD,oBAAL,CAA0B,MAAKsC,YAA/B;AACD;;AAxDc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhEd;;AAAA;;AAKD,UAAK9B,KAAL,GAAa1B,IAAb;AACA,UAAKyD,OAAL,GAAexD,MAAf;;AACA,QAAI,CAACY,YAAL,EAAmB;AACjB,YAAKc,QAAL,GAAgBzB,OAAhB;AACD;;AACD,UAAKgC,qBAAL,GAA6B/B,oBAA7B;AACA,UAAKgC,cAAL,GAAsB/B,aAAtB;AACA,UAAK6B,aAAL,GAAqB5B,YAArB;AACA,UAAK+B,oBAAL,GAA4B9B,mBAA5B;AACA,UAAKsB,WAAL,GAAmBrB,UAAnB;AACA,UAAKmD,YAAL,GAAoB5C,WAApB;AACA,UAAK6C,gBAAL,GAAwB5C,eAAxB;AACA,UAAK6C,kBAAL,GAA0B,SAA1B;AACA,UAAKC,IAAL,GAAYrD,GAAZ;AACA,UAAKsC,eAAL,GAAuBpC,cAAvB;AACA,UAAKoD,YAAL,GAAoBnD,WAApB;AACA,UAAKoD,YAAL,GAAoBtD,WAApB;AACA,UAAKmC,QAAL,GAAgBzD,OAAhB;AACA,UAAK6E,QAAL,GAAgBpD,OAAhB;;AACA,QAAI,MAAKe,QAAT,EAAmB;AACjB,YAAKsC,QAAL,GAAgB,mCAAkB,MAAKhD,WAAvB,CAAhB;;AACA,YAAKU,QAAL,CAAcuC,eAAd,CAA8B;AAC5BC,QAAAA,GAAG,EAAE,MAAKP,kBADkB;AAE5BQ,QAAAA,OAAO,EAAE,4BAAgB;AACvBzF,UAAAA,IAAI,EAAE,uCAAe,MAAKsC,WAApB,CADiB;AAEvB4B,UAAAA,KAAK,EAAE,wCAAgB,MAAK5B,WAArB,CAFgB;AAGvBpC,UAAAA,SAAS,EAAE,4CAAoB,MAAKoC,WAAzB;AAHY,SAAhB;AAFmB,OAA9B;AAQD,KAVD,MAUO;AACL,YAAKgD,QAAL,GAAgB,mCAAkB,MAAKhD,WAAvB,EAAoC;AAClDtC,QAAAA,IAAI,EAAE,uCAAe,MAAKsC,WAApB,CAD4C;AAElD4B,QAAAA,KAAK,EAAE,wCAAgB,MAAK5B,WAArB,CAF2C;AAGlDpC,QAAAA,SAAS,EAAE,4CAAoB,MAAKoC,WAAzB;AAHuC,OAApC,CAAhB;AAKD;;AACD,UAAKqC,QAAL,GAAgB,IAAhB;AACA,UAAKE,YAAL,GAAoB,IAApB;AA1CC;AA2CF;;;;;;;;;;AAiFC,oBAAI,KAAKvB,aAAT,EAAwB;AACtB,uBAAKA,aAAL,CAAmBoC,SAAnB,CAA6BC,gCAAoBC,gBAAjD;AACD;;sBAEC,CAAC,CAAC,KAAK3C,WAAN,IAAqB,KAAKA,WAAL,CAAiBC,MAAvC,MACC,CAAC,KAAKhD,SAAN,IAAmBC,IAAI,CAACC,GAAL,KAAa,KAAKF,SAAlB,GAA8B,KAAK4B,WADvD,C;;;;;;;uBAIQ,KAAKqB,IAAL,E;;;;;;;;;AAEN0C,gBAAAA,OAAO,CAACC,GAAR;;;;;;;AAEG,oBAAI,KAAKT,QAAT,EAAmB;AACxB,uBAAKU,aAAL;AACD;;;;;;;;;;;;;;;;;;iCAGU;AACX,WAAKlC,KAAL,CAAW6B,SAAX,CAAqB,KAAKtC,cAA1B;AACD;;;;;;;;;;;;AAuHc4C,gBAAAA,Q,SAAAA,Q,EAAUpF,M,SAAAA,M;AACjBqF,gBAAAA,Y,GAAe,KAAKlB,YAAL,GACjB;AAAEmB,kBAAAA,OAAO,EAAE,KAAKlB;AAAhB,iBADiB,GAEjB,E;kDACG,2BAAU,UAACmB,MAAD;AAAA,yBACf,MAAI,CAACrB,OAAL,CACGsB,OADH,GAEGC,SAFH,GAGGC,OAHH,GAIGC,IAJH,iCAIaJ,MAJb;AAIqBH,oBAAAA,QAAQ,EAARA,QAJrB;AAI+BpF,oBAAAA,MAAM,EAANA;AAJ/B,qBAI0CqF,YAJ1C,EADe;AAAA,iBAAV,C;;;;;;;;;;;;;;;;;;;;;;;;;AAWDnD,gBAAAA,O,GAAU,KAAKC,KAAL,CAAWD,O;;AAEzB,qBAAKe,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKzB,WAAL,CAAiBkE;AADL,iBAApB;;uBAGmB,KAAK1B,OAAL,CAChBsB,OADgB,GAEhBC,SAFgB,GAGhBI,WAHgB,GAIhBF,IAJgB,CAIX;AACJG,kBAAAA,QAAQ,EAAEC,sBAAUH,KADhB;AAEJnG,kBAAAA,SAAS,EAAE,KAAK6D;AAFZ,iBAJW,C;;;AAAblE,gBAAAA,I;;sBAQF8C,OAAO,KAAK,KAAKC,KAAL,CAAWD,O;;;;;sBAAe8D,KAAK,CAAC,iBAAD,C;;;AAC/C,qBAAK/C,KAAL,CAAWC,QAAX;AACEC,kBAAAA,IAAI,EAAE,KAAKzB,WAAL,CAAiBuE;AADzB,mBAEK9G,WAAW,CAACC,IAAD,CAFhB;AAGEQ,kBAAAA,OAAO,EAAE,KAAKyD;AAHhB;;;;;;;;sBAMInB,OAAO,KAAK,KAAKC,KAAL,CAAWD,O;;;;;AACzB,qBAAKe,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKzB,WAAL,CAAiBwE,UADL;AAElBC,kBAAAA,KAAK;AAFa,iBAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWEjE,gBAAAA,O,GAAU,KAAKC,KAAL,CAAWD,O;;AAEzB,qBAAKe,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKzB,WAAL,CAAiB0E;AADL,iBAApB;AAIMhB,gBAAAA,Q,GAAWzF,cAAc,CAAC,KAAK0D,QAAN,C;;uBACZ,KAAKa,OAAL,CAChBsB,OADgB,GAEhBC,SAFgB,GAGhBI,WAHgB,GAIhBF,IAJgB,CAIX;AACJU,kBAAAA,WAAW,EAAEtH,YADT;AAEJ+G,kBAAAA,QAAQ,EAAEC,sBAAUK,KAFhB;AAGJhB,kBAAAA,QAAQ,EAARA;AAHI,iBAJW,C;;;AAAbhG,gBAAAA,I;;sBASF8C,OAAO,KAAK,KAAKC,KAAL,CAAWD,O;;;;;sBAAe8D,KAAK,CAAC,iBAAD,C;;;+BAEL7G,WAAW,CAACC,IAAD,C,EAA7CC,O,gBAAAA,O,EAASC,S,gBAAAA,S,EAAWG,S,gBAAAA,S;;sBACxBJ,OAAO,CAACiH,MAAR,IAAkBvH,Y;;;;;;uBAEM,KAAKwH,MAAL,CAAY;AACpCnB,kBAAAA,QAAQ,EAARA,QADoC;AAEpCpF,kBAAAA,MAAM,EAAED,YAAY,CAACV,OAAD;AAFgB,iBAAZ,C;;;AAA1BmH,gBAAAA,iB;;;sBAKEtE,OAAO,KAAK,KAAKC,KAAL,CAAWD,O;;;;;sBAAe8D,KAAK,CAAC,iBAAD,C;;;AAC/C,qBAAK/C,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKzB,WAAL,CAAiB+E,YADL;AAElBpH,kBAAAA,OAAO,EAAPA,OAFkB;AAGlBmH,kBAAAA,iBAAiB,EAAjBA,iBAHkB;AAIlBlH,kBAAAA,SAAS,EAATA,SAJkB;AAKlBG,kBAAAA,SAAS,EAATA,SALkB;AAMlBG,kBAAAA,OAAO,EAAE,KAAKyD;AANI,iBAApB;;;;;;;;sBASInB,OAAO,KAAK,KAAKC,KAAL,CAAWD,O;;;;;AACzB,qBAAKe,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKzB,WAAL,CAAiBgF,UADL;AAElBP,kBAAAA,KAAK;AAFa,iBAApB;;;;;;;;;;;;;;;;;;;;6FAUML,Q;;;;;;AACJ5D,gBAAAA,O,GAAU,KAAKC,KAAL,CAAWD,O;;AAErByE,gBAAAA,W,GAAcb,QAAQ,KAAKC,sBAAUK,K;;oBACpCO,W;;;;;;;uBAEK,KAAKC,MAAL,E;;;;;;;;;AAEND,gBAAAA,WAAW,GAAG,IAAd;;;sBAGAA,WAAW,IAAIzE,OAAO,KAAK,KAAKC,KAAL,CAAWD,O;;;;;;uBAClC,KAAK2E,MAAL,E;;;AAER,oBAAI,KAAKpC,QAAT,EAAmB;AACjB,uBAAKU,aAAL;AACD;;;;;;;;;AAED,oBAAIjD,OAAO,KAAK,KAAKC,KAAL,CAAWD,OAA3B,EAAoC;AAClC,sBAAI,KAAKuC,QAAT,EAAmB;AACjB,yBAAKU,aAAL,CAAmB,KAAK/D,WAAxB;AACD,mBAFD,MAEO;AACL,yBAAK0F,MAAL;AACD;AACF;;;AAEH,qBAAK/C,QAAL,GAAgB,IAAhB;;;;;;;;;;;;;;;QAGF;;;;;;;;;;;;;;AAEW+B,gBAAAA,Q,iEAAW,KAAKxC,KAAL,GAAayC,sBAAUH,KAAvB,GAA+BG,sBAAUK,K;;oBACxD,KAAKrC,Q;;;;;AACR,qBAAKA,QAAL,GAAgB,KAAKgD,KAAL,CAAWjB,QAAX,CAAhB;mDACO,KAAK/B,Q;;;oBAET,KAAKiD,U;;;;;AACR,qBAAKA,UAAL,GAAkB,wDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACX,MAAI,CAACjD,QADM;;AAAA;AAEjB,0BAAA,MAAI,CAACA,QAAL,GAAgB,wDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACT,uBAAM,GAAN,CADS;;AAAA;AAAA,sEAER,MAAI,CAACgD,KAAL,CAAWjB,QAAX,CAFQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAD,IAAhB;AAIA,0BAAA,MAAI,CAACkB,UAAL,GAAkB,IAAlB;AANiB,4DAOV,MAAI,CAACjD,QAPK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAD,IAAlB;mDASO,KAAKiD,U;;;mDAEP,KAAKA,U;;;;;;;;;;;;;;;;;;gCAIF;AACV,aAAO,KAAKzE,IAAL,EAAP;AACD;;;wBAzQY;AACX,aAAO,KAAK0E,KAAL,CAAWnE,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKmE,KAAL,CAAWnE,MAAX,KAAsBC,2BAAelB,KAA5C;AACD;;;wBAEU;AACT,UAAI,KAAKO,QAAT,EAAmB;AACjB,eAAO,KAAKA,QAAL,CAAc8E,OAAd,CAAsB,KAAK7C,kBAA3B,EAA+CjF,IAAtD;AACD;;AACD,aAAO,KAAK6H,KAAL,CAAW7H,IAAlB;AACD;;;wBAqEW;AACV,UAAI,KAAKgD,QAAT,EAAmB;AACjB,eAAO,KAAKA,QAAL,CAAc8E,OAAd,CAAsB,KAAK7C,kBAA3B,EAA+Cf,KAAtD;AACD;;AACD,aAAO,KAAK2D,KAAL,CAAW3D,KAAlB;AACD;;;wBAEe;AACd,UAAI,KAAKlB,QAAT,EAAmB;AACjB,eAAO,KAAKA,QAAL,CAAc8E,OAAd,CAAsB,KAAK7C,kBAA3B,EAA+C/E,SAAtD;AACD;;AACD,aAAO,KAAK2H,KAAL,CAAW3H,SAAlB;AACD;;;wBAES;AACR,aAAO,KAAKgF,IAAZ;AACD;;;wBAEiB;AAChB,aAAO,KAAKE,YAAZ;AACD;;;wBAEiB;AAChB,aAAO,KAAKD,YAAZ;AACD;;;wBAEoB;AACnB,aAAO,CAAC,CAAC,KAAK1B,oBAAL,CAA0BY,WAA1B,CAAsCC,WAA/C;AACD;;;wBAEqB;AACpB,aAAO,CAAC,CAAC,KAAKb,oBAAL,CAA0BY,WAA1B,CAAsC0D,kBAA/C;AACD;;;wBAyJwB;AACvB,aAAO,KAAKxE,qBAAL,CAA2ByE,OAA3B,CACJC,MADI,CACG;AAAA,YAAGC,SAAH,SAAGA,SAAH;AAAA,eAAmBA,SAAS,KAAK,mBAAjC;AAAA,OADH,EAEJC,GAFI,CAEA;AAAA,YAAGC,WAAH,SAAGA,WAAH;AAAA,eAAqBA,WAArB;AAAA,OAFA,CAAP;AAGD;;;;EArckCC,qB,iFAqMlCC,kB;;;;;;;WACO,CACN;AAAA,aAAM,MAAI,CAACtI,IAAX;AAAA,KADM,EAEN,UAACA,IAAD,EAAU;AACR;AACA,UAAMuI,KAAK,GAAG,8CACZ,sDACEvI,IAAI,CAACiI,MAAL,CACE,UAACnH,IAAD;AAAA,eACE;AACAA,UAAAA,IAAI,CAAC0H,MAAL,KAAgBC,wBAAYC,OAA5B,IACA;AACA5H,UAAAA,IAAI,CAAC0H,MAAL,KAAgBC,wBAAYE,IAF5B,IAGA;AACA;AACA7H,UAAAA,IAAI,CAAC0H,MAAL,KAAgBC,wBAAYG,OAL5B,IAMA;AACA9H,UAAAA,IAAI,CAAC0H,MAAL,KAAgBC,wBAAYI,YAP5B,IAQA;AACA/H,UAAAA,IAAI,CAAC0H,MAAL,KAAgBC,wBAAYK,eAT5B,IAUA;AACAhI,UAAAA,IAAI,CAAC0H,MAAL,KAAgBC,wBAAYM,UAX5B,IAYA;AACAjI,UAAAA,IAAI,CAAC0H,MAAL,KAAgBC,wBAAYC,OAb5B,IAcA;AACA5H,UAAAA,IAAI,CAAC0H,MAAL,KAAgBC,wBAAYO;AAjB9B;AAAA,OADF,CADF,CADY,EAuBZb,GAvBY,CAuBR,UAACrH,IAAD,EAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA,YAAMmI,uBAAuB,GAC3BnI,IAAI,CAACoI,IAAL,IACApI,IAAI,CAACoI,IAAL,CAAUd,WADV,IAEA,MAAI,CAACe,kBAAL,CAAwBC,OAAxB,CAAgCtI,IAAI,CAACoI,IAAL,CAAUd,WAA1C,IAAyD,CAAC,CAH5D;AAIA,YAAMiB,2BAA2B,GAC/BvI,IAAI,CAACoI,IAAL,IACApI,IAAI,CAACoI,IAAL,CAAUI,eADV,IAEAxI,IAAI,CAACoI,IAAL,CAAUI,eAAV,KACE,MAAI,CAAC9F,cAAL,CAAoBxD,IAApB,CAAyBsJ,eAJ7B;;AAKA,YACE,gCAAWxI,IAAX,MACCA,IAAI,CAACyI,MAAL,KAAgBC,wBAAYC,UAA5B,IACC3I,IAAI,CAACyI,MAAL,KAAgBC,wBAAYE,SAD7B,IAEC5I,IAAI,CAACyI,MAAL,KAAgBC,wBAAYG,aAH9B,KAIA,CAACV,uBAJD,IAKA,CAACI,2BANH,EAOE;AACA,iDACKvI,IADL;AAEEoI,YAAAA,IAAI,EAAEpI,IAAI,CAAC8I,EAFb;AAGEA,YAAAA,EAAE,EAAE9I,IAAI,CAACoI;AAHX;AAKD;;AACD,eAAOpI,IAAP;AACD,OAtDa,CAAd;;AAuDA,UAAI,MAAI,CAACiE,YAAT,EAAuB;AACrB,eAAOwD,KAAK,CAACsB,KAAN,CAAY,CAAZ,EAAe,MAAI,CAAC7E,gBAApB,CAAP;AACD;;AACD,aAAOuD,KAAP;AACD,KA/DK,C;;4DAoGPuB,mB,6IAcAA,mB,6IAgCAA,mB,4IAgDAA,mB,0IA+BAA,mB,8IAqBAA,mB","sourcesContent":["/* eslint-disable prettier/prettier */\nimport { combineReducers } from 'redux';\nimport { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport fetchList from '../../lib/fetchList';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport getDateFrom from '../../lib/getDateFrom';\nimport actionTypes from './actionTypes';\nimport getCallLogReducer, {\n  getDataReducer,\n  getTimestampReducer,\n  getTokenReducer,\n} from './getCallLogReducer';\nimport sleep from '../../lib/sleep';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport syncTypes from '../../enums/syncTypes';\nimport {\n  hasEndedCalls,\n  removeDuplicateIntermediateCalls,\n  removeInboundRingOutLegs,\n  isOutbound,\n} from '../../lib/callLogHelpers';\nimport callResults from '../../enums/callResults';\nimport callActions from '../../enums/callActions';\nimport proxify from '../../lib/proxy/proxify';\nimport { selector } from '../../lib/selector';\n\nconst DEFAULT_TTL = 5 * 60 * 1000;\n// Lock fetching on app refresh if lst fetch happened less than this timespan\nconst DEFAULT_REFRESH_LOCK = 3 * 60 * 1000;\nconst DEFAULT_TOKEN_EXPIRES_IN = 60 * 60 * 1000;\nconst DEFAULT_DAY_SPAN = 7;\nconst RECORD_COUNT = 250;\nconst LIST_RECORD_COUNT = 250;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst SYNC_DELAY = 30 * 1000;\n\nexport function processData(data) {\n  return {\n    records: data.records,\n    timestamp: Date.now(),\n    syncToken: data.syncInfo.syncToken,\n  };\n}\n\nexport function getISODateFrom(daySpan) {\n  const d = getDateFrom(daySpan);\n  return d.toISOString();\n}\n\nexport function getISODateTo(records) {\n  let dateTo;\n  records.forEach((call) => {\n    if (!dateTo || call.startTime < dateTo) dateTo = call.startTime;\n  });\n  return dateTo && new Date(dateTo).toISOString();\n}\n// to not use $ at the end, presence with sipData has extra query parameters\nconst presenceRegExp = /\\/presence\\?detailedTelephonyState=true/;\n\n/**\n * @class\n * @description Call log managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Client',\n    'ExtensionPhoneNumber',\n    'ExtensionInfo',\n    'Subscription',\n    'RolesAndPermissions',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'CallLogOptions', optional: true },\n  ],\n})\nexport default class CallLog extends Pollable {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {Client} params.client - client module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {ExtensionPhoneNumber} params.extensionPhoneNumber - extensionPhoneNumber module instance\n   * @param {ExtensionInfo} params.extensionPhoneNumber - extensionPhoneNumber module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermissions module instance\n   * @param {Number} params.ttl - local cache time\n   * @param {Number} params.tokenExpiresIn - time for token expire\n   * @param {Number} params.timeToRetry - waiting time to retry\n   * @param {Number} params.daySpan - day span of call log\n   * @param {Bool} params.polling - polling flag\n   * @param {Bool} params.disableCache - disable cache flag, default false\n   */\n  constructor({\n    auth,\n    client,\n    storage,\n    extensionPhoneNumber,\n    extensionInfo,\n    subscription,\n    rolesAndPermissions,\n    tabManager,\n    ttl = DEFAULT_TTL,\n    refreshLock = DEFAULT_REFRESH_LOCK,\n    tokenExpiresIn = DEFAULT_TOKEN_EXPIRES_IN,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    daySpan = DEFAULT_DAY_SPAN,\n    polling = true,\n    disableCache = false,\n    isLimitList = false,\n    listRecordCount = LIST_RECORD_COUNT,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._extensionPhoneNumber = extensionPhoneNumber;\n    this._extensionInfo = extensionInfo;\n    this._subscription = subscription;\n    this._rolesAndPermissions = rolesAndPermissions;\n    this._tabManager = tabManager;\n    this._isLimitList = isLimitList;\n    this._listRecordCount = listRecordCount;\n    this._callLogStorageKey = 'callLog';\n    this._ttl = ttl;\n    this._tokenExpiresIn = tokenExpiresIn;\n    this._timeToRetry = timeToRetry;\n    this._refreshLock = refreshLock;\n    this._daySpan = daySpan;\n    this._polling = polling;\n    if (this._storage) {\n      this._reducer = getCallLogReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._callLogStorageKey,\n        reducer: combineReducers({\n          data: getDataReducer(this.actionTypes),\n          token: getTokenReducer(this.actionTypes),\n          timestamp: getTimestampReducer(this.actionTypes),\n        }),\n      });\n    } else {\n      this._reducer = getCallLogReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes),\n        token: getTokenReducer(this.actionTypes),\n        timestamp: getTimestampReducer(this.actionTypes),\n      });\n    }\n    this._promise = null;\n    this._lastMessage = null;\n  }\n\n  _subscriptionHandler = async (message) => {\n    if (\n      this.ready &&\n      presenceRegExp.test(message.event) &&\n      message.body &&\n      message.body.activeCalls &&\n      hasEndedCalls(message.body.activeCalls)\n    ) {\n      const { ownerId } = this._auth;\n      await sleep(SYNC_DELAY);\n      if (\n        ownerId === this._auth.ownerId &&\n        (!this._storage || !this._tabManager || this._tabManager.active)\n      ) {\n        this.sync();\n      }\n    }\n  };\n\n  _onStateChange = async () => {\n    if (\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      (!this._subscription || this._subscription.ready) &&\n      (!this._extensionPhoneNumber || this._extensionPhoneNumber.ready) &&\n      (!this._extensionInfo || this._extensionInfo.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._rolesAndPermissions.ready &&\n      this.status === moduleStatuses.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n        daySpan: this._daySpan,\n      });\n      if (\n        this.token &&\n        (!this.timestamp || Date.now() - this.timestamp > this._tokenExpiresIn)\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.clearToken,\n        });\n      }\n      if (this._rolesAndPermissions.permissions.ReadCallLog) {\n        await this._init();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (!this._auth.loggedIn ||\n        (!!this._storage && !this._storage.ready) ||\n        (this._extensionPhoneNumber && !this._extensionPhoneNumber.ready) ||\n        (this._extensionInfo && !this._extensionInfo.ready) ||\n        (this._subscription && !this._subscription.ready) ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._rolesAndPermissions.ready) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    ) {\n      this._lastMessage = this._subscription.message;\n      this._subscriptionHandler(this._lastMessage);\n    }\n  };\n\n  async _init() {\n    if (this._subscription) {\n      this._subscription.subscribe(subscriptionFilters.detailedPresence);\n    }\n    if (\n      (!this._tabManager || this._tabManager.active) &&\n      (!this.timestamp || Date.now() - this.timestamp > this.refreshLock)\n    ) {\n      try {\n        await this.sync();\n      } catch (e) {\n        console.log(e);\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get data() {\n    if (this._storage) {\n      return this._storage.getItem(this._callLogStorageKey).data;\n    }\n    return this.state.data;\n  }\n\n  @selector\n  calls = [\n    () => this.data,\n    (data) => {\n      // TODO make sure removeDuplicateIntermediateCalls is necessary here\n      const calls = removeInboundRingOutLegs(\n        removeDuplicateIntermediateCalls(\n          data.filter(\n            (call) =>\n              // [RCINT-3472] calls with result === 'stopped' seems to be useless\n              call.result !== callResults.stopped &&\n              // [RCINT-51111] calls with result === 'busy'\n              call.result !== callResults.busy &&\n              // [RCINT-6839]\n              // Call processing result is undefined\n              call.result !== callResults.unknown &&\n              // Outgoing fax sending has failed\n              call.result !== callResults.faxSendError &&\n              // Incoming fax has failed to be received\n              call.result !== callResults.faxReceiptError &&\n              // Outgoing fax has failed because of no answer\n              call.result !== callResults.callFailed &&\n              // Outgoing fax sending has been stopped\n              call.result !== callResults.stopped &&\n              // Error Internal error occurred when receiving fax\n              call.result !== callResults.faxReceipt,\n          ),\n        ),\n      ).map((call) => {\n        // [RCINT-7364] Call presence is incorrect when make ringout call from a DL number.\n        // When user use DL number set ringout and the outBound from number must not a oneself company/extension number\n        // Call log sync will response tow legs.\n        // But user use company plus extension number, call log sync will response only one leg.\n        // And the results about `to` and `from` in platform APIs call log sync response is opposite.\n        // This is a temporary solution.\n        const isOutBoundCompanyNumber =\n          call.from &&\n          call.from.phoneNumber &&\n          this.mainCompanyNumbers.indexOf(call.from.phoneNumber) > -1;\n        const isOutBoundFromSelfExtNumber =\n          call.from &&\n          call.from.extensionNumber &&\n          call.from.extensionNumber ===\n            this._extensionInfo.data.extensionNumber;\n        if (\n          isOutbound(call) &&\n          (call.action === callActions.ringOutWeb ||\n            call.action === callActions.ringOutPC ||\n            call.action === callActions.ringOutMobile) &&\n          !isOutBoundCompanyNumber &&\n          !isOutBoundFromSelfExtNumber\n        ) {\n          return {\n            ...call,\n            from: call.to,\n            to: call.from,\n          };\n        }\n        return call;\n      });\n      if (this._isLimitList) {\n        return calls.slice(0, this._listRecordCount);\n      }\n      return calls;\n    },\n  ];\n\n  get token() {\n    if (this._storage) {\n      return this._storage.getItem(this._callLogStorageKey).token;\n    }\n    return this.state.token;\n  }\n\n  get timestamp() {\n    if (this._storage) {\n      return this._storage.getItem(this._callLogStorageKey).timestamp;\n    }\n    return this.state.timestamp;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get refreshLock() {\n    return this._refreshLock;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get canReadCallLog() {\n    return !!this._rolesAndPermissions.permissions.ReadCallLog;\n  }\n\n  get canReadPresence() {\n    return !!this._rolesAndPermissions.permissions.ReadPresenceStatus;\n  }\n\n  @proxify\n  async _fetch({ dateFrom, dateTo }) {\n    const perPageParam = this._isLimitList\n      ? { perPage: this._listRecordCount }\n      : {};\n    return fetchList((params) =>\n      this._client\n        .account()\n        .extension()\n        .callLog()\n        .list({ ...params, dateFrom, dateTo, ...perPageParam }),\n    );\n  }\n\n  @proxify\n  async _iSync() {\n    const ownerId = this._auth.ownerId;\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.iSync,\n      });\n      const data = await this._client\n        .account()\n        .extension()\n        .callLogSync()\n        .list({\n          syncType: syncTypes.iSync,\n          syncToken: this.token,\n        });\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      this.store.dispatch({\n        type: this.actionTypes.iSyncSuccess,\n        ...processData(data),\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.iSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async _fSync() {\n    const ownerId = this._auth.ownerId;\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.fSync,\n      });\n\n      const dateFrom = getISODateFrom(this._daySpan);\n      const data = await this._client\n        .account()\n        .extension()\n        .callLogSync()\n        .list({\n          recordCount: RECORD_COUNT,\n          syncType: syncTypes.fSync,\n          dateFrom,\n        });\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      let supplementRecords;\n      const { records, timestamp, syncToken } = processData(data);\n      if (records.length >= RECORD_COUNT) {\n        // reach the max record count\n        supplementRecords = await this._fetch({\n          dateFrom,\n          dateTo: getISODateTo(records),\n        });\n      }\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      this.store.dispatch({\n        type: this.actionTypes.fSyncSuccess,\n        records,\n        supplementRecords,\n        timestamp,\n        syncToken,\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async _sync(syncType) {\n    const ownerId = this._auth.ownerId;\n    try {\n      let shouldFSync = syncType === syncTypes.fSync;\n      if (!shouldFSync) {\n        try {\n          await this._iSync();\n        } catch (error) {\n          shouldFSync = true;\n        }\n      }\n      if (shouldFSync && ownerId === this._auth.ownerId) {\n        await this._fSync();\n      }\n      if (this._polling) {\n        this._startPolling();\n      }\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        if (this._polling) {\n          this._startPolling(this.timeToRetry);\n        } else {\n          this._retry();\n        }\n      }\n    }\n    this._promise = null;\n  }\n\n  // TODO: this.token: iSync or fSync depends on token???\n  @proxify\n  async sync(syncType = this.token ? syncTypes.iSync : syncTypes.fSync) {\n    if (!this._promise) {\n      this._promise = this._sync(syncType);\n      return this._promise;\n    }\n    if (!this._queueSync) {\n      this._queueSync = (async () => {\n        await this._promise;\n        this._promise = (async () => {\n          await sleep(300);\n          return this._sync(syncType);\n        })();\n        this._queueSync = null;\n        return this._promise;\n      })();\n      return this._queueSync;\n    }\n    return this._queueSync;\n  }\n\n  @proxify\n  fetchData() {\n    return this.sync();\n  }\n\n  get mainCompanyNumbers() {\n    return this._extensionPhoneNumber.numbers\n      .filter(({ usageType }) => usageType === 'MainCompanyNumber')\n      .map(({ phoneNumber }) => phoneNumber);\n  }\n}\n"],"file":"index.js"}