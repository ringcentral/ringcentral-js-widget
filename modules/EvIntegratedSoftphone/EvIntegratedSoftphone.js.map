{"version":3,"sources":["modules/EvIntegratedSoftphone/EvIntegratedSoftphone.ts"],"names":["SECOND","RECONNECT_DEBOUNCE_TIME","RECONNECT_DEBOUNCE_TIME_WHEN_CONNECTED","SIP_MAX_CONNECTING_TIME","EvIntegratedSoftphone","name","deps","dep","optional","_deps","tabManager","_tabbie","enabled","tabManagerEnabled","webRTCTabId","id","checkTabAliveById","enableCache","storageKey","autoAnswerCheckFn","_audio","_eventEmitter","EventEmitter","_answerModalId","_audioPermissionAlertId","_checkWebRTCIntervalId","_heartBeat","_heartBeatIntervalTime","_isReconnected","_beforeunloadHandler","isWebRTCTab","_isCloseWhenCallConnected","heartBeatInterval","evIntegratedSoftphoneOptions","HeartBeat","prefix","connectingAlertId","muteActive","state","sipRegistering","sipRegisterSuccess","_initAudio","_bindCheckWebRTCInterval","evAgentSession","onTriggerConfig","push","isIntegratedSoftphone","isWebRTCTabAlive","connectWebRTC","evAuth","beforeAgentLogout","_closeWebRTCConnectingMask","resetSip","_clearWebRTCInterval","destroy","evClient","sipTerminate","beforeunload","onAfterUnload","_sendTabManager","tabManagerEvents","CLOSE_WHEN_CALL_CONNECTED","clearInterval","onConfigSuccess","setSipRegisterSuccess","setInterval","connected","configSuccess","isWorkingByLocal","isSuccessByLocal","heartBeatOnWorking","setWebRTCTabId","block","next","console","log","configureAgent","error","_emitRegistrationFailed","evSubscription","emit","EvCallbackTypes","SIP_REGISTRATION_FAILED","ready","_checkTabManagerEvent","event","data","args","ASK_AUDIO_PERMISSION","_showAskAudioPermissionMask","_closeAskAudioPermissionMask","SIP_CONNECTING","_showWebRTCConnectingMask","SET_WEB_RTC_TAB_ID","SIP_RINGING","_showRingingModal","SIP_RINGING_MODAL","modal","close","answerCall","rejectCall","MUTE_STATE_CHANGE","setMuteActive","SIP_REGISTERED","_sipRegistered","SIP_UNREGISTERED","_handleRegistrationFailed","SIP_CONNECTED","_sipConnected","SIP_ENDED","_sipEnded","presence","setDialoutStatus","dialoutStatuses","idle","MUTE","sipToggleMute","callback","on","showMask","showMaskTimeout","setTimeout","navigator","mediaDevices","getUserMedia","audio","alert","danger","message","EvSoftphoneEvents","AUDIO_STREAM_REJECTED","backdrop","ttl","Error","clearTimeout","_registerSoftphone","isConfiguringByLocal","_bindingIntegratedSoftphone","askAudioPermission","subscribe","_setWebRTCTabId","heartBeatOnSuccess","setSipRegistering","ringingCall","_sipAnswer","displayName","request","from","add","info","remove","SIP_MUTE","SIP_UNMUTE","_closeRingingModal","evSettings","setOffhook","REGISTERED","newReconnect","allowDuplicates","routerInteraction","resetController","setConnectingAlertId","SIP_RECONNECTING_WHEN_CALL_CONNECTED","loading","dismiss","_playAudioLoop","currentLocale","locale","confirm","title","i18n","getString","content","okText","cancelText","onOK","onCancel","_resetRingingModal","showOffHookInitError","sipReject","CALL_REJECTED","Promise","resolve","once","timeout","_stopAudio","isForceLogin","_connectedWebRTC","sipInit","sipRegister","onceRegistered","sipAnswer","document","createElement","type","loop","_playAudio","currentTime","src","audios","play","pause","value","send","RcModuleV2","storage","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport EventEmitter from 'events';\nimport formatMessage from 'format-message';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport sleep from 'ringcentral-integration/lib/sleep';\n\nimport {\n  dialoutStatuses,\n  EvSoftphoneEvents,\n  tabManagerEvents,\n} from '../../enums';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums';\nimport { HeartBeat } from '../../lib/heartBeat';\nimport { raceTimeout } from '../../lib/time';\nimport { audios } from './audios';\nimport { Deps, IntegratedSoftphone } from './EvIntegratedSoftphone.interface';\nimport i18n from './i18n';\nimport { runInActivityWebRTCTab } from './runInActivityWebRTCTab.decorator';\n\nconst SECOND = 1000;\nconst RECONNECT_DEBOUNCE_TIME = SECOND * 5;\nconst RECONNECT_DEBOUNCE_TIME_WHEN_CONNECTED = SECOND * 15;\nconst SIP_MAX_CONNECTING_TIME = SECOND * 30;\n\n@Module({\n  name: 'EvIntegratedSoftphone',\n  deps: [\n    'Locale',\n    'RouterInteraction',\n    'EvAgentSession',\n    'EvSubscription',\n    'Beforeunload',\n    'EvSettings',\n    'EvClient',\n    'Presence',\n    'Storage',\n    'EvAuth',\n    'Block',\n    'Auth',\n    'Modal',\n    'Alert',\n    { dep: 'TabManager', optional: true },\n    { dep: 'EvIntegratedSoftphoneOptions', optional: true },\n  ],\n})\nclass EvIntegratedSoftphone extends RcModuleV2<Deps>\n  implements IntegratedSoftphone {\n  autoAnswerCheckFn: () => boolean;\n\n  private _audio: HTMLAudioElement;\n\n  private _eventEmitter = new EventEmitter();\n\n  private _answerModalId: string = null;\n\n  /** audio permission alert id */\n  private _audioPermissionAlertId: string = null;\n\n  private _checkWebRTCIntervalId: NodeJS.Timeout;\n\n  private _heartBeat: HeartBeat;\n\n  private _heartBeatIntervalTime: number;\n\n  private _isReconnected = false;\n\n  private _beforeunloadHandler = () => this.isWebRTCTab;\n\n  private _isCloseWhenCallConnected = false;\n\n  get tabManagerEnabled() {\n    return this._deps.tabManager?._tabbie.enabled;\n  }\n\n  get isWebRTCTab() {\n    return (\n      !this.tabManagerEnabled || this.webRTCTabId === this._deps.tabManager.id\n    );\n  }\n\n  get isWebRTCTabAlive() {\n    return (\n      !this.tabManagerEnabled ||\n      (this.webRTCTabId &&\n        this._deps.tabManager.checkTabAliveById(this.webRTCTabId))\n    );\n  }\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvIntegratedSoftphone',\n    });\n    const heartBeatInterval =\n      this._deps.evIntegratedSoftphoneOptions?.heartBeatInterval ?? 1000;\n    if (this.tabManagerEnabled) {\n      this._heartBeat = new HeartBeat(\n        `${this._deps.tabManager._tabbie.prefix}webRTCConnect`,\n        heartBeatInterval,\n      );\n      this._heartBeatIntervalTime = heartBeatInterval;\n    }\n  }\n\n  // @state\n  // dtmfString: string = '';\n\n  @storage\n  @state\n  muteActive = false;\n\n  @state\n  sipRegisterSuccess = false;\n\n  @state\n  sipRegistering = false;\n\n  @storage\n  @state\n  webRTCTabId: string = null;\n\n  /** connecting webRTC alert id, for dialer call button disabled check */\n  @state\n  connectingAlertId: string = null;\n\n  // this is for dialPad click when on call\n  // @action\n  // sipSendDTMF(dtmf: string) {\n  // this.dtmfString += dtmf;\n  // this._deps.evClient.sipSendDTMF(dtmf);\n  // }\n\n  @action\n  setConnectingAlertId(id: string) {\n    this.connectingAlertId = id;\n  }\n\n  @action\n  resetController() {\n    // this.dtmfString = '';\n    this.muteActive = false;\n  }\n\n  @action\n  setMuteActive(state: boolean) {\n    this.muteActive = state;\n  }\n\n  @action\n  setWebRTCTabId(id: string) {\n    this.webRTCTabId = id;\n  }\n\n  @action\n  resetSip() {\n    this.sipRegistering = false;\n    this.sipRegisterSuccess = false;\n\n    this.webRTCTabId = null;\n  }\n\n  @action\n  setSipRegisterSuccess(state: boolean) {\n    this.sipRegisterSuccess = state;\n  }\n\n  @action\n  setSipRegistering(state: boolean) {\n    this.sipRegistering = state;\n  }\n\n  onInitOnce() {\n    this._initAudio();\n\n    if (this.tabManagerEnabled) {\n      this._bindCheckWebRTCInterval();\n    }\n\n    this._deps.evAgentSession.onTriggerConfig.push(async () => {\n      if (\n        this._deps.evAgentSession.isIntegratedSoftphone &&\n        !this.isWebRTCTabAlive\n      ) {\n        await this.connectWebRTC();\n      }\n    });\n\n    this._deps.evAuth.beforeAgentLogout(() => {\n      this._closeWebRTCConnectingMask();\n      this.resetSip();\n      this._clearWebRTCInterval();\n      this._heartBeat?.destroy();\n\n      this._deps.evClient.sipTerminate();\n    });\n\n    this._deps.beforeunload.onAfterUnload(() => {\n      this._sendTabManager(tabManagerEvents.CLOSE_WHEN_CALL_CONNECTED);\n    });\n  }\n\n  private _clearWebRTCInterval() {\n    if (this._checkWebRTCIntervalId) {\n      clearInterval(this._checkWebRTCIntervalId);\n      this._checkWebRTCIntervalId = null;\n    }\n  }\n\n  private _bindCheckWebRTCInterval() {\n    this._deps.evAgentSession.onConfigSuccess.push(() => {\n      if (this._deps.evAgentSession.isIntegratedSoftphone) {\n        // when config success, if that webRTC tab is alive set sip register success to true\n        if (this.isWebRTCTabAlive) {\n          this.setSipRegisterSuccess(true);\n        }\n\n        if (typeof this._checkWebRTCIntervalId === 'number') return;\n\n        this._checkWebRTCIntervalId = setInterval(async () => {\n          // if that is registering or is that connected tab, remove that interval to check\n          if (this.sipRegistering || this.isWebRTCTab) {\n            this._clearWebRTCInterval();\n            return;\n          }\n\n          if (\n            this._deps.evAuth.connected &&\n            this._deps.evAgentSession.configSuccess &&\n            !this.isWebRTCTabAlive &&\n            !this._heartBeat.isWorkingByLocal &&\n            !this._heartBeat.isSuccessByLocal\n          ) {\n            this._heartBeat.heartBeatOnWorking();\n\n            // when that is connecting\n            this._closeWebRTCConnectingMask();\n\n            this.setWebRTCTabId(null);\n\n            try {\n              await this._deps.block.next(async () => {\n                console.log('!!!configureAgent');\n                await this._deps.evAgentSession.configureAgent(false);\n              });\n            } catch (error) {\n              console.error('re config fail', error);\n\n              this._emitRegistrationFailed();\n\n              return;\n            }\n\n            this._isReconnected = true;\n            this._clearWebRTCInterval();\n            await this.connectWebRTC();\n          }\n        }, this._heartBeatIntervalTime);\n      }\n    });\n  }\n\n  private _emitRegistrationFailed() {\n    this._deps.evSubscription.emit(\n      EvCallbackTypes.SIP_REGISTRATION_FAILED,\n      null,\n    );\n  }\n\n  async onStateChange() {\n    if (this.ready && this.tabManagerEnabled && this._deps.tabManager.ready) {\n      this._checkTabManagerEvent();\n    }\n  }\n\n  private _checkTabManagerEvent() {\n    const { event } = this._deps.tabManager;\n    if (event) {\n      const data = event.args[0];\n      switch (event.name) {\n        case tabManagerEvents.ASK_AUDIO_PERMISSION:\n          if (data) {\n            this._showAskAudioPermissionMask();\n          } else {\n            this._closeAskAudioPermissionMask();\n          }\n          break;\n        case tabManagerEvents.SIP_CONNECTING:\n          this._showWebRTCConnectingMask();\n          break;\n        case tabManagerEvents.SET_WEB_RTC_TAB_ID:\n          // when set tab id, reset the connected state to false\n          this._isCloseWhenCallConnected = false;\n          this.setWebRTCTabId(data);\n          this._closeWebRTCConnectingMask();\n          break;\n        case tabManagerEvents.SIP_RINGING:\n          this._showRingingModal(data);\n          break;\n        case tabManagerEvents.SIP_RINGING_MODAL:\n          // that event call from modal ok or cancel, that auto close modal\n          this._deps.modal.close(this._answerModalId);\n          if (data) {\n            this.answerCall();\n          } else {\n            this.rejectCall();\n          }\n          break;\n        case tabManagerEvents.MUTE_STATE_CHANGE:\n          this.setMuteActive(data);\n          break;\n        case tabManagerEvents.SIP_REGISTERED:\n          this._sipRegistered();\n          break;\n        case tabManagerEvents.SIP_UNREGISTERED:\n          this.setSipRegisterSuccess(false);\n          break;\n        case tabManagerEvents.SIP_REGISTRATION_FAILED:\n          this._handleRegistrationFailed();\n          break;\n        case tabManagerEvents.SIP_CONNECTED:\n          this._sipConnected();\n          break;\n        case tabManagerEvents.SIP_ENDED:\n          this._sipEnded();\n          // When sip end need reset Dialout Status to idle\n          this._deps.presence.setDialoutStatus(dialoutStatuses.idle);\n          break;\n        case tabManagerEvents.MUTE:\n          this.sipToggleMute(data);\n          break;\n        case tabManagerEvents.CLOSE_WHEN_CALL_CONNECTED:\n          this._isCloseWhenCallConnected = true;\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  sipToggleMute(state: boolean) {\n    this._deps.evClient.sipToggleMute(state);\n  }\n\n  onRinging(callback: () => void) {\n    this._eventEmitter.on(EvCallbackTypes.SIP_RINGING, callback);\n  }\n\n  async askAudioPermission(showMask: boolean = true) {\n    let showMaskTimeout = null;\n    try {\n      if (showMask) {\n        /**\n         *  using timeout when navigator.mediaDevices.getUserMedia is already completed,\n         *  that will very quick close, so remove that when very quick.\n         */\n        showMaskTimeout = setTimeout(() => {\n          this._sendTabManager(tabManagerEvents.ASK_AUDIO_PERMISSION, true);\n          this._showAskAudioPermissionMask();\n          showMaskTimeout = null;\n        }, 100);\n      }\n\n      await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n    } catch (error) {\n      this._deps.alert.danger({\n        message: EvSoftphoneEvents.AUDIO_STREAM_REJECTED,\n        backdrop: true,\n        ttl: 0,\n      });\n\n      throw new Error('Need Audio permission');\n    } finally {\n      if (showMask) {\n        if (showMaskTimeout) {\n          clearTimeout(showMaskTimeout);\n        }\n        if (this._audioPermissionAlertId) {\n          this._sendTabManager(tabManagerEvents.ASK_AUDIO_PERMISSION, false);\n          this._closeAskAudioPermissionMask();\n        }\n      }\n    }\n\n    if (!this.sipRegisterSuccess) {\n      await this._registerSoftphone();\n    }\n  }\n\n  private async connectWebRTC() {\n    const isConfiguringByLocal = this._heartBeat.isWorkingByLocal;\n\n    if (this.tabManagerEnabled && !isConfiguringByLocal) {\n      this._heartBeat.heartBeatOnWorking();\n    }\n\n    this._bindingIntegratedSoftphone();\n\n    // when init set register to be false\n    this.resetSip();\n\n    await this.askAudioPermission();\n  }\n\n  private _bindingIntegratedSoftphone() {\n    this._deps.evSubscription.subscribe(EvCallbackTypes.SIP_REGISTERED, () => {\n      // That will call several times when reconnected.\n      console.log('!!!!!!!SIP_REGISTERED');\n      if (!this.sipRegisterSuccess) {\n        this._setWebRTCTabId();\n        this._heartBeat.heartBeatOnSuccess();\n\n        this._sendTabManager(tabManagerEvents.SIP_REGISTERED);\n        this._sipRegistered();\n      }\n    });\n\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.SIP_UNREGISTERED,\n      () => {\n        console.log('!!!!!!!SIP_UNREGISTERED');\n        if (this.sipRegisterSuccess) {\n          this._sendTabManager(tabManagerEvents.SIP_UNREGISTERED);\n          this.setSipRegisterSuccess(false);\n        }\n      },\n    );\n\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.SIP_REGISTRATION_FAILED,\n      () => {\n        console.log('!!!!!!!SIP_REGISTRATION_FAILED');\n        this.setSipRegistering(false);\n\n        this._sendTabManager(tabManagerEvents.SIP_REGISTRATION_FAILED);\n        this._handleRegistrationFailed();\n      },\n    );\n\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.SIP_RINGING,\n      (ringingCall) => {\n        console.log('!!!!!!!SIP_RINGING');\n        this._eventEmitter.emit(EvCallbackTypes.SIP_RINGING);\n\n        if (this.autoAnswerCheckFn()) {\n          return this._sipAnswer();\n        }\n\n        const { displayName } = ringingCall.data.request.from;\n\n        this._sendTabManager(tabManagerEvents.SIP_RINGING, displayName);\n        this._showRingingModal(displayName);\n      },\n    );\n\n    this._deps.evSubscription.subscribe(EvCallbackTypes.SIP_CONNECTED, () => {\n      this._deps.beforeunload.add(this._beforeunloadHandler);\n\n      console.info('!!!!!!!SIP_CONNECTED');\n      this._sendTabManager(tabManagerEvents.SIP_CONNECTED);\n      this._sipConnected();\n    });\n\n    this._deps.evSubscription.subscribe(EvCallbackTypes.SIP_ENDED, () => {\n      console.info('!!!!!!!SIP_ENDED');\n      this._deps.beforeunload.remove(this._beforeunloadHandler);\n\n      this._sendTabManager(tabManagerEvents.SIP_ENDED);\n      this._sipEnded();\n    });\n\n    this._deps.evSubscription.subscribe(EvCallbackTypes.SIP_MUTE, () => {\n      console.info('!!!!!!!SIP_MUTE');\n      this._sendTabManager(tabManagerEvents.MUTE_STATE_CHANGE, true);\n      this.setMuteActive(true);\n    });\n\n    this._deps.evSubscription.subscribe(EvCallbackTypes.SIP_UNMUTE, () => {\n      console.info('!!!!!!!SIP_UNMUTE');\n      this._sendTabManager(tabManagerEvents.MUTE_STATE_CHANGE, false);\n      this.setMuteActive(false);\n    });\n\n    // TODO: that is update session config related feature\n    // triggered by agentSDK if dial destination is changed on softphone registration\n    // pass in autoStartOH, maintainOH and dial destination, needed for reconnect logic\n    // this._deps.evSubscription.subscribe(\n    // EvCallbackTypes.SIP_DIAL_DEST_CHANGED,\n    // (data) => {\n    // console.info('!!!!!!!SIP_DIAL_DEST_CHANGED');\n    // // AgentSvc.setDialDest(data.dialDest),\n    // // SessionSvc.attemptingSoftphoneReconnect &&\n    // // (data.autoStartOH\n    // // ? AgentSvc.offhookInit().then(\n    // // function(result) {\n    // // data.maintainOH && (AgentSvc.systemInitOffhook = !1);\n    // // },\n    // // function(err) {\n    // // SessionSvc.showOffhookError(err.detail, data.maintainOH);\n    // // },\n    // // )\n    // // : ($timeout(function() {\n    // // 'RNA-STATE' === AgentSvc.currentAgentState.baseState &&\n    // // AgentSvc.setAgentState('AVAILABLE');\n    // // }, 1e3),\n    // // (SessionSvc.attemptingSoftphoneReconnect = !1),\n    // // (SessionSvc.manualSoftphoneReconnect = !1)));\n    // },\n    // );\n  }\n\n  private _sipEnded() {\n    this._closeRingingModal();\n    this._deps.evSettings.setOffhook(false);\n  }\n\n  private _sipRegistered() {\n    this.setSipRegisterSuccess(true);\n    this._eventEmitter.emit(EvSoftphoneEvents.REGISTERED);\n  }\n\n  private _handleRegistrationFailed() {\n    this._deps.evClient.sipTerminate();\n    this._deps.evAuth.newReconnect();\n\n    this.setSipRegisterSuccess(false);\n    this._closeWebRTCConnectingMask();\n    this._deps.alert.danger({\n      message: EvCallbackTypes.SIP_REGISTRATION_FAILED,\n      backdrop: true,\n      ttl: 0,\n      allowDuplicates: false,\n    });\n    this._deps.routerInteraction.push('/sessionConfig');\n  }\n\n  private _sipConnected() {\n    this._deps.evSettings.setOffhook(true);\n    // When connected reset all controller state\n    this.resetController();\n  }\n\n  private _showWebRTCConnectingMask() {\n    this._closeWebRTCConnectingMask();\n    this.setConnectingAlertId(\n      this._deps.alert.info({\n        message: this._isCloseWhenCallConnected\n          ? tabManagerEvents.SIP_RECONNECTING_WHEN_CALL_CONNECTED\n          : tabManagerEvents.SIP_CONNECTING,\n        loading: true,\n      }),\n    );\n  }\n\n  private _closeWebRTCConnectingMask() {\n    if (this.connectingAlertId) {\n      this._deps.alert.dismiss(this.connectingAlertId);\n\n      this.setConnectingAlertId(null);\n    }\n  }\n\n  private _showAskAudioPermissionMask() {\n    this._closeAskAudioPermissionMask();\n    this._audioPermissionAlertId = this._deps.alert.info({\n      message: tabManagerEvents.ASK_AUDIO_PERMISSION,\n      loading: true,\n      backdrop: true,\n    });\n  }\n\n  private _closeAskAudioPermissionMask() {\n    if (this._audioPermissionAlertId) {\n      this._deps.alert.dismiss(this._audioPermissionAlertId);\n      this._audioPermissionAlertId = null;\n    }\n  }\n\n  private _showRingingModal(displayName: string) {\n    // prevent open a lot of modal, that sdk event pass a lot of ringing state when re login\n    if (this._answerModalId) {\n      return;\n    }\n\n    this._playAudioLoop('ringtone');\n\n    const { currentLocale } = this._deps.locale;\n\n    this._answerModalId = this._deps.modal.confirm({\n      title: i18n.getString('inviteModalTitle', currentLocale),\n      content: formatMessage(\n        i18n.getString('inviteModalContent', currentLocale),\n        {\n          displayName,\n        },\n      ),\n      okText: i18n.getString('inviteModalAnswer', currentLocale),\n      cancelText: i18n.getString('inviteModalReject', currentLocale),\n      onOK: () => {\n        this._sendTabManager(tabManagerEvents.SIP_RINGING_MODAL, true);\n        this.answerCall();\n      },\n      onCancel: () => {\n        this._sendTabManager(tabManagerEvents.SIP_RINGING_MODAL, false);\n        this.rejectCall();\n      },\n    });\n  }\n\n  private answerCall() {\n    this._resetRingingModal();\n    this._sipAnswer();\n  }\n\n  private rejectCall() {\n    this._resetRingingModal();\n    // when reject not show init fail\n    this._deps.presence.showOffHookInitError = false;\n    this._deps.evClient.sipReject();\n    this._eventEmitter.emit(EvSoftphoneEvents.CALL_REJECTED);\n  }\n\n  onceRegistered() {\n    return raceTimeout(\n      new Promise((resolve) =>\n        this._eventEmitter.once(EvSoftphoneEvents.REGISTERED, resolve),\n      ),\n      { timeout: SIP_MAX_CONNECTING_TIME },\n    );\n  }\n\n  private _closeRingingModal() {\n    // if there is modal there, mean another cancel this call\n    if (this._answerModalId) {\n      this._deps.alert.info({\n        message: EvSoftphoneEvents.CALL_REJECTED,\n        ttl: 0,\n      });\n      this._deps.modal.close(this._answerModalId);\n      this._answerModalId = null;\n      this._stopAudio();\n    }\n  }\n\n  private async _registerSoftphone() {\n    if (!this.sipRegistering) {\n      this.setSipRegistering(true);\n\n      this._sendTabManager(tabManagerEvents.SIP_CONNECTING);\n      this._showWebRTCConnectingMask();\n\n      // When that is force login is also need delay to reconnect server\n      if (this._isReconnected || this._deps.evAgentSession.isForceLogin) {\n        await sleep(\n          this._isCloseWhenCallConnected\n            ? RECONNECT_DEBOUNCE_TIME_WHEN_CONNECTED\n            : RECONNECT_DEBOUNCE_TIME,\n        );\n        await this._connectedWebRTC();\n      } else {\n        await this._connectedWebRTC();\n      }\n      return;\n    }\n\n    throw new Error('Sip is registering');\n  }\n\n  private async _connectedWebRTC() {\n    this._deps.evClient.sipInit();\n    this._deps.evClient.sipRegister();\n\n    try {\n      await this.onceRegistered();\n\n      this.setSipRegistering(false);\n\n      this._setWebRTCTabId();\n    } catch (error) {\n      console.error(error);\n\n      this._emitRegistrationFailed();\n    }\n  }\n\n  private _setWebRTCTabId() {\n    if (this.tabManagerEnabled) {\n      const { id } = this._deps.tabManager;\n\n      this._sendTabManager(tabManagerEvents.SET_WEB_RTC_TAB_ID, id);\n      this.setWebRTCTabId(id);\n    }\n    this._closeWebRTCConnectingMask();\n  }\n\n  private _resetRingingModal() {\n    this._stopAudio();\n    this._answerModalId = null;\n  }\n\n  private _sipAnswer() {\n    this._deps.evClient.sipAnswer();\n  }\n\n  private _initAudio() {\n    if (typeof document !== 'undefined' && document.createElement) {\n      this._audio = document.createElement('audio');\n    }\n  }\n\n  private _playAudioLoop(type: keyof typeof audios) {\n    this._audio.loop = true;\n    this._playAudio(type);\n  }\n\n  @runInActivityWebRTCTab()\n  private _playAudio(type: keyof typeof audios) {\n    this._audio.currentTime = 0;\n    this._audio.src = audios[type];\n    this._audio.play();\n  }\n\n  @runInActivityWebRTCTab()\n  private _stopAudio() {\n    this._audio.loop = false;\n    this._audio.pause();\n  }\n\n  private _sendTabManager(event: string, value?: any) {\n    this._deps.tabManager?.send(event, value);\n  }\n}\n\nexport { EvIntegratedSoftphone };\n"],"file":"EvIntegratedSoftphone.js"}