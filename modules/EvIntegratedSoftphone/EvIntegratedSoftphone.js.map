{"version":3,"sources":["modules/EvIntegratedSoftphone/EvIntegratedSoftphone.ts"],"names":["SECOND","RECONNECT_DEBOUNCE_TIME","RECONNECT_DEBOUNCE_TIME_WHEN_CONNECTED","SIP_MAX_CONNECTING_TIME","EvIntegratedSoftphone","name","deps","dep","optional","_deps","tabManager","enable","isMainTab","sipRegisterSuccess","evAgentSession","isIntegratedSoftphone","enableCache","storageKey","autoAnswerCheckFn","_audio","_eventEmitter","EventEmitter","_answerModalId","_audioPermissionAlertId","_beforeunloadHandler","isWebRTCTab","_isCloseWhenCallConnected","_failedBlockId","evAuth","beforeAgentLogout","_resetAllState","beforeunload","onAfterUnload","_sendTabManager","tabManagerEvents","CLOSE_WHEN_CALL_CONNECTED","id","connectingAlertId","permission","audioPermission","muteActive","state","sipRegistering","_initAudio","_bindingIntegratedSoftphone","onSetMainTabComplete","console","log","connectWebRTC","onConfigSuccess","hasMultipleTabs","isConfigTabAlive","setSipRegisterSuccess","onReConfigFail","_emitRegistrationFailed","error","_closeWebRTCConnectingMask","resetSip","evClient","sipTerminate","emit","EvSoftphoneEvents","RESET","evSubscription","EvCallbackTypes","SIP_REGISTRATION_FAILED","ready","_checkTabManagerEvent","event","data","args","ASK_AUDIO_PERMISSION","SIP_CONNECTING","SIP_RINGING","SIP_RINGING_MODAL","MUTE_STATE_CHANGE","SIP_REGISTERED","SIP_UNREGISTERED","SIP_REGISTRATION_FAILED_RELOAD","SIP_CONNECTED","SIP_ENDED","MUTE","_showAskAudioPermissionMask","_closeAskAudioPermissionMask","_showWebRTCConnectingMask","_showRingingModal","modalUI","close","answerCall","rejectCall","setMuteActive","_sipRegistered","_reloadApp","_handleRegistrationFailed","onceLogoutThenLogin","_closeFailReconnectedBlock","_sipConnected","_sipEnded","presence","setDialoutStatus","dialoutStatuses","idle","sipToggleMute","block","unblock","callback","on","showMask","navigator","mediaDevices","getUserMedia","audio","alert","danger","message","AUDIO_STREAM_REJECTED","backdrop","ttl","Error","setAudioPermission","_registerSoftphone","askAudioPermission","subscribe","setSipRegistering","ringingCall","bindBeforeunload","_sipAnswer","displayName","request","from","info","removeBeforeunload","SIP_MUTE","SIP_UNMUTE","_closeRingingModal","setOffhook","REGISTERED","title","content","okText","size","onOK","setMainTabId","window","location","reload","resetController","setConnectingAlertId","SIP_RECONNECTING_WHEN_CALL_CONNECTED","loading","dismiss","_playAudioLoop","currentLocale","locale","confirm","i18n","getString","cancelText","onCancel","_resetRingingModal","showOffHookInitError","sipReject","CALL_REJECTED","_resolve","_reject","Promise","resolve","reject","once","timeout","onTimeout","res","rej","finalize","off","_stopAudio","isReconnected","isForceLogin","_connectedWebRTC","sipInit","sipRegister","onceRegistered","sipAnswer","document","createElement","type","loop","_playAudio","currentTime","src","audios","play","pause","value","send","add","remove","RcModuleV2","storage","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { EventEmitter } from 'events';\nimport formatMessage from 'format-message';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { raceTimeout } from 'ringcentral-integration/lib/raceTimeout';\nimport sleep from 'ringcentral-integration/lib/sleep';\n\nimport {\n  dialoutStatuses,\n  EvSoftphoneEvents,\n  tabManagerEvents,\n} from '../../enums';\nimport { EvSipRingingData } from '../../lib/EvClient';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums';\nimport { audios } from './audios';\nimport { Deps, IntegratedSoftphone } from './EvIntegratedSoftphone.interface';\nimport i18n from './i18n';\nimport { runInActivityWebRTCTab } from './runInActivityWebRTCTab.decorator';\n\nconst SECOND = 1000;\nconst RECONNECT_DEBOUNCE_TIME = SECOND * 5;\nconst RECONNECT_DEBOUNCE_TIME_WHEN_CONNECTED = SECOND * 15;\nconst SIP_MAX_CONNECTING_TIME = SECOND * 30;\n\n@Module({\n  name: 'EvIntegratedSoftphone',\n  deps: [\n    'Locale',\n    'RouterInteraction',\n    'EvAgentSession',\n    'EvSubscription',\n    'Beforeunload',\n    'EvSettings',\n    'EvClient',\n    'Presence',\n    'Storage',\n    'EvAuth',\n    'Block',\n    'Auth',\n    'ModalUI',\n    'Alert',\n    { dep: 'TabManager', optional: true },\n    { dep: 'EvIntegratedSoftphoneOptions', optional: true },\n  ],\n})\nclass EvIntegratedSoftphone\n  extends RcModuleV2<Deps>\n  implements IntegratedSoftphone {\n  autoAnswerCheckFn: () => boolean;\n\n  private _audio: HTMLAudioElement;\n\n  private _eventEmitter = new EventEmitter();\n\n  private _answerModalId: string = null;\n\n  /** audio permission alert id */\n  private _audioPermissionAlertId: string = null;\n\n  // private _checkWebRTCIntervalId: NodeJS.Timeout;\n\n  // private _heartBeatIntervalTime: number;\n\n  private _beforeunloadHandler = () => this.isWebRTCTab;\n\n  private _isCloseWhenCallConnected = false;\n  private _failedBlockId: string;\n\n  get tabManagerEnabled() {\n    return this._deps.tabManager?.enable;\n  }\n\n  get isWebRTCTab() {\n    return this._deps.tabManager.isMainTab && this.sipRegisterSuccess;\n  }\n\n  get isIntegratedSoftphoneWithTabEnable() {\n    return (\n      this._deps.tabManager.enable &&\n      this._deps.evAgentSession.isIntegratedSoftphone\n    );\n  }\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvIntegratedSoftphone',\n    });\n\n    this._deps.evAuth.beforeAgentLogout(() => {\n      this._resetAllState();\n    });\n\n    this._deps.beforeunload.onAfterUnload(() => {\n      this._sendTabManager(tabManagerEvents.CLOSE_WHEN_CALL_CONNECTED);\n    });\n  }\n\n  // @state\n  // dtmfString: string = '';\n\n  @storage\n  @state\n  audioPermission = false;\n\n  @storage\n  @state\n  muteActive = false;\n\n  @state\n  sipRegisterSuccess = false;\n\n  @state\n  sipRegistering = false;\n\n  /** connecting webRTC alert id, for dialer call button disabled check */\n  @state\n  connectingAlertId: string = null;\n\n  // this is for dialPad click when on call\n  // @action\n  // sipSendDTMF(dtmf: string) {\n  // this.dtmfString += dtmf;\n  // this._deps.evClient.sipSendDTMF(dtmf);\n  // }\n\n  @action\n  setConnectingAlertId(id: string) {\n    this.connectingAlertId = id;\n  }\n\n  @action\n  setAudioPermission(permission: boolean) {\n    this.audioPermission = permission;\n  }\n\n  @action\n  resetController() {\n    // this.dtmfString = '';\n    this.muteActive = false;\n  }\n\n  @action\n  setMuteActive(state: boolean) {\n    this.muteActive = state;\n  }\n\n  @action\n  resetSip() {\n    this.audioPermission = false;\n    this.sipRegistering = false;\n    this.sipRegisterSuccess = false;\n  }\n\n  @action\n  setSipRegisterSuccess(state: boolean) {\n    this.sipRegisterSuccess = state;\n  }\n\n  @action\n  setSipRegistering(state: boolean) {\n    this.sipRegistering = state;\n  }\n\n  onInitOnce() {\n    this._initAudio();\n\n    this._bindingIntegratedSoftphone();\n\n    this._deps.tabManager.onSetMainTabComplete(async () => {\n      console.log(\n        'onSettedMainTab~~',\n        this._deps.evAgentSession.isIntegratedSoftphone,\n      );\n      if (this._deps.evAgentSession.isIntegratedSoftphone) {\n        await this.connectWebRTC();\n      }\n    });\n\n    this._deps.evAgentSession.onConfigSuccess(() => {\n      if (\n        this._deps.tabManager.hasMultipleTabs &&\n        !this._deps.tabManager.isMainTab &&\n        this._deps.evAgentSession.isConfigTabAlive()\n      ) {\n        console.log('setSipRegisterSuccess in onConfigSuccess~~');\n        this.setSipRegisterSuccess(true);\n      }\n    });\n\n    this._deps.evAgentSession.onReConfigFail(() => {\n      if (this._deps.evAgentSession.isIntegratedSoftphone) {\n        this._emitRegistrationFailed();\n      }\n    });\n  }\n\n  onReset() {\n    try {\n      console.log('onReset in EvIntegratedSoftphone~');\n      this._resetAllState();\n    } catch (error) {\n      // ignore error\n    }\n  }\n\n  private _resetAllState() {\n    this._closeWebRTCConnectingMask();\n    this.resetSip();\n\n    this._deps.evClient.sipTerminate();\n    this._eventEmitter.emit(EvSoftphoneEvents.RESET);\n  }\n\n  private _emitRegistrationFailed() {\n    this._deps.evSubscription.emit(\n      EvCallbackTypes.SIP_REGISTRATION_FAILED,\n      null,\n    );\n  }\n\n  async onStateChange() {\n    if (\n      this.ready &&\n      this._deps.tabManager.enable &&\n      this._deps.tabManager.ready\n    ) {\n      this._checkTabManagerEvent();\n    }\n  }\n\n  private async _checkTabManagerEvent() {\n    const { event } = this._deps.tabManager;\n    if (event) {\n      const data = event.args[0];\n      switch (event.name) {\n        case tabManagerEvents.ASK_AUDIO_PERMISSION:\n          if (data) {\n            this._showAskAudioPermissionMask();\n          } else {\n            this._closeAskAudioPermissionMask();\n          }\n          break;\n        case tabManagerEvents.SIP_CONNECTING:\n          this._showWebRTCConnectingMask();\n          break;\n        case tabManagerEvents.SIP_RINGING:\n          this._showRingingModal(data);\n          break;\n        case tabManagerEvents.SIP_RINGING_MODAL:\n          // that event call from modal ok or cancel, that auto close modal\n          this._deps.modalUI.close(this._answerModalId);\n          if (data) {\n            this.answerCall();\n          } else {\n            this.rejectCall();\n          }\n          break;\n        case tabManagerEvents.MUTE_STATE_CHANGE:\n          this.setMuteActive(data);\n          break;\n        case tabManagerEvents.SIP_REGISTERED:\n          console.log('_sipRegistered in other tabs~');\n          this._sipRegistered();\n          break;\n        case tabManagerEvents.SIP_UNREGISTERED:\n          this.setSipRegisterSuccess(false);\n          break;\n        case tabManagerEvents.SIP_REGISTRATION_FAILED_RELOAD:\n          this._reloadApp();\n          break;\n        case tabManagerEvents.SIP_REGISTRATION_FAILED:\n          this._handleRegistrationFailed();\n          await this._deps.evAgentSession.onceLogoutThenLogin();\n          this._closeFailReconnectedBlock();\n          break;\n        case tabManagerEvents.SIP_CONNECTED:\n          this._sipConnected();\n          break;\n        case tabManagerEvents.SIP_ENDED:\n          this._sipEnded();\n          // When sip end need reset Dialout Status to idle\n          this._deps.presence.setDialoutStatus(dialoutStatuses.idle);\n          break;\n        case tabManagerEvents.MUTE:\n          this.sipToggleMute(data);\n          break;\n        case tabManagerEvents.CLOSE_WHEN_CALL_CONNECTED:\n          this._isCloseWhenCallConnected = true;\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private _closeFailReconnectedBlock() {\n    this._deps.block.unblock(this._failedBlockId);\n    this._failedBlockId = null;\n  }\n\n  sipToggleMute(state: boolean) {\n    this._deps.evClient.sipToggleMute(state);\n  }\n\n  onRinging(callback: (call?: EvSipRingingData) => void) {\n    this._eventEmitter.on(EvCallbackTypes.SIP_RINGING, callback);\n  }\n\n  async askAudioPermission(showMask: boolean = true) {\n    try {\n      if (showMask) {\n        if (!this.audioPermission) {\n          this._sendTabManager(tabManagerEvents.ASK_AUDIO_PERMISSION, true);\n          this._showAskAudioPermissionMask();\n        }\n\n        console.log('connect WEB_RTC');\n        await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        });\n      }\n    } catch (error) {\n      this._deps.alert.danger({\n        message: EvSoftphoneEvents.AUDIO_STREAM_REJECTED,\n        backdrop: true,\n        ttl: 0,\n      });\n      console.log(error);\n      throw new Error('Need Audio permission');\n    } finally {\n      if (showMask) {\n        if (this._audioPermissionAlertId) {\n          this._sendTabManager(tabManagerEvents.ASK_AUDIO_PERMISSION, false);\n          this._closeAskAudioPermissionMask();\n        }\n      }\n    }\n\n    this.setAudioPermission(true);\n    if (!this.sipRegisterSuccess) {\n      await this._registerSoftphone();\n    }\n  }\n\n  private async connectWebRTC() {\n    console.log('connectWebRTC~');\n\n    this.resetSip();\n    await this.askAudioPermission();\n  }\n\n  private _bindingIntegratedSoftphone() {\n    console.log('_bindingIntegratedSoftphone~~');\n    this._deps.evSubscription.subscribe(EvCallbackTypes.SIP_REGISTERED, () => {\n      // That will call several times when reconnected.\n      console.log('!!!!!!!SIP_REGISTERED');\n      if (!this.sipRegisterSuccess) {\n        this._sendTabManager(tabManagerEvents.SIP_REGISTERED);\n        this._sipRegistered();\n      }\n    });\n\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.SIP_UNREGISTERED,\n      () => {\n        console.log('!!!!!!!SIP_UNREGISTERED');\n        if (this.sipRegisterSuccess) {\n          this._sendTabManager(tabManagerEvents.SIP_UNREGISTERED);\n          this.setSipRegisterSuccess(false);\n        }\n      },\n    );\n\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.SIP_REGISTRATION_FAILED,\n      async () => {\n        console.log('!!!!!!!SIP_REGISTRATION_FAILED');\n        this.setSipRegistering(false);\n\n        this._sendTabManager(tabManagerEvents.SIP_REGISTRATION_FAILED);\n        this._handleRegistrationFailed();\n\n        // await this._deps.evAgentSession.reLoginAgent();\n        // this._closeFailReconnectedBlock();\n      },\n    );\n\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.SIP_RINGING,\n      (ringingCall) => {\n        this.bindBeforeunload();\n        console.log('!!!!!!!SIP_RINGING');\n        this._eventEmitter.emit(EvCallbackTypes.SIP_RINGING, ringingCall);\n\n        if (this.autoAnswerCheckFn()) {\n          return this._sipAnswer();\n        }\n\n        const { displayName } = ringingCall.data.request.from;\n\n        this._sendTabManager(tabManagerEvents.SIP_RINGING, displayName);\n        this._showRingingModal(displayName);\n      },\n    );\n\n    this._deps.evSubscription.subscribe(EvCallbackTypes.SIP_CONNECTED, () => {\n      console.info('!!!!!!!SIP_CONNECTED');\n      this._sendTabManager(tabManagerEvents.SIP_CONNECTED);\n      this._sipConnected();\n    });\n\n    this._deps.evSubscription.subscribe(EvCallbackTypes.SIP_ENDED, () => {\n      console.info('!!!!!!!SIP_ENDED');\n      this.removeBeforeunload();\n\n      this._sendTabManager(tabManagerEvents.SIP_ENDED);\n      this._sipEnded();\n    });\n\n    this._deps.evSubscription.subscribe(EvCallbackTypes.SIP_MUTE, () => {\n      console.info('!!!!!!!SIP_MUTE');\n      this._sendTabManager(tabManagerEvents.MUTE_STATE_CHANGE, true);\n      this.setMuteActive(true);\n    });\n\n    this._deps.evSubscription.subscribe(EvCallbackTypes.SIP_UNMUTE, () => {\n      console.info('!!!!!!!SIP_UNMUTE');\n      this._sendTabManager(tabManagerEvents.MUTE_STATE_CHANGE, false);\n      this.setMuteActive(false);\n    });\n\n    // TODO: that is update session config related feature\n    // triggered by agentSDK if dial destination is changed on softphone registration\n    // pass in autoStartOH, maintainOH and dial destination, needed for reconnect logic\n    // this._deps.evSubscription.subscribe(\n    // EvCallbackTypes.SIP_DIAL_DEST_CHANGED,\n    // (data) => {\n    // console.info('!!!!!!!SIP_DIAL_DEST_CHANGED');\n    // // AgentSvc.setDialDest(data.dialDest),\n    // // SessionSvc.attemptingSoftphoneReconnect &&\n    // // (data.autoStartOH\n    // // ? AgentSvc.offhookInit().then(\n    // // function(result) {\n    // // data.maintainOH && (AgentSvc.systemInitOffhook = !1);\n    // // },\n    // // function(err) {\n    // // SessionSvc.showOffhookError(err.detail, data.maintainOH);\n    // // },\n    // // )\n    // // : ($timeout(function() {\n    // // 'RNA-STATE' === AgentSvc.currentAgentState.baseState &&\n    // // AgentSvc.setAgentState('AVAILABLE');\n    // // }, 1e3),\n    // // (SessionSvc.attemptingSoftphoneReconnect = !1),\n    // // (SessionSvc.manualSoftphoneReconnect = !1)));\n    // },\n    // );\n  }\n\n  private _sipEnded() {\n    this._closeRingingModal();\n    this._deps.presence.setOffhook(false);\n  }\n\n  private _sipRegistered() {\n    console.log('_sipRegistered~');\n    this.setSipRegisterSuccess(true);\n    this._eventEmitter.emit(EvSoftphoneEvents.REGISTERED);\n\n    this._isCloseWhenCallConnected = false;\n    this._closeWebRTCConnectingMask();\n  }\n\n  private _handleRegistrationFailed() {\n    this._failedBlockId = this._deps.block.block();\n    this._deps.evClient.sipTerminate();\n\n    this._resetAllState();\n    this._closeWebRTCConnectingMask();\n    // this._deps.alert.danger({\n    //   message: EvCallbackTypes.SIP_REGISTRATION_FAILED,\n    //   backdrop: true,\n    //   ttl: 0,\n    //   allowDuplicates: false,\n    // });\n\n    this._deps.modalUI.alert({\n      title: 'Registration failed',\n      content: 'Will reload your pages and tabs for you',\n      okText: 'Ok',\n      size: 'xsmall',\n      onOK: () => {\n        this._sendTabManager(tabManagerEvents.SIP_REGISTRATION_FAILED_RELOAD);\n        this._reloadApp();\n      },\n    });\n\n    this._deps.tabManager.setMainTabId(null);\n    // this._deps.routerInteraction.push('/sessionConfig');\n  }\n\n  private _reloadApp() {\n    window.location.reload();\n  }\n\n  private _sipConnected() {\n    this._deps.presence.setOffhook(true);\n    // When connected reset all controller state\n    this.resetController();\n  }\n\n  private _showWebRTCConnectingMask() {\n    this._closeWebRTCConnectingMask();\n    this.setConnectingAlertId(\n      this._deps.alert.info({\n        message: this._isCloseWhenCallConnected\n          ? tabManagerEvents.SIP_RECONNECTING_WHEN_CALL_CONNECTED\n          : tabManagerEvents.SIP_CONNECTING,\n        loading: true,\n      }),\n    );\n  }\n\n  private _closeWebRTCConnectingMask() {\n    console.log('_closeWebRTCConnectingMask~~', this.connectingAlertId);\n    if (this.connectingAlertId) {\n      this._deps.alert.dismiss(this.connectingAlertId);\n\n      this.setConnectingAlertId(null);\n    }\n  }\n\n  private _showAskAudioPermissionMask() {\n    this._closeAskAudioPermissionMask();\n    this._audioPermissionAlertId = this._deps.alert.info({\n      message: tabManagerEvents.ASK_AUDIO_PERMISSION,\n      loading: true,\n      backdrop: true,\n    });\n  }\n\n  private _closeAskAudioPermissionMask() {\n    if (this._audioPermissionAlertId) {\n      this._deps.alert.dismiss(this._audioPermissionAlertId);\n      this._audioPermissionAlertId = null;\n    }\n  }\n\n  private _showRingingModal(displayName: string) {\n    // prevent open a lot of modal, that sdk event pass a lot of ringing state when re login\n    if (this._answerModalId) {\n      return;\n    }\n\n    this._playAudioLoop('ringtone');\n\n    const { currentLocale } = this._deps.locale;\n\n    this._answerModalId = this._deps.modalUI.confirm({\n      title: i18n.getString('inviteModalTitle', currentLocale),\n      content: formatMessage(\n        i18n.getString('inviteModalContent', currentLocale),\n        {\n          displayName,\n        },\n      ),\n      okText: i18n.getString('inviteModalAnswer', currentLocale),\n      cancelText: i18n.getString('inviteModalReject', currentLocale),\n      onOK: () => {\n        this._sendTabManager(tabManagerEvents.SIP_RINGING_MODAL, true);\n        this.answerCall();\n      },\n      onCancel: () => {\n        this._sendTabManager(tabManagerEvents.SIP_RINGING_MODAL, false);\n        this.rejectCall();\n      },\n      size: 'xsmall',\n    });\n  }\n\n  private answerCall() {\n    this._resetRingingModal();\n    this._sipAnswer();\n  }\n\n  private rejectCall() {\n    this._resetRingingModal();\n    // when reject not show init fail\n    this._deps.presence.showOffHookInitError = false;\n    this._deps.evClient.sipReject();\n    this._eventEmitter.emit(EvSoftphoneEvents.CALL_REJECTED);\n    this.removeBeforeunload();\n  }\n\n  onceRegistered() {\n    let _resolve: (value?: unknown) => void;\n    let _reject: (value?: unknown) => void;\n\n    return raceTimeout(\n      new Promise((resolve, reject) => {\n        _resolve = resolve;\n        _reject = reject;\n        this._eventEmitter.once(EvSoftphoneEvents.REGISTERED, _resolve);\n\n        // when reset sip also need reject that\n        this._eventEmitter.once(EvSoftphoneEvents.RESET, _reject);\n      }),\n      {\n        timeout: SIP_MAX_CONNECTING_TIME,\n        onTimeout: (res, rej) => {\n          this._emitRegistrationFailed();\n          rej('connected integratedSoftphone fail');\n        },\n        finalize: () => {\n          _resolve();\n          this._eventEmitter.off(EvSoftphoneEvents.REGISTERED, _resolve);\n          this._eventEmitter.off(EvSoftphoneEvents.RESET, _reject);\n        },\n      },\n    );\n  }\n\n  private _closeRingingModal() {\n    // if there is modal there, mean another cancel this call\n    if (this._answerModalId) {\n      this._deps.alert.info({\n        message: EvSoftphoneEvents.CALL_REJECTED,\n        ttl: 0,\n      });\n      this._deps.modalUI.close(this._answerModalId);\n      this._answerModalId = null;\n      this._stopAudio();\n    }\n  }\n\n  private async _registerSoftphone() {\n    if (!this.sipRegistering) {\n      this.setSipRegistering(true);\n\n      this._sendTabManager(tabManagerEvents.SIP_CONNECTING);\n      this._showWebRTCConnectingMask();\n\n      console.log(\n        'isReconnected, isForceLogin, _isCloseWhenCallConnected~',\n        this._deps.evAgentSession.isReconnected,\n        this._deps.evAgentSession.isForceLogin,\n        this._isCloseWhenCallConnected,\n      );\n\n      // When that is force login is also need delay to reconnect server\n      if (\n        this._deps.evAgentSession.isReconnected ||\n        this._deps.evAgentSession.isForceLogin\n      ) {\n        await sleep(\n          this._isCloseWhenCallConnected\n            ? RECONNECT_DEBOUNCE_TIME_WHEN_CONNECTED\n            : RECONNECT_DEBOUNCE_TIME,\n        );\n        await this._connectedWebRTC();\n      } else {\n        await this._connectedWebRTC();\n      }\n      return;\n    }\n\n    throw new Error('Sip is registering');\n  }\n\n  private async _connectedWebRTC() {\n    try {\n      this._deps.evClient.sipInit();\n      this._deps.evClient.sipRegister();\n\n      await this.onceRegistered();\n\n      this.setSipRegistering(false);\n      this._closeWebRTCConnectingMask();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private _resetRingingModal() {\n    this._stopAudio();\n    this._answerModalId = null;\n  }\n\n  private _sipAnswer() {\n    this._deps.evClient.sipAnswer();\n  }\n\n  private _initAudio() {\n    if (typeof document !== 'undefined' && document.createElement) {\n      this._audio = document.createElement('audio');\n    }\n  }\n\n  private _playAudioLoop(type: keyof typeof audios) {\n    this._audio.loop = true;\n    this._playAudio(type);\n  }\n\n  @runInActivityWebRTCTab()\n  private _playAudio(type: keyof typeof audios) {\n    this._audio.currentTime = 0;\n    this._audio.src = audios[type];\n    this._audio.play();\n  }\n\n  @runInActivityWebRTCTab()\n  private _stopAudio() {\n    this._audio.loop = false;\n    this._audio.pause();\n  }\n\n  private _sendTabManager(event: string, value?: any) {\n    this._deps.tabManager?.send(event, value);\n  }\n\n  bindBeforeunload() {\n    this._deps.beforeunload.add(this._beforeunloadHandler);\n  }\n\n  removeBeforeunload() {\n    this._deps.beforeunload.remove(this._beforeunloadHandler);\n  }\n}\n\nexport { EvIntegratedSoftphone };\n"],"file":"EvIntegratedSoftphone.js"}