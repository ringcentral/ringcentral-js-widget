{"version":3,"sources":["modules/CallLogSection/index.ts"],"names":["CallLogSection","deps","storage","options","actionTypes","_storage","_storageReducer","_storageKey","registerReducer","key","reducer","_reducer","_shouldInit","store","dispatch","type","init","_onInit","initSuccess","_shouldReset","_onReset","resetSuccess","ready","_readyCheckFunction","pending","identify","saveSuccess","args","_onSuccess","saveError","_onError","show","currentIdentify","showLogSection","showNotification","currentNotificationIdentify","showLogNotification","logFunction","readyCheckFunction","onUpdate","onSuccess","onError","_logFunction","ensureExist","call","_onUpdate","update","callsMapping","isSaving","saving","result","_handleSuccess","_handleError","console","warn","isSameCall","_showLogSection","notificationIsExpand","_showLogNotification","closeLogSection","closeLogNotification","saveCallLog","shrinkNotification","expandNotification","getItem","callsList","state","callsSavingStatus","status","RcModule","selector","list","mapping","a","map","log","_callsMapping","_callsSavingStatus","identity","pick","keys"],"mappings":"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","sourcesContent":["import {\n  assoc,\n  converge,\n  flip,\n  identity,\n  keys,\n  mergeWith,\n  pick,\n  useWith,\n} from 'ramda';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport ensureExist from 'ringcentral-integration/lib/ensureExist';\nimport RcModule from 'ringcentral-integration/lib/RcModule';\nimport { selector } from 'ringcentral-integration/lib/selector';\n\nimport { Mapping } from '../../lib/typings/mapping';\nimport actionTypes from './actionTypes';\nimport { CallLogSectionCallStatus } from './CallLogSection.interface';\nimport getCallLogSectionReducer from './getCallLogSectionReducer';\nimport getStorageReducer from './getStorageReducer';\n\n@Module({\n  deps: ['Storage'],\n})\nexport default class CallLogSection extends RcModule {\n  constructor({ storage, ...options }) {\n    super({\n      storage,\n      actionTypes,\n      ...options,\n    });\n    this._storage = storage;\n    this._storageReducer = getStorageReducer(this.actionTypes);\n    this._storageKey = 'callLogSection';\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: this._storageReducer,\n    });\n    this._reducer = getCallLogSectionReducer(this.actionTypes);\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (typeof this._onInit === 'function') {\n        await this._onInit();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      if (typeof this._onReset === 'function') {\n        await this._onReset();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  _shouldInit() {\n    return this._storage.ready && this._readyCheckFunction() && this.pending;\n  }\n\n  _shouldReset() {\n    return (!this._storage.ready || !this._readyCheckFunction()) && this.ready;\n  }\n\n  _handleSuccess(identify, ...args) {\n    this.store.dispatch({\n      type: this.actionTypes.saveSuccess,\n      identify,\n    });\n    if (typeof this._onSuccess === 'function')\n      this._onSuccess(identify, ...args);\n  }\n\n  _handleError(identify, ...args) {\n    this.store.dispatch({\n      type: this.actionTypes.saveError,\n      identify,\n    });\n    if (typeof this._onError === 'function') this._onError(identify, ...args);\n  }\n\n  _showLogSection(identify) {\n    if (!this.show || identify !== this.currentIdentify) {\n      this.store.dispatch({\n        type: this.actionTypes.showLogSection,\n        identify,\n      });\n    }\n  }\n\n  _showLogNotification(identify) {\n    if (\n      !this.showNotification ||\n      identify !== this.currentNotificationIdentify\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.showLogNotification,\n        identify,\n      });\n    }\n  }\n\n  addLogHandler({\n    logFunction,\n    readyCheckFunction,\n    onUpdate,\n    onSuccess,\n    onError,\n  }) {\n    this._logFunction = ensureExist.call(this, logFunction, 'logFunction');\n    this._readyCheckFunction = ensureExist.call(\n      this,\n      readyCheckFunction,\n      'readyCheckFunction',\n    );\n    this._onUpdate = onUpdate;\n    this._onSuccess = onSuccess;\n    this._onError = onError;\n  }\n\n  async updateCallLog(identify, ...args) {\n    this.store.dispatch({\n      type: this.actionTypes.update,\n      identify,\n    });\n    await this._onUpdate(identify, ...args);\n  }\n\n  async saveCallLog(identify, ...args) {\n    if (\n      identify &&\n      (!this.callsMapping[identify] || !this.callsMapping[identify].isSaving)\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.saving,\n        identify,\n      });\n      try {\n        const result = await this._logFunction(identify, ...args);\n        if (result) {\n          this._handleSuccess(identify, ...args);\n        } else {\n          this._handleError(identify, ...args);\n        }\n        return result;\n      } catch (e) {\n        this._handleError(identify, ...args);\n        console.warn(e);\n      }\n    }\n    return null;\n  }\n\n  handleLogSection(identify) {\n    // prevent `isSameCall` for repeat run more time.\n    const isSameCall = this.currentIdentify === identify;\n    if (!this.show) {\n      // Preferentially show call log section.\n      this._showLogSection(identify);\n    } else if (!this.notificationIsExpand && !isSameCall) {\n      // Check it to show log notification when the call log notification isn't expanded.\n      this._showLogNotification(identify);\n    }\n  }\n\n  closeLogSection() {\n    if (this.show) {\n      this.store.dispatch({\n        type: this.actionTypes.closeLogSection,\n      });\n    }\n  }\n\n  discardAndHandleNotification() {\n    const currentNotificationIdentify = this.currentNotificationIdentify;\n    this.closeLogNotification();\n    this.closeLogSection();\n    this._showLogSection(currentNotificationIdentify);\n  }\n\n  async saveAndHandleNotification() {\n    const currentNotificationIdentify = this.currentNotificationIdentify;\n    const currentIdentify = this.currentIdentify;\n    await this.saveCallLog(currentIdentify);\n    this.closeLogNotification();\n    this.closeLogSection();\n    this._showLogSection(currentNotificationIdentify);\n  }\n\n  closeLogNotification() {\n    if (this.showNotification) {\n      this.store.dispatch({\n        type: this.actionTypes.closeLogNotification,\n      });\n    }\n  }\n\n  // shrink the popover menu appear when click log button at call notificaiton\n  shrinkNotification() {\n    if (this.notificationIsExpand) {\n      this.store.dispatch({\n        type: this.actionTypes.shrinkNotification,\n      });\n    }\n  }\n\n  expandLogNotification() {\n    if (!this.show) {\n      this._showLogSection(this.currentNotificationIdentify);\n      this.closeLogNotification();\n    } else if (!this.notificationIsExpand) {\n      this.store.dispatch({\n        type: this.actionTypes.expandNotification,\n      });\n    }\n  }\n\n  @selector\n  calls = [\n    () => this.callsList,\n    () => this.callsMapping,\n    (list, mapping) => {\n      const a = list.map((identify) => mapping[identify]);\n      console.log('calls', a);\n      return a;\n    },\n  ];\n\n  /**\n   * Merge isSaving property from reducer to callsMapping\n   */\n  @selector\n  callsMapping: Mapping<CallLogSectionCallStatus> = [\n    () => this._callsMapping,\n    () => this._callsSavingStatus,\n    converge(mergeWith(flip(assoc('isSaving'))), [\n      identity,\n      useWith(pick, [keys, identity]),\n    ]),\n  ] as any;\n\n  get callsList() {\n    return this._storage.getItem(this._storageKey).callsList;\n  }\n\n  /**\n   * Private calls mapping relationship without isSaving property\n   */\n  get _callsMapping() {\n    return this._storage.getItem(this._storageKey).callsMapping;\n  }\n\n  get _callsSavingStatus() {\n    return this.state.callsSavingStatus;\n  }\n\n  get currentIdentify() {\n    return this._storage.getItem(this._storageKey).currentIdentify;\n  }\n\n  get show() {\n    return !!this.currentIdentify;\n  }\n\n  get currentNotificationIdentify() {\n    return this._storage.getItem(this._storageKey).currentNotificationIdentify;\n  }\n\n  get showNotification() {\n    return !!this.currentNotificationIdentify;\n  }\n\n  get notificationIsExpand() {\n    return this._storage.getItem(this._storageKey).notificationIsExpand;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n}\n"],"file":"index.js"}