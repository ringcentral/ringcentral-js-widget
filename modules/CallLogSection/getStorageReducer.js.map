{"version":3,"sources":["modules/CallLogSection/getStorageReducer.js"],"names":["getCallsMappingReducer","types","state","type","identify","update","isEdited","saving","saveSuccess","isSucceed","saveError","cleanUp","getCallsListReducer","Array","from","Set","getCurrentIdentifyReducer","showLogSection","closeLogSection","getCurrentNotificationIdentifyReducer","showLogNotification","closeLogNotification","getNotificationIsExpandReducer","expandNotification","shrinkNotification","getStorageReducer","notSyncOpenState","baseReducer","callsList","callsMapping","openStateReducer","currentIdentify","currentNotificationIdentify","notificationIsExpand","reducers"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\n\nfunction getCallsMappingReducer(types) {\n  return (state = {}, { type, identify }) => {\n    switch (type) {\n      case types.update:\n        if (state[identify] && state[identify].isEdited) {\n          return state;\n        }\n        return {\n          ...state,\n          [identify]: {\n            ...state[identify],\n            isEdited: true,\n          },\n        };\n      case types.saving:\n        return {\n          ...state,\n          [identify]: {\n            ...state[identify],\n          },\n        };\n      case types.saveSuccess:\n        return {\n          ...state,\n          [identify]: {\n            ...state[identify],\n            isEdited: false,\n            isSucceed: true,\n          },\n        };\n      case types.saveError:\n        return {\n          ...state,\n          [identify]: {\n            ...state[identify],\n            isEdited: true,\n            isSucceed: false,\n          },\n        };\n      case types.cleanUp:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nfunction getCallsListReducer(types) {\n  return (state = [], { type, identify }) => {\n    switch (type) {\n      case types.update:\n      case types.saving:\n      case types.saveSuccess:\n      case types.saveError:\n        return Array.from(new Set([...state, identify]));\n      case types.cleanUp:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getCurrentIdentifyReducer(types) {\n  return (state = null, { type, identify }) => {\n    switch (type) {\n      case types.showLogSection:\n        return identify;\n      case types.closeLogSection:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getCurrentNotificationIdentifyReducer(types) {\n  return (state = null, { type, identify }) => {\n    switch (type) {\n      case types.showLogNotification:\n        return identify;\n      case types.closeLogNotification:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getNotificationIsExpandReducer(types) {\n  return (state = false, { type }) => {\n    switch (type) {\n      case types.expandNotification:\n        return true;\n      case types.shrinkNotification:\n      case types.closeLogNotification:\n        return false;\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getStorageReducer(types, notSyncOpenState = false) {\n  const baseReducer = {\n    callsList: getCallsListReducer(types),\n    callsMapping: getCallsMappingReducer(types),\n  };\n  const openStateReducer = {\n    currentIdentify: getCurrentIdentifyReducer(types),\n    currentNotificationIdentify: getCurrentNotificationIdentifyReducer(types),\n    notificationIsExpand: getNotificationIsExpandReducer(types),\n  };\n  const reducers = {\n    ...baseReducer,\n    ...(notSyncOpenState ? {} : openStateReducer),\n  };\n  return combineReducers(reducers);\n}\n"],"file":"getStorageReducer.js"}