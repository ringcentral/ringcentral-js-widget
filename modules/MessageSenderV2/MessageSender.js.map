{"version":3,"sources":["modules/MessageSenderV2/MessageSender.ts"],"names":["MESSAGE_MAX_LENGTH","MULTIPART_MESSAGE_MAX_LENGTH","SENDING_THRESHOLD","ATTACHMENT_SIZE_LIMITATION","MessageSender","name","deps","dep","optional","_eventEmitter","EventEmitter","status","sendStatus","message","_deps","alert","warning","ttl","text","attachments","multipart","length","_alertWarning","messageSenderMessages","textEmpty","textTooLong","multipartTextTooLong","toNumbers","recipientsEmpty","senderNumber","validateResult","setSendStatus","messageSenderStatus","validating","isMySenderNumber","number","phoneNumber","senderNumbersList","idle","senderNumberInvalid","errors","forEach","error","type","recipientNumberInvalids","result","_validateToNumbersIsEmpty","recipientNumbers","filter","item","index","arr","indexOf","numberValidate","validateNumbers","numberValidateResult","_alertInvalidRecipientErrors","numbers","subAddress","isCompanyExtension","e164","notAnExtension","push","availableExtension","fromNumber","replyOnMessageId","eventId","uuid","v4","_validateContent","_validateToNumbers","validateToNumberResult","extensionNumbers","phoneNumbers","noAttachmentToExtension","_validateSenderNumber","emit","messageSenderEvents","send","sending","responses","chunks","total","shouldSleep","chunk","_sendPager","pagerResponse","smsResponse","smsBody","toNumber","_sendMMS","_sendSMS","console","debug","sendError","_onSendError","toUsers","client","account","extension","sms","post","from","to","response","formData","FormData","body","append","Blob","JSON","stringify","attachment","file","service","platform","json","extensionNumber","extensionInfo","map","params","replyOn","companyPager","errResp","clone","errorJson","ok","errorCode","err","parameterName","startsWith","notSmsToExtension","internationalSMSNotSupported","noInternalSMSPermission","availabilityMonitor","checkIfHAError","event","handler","on","extensionPhoneNumber","smsSenderNumbers","RcModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import { find } from 'ramda';\nimport EventEmitter from 'events';\nimport uuid from 'uuid';\nimport { RcModuleV2, state, action } from '@ringcentral-integration/core';\nimport { ApiError } from '@ringcentral/sdk';\nimport GetMessageInfoResponse from 'ringcentral-client/build/definitions/GetMessageInfoResponse';\nimport CreatePagerMessageRequest from 'ringcentral-client/build/definitions/CreatePagerMessageRequest';\nimport {\n  ObjectMapKey,\n  ObjectMapValue,\n} from '@ringcentral-integration/core/lib/ObjectMap';\n\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\n\nimport {\n  Deps,\n  SendErrorResponse,\n  SenderNumber,\n  Attachment,\n  EventParameter,\n} from './MessageSender.interface';\n\nimport { messageSenderStatus } from './messageSenderStatus';\nimport { messageSenderMessages } from './messageSenderMessages';\nimport { messageSenderEvents } from './messageSenderEvents';\n\nimport proxify from '../../lib/proxy/proxify';\nimport chunkMessage from '../../lib/chunkMessage';\nimport sleep from '../../lib/sleep';\n\nexport const MESSAGE_MAX_LENGTH = 1000;\nexport const MULTIPART_MESSAGE_MAX_LENGTH = MESSAGE_MAX_LENGTH * 5;\n\nconst SENDING_THRESHOLD = 30;\n\nexport const ATTACHMENT_SIZE_LIMITATION = 1500000;\n\n/**\n * @class\n * @description Message sender and validator module\n */\n@Module({\n  name: 'MessageSender',\n  deps: [\n    'Alert',\n    'Client',\n    'ExtensionInfo',\n    'ExtensionPhoneNumber',\n    'NumberValidate',\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'MessageSenderOptions', optional: true },\n  ],\n})\nexport class MessageSender extends RcModuleV2<Deps> {\n  protected _eventEmitter = new EventEmitter();\n\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Alert} params.alert - alert module instance\n   * @param {Client} params.client - client module instance\n   * @param {ExtensionInfo} params.extensionInfo - extensionInfo module instance\n   * @param {ExtensionPhoneNumber} params.extensionPhoneNumber - extensionPhoneNumber module instance\n   * @param {NumberValidate} params.numberValidate - numberValidate module instance\n   */\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  @state\n  sendStatus = messageSenderStatus.idle;\n\n  @action\n  setSendStatus(status: string) {\n    this.sendStatus = status;\n  }\n\n  _alertWarning(message: string) {\n    if (message) {\n      this._deps.alert.warning({\n        message,\n        ttl: 0,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  _validateContent(\n    text: string,\n    attachments: Attachment[],\n    multipart: boolean,\n  ) {\n    if (isBlank(text) && attachments.length === 0) {\n      this._alertWarning(messageSenderMessages.textEmpty);\n      return false;\n    }\n\n    if (!multipart && text && text.length > MESSAGE_MAX_LENGTH) {\n      this._alertWarning(messageSenderMessages.textTooLong);\n      return false;\n    }\n\n    if (multipart && text && text.length > MULTIPART_MESSAGE_MAX_LENGTH) {\n      this._alertWarning(messageSenderMessages.multipartTextTooLong);\n      return false;\n    }\n\n    return true;\n  }\n\n  _validateToNumbersIsEmpty(toNumbers: string[]) {\n    if (toNumbers.length === 0) {\n      this._alertWarning(messageSenderMessages.recipientsEmpty);\n      return true;\n    }\n    return false;\n  }\n\n  _validateSenderNumber(senderNumber: string) {\n    let validateResult = true;\n    if (isBlank(senderNumber)) {\n      validateResult = false;\n    }\n    this.setSendStatus(messageSenderStatus.validating);\n    if (validateResult) {\n      const isMySenderNumber = find(\n        (number: { phoneNumber: string }) =>\n          number.phoneNumber === senderNumber,\n        this.senderNumbersList,\n      );\n      if (!isMySenderNumber) {\n        validateResult = false;\n      }\n    }\n    if (!validateResult) {\n      this.setSendStatus(messageSenderStatus.idle);\n      this._alertWarning(messageSenderMessages.senderNumberInvalid);\n    }\n    return validateResult;\n  }\n\n  _alertInvalidRecipientErrors(\n    errors: { type: ObjectMapKey<typeof messageSenderMessages> }[],\n  ) {\n    errors.forEach((error) => {\n      const message = messageSenderMessages[error.type];\n      if (!this._alertWarning(message)) {\n        this._alertWarning(messageSenderMessages.recipientNumberInvalids);\n      }\n    });\n  }\n\n  @proxify\n  async _validateToNumbers(toNumbers: string[]) {\n    const result: {\n      result: boolean;\n      numbers?: any[];\n    } = {\n      result: false,\n    };\n    if (this._validateToNumbersIsEmpty(toNumbers)) {\n      return result;\n    }\n    const recipientNumbers = toNumbers.filter(\n      (item, index, arr) => arr.indexOf(item) === index,\n    );\n    this.setSendStatus(messageSenderStatus.validating);\n    const numberValidateResult: any = await this._deps.numberValidate.validateNumbers(\n      recipientNumbers,\n    );\n    if (!numberValidateResult.result) {\n      this._alertInvalidRecipientErrors(numberValidateResult.errors);\n      this.setSendStatus(messageSenderStatus.idle);\n      return result;\n    }\n    const numbers = [];\n    for (const number of numberValidateResult.numbers) {\n      if (number.subAddress && number.subAddress.length > 0) {\n        if (\n          !this._deps.numberValidate.isCompanyExtension(\n            number.e164,\n            number.subAddress,\n          )\n        ) {\n          this._alertWarning(messageSenderMessages.notAnExtension);\n          this.setSendStatus(messageSenderStatus.idle);\n          return result;\n        }\n        numbers.push(number.subAddress);\n      } else {\n        numbers.push(number.availableExtension || number.e164);\n      }\n    }\n    result.result = true;\n    result.numbers = numbers;\n    return result;\n  }\n\n  @proxify\n  async send({\n    fromNumber,\n    toNumbers,\n    text,\n    replyOnMessageId,\n    multipart = false,\n    attachments = [],\n  }: {\n    fromNumber: string;\n    toNumbers: string[];\n    text: string;\n    replyOnMessageId?: number;\n    multipart?: boolean;\n    attachments?: Attachment[];\n  }) {\n    const eventId = uuid.v4();\n    if (!this._validateContent(text, attachments, multipart)) {\n      return null;\n    }\n    try {\n      const validateToNumberResult = await this._validateToNumbers(toNumbers);\n      if (!validateToNumberResult.result) {\n        return null;\n      }\n      const recipientNumbers = validateToNumberResult.numbers;\n\n      const extensionNumbers = recipientNumbers.filter(\n        (number) => number.length <= 6,\n      );\n      const phoneNumbers = recipientNumbers.filter(\n        (number) => number.length > 6,\n      );\n\n      if (extensionNumbers.length > 0 && attachments.length > 0) {\n        this._alertWarning(messageSenderMessages.noAttachmentToExtension);\n        return null;\n      }\n\n      // not validate sender number if recipient is only extension number\n      if (phoneNumbers.length > 0) {\n        if (!this._validateSenderNumber(fromNumber)) {\n          return null;\n        }\n      }\n      this._eventEmitter.emit(messageSenderEvents.send, {\n        eventId,\n        fromNumber,\n        toNumbers,\n        text,\n        replyOnMessageId,\n        multipart,\n      });\n      this.setSendStatus(messageSenderStatus.sending);\n      const responses = [];\n      const chunks = multipart\n        ? chunkMessage(text, MESSAGE_MAX_LENGTH)\n        : [text];\n      const total = (phoneNumbers.length + 1) * chunks.length;\n      const shouldSleep = total > SENDING_THRESHOLD;\n      if (extensionNumbers.length > 0) {\n        for (const chunk of chunks) {\n          if (shouldSleep) await sleep(2000);\n          const pagerResponse = await this._sendPager({\n            toNumbers: extensionNumbers,\n            text: chunk,\n            replyOnMessageId,\n          });\n          responses.push(pagerResponse);\n        }\n      }\n\n      if (phoneNumbers.length > 0) {\n        for (const phoneNumber of phoneNumbers) {\n          for (const chunk of chunks) {\n            if (shouldSleep) await sleep(2000);\n            let smsResponse;\n            const smsBody = {\n              fromNumber,\n              toNumber: phoneNumber,\n              text: chunk,\n              attachments,\n            };\n            if (attachments.length > 0) {\n              smsResponse = await this._sendMMS(smsBody);\n            } else {\n              smsResponse = await this._sendSMS(smsBody);\n            }\n            responses.push(smsResponse);\n          }\n        }\n      }\n      this.setSendStatus(messageSenderStatus.idle);\n      return responses;\n    } catch (error) {\n      console.debug('sendComposeText e ', error);\n      this._eventEmitter.emit(messageSenderEvents.sendError, {\n        eventId,\n        fromNumber,\n        toNumbers,\n        text,\n        replyOnMessageId,\n        multipart,\n      });\n      this.setSendStatus(messageSenderStatus.idle);\n      await this._onSendError(error);\n      throw error;\n    }\n  }\n\n  @proxify\n  async _sendSMS({\n    fromNumber,\n    toNumber,\n    text,\n  }: {\n    fromNumber: string;\n    toNumber: string;\n    text: string;\n  }): Promise<GetMessageInfoResponse> {\n    const toUsers = [{ phoneNumber: toNumber }];\n    const response = await this._deps.client\n      .account()\n      .extension()\n      .sms()\n      .post({\n        from: { phoneNumber: fromNumber },\n        to: toUsers,\n        text,\n      });\n    return response;\n  }\n\n  async _sendMMS({\n    fromNumber,\n    toNumber,\n    text,\n    attachments = [],\n  }: {\n    fromNumber: string;\n    toNumber: string;\n    text: string;\n    attachments?: Attachment[];\n  }): Promise<GetMessageInfoResponse> {\n    const formData = new FormData();\n    const body = {\n      from: { phoneNumber: fromNumber },\n      to: [{ phoneNumber: toNumber }],\n      text,\n    };\n    formData.append(\n      'json',\n      new Blob([JSON.stringify(body, null, 2)], { type: 'application/json' }),\n    );\n    attachments.forEach((attachment) => {\n      formData.append('attachment', attachment.file);\n    });\n\n    const response = await this._deps.client.service\n      .platform()\n      .post('/restapi/v1.0/account/~/extension/~/sms', formData);\n    return response.json();\n  }\n\n  @proxify\n  async _sendPager({\n    toNumbers,\n    text,\n    replyOnMessageId,\n  }: {\n    toNumbers: string[];\n    text: string;\n    replyOnMessageId: number;\n  }): Promise<GetMessageInfoResponse> {\n    const from = { extensionNumber: this._deps.extensionInfo.extensionNumber };\n    const toUsers = toNumbers.map((number) => ({ extensionNumber: number }));\n    const params: CreatePagerMessageRequest = {\n      from,\n      to: toUsers,\n      text,\n    };\n    if (replyOnMessageId) {\n      params.replyOn = replyOnMessageId;\n    }\n    const response = await this._deps.client\n      .account()\n      .extension()\n      .companyPager()\n      .post(params);\n    return response;\n  }\n\n  async _onSendError(error: ApiError): Promise<void> {\n    const errResp = error.response;\n    let errorJson: SendErrorResponse;\n    if (errResp) {\n      errorJson = await errResp.clone().json();\n    }\n    if (\n      errResp &&\n      !errResp.ok &&\n      errorJson &&\n      (errorJson.errorCode === 'InvalidParameter' ||\n        errorJson.errorCode === 'InternationalProhibited' ||\n        errorJson.errorCode === 'CMN-408')\n    ) {\n      errorJson.errors.map((err) => {\n        if (\n          (err.errorCode === 'CMN-101' ||\n            err.errorCode === 'CMN-102' ||\n            err.errorCode === 'CMN-414') &&\n          err.parameterName.startsWith('to')\n        ) {\n          // 101 : \"Parameter [to.extensionNumber] value is invalid\"\n          // 101 : \"Parameter [to.phoneNumber] value is invalid\"\n          // 102 : \"Resource for parameter [to] is not found\"\n          this._alertWarning(messageSenderMessages.recipientNumberInvalids);\n          return null;\n        }\n        if (err.errorCode === 'MSG-246') {\n          // MSG-246 : \"Sending SMS from/to extension numbers is not available\"\n          this._alertWarning(messageSenderMessages.notSmsToExtension);\n        }\n        if (err.errorCode === 'MSG-240') {\n          // MSG-240 : \"International SMS is not supported\"\n          this._alertWarning(\n            messageSenderMessages.internationalSMSNotSupported,\n          );\n        }\n        if (err.errorCode === 'CMN-408') {\n          // MSG-240 : \"In order to call this API endpoint, user needs to have [InternalSMS] permission for requested resource.\"\n          this._alertWarning(messageSenderMessages.noInternalSMSPermission);\n        }\n        return null;\n      });\n      return;\n    }\n\n    if (\n      this._deps.availabilityMonitor &&\n      (await this._deps.availabilityMonitor.checkIfHAError(error))\n    ) {\n      return;\n    }\n\n    this._alertWarning(messageSenderMessages.sendError);\n  }\n\n  on(\n    event: ObjectMapValue<typeof messageSenderEvents>,\n    handler: (event: EventParameter) => void,\n  ) {\n    this._eventEmitter.on(event, handler);\n  }\n\n  get idle() {\n    return this.sendStatus === messageSenderStatus.idle;\n  }\n\n  get senderNumbersList(): SenderNumber[] {\n    return this._deps.extensionPhoneNumber.smsSenderNumbers;\n  }\n\n  get events() {\n    return messageSenderEvents;\n  }\n}\n"],"file":"MessageSender.js"}