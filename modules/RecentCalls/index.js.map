{"version":3,"sources":["modules/RecentCalls/index.js"],"names":["RecentCalls","deps","client","auth","callHistory","options","actionTypes","_client","ensureExist","call","_auth","_callHistory","_reducer","store","subscribe","_onStateChange","pending","ready","loggedIn","dispatch","type","initSuccess","resetSuccess","currentContact","sessionId","contactId","String","id","calls","initLoad","_getRecentCalls","loadSuccess","contact","loadReset","daySpan","length","dateFrom","recentCalls","_getLocalRecentCalls","_fetchRemoteRecentCalls","toISOString","sort","_sortByTime","_dedup","slice","phoneNumbers","reduce","acc","to","from","matches","find","_filterPhoneNumber","Date","startTime","concat","phoneNumber","extensionNumber","params","perPage","recentCallsPromises","phoneType","replace","promise","_fetchCallLogList","then","_flattenToRecords","records","account","extension","callLog","list","items","a","b","hash","cur","state","callStatus","loaded","status","RcModule","background"],"mappings":"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","sourcesContent":["import background from '../../lib/background';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport { actionTypes } from './actionTypes';\nimport { callStatus } from './callStatus';\nimport getRecentCallsReducer from './getRecentCallsReducer';\nimport getDateFrom from '../../lib/getDateFrom';\nimport ensureExist from '../../lib/ensureExist';\nimport concurrentExecute from '../../lib/concurrentExecute';\n\n/**\n * @class\n * @description Retrieve all recent calls related to a specified contact.\n */\n@Module({\n  deps: ['Client', 'Auth', 'CallHistory'],\n})\nexport default class RecentCalls extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {CallHistory} params.callHistory - callHistory module instance\n   * @param {Client} params.client - client module instance\n   */\n  constructor({ client, auth, callHistory, ...options }) {\n    super({\n      actionTypes,\n      ...options,\n    });\n    this._client = ensureExist.call(this, client, 'client');\n    this._auth = ensureExist.call(this, auth, 'auth');\n    this._callHistory = ensureExist.call(this, callHistory, 'callHistory');\n    this._reducer = getRecentCallsReducer(this.actionTypes);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this.pending && this._callHistory.ready && this._auth.loggedIn) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this.ready && !this._callHistory.ready && !this._auth.loggedIn) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  get calls() {\n    return this.state.calls;\n  }\n\n  get isCallsLoaded() {\n    return this.state.callStatus === callStatus.loaded;\n  }\n\n  @background\n  async getCalls({ currentContact, sessionId = null }) {\n    // No need to calculate recent calls of the same contact repeatly\n    if (!currentContact) {\n      return;\n    }\n    const contactId = String(currentContact && currentContact.id);\n    // if (this.calls[currentContact.id]) {\n    if (this.calls[sessionId ? `${contactId}-${sessionId}` : contactId]) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initLoad,\n    });\n    const calls = await this._getRecentCalls(\n      currentContact,\n      this._callHistory.calls,\n    );\n    this.store.dispatch({\n      type: this.actionTypes.loadSuccess,\n      calls,\n      contact: currentContact,\n      sessionId,\n    });\n  }\n\n  cleanUpCalls({ contact, sessionId = null }) {\n    this.store.dispatch({\n      type: this.actionTypes.loadReset,\n      contact,\n      sessionId,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  /**\n   * Searching for recent calls of specific contact.\n   * @param {Object} currentContact Current contact\n   * @param {Array} calls Calls in callHistory\n   * @param {Number} daySpan Find calls within certain days\n   * @param {Number} length Maximum length of recent calls\n   * @return {Array}\n   * @private\n   */\n  async _getRecentCalls(currentContact, calls = [], daySpan = 60, length = 5) {\n    const dateFrom = getDateFrom(daySpan);\n    let recentCalls = this._getLocalRecentCalls(\n      currentContact,\n      calls,\n      dateFrom,\n    );\n\n    // If we could not find enough recent calls,\n    // we need to search for calls on server.\n    if (recentCalls.length < length) {\n      recentCalls = await this._fetchRemoteRecentCalls(\n        currentContact,\n        dateFrom.toISOString(),\n        length,\n      );\n    }\n\n    recentCalls.sort(this._sortByTime);\n    recentCalls = this._dedup(recentCalls);\n    return recentCalls.length > length\n      ? recentCalls.slice(0, length)\n      : recentCalls;\n  }\n\n  /**\n   * Get recent calls from callHistory.\n   * @param {Object} currentContact\n   * @param {Array} calls\n   * @param {Date} dateFrom\n   */\n  _getLocalRecentCalls({ phoneNumbers }, calls, dateFrom) {\n    // Get all calls related to this contact\n    return calls.reduce((acc, call) => {\n      if (call && call.to && call.from) {\n        const matches = phoneNumbers.find(this._filterPhoneNumber(call));\n\n        // Check if calls is within certain days\n        if (!!matches && new Date(call.startTime) > dateFrom) {\n          return acc.concat(call);\n        }\n      }\n      return acc;\n    }, []);\n  }\n\n  _filterPhoneNumber(call) {\n    return ({ phoneNumber }) =>\n      phoneNumber === call.from.phoneNumber ||\n      phoneNumber === call.to.phoneNumber ||\n      phoneNumber === call.from.extensionNumber ||\n      phoneNumber === call.to.extensionNumber;\n  }\n\n  /**\n   * Fetch recent calls from server by given current contact.\n   * @param {Object} currentContact\n   * @param {String} dateFrom\n   * @param {String} dateTo\n   * @param {Number} length The number of calls\n   * @return {Array}\n   */\n  _fetchRemoteRecentCalls({ phoneNumbers }, dateFrom, length) {\n    const params = {\n      dateFrom,\n      perPage: length,\n      type: 'Voice',\n    };\n\n    // CallLog API doesn't support plus sign in phoneNumber\n    const recentCallsPromises = phoneNumbers.reduce(\n      (acc, { phoneType, phoneNumber }) => {\n        phoneNumber = phoneNumber.replace('+', '');\n        if (phoneType === 'extension') {\n          const promise = this._fetchCallLogList({\n            ...params,\n            extensionNumber: phoneNumber,\n          });\n          return acc.concat(promise);\n        }\n        const promise = this._fetchCallLogList({\n          ...params,\n          phoneNumber,\n        });\n        return acc.concat(promise);\n      },\n      [],\n    );\n\n    return concurrentExecute(recentCallsPromises, 5, 500).then(\n      this._flattenToRecords,\n    );\n  }\n\n  _fetchCallLogList(params) {\n    return async () => {\n      if (!this._auth.loggedIn) {\n        return { records: [] };\n      }\n      return this._client\n        .account()\n        .extension()\n        .callLog()\n        .list(params);\n    };\n  }\n\n  _flattenToRecords(items) {\n    return items.reduce((acc, { records }) => acc.concat(records), []);\n  }\n\n  // Sort by time in descending order\n  _sortByTime(a, b) {\n    return new Date(b.startTime) - new Date(a.startTime);\n  }\n\n  _dedup(calls) {\n    const hash = {};\n    return calls.reduce((acc, cur) => {\n      if (hash[cur.id]) return acc;\n      hash[cur.id] = true;\n      return acc.concat(cur);\n    }, []);\n  }\n}\n"],"file":"index.js"}