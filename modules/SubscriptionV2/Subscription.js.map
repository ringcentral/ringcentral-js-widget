{"version":3,"sources":["modules/SubscriptionV2/Subscription.ts"],"names":["DEFAULT_TIME_TO_RETRY","DEFAULT_REGISTER_DELAY","Subscription","name","deps","dep","optional","storageKey","enableCache","_subscription","_retryTimeoutId","_debouncedRegister","_retry","_handleSleep","ready","_removeSubscription","_createSubscription","_onBeforeLogout","fn","_register","threshold","_registerDelay","_timeToRetry","maxThreshold","filters","_setStates","message","status","subscriptionStatus","cachedSubscription","_deps","auth","loggedIn","sleepDetector","on","events","detected","addBeforeLogoutHandler","notSubscribed","off","cancel","removeBeforeLogoutHandler","reset","error","subscribed","subscription","flush","sdk","client","service","Subscriptions","createSubscription","setSubscription","notification","_onNotification","removeSuccess","_onRemoveSuccess","removeError","_onRemoveError","renewSuccess","_onRenewSuccess","renewError","_onRenewError","subscribeSuccess","_onSubscribeSuccess","subscribeError","_onSubscribeError","normalizeEventFilter","eventFilters","sort","_shouldUpdateSubscription","subscribing","setEventFilters","register","unsubscribing","remove","oldFiltersCount","length","_addFilters","concat","Math","max","subscriptionOptions","timeToRetry","registerDelay","RcModuleV2","state","storage","action","proxify"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { ObjectMapValue } from '@ringcentral-integration/core/lib/ObjectMap';\nimport { ApiError } from '@ringcentral/sdk';\nimport Subscriptions from '@ringcentral/subscriptions';\nimport { SubscriptionData } from '@ringcentral/subscriptions/src/subscription/Subscription';\nimport { concat, equals, map, uniq } from 'ramda';\n\nimport { subscriptionFilters } from '../../enums/subscriptionFilters';\nimport {\n  debounce,\n  promisedDebounce,\n  PromisedDebounceFunction,\n  DebouncedFunction,\n} from '../../lib/debounce-throttle';\nimport { Module } from '../../lib/di';\nimport proxify from '../../lib/proxy/proxify';\nimport { normalizeEventFilter } from '../Subscription/normalizeEventFilter';\nimport { subscriptionStatus } from '../Subscription/subscriptionStatus';\nimport { Deps, MessageBase } from './Subscription.interface';\n\nconst DEFAULT_TIME_TO_RETRY = 60 * 1000;\nconst DEFAULT_REGISTER_DELAY = 2 * 1000;\n\n@Module({\n  name: 'Subscription',\n  deps: [\n    'Auth',\n    'Client',\n    'Storage',\n    'SleepDetector',\n    { dep: 'SubscriptionOptions', optional: true },\n  ],\n})\nexport class Subscription extends RcModuleV2<Deps> {\n  protected _subscription: ReturnType<\n    Subscriptions['createSubscription']\n  > = null;\n\n  protected _retryTimeoutId: NodeJS.Timeout = null;\n\n  protected _debouncedRegister: PromisedDebounceFunction<\n    Subscription['_register']\n  >;\n\n  protected _retry: DebouncedFunction<Subscription['_createSubscription']>;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      storageKey: 'subscription',\n      enableCache: true,\n    });\n    this._debouncedRegister = promisedDebounce({\n      fn: this._register,\n      threshold: this._registerDelay,\n    });\n    this._retry = debounce({\n      fn: this._createSubscription,\n      threshold: this._timeToRetry,\n      maxThreshold: this._timeToRetry,\n    });\n  }\n\n  @state\n  message: MessageBase = null;\n\n  @state\n  filters: ObjectMapValue<typeof subscriptionFilters>[] = [];\n\n  protected _addFilters(filters: Subscription['filters']) {\n    this._setStates({ filters: uniq(concat(filters, this.filters)) });\n  }\n\n  @storage\n  @state\n  cachedSubscription: SubscriptionData = null;\n\n  @state\n  subscriptionStatus: ObjectMapValue<typeof subscriptionStatus> =\n    subscriptionStatus.notSubscribed;\n\n  @action\n  protected _setStates({\n    message = this.message,\n    filters = this.filters,\n    status = this.subscriptionStatus,\n    cachedSubscription = this.cachedSubscription,\n  }) {\n    this.message = message;\n    this.filters = filters;\n    this.subscriptionStatus = status;\n    this.cachedSubscription = cachedSubscription;\n  }\n\n  get _timeToRetry() {\n    return Math.max(\n      0,\n      this._deps.subscriptionOptions?.timeToRetry ?? DEFAULT_TIME_TO_RETRY,\n    );\n  }\n\n  get _registerDelay() {\n    return Math.max(\n      0,\n      this._deps.subscriptionOptions?.registerDelay ?? DEFAULT_REGISTER_DELAY,\n    );\n  }\n\n  _shouldInit() {\n    return super._shouldInit() && this._deps.auth.loggedIn;\n  }\n\n  _shouldReset() {\n    return super._shouldReset() || (this.ready && !this._deps.auth.loggedIn);\n  }\n\n  _handleSleep = async () => {\n    if (this.ready && this._subscription) {\n      // forcibly recreate subscription to ensure pubnub is alive\n      await this._removeSubscription();\n      this._createSubscription();\n    }\n  };\n\n  protected _onBeforeLogout = async () => {\n    if (this._subscription) {\n      await this._removeSubscription();\n    }\n  };\n\n  onInit() {\n    this._deps.sleepDetector.on(\n      this._deps.sleepDetector.events.detected,\n      this._handleSleep,\n    );\n    this._deps.auth.addBeforeLogoutHandler(this._onBeforeLogout);\n  }\n\n  async onReset() {\n    this._setStates({\n      filters: [],\n      message: null,\n      status: subscriptionStatus.notSubscribed,\n    });\n    this._deps.sleepDetector.off(\n      this._deps.sleepDetector.events.detected,\n      this._handleSleep,\n    );\n    this._retry.cancel();\n    this._deps.auth.removeBeforeLogoutHandler(this._onBeforeLogout);\n    this._debouncedRegister.cancel();\n    if (this._subscription) {\n      this._subscription.reset();\n      this._subscription = null;\n    }\n  }\n\n  protected _onRemoveSuccess() {\n    this._setStates({\n      status: subscriptionStatus.notSubscribed,\n      cachedSubscription: null,\n    });\n  }\n\n  protected _onRemoveError(error: ApiError | Error) {\n    this._setStates({\n      status: subscriptionStatus.notSubscribed,\n      cachedSubscription: null,\n    });\n  }\n\n  protected _onRenewSuccess() {\n    if (this._subscription) {\n      this._setStates({\n        status: subscriptionStatus.subscribed,\n        cachedSubscription: this._subscription.subscription(),\n      });\n    }\n  }\n\n  protected _onRenewError(error: ApiError | Error) {\n    if (this._subscription) {\n      this._subscription.reset();\n      this._subscription = null;\n    }\n    this._setStates({\n      status: subscriptionStatus.notSubscribed,\n      cachedSubscription: null,\n    });\n    if (this.ready) {\n      // immediately start the retry process after the first renewError\n      this._retry();\n      this._retry.flush();\n    }\n  }\n\n  protected _onSubscribeSuccess() {\n    if (this._subscription) {\n      this._setStates({\n        status: subscriptionStatus.subscribed,\n        cachedSubscription: this._subscription.subscription(),\n      });\n    }\n  }\n\n  protected _onSubscribeError(error: ApiError | Error) {\n    this._setStates({\n      status: subscriptionStatus.notSubscribed,\n      cachedSubscription: null,\n    });\n    if (this.ready) {\n      this._retry();\n    }\n  }\n\n  protected _onNotification(message: MessageBase) {\n    this._setStates({\n      message,\n    });\n  }\n\n  protected async _createSubscription() {\n    if (this.ready && !this._subscription) {\n      const sdk = this._deps.client.service;\n      this._subscription = new Subscriptions({ sdk }).createSubscription();\n      if (this.cachedSubscription) {\n        try {\n          this._subscription.setSubscription(this.cachedSubscription);\n        } catch (error) {\n          this._subscription = new Subscriptions({ sdk }).createSubscription();\n        }\n      }\n      this._subscription.on(\n        this._subscription.events.notification,\n        (message: MessageBase) => this._onNotification(message),\n      );\n      this._subscription.on(this._subscription.events.removeSuccess, () =>\n        this._onRemoveSuccess(),\n      );\n      this._subscription.on(this._subscription.events.removeError, (error) =>\n        this._onRemoveError(error),\n      );\n      this._subscription.on(this._subscription.events.renewSuccess, () =>\n        this._onRenewSuccess(),\n      );\n      this._subscription.on(this._subscription.events.renewError, (error) =>\n        this._onRenewError(error),\n      );\n      this._subscription.on(this._subscription.events.subscribeSuccess, () =>\n        this._onSubscribeSuccess(),\n      );\n      this._subscription.on(this._subscription.events.subscribeError, (error) =>\n        this._onSubscribeError(error),\n      );\n    }\n    try {\n      await this._debouncedRegister();\n    } catch (error) {\n      if (error.message !== 'cancelled') {\n        throw error;\n      }\n    }\n  }\n\n  protected _shouldUpdateSubscription() {\n    return !!(\n      this._subscription &&\n      !equals(\n        map(normalizeEventFilter, this._subscription.eventFilters()).sort(),\n        map(normalizeEventFilter, this.filters).sort(),\n      )\n    );\n  }\n\n  protected async _register() {\n    if (this._shouldUpdateSubscription()) {\n      this._setStates({\n        status: subscriptionStatus.subscribing,\n      });\n      this._subscription.setEventFilters([...this.filters]);\n      await this._subscription.register();\n    }\n  }\n\n  protected async _removeSubscription() {\n    if (this._subscription) {\n      this._setStates({\n        status: subscriptionStatus.unsubscribing,\n      });\n      try {\n        await this._subscription.remove();\n      } catch (error) {\n        /* removeError is handled elsewhere */\n      }\n      if (this._subscription) {\n        this._subscription.reset();\n        this._subscription = null;\n      }\n      this._setStates({\n        status: subscriptionStatus.notSubscribed,\n      });\n    }\n  }\n\n  @proxify\n  async subscribe(events: Subscription['filters'] = []) {\n    if (this.ready) {\n      const oldFiltersCount = this._subscription?.eventFilters().length ?? 0;\n      // use [].concat for potential compatibility issue\n      this._addFilters([].concat(events));\n      if (oldFiltersCount !== this.filters.length) {\n        await this._createSubscription();\n      }\n    }\n  }\n}\n"],"file":"Subscription.js"}