{"version":3,"sources":["modules/DataFetcherV2/DataSource.ts"],"names":["DEFAULT_TTL","DEFAULT_RETRY","DEFAULT_RETRY_INTERVALS","DEFAULT_READY_CHECK","DEFAULT_PERMISSION_CHECK","DataSource","_props","fetchFunction","readyCheckFunction","permissionCheckFunction","key","ttl","timeToRetry","retryIntervals","disableCache","polling","Math","max","pollingInterval","cleanOnReset"],"mappings":";;;;;;;;;;;;;;;AAEO,IAAMA,WAAW,GAAG,KAAK,EAAL,GAAU,IAA9B;;AACA,IAAMC,aAAa,GAAG,KAAK,IAA3B;;AAEA,IAAMC,uBAAuB,GAAG,CACrC,IAAI,IADiC,EAErC,IAAI,IAFiC,EAGrC,KAAK,IAHgC,EAIrC,KAAK,IAJgC,CAAhC;;;AAOP,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAM,IAAN;AAAA,CAA5B;;AACA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA,SAAM,IAAN;AAAA,CAAjC;;IAEaC,U;AACX,sBAAoBC,MAApB,EAAgD;AAAA;;AAAA,SAA5BA,MAA4B,GAA5BA,MAA4B;AAAE;;;;oCAMlC;AACd,aAAO,KAAKA,MAAL,CAAYC,aAAZ,EAAP;AACD;;;yCAoCoB;AAAA;;AACnB,aAAO,0BAAC,KAAKD,MAAL,CAAYE,kBAAb,yEAAmCL,mBAAnC,GAAP;AACD;;;8CAEyB;AAAA;;AACxB,aAAO,0BAAC,KAAKG,MAAL,CAAYG,uBAAb,yEAAwCL,wBAAxC,GAAP;AACD;;;wBAhDS;AACR,aAAO,KAAKE,MAAL,CAAYI,GAAnB;AACD;;;wBAMS;AAAA;;AACR,iCAAO,KAAKJ,MAAL,CAAYK,GAAnB,+DAA0BX,WAA1B;AACD;;;wBAEiB;AAAA;;AAChB,sCAAO,KAAKM,MAAL,CAAYM,WAAnB,yEAAkCX,aAAlC;AACD;;;wBAEoB;AAAA;;AACnB,sCAAO,KAAKK,MAAL,CAAYO,cAAnB,yEAAqCX,uBAArC;AACD;;;wBAEkB;AACjB,aAAO,CAAC,CAAC,KAAKI,MAAL,CAAYQ,YAArB;AACD;;;wBAEa;AACZ,aAAO,CAAC,CAAC,KAAKR,MAAL,CAAYS,OAArB;AACD;;;wBAEqB;AAAA;;AACpB;AACA,aAAOC,IAAI,CAACC,GAAL,0BAAS,KAAKX,MAAL,CAAYY,eAArB,yEAAwC,KAAKP,GAA7C,EAAkD,KAAKA,GAAvD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;wBACqB;AAAA;;AACjB,aAAO,CAAC,UAAG,KAAKG,YAAL,IAAqB,KAAKR,MAAL,CAAYa,YAApC,uCAAqD,IAArD,CAAR;AACD","sourcesContent":["import { DataSourceProps } from './DataFetcherV2.interface';\n\nexport const DEFAULT_TTL = 30 * 60 * 1000;\nexport const DEFAULT_RETRY = 62 * 1000;\n\nexport const DEFAULT_RETRY_INTERVALS = [\n  2 * 1000,\n  5 * 1000,\n  10 * 1000,\n  30 * 1000,\n];\n\nconst DEFAULT_READY_CHECK = () => true;\nconst DEFAULT_PERMISSION_CHECK = () => true;\n\nexport class DataSource<T> {\n  constructor(private _props: DataSourceProps<T>) {}\n\n  get key() {\n    return this._props.key;\n  }\n\n  fetchFunction() {\n    return this._props.fetchFunction();\n  }\n\n  get ttl() {\n    return this._props.ttl ?? DEFAULT_TTL;\n  }\n\n  get timeToRetry() {\n    return this._props.timeToRetry ?? DEFAULT_RETRY;\n  }\n\n  get retryIntervals() {\n    return this._props.retryIntervals ?? DEFAULT_RETRY_INTERVALS;\n  }\n\n  get disableCache() {\n    return !!this._props.disableCache;\n  }\n\n  get polling() {\n    return !!this._props.polling;\n  }\n\n  get pollingInterval() {\n    // polling interval should be >= than ttl\n    return Math.max(this._props.pollingInterval ?? this.ttl, this.ttl);\n  }\n\n  /**\n   * @default true\n   * @description Clean up data on logout. Default to true as DataFetcher\n   *  will always fetchData on login. This will also be always true if disableCache is true.\n   */\n  get cleanOnReset() {\n    return !!((this.disableCache || this._props.cleanOnReset) ?? true);\n  }\n\n  readyCheckFunction() {\n    return (this._props.readyCheckFunction ?? DEFAULT_READY_CHECK)();\n  }\n\n  permissionCheckFunction() {\n    return (this._props.permissionCheckFunction ?? DEFAULT_PERMISSION_CHECK)();\n  }\n}\n"],"file":"DataSource.js"}