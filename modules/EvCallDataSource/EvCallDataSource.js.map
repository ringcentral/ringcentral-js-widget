{"version":3,"sources":["modules/EvCallDataSource/EvCallDataSource.ts"],"names":["EvCallDataSource","name","deps","dep","optional","enableCache","storageKey","eventEmitter","EventEmitter","call","data","rawCallsMapping","uii","timestamp","queueDts","gate","_getCurrentGateData","session","agentId","emit","callStatus","RINGING","id","_deps","evClient","encodeUii","evAuth","index","callIds","indexOf","unshift","otherCallIds","callsMapping","dropSession","_getCallEncodeId","filter","callId","endedCall","includes","callLogsIndex","callLogsIds","res","isHold","holdState","currentGateId","queue","number","currentQueueGroup","availableRequeueQueues","find","gates","some","gateId","gateGroupId","RcModuleV2","storage","state","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { EventEmitter } from 'events';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { Mapping } from 'ringcentral-widgets/typings';\n\nimport { callStatus } from '../../enums';\nimport {\n  EvCallData,\n  EvEvRequeueCallGate,\n} from '../../interfaces/EvData.interface';\nimport {\n  EvAddSessionNotification,\n  EvBaseCall,\n  EvDropSessionNotification,\n  EvEndedCall,\n  EvHoldResponse,\n} from '../../lib/EvClient';\nimport { CallDataSource, Deps } from './EvCallDataSource.interface';\nimport { getTimeStamp } from './helper';\n\n@Module({\n  name: 'EvCallDataSource',\n  deps: [\n    'EvClient',\n    'Storage',\n    'EvAuth',\n    { dep: 'EvCallDataSourceOptions', optional: true },\n  ],\n})\nclass EvCallDataSource extends RcModuleV2<Deps> implements CallDataSource {\n  eventEmitter = new EventEmitter();\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvCallDataSource',\n    });\n  }\n\n  @storage\n  @state\n  data: {\n    callIds: string[];\n    otherCallIds: string[];\n    callLogsIds: string[];\n    callsMapping: Mapping<EvCallData>;\n    rawCallsMapping: Mapping<EvCallData>;\n  } = {\n    callIds: [],\n    otherCallIds: [],\n    callLogsIds: [],\n    callsMapping: {},\n    rawCallsMapping: {},\n  };\n\n  get callIds() {\n    return this.data.callIds;\n  }\n\n  get otherCallIds() {\n    return this.data.otherCallIds;\n  }\n\n  get callLogsIds() {\n    return this.data.callLogsIds;\n  }\n\n  get callsMapping() {\n    return this.data.callsMapping;\n  }\n\n  get rawCallsMapping() {\n    return this.data.rawCallsMapping;\n  }\n\n  @action\n  addNewCall(call: EvBaseCall) {\n    // note: rawCallsMapping index is raw call uii.\n    this.data.rawCallsMapping[call.uii] = {\n      ...call,\n      // input timezone in second arg if EV reponse has timezone propoty\n      // default timezone is 'America/New_York'\n      timestamp: getTimeStamp(call.queueDts),\n      gate: this._getCurrentGateData(call),\n    };\n  }\n\n  @action\n  addNewSession(session: EvAddSessionNotification) {\n    // check with other phone\n    if (session.agentId === '') {\n      // ringing\n      this.eventEmitter.emit(callStatus.RINGING, session);\n    }\n\n    const id = this._deps.evClient.encodeUii(session);\n    if (session.agentId === this._deps.evAuth.agentId) {\n      // related to current agent session\n      const index = this.callIds.indexOf(id);\n      if (index === -1) {\n        this.data.callIds.unshift(id);\n      }\n    } else {\n      // other session without current agent\n      const index = this.otherCallIds.indexOf(id);\n      if (index === -1) {\n        this.data.otherCallIds.unshift(id);\n      }\n    }\n\n    this.data.callsMapping[id] = {\n      ...this.rawCallsMapping[session.uii],\n      session,\n    };\n  }\n\n  @action\n  dropSession(dropSession: EvDropSessionNotification) {\n    const id = this._getCallEncodeId(dropSession);\n    this.data.otherCallIds = this.otherCallIds.filter(\n      (callId) => callId !== id,\n    );\n  }\n\n  @action\n  removeEndedCall(endedCall: EvEndedCall) {\n    const id = this._getCallEncodeId(endedCall);\n    // remove current agent session call with uii.\n    this.data.callIds = this.callIds.filter((callId) => callId !== id);\n    // remove other call session with uii.\n    this.data.otherCallIds = this.otherCallIds.filter(\n      (callId) => !callId.includes(endedCall.uii),\n    );\n\n    // add call with id (encodeUii({ uii, sessionId }))\n    const callLogsIndex = this.callLogsIds.indexOf(id);\n    if (callLogsIndex === -1) {\n      this.data.callLogsIds.unshift(id);\n    }\n    if (this.callsMapping[id]) {\n      this.data.callsMapping[id].endedCall = endedCall;\n    }\n  }\n\n  @action\n  clearCalls() {\n    this.data.callIds = [];\n    this.data.otherCallIds = [];\n  }\n\n  @action\n  setCallHoldStatus(res: EvHoldResponse) {\n    const id = this._deps.evClient.encodeUii(res);\n    this.data.callsMapping[id].isHold = res.holdState;\n  }\n\n  private _getCallEncodeId(session: Partial<EvAddSessionNotification>) {\n    return this._deps.evClient.encodeUii(session);\n  }\n\n  private _getCurrentGateData(call: Partial<EvCallData>): EvEvRequeueCallGate {\n    const currentGateId = call.queue.number;\n    const currentQueueGroup = this._deps.evAuth.availableRequeueQueues.find(\n      ({ gates }) => {\n        return gates.some(({ gateId }) => gateId === currentGateId);\n      },\n    );\n    return {\n      gateId: currentGateId,\n      gateGroupId: currentQueueGroup?.gateGroupId,\n    };\n  }\n}\nexport { EvCallDataSource };\n"],"file":"EvCallDataSource.js"}