{"version":3,"sources":["modules/ActiveCallsUI/index.js"],"names":["ActiveCallsUI","name","deps","dep","optional","brand","callLogger","callMonitor","locale","regionSettings","rolesAndPermissions","conferenceCall","callingSettings","connectivityMonitor","rateLimiter","activeCallControl","webphone","routerInteraction","composeText","contactSearch","contactMatcher","options","_brand","_callLogger","_callMonitor","_locale","_regionSettings","_rolesAndPermissions","_conferenceCall","_callingSettings","_connectivityMonitor","_rateLimiter","_activeCallControl","_webphone","_routerInteraction","_composeText","_contactSearch","_contactMatcher","showContactDisplayPlaceholder","showRingoutCallControl","showSwitchCall","useV2","isWebRTC","callingMode","callingModes","controlBusy","busy","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","showSpinner","isMerging","fullName","connected","autoLog","conferenceCallParties","partyProfiles","disableLinks","connectivity","throttling","composeTextRoute","callCtrlRoute","onCreateContact","onLogCall","isLoggedContact","onCallsEmpty","onViewContact","showViewContact","getAvatarUrl","formatPhone","phoneNumber","webphoneAnswer","sessionId","session","sessions","find","id","direction","callDirections","inbound","closeMergingPair","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","allCallsClickHangupTrack","hangup","webphoneResume","resume","currentPath","push","webphoneHold","allCallsClickHoldTrack","hold","webphoneSwitchCall","activeCall","switchCall","homeCountryId","ringoutHangup","hangUp","ringoutTransfer","ringoutReject","allCallsClickRejectTrack","contact","type","onClickToSms","isDummyContact","clean","updateTypingToNumber","search","searchString","addToRecipients","undefined","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","call","redirect","logCall","length","isSessionAConferenceCall","isConferenceSession","onCallItemClick","webphoneSession","telephonySessionId","callItemClickTrack","toggleMinimized","updateSessionMatchedContact","RcUIModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuBqBA,a,WArBpB,gBAAO;AACNC,EAAAA,IAAI,EAAE,eADA;AAENC,EAAAA,IAAI,EAAE,CACJ,OADI,EAEJ;AAAEC,IAAAA,GAAG,EAAE,YAAP;AAAqBC,IAAAA,QAAQ,EAAE;AAA/B,GAFI,EAGJ,aAHI,EAIJ,QAJI,EAKJ,gBALI,EAMJ,qBANI,EAOJ;AAAED,IAAAA,GAAG,EAAE,gBAAP;AAAyBC,IAAAA,QAAQ,EAAE;AAAnC,GAPI,EAQJ,iBARI,EASJ,qBATI,EAUJ,aAVI,EAWJ;AAAED,IAAAA,GAAG,EAAE,mBAAP;AAA4BC,IAAAA,QAAQ,EAAE;AAAtC,GAXI,EAYJ;AAAED,IAAAA,GAAG,EAAE,UAAP;AAAmBC,IAAAA,QAAQ,EAAE;AAA7B,GAZI,EAaJ,mBAbI,EAcJ;AAAED,IAAAA,GAAG,EAAE,aAAP;AAAsBC,IAAAA,QAAQ,EAAE;AAAhC,GAdI,EAeJ,eAfI,EAgBJ,gBAhBI;AAFA,CAAP,C;;;;;AAsBC,+BAkBG;AAAA;;AAAA,QAjBDC,KAiBC,QAjBDA,KAiBC;AAAA,QAhBDC,UAgBC,QAhBDA,UAgBC;AAAA,QAfDC,WAeC,QAfDA,WAeC;AAAA,QAdDC,MAcC,QAdDA,MAcC;AAAA,QAbDC,cAaC,QAbDA,cAaC;AAAA,QAZDC,mBAYC,QAZDA,mBAYC;AAAA,QAXDC,cAWC,QAXDA,cAWC;AAAA,QAVDC,eAUC,QAVDA,eAUC;AAAA,QATDC,mBASC,QATDA,mBASC;AAAA,QARDC,WAQC,QARDA,WAQC;AAAA,QAPDC,iBAOC,QAPDA,iBAOC;AAAA,QANDC,QAMC,QANDA,QAMC;AAAA,QALDC,iBAKC,QALDA,iBAKC;AAAA,QAJDC,WAIC,QAJDA,WAIC;AAAA,QAHDC,aAGC,QAHDA,aAGC;AAAA,QAFDC,cAEC,QAFDA,cAEC;AAAA,QADEC,OACF;;AAAA;;AACD,yGACKA,OADL;AAGA,UAAKC,MAAL,GAAcjB,KAAd;AACA,UAAKkB,WAAL,GAAmBjB,UAAnB;AACA,UAAKkB,YAAL,GAAoBjB,WAApB;AACA,UAAKkB,OAAL,GAAejB,MAAf;AACA,UAAKkB,eAAL,GAAuBjB,cAAvB;AACA,UAAKkB,oBAAL,GAA4BjB,mBAA5B;AACA,UAAKkB,eAAL,GAAuBjB,cAAvB;AACA,UAAKkB,gBAAL,GAAwBjB,eAAxB;AACA,UAAKkB,oBAAL,GAA4BjB,mBAA5B;AACA,UAAKkB,YAAL,GAAoBjB,WAApB;AACA,UAAKkB,kBAAL,GAA0BjB,iBAA1B;AACA,UAAKkB,SAAL,GAAiBjB,QAAjB;AACA,UAAKkB,kBAAL,GAA0BjB,iBAA1B;AACA,UAAKkB,YAAL,GAAoBjB,WAApB;AACA,UAAKkB,cAAL,GAAsBjB,aAAtB;AACA,UAAKkB,eAAL,GAAuBjB,cAAvB;AAnBC;AAoBF;;;;sCAOE;AAAA,wCAJDkB,6BAIC;AAAA,UAJDA,6BAIC,sCAJ+B,KAI/B;AAAA,wCAHDC,sBAGC;AAAA,UAHDA,sBAGC,sCAHwB,KAGxB;AAAA,uCAFDC,cAEC;AAAA,UAFDA,cAEC,qCAFgB,KAEhB;AAAA,UADDC,KACC,SADDA,KACC;AACD,UAAMC,QAAQ,GACZ,KAAKb,gBAAL,CAAsBc,WAAtB,KAAsCC,yBAAa5B,QADrD;AAEA,UAAM6B,WAAW,GACd,KAAKb,kBAAL,IAA2B,KAAKA,kBAAL,CAAwBc,IAApD,IAA6D,KAD/D;AAGA,aAAO;AACLC,QAAAA,aAAa,EAAE,KAAKtB,OAAL,CAAasB,aADvB;AAELC,QAAAA,eAAe,EAAE,KAAKxB,YAAL,CAAkBwB,eAF9B;AAGLC,QAAAA,iBAAiB,EAAE,KAAKzB,YAAL,CAAkByB,iBAHhC;AAILC,QAAAA,kBAAkB,EAAE,KAAK1B,YAAL,CAAkB0B,kBAJjC;AAKLC,QAAAA,gBAAgB,EAAE,KAAK3B,YAAL,CAAkB2B,gBAL/B;AAMLC,QAAAA,QAAQ,EAAE,KAAK1B,eAAL,CAAqB0B,QAN1B;AAOLC,QAAAA,WAAW,EAAE,KAAK3B,eAAL,CAAqB2B,WAP7B;AAQLC,QAAAA,qBAAqB,EAAE,CAAC,EACtB,KAAK3B,oBAAL,CAA0B4B,WAA1B,IACA,KAAK5B,oBAAL,CAA0B4B,WAA1B,CAAsCC,WAFhB,CARnB;AAYLC,QAAAA,qBAAqB,EAAE,CAAC,EACtB,KAAK9B,oBAAL,CAA0B4B,WAA1B,IACA,KAAK5B,oBAAL,CAA0B4B,WAA1B,CAAsCG,WAFhB,CAZnB;AAgBLC,QAAAA,WAAW,EAAE,CAAC,EAAE,KAAK/B,eAAL,IAAwB,KAAKA,eAAL,CAAqBgC,SAA/C,CAhBT;AAiBLvD,QAAAA,KAAK,EAAE,KAAKiB,MAAL,CAAYuC,QAjBd;AAkBLvB,QAAAA,6BAA6B,EAA7BA,6BAlBK;AAmBLC,QAAAA,sBAAsB,EAAtBA,sBAnBK;AAoBLC,QAAAA,cAAc,EACZA,cAAc,IACdE,QADA,IAEA,KAAKT,SAFL,IAGA,KAAKA,SAAL,CAAe6B,SAxBZ;AAyBLC,QAAAA,OAAO,EAAE,CAAC,EAAE,KAAKxC,WAAL,IAAoB,KAAKA,WAAL,CAAiBwC,OAAvC,CAzBL;AA0BLrB,QAAAA,QAAQ,EAARA,QA1BK;AA2BLsB,QAAAA,qBAAqB,EAAE,KAAKpC,eAAL,GACnB,KAAKA,eAAL,CAAqBqC,aADF,GAEnB,IA7BC;AA8BLxB,QAAAA,KAAK,EAALA,KA9BK;AA+BLyB,QAAAA,YAAY,EACV,CAAC,KAAKpC,oBAAL,CAA0BqC,YAA3B,IACA,KAAKpC,YAAL,CAAkBqC,UADlB,IAEAvB;AAlCG,OAAP;AAoCD;;;0CAaE;AAAA;;AAAA,wCAVDwB,gBAUC;AAAA,UAVDA,gBAUC,sCAVkB,cAUlB;AAAA,sCATDC,aASC;AAAA,UATDA,aASC,oCATe,eASf;AAAA,UARDC,eAQC,SARDA,eAQC;AAAA,UAPDC,SAOC,SAPDA,SAOC;AAAA,UANDC,eAMC,SANDA,eAMC;AAAA,UALDC,YAKC,SALDA,YAKC;AAAA,UAJDC,aAIC,SAJDA,aAIC;AAAA,wCAHDC,eAGC;AAAA,UAHDA,eAGC,sCAHiB,IAGjB;AAAA,UAFDC,YAEC,SAFDA,YAEC;AAAA,UADDpC,KACC,SADDA,KACC;AACD,aAAO;AACLqC,QAAAA,WAAW,EAAE,qBAACC,WAAD;AAAA,iBACX,8BAAa;AACXA,YAAAA,WAAW,EAAXA,WADW;AAEX3B,YAAAA,QAAQ,EAAE,MAAI,CAAC1B,eAAL,CAAqB0B,QAFpB;AAGXC,YAAAA,WAAW,EAAE,MAAI,CAAC3B,eAAL,CAAqB2B;AAHvB,WAAb,CADW;AAAA,SADR;AAOL2B,QAAAA,cAAc,EAAE,wBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACT,MAAI,CAAChD,SADI;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKRiD,kBAAAA,OALQ,GAKE,MAAI,CAACjD,SAAL,CAAekD,QAAf,CAAwBC,IAAxB,CACd,UAACF,OAAD;AAAA,2BAAaA,OAAO,CAACG,EAAR,KAAeJ,SAA5B;AAAA,mBADc,CALF;;AAQd,sBACE,MAAI,CAACrD,eAAL,IACAsD,OADA,IAEAA,OAAO,CAACI,SAAR,KAAsBC,2BAAeC,OAHvC,EAIE;AACA,oBAAA,MAAI,CAAC5D,eAAL,CAAqB6D,gBAArB;AACD;;AAED,kBAAA,MAAI,CAACxD,SAAL,CAAeyD,MAAf,CAAsBT,SAAtB;;AAhBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAPX;AAyBLU,QAAAA,mBAAmB,EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDACnB,MAAI,CAAC1D,SAAL,IAAkB,oBAAA,MAAI,CAACA,SAAL,EAAe2D,WAAf,gCADC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAzBhB;AA2BLC,QAAAA,cAAc,EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDACd,MAAI,CAAC5D,SAAL,IAAkB,qBAAA,MAAI,CAACA,SAAL,EAAe6D,MAAf,iCADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA3BX;AA6BLC,QAAAA,cAAc,EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACd;AACA,kBAAA,MAAI,CAACvE,YAAL,CAAkBwE,wBAAlB;;AAFc,oDAGP,MAAI,CAAC/D,SAAL,IAAkB,qBAAA,MAAI,CAACA,SAAL,EAAegE,MAAf,iCAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA7BX;AAkCLC,QAAAA,cAAc,EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACT,MAAI,CAACjE,SADI;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,kDAIR,qBAAA,MAAI,CAACA,SAAL,EAAekE,MAAf,iCAJQ;;AAAA;AAKd,sBAAI,MAAI,CAACjE,kBAAL,CAAwBkE,WAAxB,KAAwC9B,aAAxC,IAAyD,CAAC7B,KAA9D,EAAqE;AACnE,oBAAA,MAAI,CAACP,kBAAL,CAAwBmE,IAAxB,CAA6B/B,aAA7B;AACD;;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAlCX;AA2CLgC,QAAAA,YAAY,EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACZ;AACA,kBAAA,MAAI,CAAC9E,YAAL,CAAkB+E,sBAAlB;;AAFY,oDAGL,MAAI,CAACtE,SAAL,IAAkB,qBAAA,MAAI,CAACA,SAAL,EAAeuE,IAAf,iCAHb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA3CT;AAgDLC,QAAAA,kBAAkB,EAAE,4BAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACb,MAAI,CAACzE,SADQ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,kDAII,MAAI,CAACA,SAAL,CAAe0E,UAAf,CACpBD,UADoB,EAEpB,MAAI,CAAChF,eAAL,CAAqBkF,aAFD,CAJJ;;AAAA;AAIZ1B,kBAAAA,OAJY;AAAA,oDAQXA,OARW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAhDf;AA0DL2B,QAAAA,aAAa,EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACb;AACA,kBAAA,MAAI,CAACrF,YAAL,CAAkBwE,wBAAlB;;AAFa,oDAIX,MAAI,CAAChE,kBAAL,IAA2B,yBAAA,MAAI,CAACA,kBAAL,EAAwB8E,MAAxB,qCAJhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA1DV;AAiELC,QAAAA,eAAe,EAAE,yBAAO9B,SAAP;AAAA;AAAA;AAAA;AAAA;AACf,kBAAA,MAAI,CAAC/C,kBAAL,CAAwBmE,IAAxB,qBAA0CpB,SAA1C;;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAjEZ;AAoEL+B,QAAAA,aAAa,EAAE,uBAAO/B,SAAP;AAAA;AAAA;AAAA;AAAA;AACb;AACA,kBAAA,MAAI,CAACzD,YAAL,CAAkByF,wBAAlB;;AAFa,qDAIX,MAAI,CAACjF,kBAAL,IAA2B,MAAI,CAACA,kBAAL,CAAwB8D,MAAxB,CAA+Bb,SAA/B,CAJhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SApEV;AA2ELN,QAAAA,aAAa,EAAEC,eAAe,GAC1BD,aAAa,IACZ,iBAAiB;AAAA,cAAduC,OAAc,SAAdA,OAAc;AAAA,cACR7B,EADQ,GACK6B,OADL,CACR7B,EADQ;AAAA,cACJ8B,IADI,GACKD,OADL,CACJC,IADI;;AAEhB,UAAA,MAAI,CAACjF,kBAAL,CAAwBmE,IAAxB,qBAA0Cc,IAA1C,cAAkD9B,EAAlD;AACD,SALyB,GAM1B,IAjFC;AAkFL+B,QAAAA,YAAY,EAAE,KAAKjF,YAAL,GACV,iBAAO+E,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgBG,kBAAAA,cAAhB,iEAAiC,KAAjC;;AACE,sBAAI,MAAI,CAACnF,kBAAT,EAA6B;AAC3B,oBAAA,MAAI,CAACA,kBAAL,CAAwBmE,IAAxB,CAA6BhC,gBAA7B;AACD;;AACD,kBAAA,MAAI,CAAClC,YAAL,CAAkBmF,KAAlB;;AACA,sBAAIJ,OAAO,CAACjH,IAAR,IAAgBiH,OAAO,CAACnC,WAAxB,IAAuCsC,cAA3C,EAA2D;AACzD,oBAAA,MAAI,CAAClF,YAAL,CAAkBoF,oBAAlB,CAAuCL,OAAO,CAACjH,IAA/C;;AACA,oBAAA,MAAI,CAACmC,cAAL,CAAoBoF,MAApB,CAA2B;AAAEC,sBAAAA,YAAY,EAAEP,OAAO,CAACjH;AAAxB,qBAA3B;AACD,mBAHD,MAGO;AACL,oBAAA,MAAI,CAACkC,YAAL,CAAkBuF,eAAlB,CAAkCR,OAAlC;AACD;;AAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADU,GAaVS,SA/FC;AAgGLpD,QAAAA,eAAe,EAAEA,eAAe,GAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASQ,kBAAAA,WAAT,SAASA,WAAT,EAAsB9E,IAAtB,SAAsBA,IAAtB,EAA4B2H,UAA5B,SAA4BA,UAA5B;AAAA;AAAA,kDAC+B,MAAI,CAACvF,eAAL,CAAqBwF,cAArB,CAAoC;AAC/D9C,oBAAAA,WAAW,EAAXA,WAD+D;AAE/D+C,oBAAAA,WAAW,EAAE;AAFkD,mBAApC,CAD/B;;AAAA;AACQD,kBAAAA,cADR;;AAAA,sBAKOA,cALP;AAAA;AAAA;AAAA;;AAAA;AAAA,kDAMUtD,eAAe,CAAC;AAAEQ,oBAAAA,WAAW,EAAXA,WAAF;AAAe9E,oBAAAA,IAAI,EAAJA,IAAf;AAAqB2H,oBAAAA,UAAU,EAAVA;AAArB,mBAAD,CANzB;;AAAA;AAAA;AAAA,kDAOU,MAAI,CAACvF,eAAL,CAAqB0F,gBAArB,CAAsC;AAAEhD,oBAAAA,WAAW,EAAXA;AAAF,mBAAtC,CAPV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAD4B,GAW5B4C,SA3GC;AA4GLlD,QAAAA,eAAe,EAAfA,eA5GK;AA6GLD,QAAAA,SAAS,EACPA,SAAS,IACR,KAAKjD,WAAL,IACE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASyG,kBAAAA,IAAT,SAASA,IAAT,EAAed,OAAf,SAAeA,OAAf,yBAAwBe,QAAxB,EAAwBA,QAAxB,+BAAmC,IAAnC;AAAA;AAAA,kDACO,MAAI,CAAC1G,WAAL,CAAiB2G,OAAjB,CAAyB;AAC7BF,oBAAAA,IAAI,EAAJA,IAD6B;AAE7Bd,oBAAAA,OAAO,EAAPA,OAF6B;AAG7Be,oBAAAA,QAAQ,EAARA;AAH6B,mBAAzB,CADP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAhHA;AAuHLvD,QAAAA,YAAY,EACVA,YAAY,IACX,YAAM;AACL,cAAMhC,QAAQ,GACZ,MAAI,CAACb,gBAAL,CAAsBc,WAAtB,KAAsCC,yBAAa5B,QADrD;;AAGA,cAAI0B,QAAQ,IAAI,CAAC,MAAI,CAACT,SAAL,CAAekD,QAAf,CAAwBgD,MAAzC,EAAiD;AAC/C,YAAA,MAAI,CAACjG,kBAAL,CAAwBmE,IAAxB,CAA6B,SAA7B;AACD;AACF,SAhIE;AAiIL+B,QAAAA,wBAAwB,EAAE,kCAACnD,SAAD;AAAA,iBACxB,CAAC,EACC,MAAI,CAACrD,eAAL,IACA,MAAI,CAACA,eAAL,CAAqByG,mBAArB,CAAyCpD,SAAzC,CAFD,CADuB;AAAA,SAjIrB;AAsILqD,QAAAA,eAAe,EAAE,yBAACN,IAAD,EAAU;AACzB,cAAI,CAACA,IAAI,CAACO,eAAV,EAA2B;AACzB;AACA,gBAAI,0CAAqBP,IAArB,CAAJ,EAAgC;AAC9B;AACD;;AAJwB,gBAMjBQ,kBANiB,GAMMR,IANN,CAMjBQ,kBANiB,EAOzB;;AACA,YAAA,MAAI,CAAChH,YAAL,CAAkBiH,kBAAlB;;AACA,YAAA,MAAI,CAACvG,kBAAL,CAAwBmE,IAAxB,6BACuBmC,kBADvB;AAGD,WAZD,MAYO;AACL;AACA;AACA,gBAAI,0CAAqBR,IAArB,CAAJ,EAAgC;AAC9B,cAAA,MAAI,CAAC/F,SAAL,CAAeyG,eAAf,CAA+BV,IAAI,CAACO,eAAL,CAAqBlD,EAApD;;AACA;AACD;;AACD,gBAAI2C,IAAI,CAACO,eAAL,IAAwBP,IAAI,CAACO,eAAL,CAAqBlD,EAAjD,EAAqD;AACnD;AACA,cAAA,MAAI,CAAC7D,YAAL,CAAkBiH,kBAAlB;;AACA,cAAA,MAAI,CAACvG,kBAAL,CAAwBmE,IAAxB,WACK/B,aADL,cACsB0D,IAAI,CAACO,eAAL,CAAqBlD,EAD3C;AAGD;AACF;AACF,SAlKI;AAmKLR,QAAAA,YAAY,EAAZA,YAnKK;AAoKL8D,QAAAA,2BAA2B,EAAE,qCAAC1D,SAAD,EAAYiC,OAAZ;AAAA,iBAC3B,MAAI,CAACjF,SAAL,CAAe0G,2BAAf,CAA2C1D,SAA3C,EAAsDiC,OAAtD,CAD2B;AAAA;AApKxB,OAAP;AAuKD;;;;EA7QwC0B,uB","sourcesContent":["import { Module } from 'ringcentral-integration/lib/di';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport { isRingingInboundCall } from 'ringcentral-integration/lib/callLogHelpers';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport RcUIModule from '../../lib/RcUIModule';\n\n@Module({\n  name: 'ActiveCallsUI',\n  deps: [\n    'Brand',\n    { dep: 'CallLogger', optional: true },\n    'CallMonitor',\n    'Locale',\n    'RegionSettings',\n    'RolesAndPermissions',\n    { dep: 'ConferenceCall', optional: true },\n    'CallingSettings',\n    'ConnectivityMonitor',\n    'RateLimiter',\n    { dep: 'ActiveCallControl', optional: true },\n    { dep: 'Webphone', optional: true },\n    'RouterInteraction',\n    { dep: 'ComposeText', optional: true },\n    'ContactSearch',\n    'ContactMatcher',\n  ],\n})\nexport default class ActiveCallsUI extends RcUIModule {\n  constructor({\n    brand,\n    callLogger,\n    callMonitor,\n    locale,\n    regionSettings,\n    rolesAndPermissions,\n    conferenceCall,\n    callingSettings,\n    connectivityMonitor,\n    rateLimiter,\n    activeCallControl,\n    webphone,\n    routerInteraction,\n    composeText,\n    contactSearch,\n    contactMatcher,\n    ...options\n  }) {\n    super({\n      ...options,\n    });\n    this._brand = brand;\n    this._callLogger = callLogger;\n    this._callMonitor = callMonitor;\n    this._locale = locale;\n    this._regionSettings = regionSettings;\n    this._rolesAndPermissions = rolesAndPermissions;\n    this._conferenceCall = conferenceCall;\n    this._callingSettings = callingSettings;\n    this._connectivityMonitor = connectivityMonitor;\n    this._rateLimiter = rateLimiter;\n    this._activeCallControl = activeCallControl;\n    this._webphone = webphone;\n    this._routerInteraction = routerInteraction;\n    this._composeText = composeText;\n    this._contactSearch = contactSearch;\n    this._contactMatcher = contactMatcher;\n  }\n\n  getUIProps({\n    showContactDisplayPlaceholder = false,\n    showRingoutCallControl = false,\n    showSwitchCall = false,\n    useV2,\n  }) {\n    const isWebRTC =\n      this._callingSettings.callingMode === callingModes.webphone;\n    const controlBusy =\n      (this._activeCallControl && this._activeCallControl.busy) || false;\n\n    return {\n      currentLocale: this._locale.currentLocale,\n      activeRingCalls: this._callMonitor.activeRingCalls,\n      activeOnHoldCalls: this._callMonitor.activeOnHoldCalls,\n      activeCurrentCalls: this._callMonitor.activeCurrentCalls,\n      otherDeviceCalls: this._callMonitor.otherDeviceCalls,\n      areaCode: this._regionSettings.areaCode,\n      countryCode: this._regionSettings.countryCode,\n      outboundSmsPermission: !!(\n        this._rolesAndPermissions.permissions &&\n        this._rolesAndPermissions.permissions.OutboundSMS\n      ),\n      internalSmsPermission: !!(\n        this._rolesAndPermissions.permissions &&\n        this._rolesAndPermissions.permissions.InternalSMS\n      ),\n      showSpinner: !!(this._conferenceCall && this._conferenceCall.isMerging),\n      brand: this._brand.fullName,\n      showContactDisplayPlaceholder,\n      showRingoutCallControl,\n      showSwitchCall:\n        showSwitchCall &&\n        isWebRTC &&\n        this._webphone &&\n        this._webphone.connected,\n      autoLog: !!(this._callLogger && this._callLogger.autoLog),\n      isWebRTC,\n      conferenceCallParties: this._conferenceCall\n        ? this._conferenceCall.partyProfiles\n        : null,\n      useV2,\n      disableLinks:\n        !this._connectivityMonitor.connectivity ||\n        this._rateLimiter.throttling ||\n        controlBusy,\n    };\n  }\n\n  getUIFunctions({\n    composeTextRoute = '/composeText',\n    callCtrlRoute = '/calls/active',\n    onCreateContact,\n    onLogCall,\n    isLoggedContact,\n    onCallsEmpty,\n    onViewContact,\n    showViewContact = true,\n    getAvatarUrl,\n    useV2,\n  }) {\n    return {\n      formatPhone: (phoneNumber) =>\n        formatNumber({\n          phoneNumber,\n          areaCode: this._regionSettings.areaCode,\n          countryCode: this._regionSettings.countryCode,\n        }),\n      webphoneAnswer: async (sessionId) => {\n        if (!this._webphone) {\n          return;\n        }\n\n        const session = this._webphone.sessions.find(\n          (session) => session.id === sessionId,\n        );\n        if (\n          this._conferenceCall &&\n          session &&\n          session.direction === callDirections.inbound\n        ) {\n          this._conferenceCall.closeMergingPair();\n        }\n\n        this._webphone.answer(sessionId);\n      },\n      webphoneToVoicemail: async (...args) =>\n        this._webphone && this._webphone.toVoiceMail(...args),\n      webphoneReject: async (...args) =>\n        this._webphone && this._webphone.reject(...args),\n      webphoneHangup: async (...args) => {\n        // user action track\n        this._callMonitor.allCallsClickHangupTrack();\n        return this._webphone && this._webphone.hangup(...args);\n      },\n      webphoneResume: async (...args) => {\n        if (!this._webphone) {\n          return;\n        }\n        await this._webphone.resume(...args);\n        if (this._routerInteraction.currentPath !== callCtrlRoute && !useV2) {\n          this._routerInteraction.push(callCtrlRoute);\n        }\n      },\n      webphoneHold: async (...args) => {\n        // user action track\n        this._callMonitor.allCallsClickHoldTrack();\n        return this._webphone && this._webphone.hold(...args);\n      },\n      webphoneSwitchCall: async (activeCall) => {\n        if (!this._webphone) {\n          return;\n        }\n        const session = await this._webphone.switchCall(\n          activeCall,\n          this._regionSettings.homeCountryId,\n        );\n        return session;\n      },\n      ringoutHangup: async (...args) => {\n        // user action track\n        this._callMonitor.allCallsClickHangupTrack();\n        return (\n          this._activeCallControl && this._activeCallControl.hangUp(...args)\n        );\n      },\n      ringoutTransfer: async (sessionId) => {\n        this._routerInteraction.push(`/transfer/${sessionId}/active`);\n      },\n      ringoutReject: async (sessionId) => {\n        // user action track\n        this._callMonitor.allCallsClickRejectTrack();\n        return (\n          this._activeCallControl && this._activeCallControl.reject(sessionId)\n        );\n      },\n      onViewContact: showViewContact\n        ? onViewContact ||\n          (({ contact }) => {\n            const { id, type } = contact;\n            this._routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n          })\n        : null,\n      onClickToSms: this._composeText\n        ? async (contact, isDummyContact = false) => {\n            if (this._routerInteraction) {\n              this._routerInteraction.push(composeTextRoute);\n            }\n            this._composeText.clean();\n            if (contact.name && contact.phoneNumber && isDummyContact) {\n              this._composeText.updateTypingToNumber(contact.name);\n              this._contactSearch.search({ searchString: contact.name });\n            } else {\n              this._composeText.addToRecipients(contact);\n            }\n          }\n        : undefined,\n      onCreateContact: onCreateContact\n        ? async ({ phoneNumber, name, entityType }) => {\n            const hasMatchNumber = await this._contactMatcher.hasMatchNumber({\n              phoneNumber,\n              ignoreCache: true,\n            });\n            if (!hasMatchNumber) {\n              await onCreateContact({ phoneNumber, name, entityType });\n              await this._contactMatcher.forceMatchNumber({ phoneNumber });\n            }\n          }\n        : undefined,\n      isLoggedContact,\n      onLogCall:\n        onLogCall ||\n        (this._callLogger &&\n          (async ({ call, contact, redirect = true }) => {\n            await this._callLogger.logCall({\n              call,\n              contact,\n              redirect,\n            });\n          })),\n      onCallsEmpty:\n        onCallsEmpty ||\n        (() => {\n          const isWebRTC =\n            this._callingSettings.callingMode === callingModes.webphone;\n\n          if (isWebRTC && !this._webphone.sessions.length) {\n            this._routerInteraction.push('/dialer');\n          }\n        }),\n      isSessionAConferenceCall: (sessionId) =>\n        !!(\n          this._conferenceCall &&\n          this._conferenceCall.isConferenceSession(sessionId)\n        ),\n      onCallItemClick: (call) => {\n        if (!call.webphoneSession) {\n          // For ringout call\n          if (isRingingInboundCall(call)) {\n            return;\n          }\n\n          const { telephonySessionId } = call;\n          // to track the call item be clicked.\n          this._callMonitor.callItemClickTrack();\n          this._routerInteraction.push(\n            `/simplifycallctrl/${telephonySessionId}`,\n          );\n        } else {\n          // For webphone call\n          // show the ring call modal when click a ringing call.\n          if (isRingingInboundCall(call)) {\n            this._webphone.toggleMinimized(call.webphoneSession.id);\n            return;\n          }\n          if (call.webphoneSession && call.webphoneSession.id) {\n            // to track the call item be clicked.\n            this._callMonitor.callItemClickTrack();\n            this._routerInteraction.push(\n              `${callCtrlRoute}/${call.webphoneSession.id}`,\n            );\n          }\n        }\n      },\n      getAvatarUrl,\n      updateSessionMatchedContact: (sessionId, contact) =>\n        this._webphone.updateSessionMatchedContact(sessionId, contact),\n    };\n  }\n}\n"],"file":"index.js"}