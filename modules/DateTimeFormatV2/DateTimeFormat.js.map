{"version":3,"sources":["modules/DateTimeFormatV2/DateTimeFormat.ts"],"names":["DateTimeFormat","name","deps","dep","optional","_formatters","_defaultFormatter","formatter","Error","utcTimestamp","locale","_deps","currentLocale","type","formatDateTime","RcModuleV2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAcaA,c,WAJZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,gBADA;AAENC,EAAAA,IAAI,EAAE,CAAC,QAAD,EAAW;AAAEC,IAAAA,GAAG,EAAE,uBAAP;AAAgCC,IAAAA,QAAQ,EAAE;AAA1C,GAAX;AAFA,CAAP,C;;;;;AAQC,0BAAYF,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA;AADI,KAAN;AADsB,UAHjBG,WAGiB,GAHgC,EAGhC;AAAA,UAFdC,iBAEc;AAAA;AAIvB;;;;6BAEQ;AACP,UAAI,CAAC,KAAKA,iBAAV,EAA6B;AAC3B,aAAKA,iBAAL,GAAyB,2CAAzB;AACD;AACF;;;8BAES;AACR,WAAKD,WAAL,GAAmB,EAAnB;AACD;;;uCAEsD;AAAA,UAAxCJ,IAAwC,QAAxCA,IAAwC;AAAA,UAAlCM,SAAkC,QAAlCA,SAAkC;;AACrD,UAAI,CAACN,IAAL,EAAW;AACT,cAAM,IAAIO,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,UAAI,KAAKH,WAAL,CAAiBJ,IAAjB,CAAJ,EAA4B;AAC1B,cAAM,IAAIO,KAAJ,2CAC+BP,IAD/B,sBAAN;AAGD;;AACD,UAAI,OAAOM,SAAP,KAAqB,UAAzB,EAAqC;AACnC,cAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACD,WAAKH,WAAL,CAAiBJ,IAAjB,IAAyBM,SAAzB;AACD;;;0CAOkC;AAAA,UAJjCN,IAIiC,SAJjCA,IAIiC;AAAA,UAHjCQ,YAGiC,SAHjCA,YAGiC;AAAA,+BAFjCC,MAEiC;AAAA,UAFjCA,MAEiC,6BAFxB,KAAKC,KAAL,CAAWD,MAAX,CAAkBE,aAEM;AAAA,UADjCC,IACiC,SADjCA,IACiC;;AACjC,UAAIZ,IAAI,IAAI,OAAO,KAAKI,WAAL,CAAiBJ,IAAjB,CAAP,KAAkC,UAA9C,EAA0D;AACxD,eAAO,KAAKI,WAAL,CAAiBJ,IAAjB,EAAuB;AAC5BQ,UAAAA,YAAY,EAAZA,YAD4B;AAE5BC,UAAAA,MAAM,EAANA,MAF4B;AAG5BG,UAAAA,IAAI,EAAJA;AAH4B,SAAvB,CAAP;AAKD;;AACD,aAAO,KAAKP,iBAAL,CAAuB;AAC5BG,QAAAA,YAAY,EAAZA,YAD4B;AAE5BC,QAAAA,MAAM,EAANA,MAF4B;AAG5BG,QAAAA,IAAI,EAAJA;AAH4B,OAAvB,CAAP;AAKD;;;sCAEyD;AAAA,UAA7CZ,IAA6C,SAA7CA,IAA6C;AAAA,UAAvCQ,YAAuC,SAAvCA,YAAuC;AAAA,UAAzBC,MAAyB,SAAzBA,MAAyB;AACxD,aAAO,KAAKI,cAAL,CAAoB;AACzBb,QAAAA,IAAI,EAAJA,IADyB;AAEzBQ,QAAAA,YAAY,EAAZA,YAFyB;AAGzBC,QAAAA,MAAM,EAANA,MAHyB;AAIzBG,QAAAA,IAAI,EAAE;AAJmB,OAApB,CAAP;AAMD;;;sCAEyD;AAAA,UAA7CZ,IAA6C,SAA7CA,IAA6C;AAAA,UAAvCQ,YAAuC,SAAvCA,YAAuC;AAAA,UAAzBC,MAAyB,SAAzBA,MAAyB;AACxD,aAAO,KAAKI,cAAL,CAAoB;AACzBb,QAAAA,IAAI,EAAJA,IADyB;AAEzBQ,QAAAA,YAAY,EAAZA,YAFyB;AAGzBC,QAAAA,MAAM,EAANA,MAHyB;AAIzBG,QAAAA,IAAI,EAAE;AAJmB,OAApB,CAAP;AAMD;;;;EAvEiCE,gB","sourcesContent":["import { RcModuleV2 } from '@ringcentral-integration/core';\nimport { Module } from '../../lib/di';\nimport getIntlDateTimeFormatter, {\n  DateTimeFormatter,\n} from '../../lib/getIntlDateTimeFormatter';\nimport {\n  AddFormatterOptions,\n  Deps,\n  FormatDateTimeOptions,\n  FormatOptions,\n} from './DateTimeFormat.interface';\n\n@Module({\n  name: 'DateTimeFormat',\n  deps: ['Locale', { dep: 'DateTimeFormatOptions', optional: true }],\n})\nexport class DateTimeFormat extends RcModuleV2<Deps> {\n  public _formatters: Record<string, DateTimeFormatter> = {};\n  protected _defaultFormatter?: DateTimeFormatter;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  onInit() {\n    if (!this._defaultFormatter) {\n      this._defaultFormatter = getIntlDateTimeFormatter();\n    }\n  }\n\n  onReset() {\n    this._formatters = {};\n  }\n\n  addFormatter({ name, formatter }: AddFormatterOptions) {\n    if (!name) {\n      throw new Error('`name` property cannot be empty.');\n    }\n    if (this._formatters[name]) {\n      throw new Error(\n        `A formatter with the same name: ${name} already exists.`,\n      );\n    }\n    if (typeof formatter !== 'function') {\n      throw new Error('formatter must be a function.');\n    }\n    this._formatters[name] = formatter;\n  }\n\n  formatDateTime({\n    name,\n    utcTimestamp,\n    locale = this._deps.locale.currentLocale,\n    type,\n  }: Partial<FormatDateTimeOptions>) {\n    if (name && typeof this._formatters[name] === 'function') {\n      return this._formatters[name]({\n        utcTimestamp,\n        locale,\n        type,\n      });\n    }\n    return this._defaultFormatter({\n      utcTimestamp,\n      locale,\n      type,\n    });\n  }\n\n  formatDate({ name, utcTimestamp, locale }: FormatOptions) {\n    return this.formatDateTime({\n      name,\n      utcTimestamp,\n      locale,\n      type: 'date',\n    });\n  }\n\n  formatTime({ name, utcTimestamp, locale }: FormatOptions) {\n    return this.formatDateTime({\n      name,\n      utcTimestamp,\n      locale,\n      type: 'time',\n    });\n  }\n}\n"],"file":"DateTimeFormat.js"}