{"version":3,"sources":["modules/ConversationLogger/index.js"],"names":["getLogId","conversationId","date","conversationLogIdentityFunction","conversation","conversationLogId","ConversationLogger","deps","dep","optional","auth","contactMatcher","conversationMatcher","dateTimeFormat","extensionInfo","messageStore","rolesAndPermissions","storage","tabManager","isLoggedContact","isAutoUpdate","formatDateTime","accordWithLogRequirement","options","name","actionTypes","identityFunction","_auth","ensureExist","call","_contactMatcher","_conversationMatcher","_dateTimeFormat","_extensionInfo","_messageStore","_rolesAndPermissions","_storage","_tabManager","_isLoggedContact","_formatDateTime","_isAutoUpdate","_accordWithLogRequirement","_storageKey","_name","onMessageUpdated","record","_processConversationLogMap","registerReducer","key","reducer","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","conversationLogIds","_lastProcessedConversationLogMap","_autoLogQueue","_autoLogPromise","pending","_readyCheckFunction","_lastProcessedConversations","_lastAutoLog","ownerId","Promise","all","splice","map","_processConversationLog","length","_processQueue","push","correspondents","reduce","result","contact","number","phoneNumber","extensionNumber","dataMapping","concat","conversationLog","conversationLogMap","lastRecord","Object","keys","sort","sortByDate","find","item","conversationLogMatches","lastActivity","correspondentMatches","_getCorrespondentMatches","match","queries","_autoLogConversation","autoLog","type","messageTypes","sms","addIfNotExist","numberMap","numbers","self","forEach","selfNumber","selfMatches","selfEntity","correspondentEntity","getLastMatchedCorrespondentEntity","triggerMatch","oldMap","active","messages","id","accordWithProcessLogRequirement","_queueAutoLogConversation","log","redirect","idx","queueIndex","store","dispatch","setAutoLog","message","utcTimestamp","creationTime","serviceFeatures","SMSReceiving","PagerReceiving","enabled","getItem","LoggerBase","proxify","selector","conversationStore","conversationLogMapping","values","allMessages","mapping","slice","logIds","output"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,SAASA,QAAT,OAA4C;AAAA,MAAxBC,cAAwB,QAAxBA,cAAwB;AAAA,MAARC,IAAQ,QAARA,IAAQ;AACjD,mBAAUD,cAAV,cAA4BC,IAA5B;AACD;;AAEM,SAASC,+BAAT,CAAyCC,YAAzC,EAAuD;AAC5D,SAAOA,YAAY,CAACC,iBAApB;AACD;AAED;;;;;;IAkBqBC,kB,WAdpB,gBAAO;AACNC,EAAAA,IAAI,EAAE,CACJ,MADI,EAEJ,SAFI,EAGJ;AAAEC,IAAAA,GAAG,EAAE,YAAP;AAAqBC,IAAAA,QAAQ,EAAE;AAA/B,GAHI,EAIJ,gBAJI,EAKJ,qBALI,EAMJ,gBANI,EAOJ,eAPI,EAQJ,cARI,EASJ,qBATI,EAUJ;AAAED,IAAAA,GAAG,EAAE,2BAAP;AAAoCC,IAAAA,QAAQ,EAAE;AAA9C,GAVI;AADA,CAAP,C;;;;;AAeC;;;;;;;;;;;;;;AAcA,qCAeG;AAAA;;AAAA,QAdDC,IAcC,SAdDA,IAcC;AAAA,QAbDC,cAaC,SAbDA,cAaC;AAAA,QAZDC,mBAYC,SAZDA,mBAYC;AAAA,QAXDC,cAWC,SAXDA,cAWC;AAAA,QAVDC,aAUC,SAVDA,aAUC;AAAA,QATDC,YASC,SATDA,YASC;AAAA,QARDC,mBAQC,SARDA,mBAQC;AAAA,QAPDC,OAOC,SAPDA,OAOC;AAAA,QANDC,UAMC,SANDA,UAMC;AAAA,sCALDC,eAKC;AAAA,QALDA,eAKC,sCALiB;AAAA,aAAM,KAAN;AAAA,KAKjB;AAAA,mCAJDC,YAIC;AAAA,QAJDA,YAIC,mCAJc,IAId;AAAA,qCAHDC,cAGC;AAAA,QAHDA,cAGC,qCAHgB;AAAA,aAAaR,cAAc,CAACQ,cAAf,OAAAR,cAAc,YAA3B;AAAA,KAGhB;AAAA,QAFDS,wBAEC,SAFDA,wBAEC;AAAA,QADEC,OACF;;AAAA;;AACD,8DACKA,OADL;AAEEC,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,WAAW,EAAXA,uBAHF;AAIEC,MAAAA,gBAAgB,EAAEvB;AAJpB;;AADC;;AAAA;;AAAA;;AAOD,UAAKwB,KAAL,GAAaC,wBAAYC,IAAZ,gCAAuBnB,IAAvB,EAA6B,MAA7B,CAAb;AACA,UAAKoB,eAAL,GAAuBF,wBAAYC,IAAZ,gCAErBlB,cAFqB,EAGrB,gBAHqB,CAAvB;AAKA,UAAKoB,oBAAL,GAA4BH,wBAAYC,IAAZ,gCAE1BjB,mBAF0B,EAG1B,qBAH0B,CAA5B;AAKA,UAAKoB,eAAL,GAAuBJ,wBAAYC,IAAZ,gCAErBhB,cAFqB,EAGrB,gBAHqB,CAAvB;AAKA,UAAKoB,cAAL,GAAsBL,wBAAYC,IAAZ,gCAEpBf,aAFoB,EAGpB,eAHoB,CAAtB;AAKA,UAAKoB,aAAL,GAAqBN,wBAAYC,IAAZ,gCAAuBd,YAAvB,EAAqC,cAArC,CAArB;AACA,UAAKoB,oBAAL,GAA4BP,wBAAYC,IAAZ,gCAE1Bb,mBAF0B,EAG1B,qBAH0B,CAA5B;AAKA,UAAKoB,QAAL,GAAgBR,wBAAYC,IAAZ,gCAAuBZ,OAAvB,EAAgC,SAAhC,CAAhB;AACA,UAAKoB,WAAL,GAAmBnB,UAAnB;AACA,UAAKoB,gBAAL,GAAwBnB,eAAxB;AACA,UAAKoB,eAAL,GAAuBlB,cAAvB;AACA,UAAKmB,aAAL,GAAqBpB,YAArB;AACA,UAAKqB,yBAAL,GAAiCnB,wBAAjC;AACA,UAAKoB,WAAL,aAAsB,MAAKC,KAA3B;;AACA,UAAKT,aAAL,CAAmBU,gBAAnB,CAAoC,UAACC,MAAD,EAAY;AAC9C,YAAKC,0BAAL,CAAgCD,MAAhC;AACD,KAFD;;AAGA,UAAKT,QAAL,CAAcW,eAAd,CAA8B;AAC5BC,MAAAA,GAAG,EAAE,MAAKN,WADkB;AAE5BO,MAAAA,OAAO,EAAE,gCAAe,MAAKxB,WAApB;AAFmB,KAA9B;;AAKA,UAAKK,eAAL,CAAqBoB,cAArB,CAAoC;AAClCC,MAAAA,YAAY,EAAE;AAAA,eAAM,MAAKC,aAAX;AAAA,OADoB;AAElCC,MAAAA,YAAY,EAAE;AAAA,eAAM,MAAKnB,aAAL,CAAmBoB,KAAnB,IAA4B,MAAKrB,cAAL,CAAoBqB,KAAtD;AAAA;AAFoB,KAApC;;AAIA,UAAKvB,oBAAL,CAA0BmB,cAA1B,CAAyC;AACvCC,MAAAA,YAAY,EAAE;AAAA,eAAM,MAAKI,kBAAX;AAAA,OADyB;AAEvCF,MAAAA,YAAY,EAAE;AAAA,eAAM,MAAKnB,aAAL,CAAmBoB,KAAnB,IAA4B,MAAKrB,cAAL,CAAoBqB,KAAtD;AAAA;AAFyB,KAAzC;;AAKA,UAAKE,gCAAL,GAAwC,IAAxC;AACA,UAAKC,aAAL,GAAqB,EAArB;AACA,UAAKC,eAAL,GAAuB,IAAvB;AA5DC;AA6DF;;;;kCAEa;AACZ,aACE,KAAKC,OAAL,IACA,KAAK7B,eAAL,CAAqBwB,KADrB,IAEA,KAAKvB,oBAAL,CAA0BuB,KAF1B,IAGA,KAAKtB,eAAL,CAAqBsB,KAHrB,IAIA,KAAKrB,cAAL,CAAoBqB,KAJpB,IAKA,KAAKpB,aAAL,CAAmBoB,KALnB,IAMA,KAAKnB,oBAAL,CAA0BmB,KAN1B,IAOA,KAAKlB,QAAL,CAAckB,KAPd,KAQC,CAAC,KAAKjB,WAAN,IAAqB,KAAKA,WAAL,CAAiBiB,KARvC,KASA,KAAKM,mBAAL,EAVF;AAYD;;;mCAEc;AACb,aACE,KAAKN,KAAL,KACC,CAAC,KAAKxB,eAAL,CAAqBwB,KAAtB,IACC,CAAC,KAAKvB,oBAAL,CAA0BuB,KAD5B,IAEC,CAAC,KAAKtB,eAAL,CAAqBsB,KAFvB,IAGC,CAAC,KAAKrB,cAAL,CAAoBqB,KAHtB,IAIC,CAAC,KAAKpB,aAAL,CAAmBoB,KAJrB,IAKC,CAAC,KAAKnB,oBAAL,CAA0BmB,KAL5B,IAMC,CAAC,KAAKlB,QAAL,CAAckB,KANhB,IAOE,KAAKjB,WAAL,IAAoB,CAAC,KAAKA,WAAL,CAAiBiB,KAPxC,IAQC,CAAC,KAAKM,mBAAL,EATH,CADF;AAYD;;;+BAEU;AACT,WAAKC,2BAAL,GAAmC,IAAnC;AACA,WAAKC,YAAL,GAAoB,IAApB;AACA,WAAKJ,eAAL,GAAuB,IAAvB;AACA,WAAKD,aAAL,GAAqB,EAArB;AACD;;;;;;;;;;;;AAGSM,gBAAAA,O,GAAY,KAAKpC,K,CAAjBoC,O;;uBACF,uBAAM,GAAN,C;;;sBACFA,OAAO,KAAK,KAAKpC,KAAL,CAAWoC,O;;;;;;;;;uBACrBC,OAAO,CAACC,GAAR,CACJ,KAAKR,aAAL,CACGS,MADH,CACU,CADV,EACa,EADb,EAEGC,GAFH,CAEO,UAAC/D,YAAD;AAAA,yBAAkB,MAAI,CAACgE,uBAAL,CAA6B;AAAEhE,oBAAAA,YAAY,EAAZA;AAAF,mBAA7B,CAAlB;AAAA,iBAFP,CADI,C;;;AAKN,oBAAI2D,OAAO,KAAK,KAAKpC,KAAL,CAAWoC,OAAvB,IAAkC,KAAKN,aAAL,CAAmBY,MAAnB,GAA4B,CAAlE,EAAqE;AACnE,uBAAKX,eAAL,GAAuB,KAAKY,aAAL,EAAvB;AACD,iBAFD,MAEO;AACL,uBAAKZ,eAAL,GAAuB,IAAvB;AACD;;;;;;;;;;;;;;;;;;qDAGyC;AAAA,UAAhBtD,YAAgB,SAAhBA,YAAgB;;AAC1C,WAAKqD,aAAL,CAAmBc,IAAnB,CAAwBnE,YAAxB;;AACA,UAAI,CAAC,KAAKsD,eAAV,EAA2B;AACzB,aAAKA,eAAL,GAAuB,KAAKY,aAAL,EAAvB;AACD;AACF;;;6CAEwBlE,Y,EAAc;AAAA;;AACrC,aACGA,YAAY,CAACoE,cAAb,IACCpE,YAAY,CAACoE,cAAb,CAA4BC,MAA5B,CAAmC,UAACC,MAAD,EAASC,OAAT,EAAqB;AACtD,YAAMC,MAAM,GAAGD,OAAO,CAACE,WAAR,IAAuBF,OAAO,CAACG,eAA9C;AACA,eAAOF,MAAM,IAAI,MAAI,CAAC9C,eAAL,CAAqBiD,WAArB,CAAiCH,MAAjC,CAAV,GACHF,MAAM,CAACM,MAAP,CAAc,MAAI,CAAClD,eAAL,CAAqBiD,WAArB,CAAiCH,MAAjC,CAAd,CADG,GAEHF,MAFJ;AAGD,OALD,EAKG,EALH,CADF,IAOA,EARF;AAUD;;;sDAEiCtE,Y,EAAc;AAAA;;AAC9C,UAAM6E,eAAe,GAAG,KAAKC,kBAAL,CACtB9E,YAAY,CAACH,cADS,CAAxB;;AAGA,UAAI,CAACgF,eAAL,EAAsB;AACpB,eAAO,IAAP;AACD;;AACD,UAAME,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYJ,eAAZ,EAChBd,GADgB,CACZ,UAACjE,IAAD;AAAA,eAAU,MAAI,CAACgF,kBAAL,CAAwB9E,YAAY,CAACH,cAArC,EAAqDC,IAArD,CAAV;AAAA,OADY,EAEhBoF,IAFgB,CAEXC,yBAFW,EAGhBC,IAHgB,CAGX,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,sBAAL,CAA4BrB,MAA5B,GAAqC,CAA/C;AAAA,OAHW,CAAnB;;AAIA,UACEc,UAAU,IACV,KAAKpD,oBAAL,CAA0BgD,WAA1B,CAAsCI,UAAU,CAAC9E,iBAAjD,CADA,IAEA,KAAK0B,oBAAL,CAA0BgD,WAA1B,CAAsCI,UAAU,CAAC9E,iBAAjD,EAAoEgE,MAHtE,EAIE;AACA,YAAMsB,YAAY,GAAG,KAAK5D,oBAAL,CAA0BgD,WAA1B,CACnBI,UAAU,CAAC9E,iBADQ,EAEnB,CAFmB,CAArB;;AAGA,YAAMuF,oBAAoB,GAAG,KAAKC,wBAAL,CAA8BV,UAA9B,CAA7B;;AACA,eAAOS,oBAAoB,CAACJ,IAArB,CAA0B,UAACC,IAAD;AAAA,iBAC/B,MAAI,CAACnD,gBAAL,CAAsBlC,YAAtB,EAAoCuF,YAApC,EAAkDF,IAAlD,CAD+B;AAAA,SAA1B,CAAP;AAGD;;AACD,aAAO,IAAP;AACD;;;;;;;;;;AAE+BrF,gBAAAA,Y,SAAAA,Y;;uBAExB,KAAK2B,oBAAL,CAA0B+D,KAA1B,CAAgC;AACpCC,kBAAAA,OAAO,EAAE,CAAC3F,YAAY,CAACC,iBAAd;AAD2B,iBAAhC,C;;;sBAIJ,KAAKmC,aAAL,IACA,KAAKT,oBAAL,CAA0BgD,WAA1B,CAAsC3E,YAAY,CAACC,iBAAnD,CADA,IAEA,KAAK0B,oBAAL,CAA0BgD,WAA1B,CAAsC3E,YAAY,CAACC,iBAAnD,EACGgE,M;;;;;;uBAGG,KAAK2B,oBAAL,CAA0B;AAC9B5F,kBAAAA,YAAY,EAAZA;AAD8B,iBAA1B,C;;;;;;;sBAGG,KAAK6F,OAAL,IAAgB7F,YAAY,CAAC8F,IAAb,KAAsBC,yBAAaC,G;;;;;AAI5D;AACSC,gBAAAA,a,GAAT,SAASA,aAAT,CAAuB1B,OAAvB,EAAgC;AAC9B,sBAAMC,MAAM,GAAGD,OAAO,CAACE,WAAR,IAAuBF,OAAO,CAACG,eAA9C;;AACA,sBAAIF,MAAM,IAAI,CAAC0B,SAAS,CAAC1B,MAAD,CAAxB,EAAkC;AAChC2B,oBAAAA,OAAO,CAAChC,IAAR,CAAaK,MAAb;AACA0B,oBAAAA,SAAS,CAAC1B,MAAD,CAAT,GAAoB,IAApB;AACD;AACF,iB;;AAVD;AACM2B,gBAAAA,O,GAAU,E;AACVD,gBAAAA,S,GAAY,E;AASlBD,gBAAAA,aAAa,CAACjG,YAAY,CAACoG,IAAd,CAAb;AACApG,gBAAAA,YAAY,CAACoE,cAAb,CAA4BiC,OAA5B,CAAoCJ,aAApC;;uBACM,KAAKvE,eAAL,CAAqBgE,KAArB,CAA2B;AAAEC,kBAAAA,OAAO,EAAEQ;AAAX,iBAA3B,C;;;AACAG,gBAAAA,U,GACJtG,YAAY,CAACoG,IAAb,KACCpG,YAAY,CAACoG,IAAb,CAAkB3B,WAAlB,IAAiCzE,YAAY,CAACoG,IAAb,CAAkB1B,eADpD,C;AAEI6B,gBAAAA,W,GACHD,UAAU,IAAI,KAAK5E,eAAL,CAAqBiD,WAArB,CAAiC3E,YAAY,CAACoG,IAA9C,CAAf,IACA,E;AACIZ,gBAAAA,oB,GAAuB,KAAKC,wBAAL,CAA8BzF,YAA9B,C;AAEvBwG,gBAAAA,U,GACHD,WAAW,IAAIA,WAAW,CAACtC,MAAZ,KAAuB,CAAtC,IAA2CsC,WAAW,CAAC,CAAD,CAAvD,IAA+D,I;AAE7DE,gBAAAA,mB,GAAsB,KAAKC,iCAAL,CACxB1G,YADwB,C;AAI1ByG,gBAAAA,mBAAmB,GACjBA,mBAAmB,IAClBjB,oBAAoB,IACnBA,oBAAoB,CAACvB,MAArB,KAAgC,CADjC,IAECuB,oBAAoB,CAAC,CAAD,CAHtB,IAIA,IALF;;uBAMM,KAAKI,oBAAL,CAA0B;AAC9B5F,kBAAAA,YAAY,EAAZA,YAD8B;AAE9BwG,kBAAAA,UAAU,EAAVA,UAF8B;AAG9BC,kBAAAA,mBAAmB,EAAnBA;AAH8B,iBAA1B,C;;;;;;;;;;;;;;;;;;sDAQ+B;AACvC,aACE,CAAC,KAAKpE,yBAAN,IAAmC,KAAKA,yBAAL,uBADrC;AAGD;;;iDAE4B;AAAA;;AAC3B,UAAI,KAAKa,KAAL,IAAc,KAAKQ,YAAL,KAAsB,KAAKmC,OAA7C,EAAsD;AACpD,aAAKnC,YAAL,GAAoB,KAAKmC,OAAzB;;AACA,YAAI,KAAKA,OAAT,EAAkB;AAChB;AACA,eAAKpC,2BAAL,GAAmC,IAAnC;AACD;AACF;;AACD,UACE,KAAKP,KAAL,IACA,KAAKO,2BAAL,KAAqC,KAAKqB,kBAF5C,EAGE;AACA,aAAKnD,oBAAL,CAA0BgF,YAA1B;;AACA,aAAKjF,eAAL,CAAqBiF,YAArB;;AACA,YAAMC,MAAM,GAAG,KAAKnD,2BAAL,IAAoC,EAAnD;AACA,aAAKA,2BAAL,GAAmC,KAAKqB,kBAAxC;;AACA,YAAI,CAAC,KAAK7C,WAAN,IAAqB,KAAKA,WAAL,CAAiB4E,MAA1C,EAAkD;AAChD7B,UAAAA,MAAM,CAACC,IAAP,CAAY,KAAKxB,2BAAjB,EAA8C4C,OAA9C,CACE,UAACxG,cAAD,EAAoB;AAClBmF,YAAAA,MAAM,CAACC,IAAP,CACE,MAAI,CAACxB,2BAAL,CAAiC5D,cAAjC,CADF,EAEEwG,OAFF,CAEU,UAACvG,IAAD,EAAU;AAClB,kBAAME,YAAY,GAAG,MAAI,CAACyD,2BAAL,CACnB5D,cADmB,EAEnBC,IAFmB,CAArB;;AAGA,kBACE,CAAC8G,MAAM,CAAC/G,cAAD,CAAP,IACA,CAAC+G,MAAM,CAAC/G,cAAD,CAAN,CAAuBC,IAAvB,CADD,IAEAE,YAAY,CAAC8G,QAAb,CAAsB,CAAtB,EAAyBC,EAAzB,KACEH,MAAM,CAAC/G,cAAD,CAAN,CAAuBC,IAAvB,EAA6BgH,QAA7B,CAAsC,CAAtC,EAAyCC,EAJ7C,EAKE;AACA,oBAAI,MAAI,CAACC,+BAAL,CAAqChH,YAArC,CAAJ,EAAwD;AACtD,kBAAA,MAAI,CAACiH,yBAAL,CAA+B;AAC7BjH,oBAAAA,YAAY,EAAZA;AAD6B,mBAA/B;AAGD;AACF;AACF,aAlBD;AAmBD,WArBH;AAuBD;AACF;AACF;;;;;;;;;;AAGCA,gBAAAA,Y,SAAAA,Y,EACAwG,U,SAAAA,U,EACAC,mB,SAAAA,mB;;uBAEM,KAAKS,GAAL,CAAS;AACblH,kBAAAA,YAAY,EAAZA,YADa;AAEbwG,kBAAAA,UAAU,EAAVA,UAFa;AAGbC,kBAAAA,mBAAmB,EAAnBA;AAHa,iBAAT,C;;;;;;;;;;;;;;;;;;;;;;;;;AAQIzG,gBAAAA,Y,SAAAA,Y,EAAiBmB,O;;AAC3B;AAAYkE,kBAAAA,IAAI,EAAErF;AAAlB,mBAAmCmB,OAAnC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKAtB,gBAAAA,c,SAAAA,c,EACA4G,mB,SAAAA,mB,EACAU,Q,SAAAA,Q,EACGhG,O;;qBAEC,KAAK2D,kBAAL,CAAwBjF,cAAxB,C;;;;;;uBACI+D,OAAO,CAACC,GAAR,CACJmB,MAAM,CAACC,IAAP,CAAY,KAAKH,kBAAL,CAAwBjF,cAAxB,CAAZ,EACGkE,GADH,CACO,UAACjE,IAAD;AAAA,yBAAU,MAAI,CAACgF,kBAAL,CAAwBjF,cAAxB,EAAwCC,IAAxC,CAAV;AAAA,iBADP,EAEGoF,IAFH,CAEQC,yBAFR,EAGGpB,GAHH,CAGO,UAAC/D,YAAD,EAAeoH,GAAf,EAAuB;AAC1B,sBAAMC,UAAU,GAAG,MAAI,CAAChE,aAAL,CAAmB+B,IAAnB,CACjB,UAACC,IAAD;AAAA,2BACEA,IAAI,CAACpF,iBAAL,KAA2BD,YAAY,CAACC,iBAD1C;AAAA,mBADiB,CAAnB;;AAIA,sBAAIoH,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACnB,oBAAA,MAAI,CAAChE,aAAL,CAAmBS,MAAnB,CAA0BuD,UAA1B,EAAsC,CAAtC;AACD;;AACD,yBAAO,MAAI,CAACH,GAAL,iCACF/F,OADE;AAELnB,oBAAAA,YAAY,EAAZA,YAFK;AAGLyG,oBAAAA,mBAAmB,EAAnBA,mBAHK;AAILU,oBAAAA,QAAQ,EAAEA,QAAQ,IAAIC,GAAG,KAAK,CAJzB,CAI4B;;AAJ5B,qBAAP;AAMD,iBAjBH,CADI,C;;;;;;;;;;;;;;;;;;;kGAuCOvB,O;;;;;AACf,oBAAI,KAAK3C,KAAL,IAAc2C,OAAO,KAAK,KAAKA,OAAnC,EAA4C;AAC1C,uBAAKyB,KAAL,CAAWC,QAAX,CAAoB;AAClBzB,oBAAAA,IAAI,EAAE,KAAKzE,WAAL,CAAiBmG,UADL;AAElB3B,oBAAAA,OAAO,EAAPA;AAFkB,mBAApB;AAID;;;;;;;;;;;;;;;;;;yCAsFkB4B,O,EAAS;AAC5B,UAAI,CAACA,OAAL,EAAc;AACZ;AACD;;AAH2B,UAIpB5H,cAJoB,GAID4H,OAJC,CAIpB5H,cAJoB;;AAK5B,UAAMC,IAAI,GAAG,KAAKqC,eAAL,CAAqB;AAChC2D,QAAAA,IAAI,EAAE,MAD0B;AAEhC4B,QAAAA,YAAY,EAAED,OAAO,CAACE;AAFU,OAArB,CAAb;;AAIA,aAAO/H,QAAQ,CAAC;AACdC,QAAAA,cAAc,EAAdA,cADc;AAEdC,QAAAA,IAAI,EAAJA;AAFc,OAAD,CAAf;AAID;;;wBAzHe;AAAA,kCAIV,KAAKiC,oBAAL,CAA0B6F,eAJhB;AAAA,UAEZC,YAFY,yBAEZA,YAFY;AAAA,UAGZC,cAHY,yBAGZA,cAHY;AAKd,aAAO,CAAC,EACLD,YAAY,IAAIA,YAAY,CAACE,OAA9B,IACCD,cAAc,IAAIA,cAAc,CAACC,OAF5B,CAAR;AAID;;;wBAEa;AACZ,aAAO,KAAK/F,QAAL,CAAcgG,OAAd,CAAsB,KAAK1F,WAA3B,EAAwCuD,OAA/C;AACD;;;wBA8GiB;AAChB,aAAO,KAAKlE,oBAAL,CAA0BgD,WAAjC;AACD;;;;EA3d6CsD,uB,iEA0T7CC,mB,mJAKAA,mB,0JA8CAA,mB,2KAUAC,kB;;;;;;;WACoB,CACnB;AAAA,aAAM,MAAI,CAACrG,aAAL,CAAmBsG,iBAAzB;AAAA,KADmB,EAEnB;AAAA,aAAM,MAAI,CAACvG,cAAL,CAAoB6C,eAA1B;AAAA,KAFmB,EAGnB;AAAA,aAAM,MAAI,CAAC/C,oBAAL,CAA0BgD,WAAhC;AAAA,KAHmB,EAInB,UAACyD,iBAAD,EAAoB1D,eAApB,EAAqE;AAAA,UAAhC2D,sBAAgC,uEAAP,EAAO;AACnE,UAAMvB,QAAQ,GAAG9B,MAAM,CAACsD,MAAP,CAAcF,iBAAd,EAAiC/D,MAAjC,CACf,UAACkE,WAAD,EAAczB,QAAd;AAAA,4CAA+ByB,WAA/B,sBAA+CzB,QAA/C;AAAA,OADe,EAEf,EAFe,CAAjB;AAIA,UAAM0B,OAAO,GAAG,EAAhB;AACA1B,MAAAA,QAAQ,CACL2B,KADH,GAEGvD,IAFH,CAEQC,yBAFR,EAGGkB,OAHH,CAGW,UAACoB,OAAD,EAAa;AAAA,YACZ5H,cADY,GACO4H,OADP,CACZ5H,cADY;;AAEpB,YAAMC,IAAI,GAAG,MAAI,CAACqC,eAAL,CAAqB;AAChC2D,UAAAA,IAAI,EAAE,MAD0B;AAEhC4B,UAAAA,YAAY,EAAED,OAAO,CAACE;AAFU,SAArB,CAAb;;AAIA,YAAI,CAACa,OAAO,CAAC3I,cAAD,CAAZ,EAA8B;AAC5B2I,UAAAA,OAAO,CAAC3I,cAAD,CAAP,GAA0B,EAA1B;AACD;;AACD,YAAI,CAAC2I,OAAO,CAAC3I,cAAD,CAAP,CAAwBC,IAAxB,CAAL,EAAoC;AAClC,cAAMG,iBAAiB,GAAGL,QAAQ,CAAC;AAAEC,YAAAA,cAAc,EAAdA,cAAF;AAAkBC,YAAAA,IAAI,EAAJA;AAAlB,WAAD,CAAlC;AACA0I,UAAAA,OAAO,CAAC3I,cAAD,CAAP,CAAwBC,IAAxB;AACEG,YAAAA,iBAAiB,EAAjBA,iBADF;AAEEJ,YAAAA,cAAc,EAAdA,cAFF;AAGE8H,YAAAA,YAAY,EAAEF,OAAO,CAACE,YAHxB;AAGsC;AACpC7H,YAAAA,IAAI,EAAJA,IAJF;AAKEgG,YAAAA,IAAI,EAAE2B,OAAO,CAAC3B,IALhB;AAMEgB,YAAAA,QAAQ,EAAE,EANZ;AAOExB,YAAAA,sBAAsB,EACpB+C,sBAAsB,CAACpI,iBAAD,CAAtB,IAA6C;AARjD,aASK,0CAAsB;AAAEyE,YAAAA,eAAe,EAAfA,eAAF;AAAmB+C,YAAAA,OAAO,EAAPA;AAAnB,WAAtB,CATL;AAWD;;AACDe,QAAAA,OAAO,CAAC3I,cAAD,CAAP,CAAwBC,IAAxB,EAA8BgH,QAA9B,CAAuC3C,IAAvC,CAA4CsD,OAA5C;AACD,OA3BH;AA4BA,aAAOe,OAAP;AACD,KAvCkB,C;;uFA0CpBL,kB;;;;;;;WACoB,CACnB;AAAA,aAAM,MAAI,CAACrD,kBAAX;AAAA,KADmB,EAEnB,UAACA,kBAAD,EAAwB;AACtB,UAAM4D,MAAM,GAAG,EAAf;AACA1D,MAAAA,MAAM,CAACC,IAAP,CAAYH,kBAAZ,EAAgCuB,OAAhC,CAAwC,UAACxG,cAAD,EAAoB;AAC1DmF,QAAAA,MAAM,CAACC,IAAP,CAAYH,kBAAkB,CAACjF,cAAD,CAA9B,EAAgDwG,OAAhD,CAAwD,UAACvG,IAAD,EAAU;AAChE4I,UAAAA,MAAM,CAACvE,IAAP,CACEW,kBAAkB,CAACjF,cAAD,CAAlB,CAAmCC,IAAnC,EAAyCG,iBAD3C;AAGD,SAJD;AAKD,OAND;AAOA,aAAOyI,MAAP;AACD,KAZkB,C;;kFAepBP,kB;;;;;;;WACe,CACd;AAAA,aAAM,MAAI,CAACrD,kBAAX;AAAA,KADc,EAEd,UAACA,kBAAD,EAAwB;AACtB,UAAM6D,MAAM,GAAG,EAAf;AACA,UAAMzC,SAAS,GAAG,EAAlB;;AACA,eAASD,aAAT,GAAqC;AAAA,YAAd1B,OAAc,uEAAJ,EAAI;AACnC,YAAMC,MAAM,GAAGD,OAAO,CAACE,WAAR,IAAuBF,OAAO,CAACG,eAA9C;;AACA,YAAIF,MAAM,IAAI,CAAC0B,SAAS,CAAC1B,MAAD,CAAxB,EAAkC;AAChCmE,UAAAA,MAAM,CAACxE,IAAP,CAAYK,MAAZ;AACA0B,UAAAA,SAAS,CAAC1B,MAAD,CAAT,GAAoB,IAApB;AACD;AACF;;AACDQ,MAAAA,MAAM,CAACC,IAAP,CAAYH,kBAAZ,EAAgCuB,OAAhC,CAAwC,UAACxG,cAAD,EAAoB;AAC1DmF,QAAAA,MAAM,CAACC,IAAP,CAAYH,kBAAkB,CAACjF,cAAD,CAA9B,EAAgDwG,OAAhD,CAAwD,UAACvG,IAAD,EAAU;AAChE,cAAME,YAAY,GAAG8E,kBAAkB,CAACjF,cAAD,CAAlB,CAAmCC,IAAnC,CAArB;AACAmG,UAAAA,aAAa,CAACjG,YAAY,CAACoG,IAAd,CAAb;AACApG,UAAAA,YAAY,CAACoE,cAAb,CAA4BiC,OAA5B,CAAoCJ,aAApC;AACD,SAJD;AAKD,OAND;AAOA,aAAO0C,MAAP;AACD,KApBa,C","sourcesContent":["import { Module } from '../../lib/di';\nimport LoggerBase from '../../lib/LoggerBase';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\nimport messageTypes from '../../enums/messageTypes';\nimport { getNumbersFromMessage, sortByDate } from '../../lib/messageHelper';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\nimport { selector } from '../../lib/selector';\n\nexport function getLogId({ conversationId, date }) {\n  return `${conversationId}/${date}`;\n}\n\nexport function conversationLogIdentityFunction(conversation) {\n  return conversation.conversationLogId;\n}\n\n/**\n * @class\n * @description Conversation logger module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Storage',\n    { dep: 'TabManager', optional: true },\n    'ContactMatcher',\n    'ConversationMatcher',\n    'DateTimeFormat',\n    'ExtensionInfo',\n    'MessageStore',\n    'RolesAndPermissions',\n    { dep: 'ConversationLoggerOptions', optional: false },\n  ],\n})\nexport default class ConversationLogger extends LoggerBase {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {ConversationMatcher} params.conversationMatcher - conversationMatcher module instance\n   * @param {DateTimeFormat} params.dateTimeFormat - dateTimeFormat module instance\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermissions module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   * @param {Function} params.isLoggedContact - get if contact is logged\n   * @param {Function} params.formatDateTime - data time format\n   */\n  constructor({\n    auth,\n    contactMatcher,\n    conversationMatcher,\n    dateTimeFormat,\n    extensionInfo,\n    messageStore,\n    rolesAndPermissions,\n    storage,\n    tabManager,\n    isLoggedContact = () => false,\n    isAutoUpdate = true,\n    formatDateTime = (...args) => dateTimeFormat.formatDateTime(...args),\n    accordWithLogRequirement,\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'conversationLogger',\n      actionTypes,\n      identityFunction: conversationLogIdentityFunction,\n    });\n    this._auth = ensureExist.call(this, auth, 'auth');\n    this._contactMatcher = ensureExist.call(\n      this,\n      contactMatcher,\n      'contactMatcher',\n    );\n    this._conversationMatcher = ensureExist.call(\n      this,\n      conversationMatcher,\n      'conversationMatcher',\n    );\n    this._dateTimeFormat = ensureExist.call(\n      this,\n      dateTimeFormat,\n      'dateTimeFormat',\n    );\n    this._extensionInfo = ensureExist.call(\n      this,\n      extensionInfo,\n      'extensionInfo',\n    );\n    this._messageStore = ensureExist.call(this, messageStore, 'messageStore');\n    this._rolesAndPermissions = ensureExist.call(\n      this,\n      rolesAndPermissions,\n      'rolesAndPermissions',\n    );\n    this._storage = ensureExist.call(this, storage, 'storage');\n    this._tabManager = tabManager;\n    this._isLoggedContact = isLoggedContact;\n    this._formatDateTime = formatDateTime;\n    this._isAutoUpdate = isAutoUpdate;\n    this._accordWithLogRequirement = accordWithLogRequirement;\n    this._storageKey = `${this._name}Data`;\n    this._messageStore.onMessageUpdated((record) => {\n      this._processConversationLogMap(record);\n    });\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this._contactMatcher.addQuerySource({\n      getQueriesFn: () => this.uniqueNumbers,\n      readyCheckFn: () => this._messageStore.ready && this._extensionInfo.ready,\n    });\n    this._conversationMatcher.addQuerySource({\n      getQueriesFn: () => this.conversationLogIds,\n      readyCheckFn: () => this._messageStore.ready && this._extensionInfo.ready,\n    });\n\n    this._lastProcessedConversationLogMap = null;\n    this._autoLogQueue = [];\n    this._autoLogPromise = null;\n  }\n\n  _shouldInit() {\n    return (\n      this.pending &&\n      this._contactMatcher.ready &&\n      this._conversationMatcher.ready &&\n      this._dateTimeFormat.ready &&\n      this._extensionInfo.ready &&\n      this._messageStore.ready &&\n      this._rolesAndPermissions.ready &&\n      this._storage.ready &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._readyCheckFunction()\n    );\n  }\n\n  _shouldReset() {\n    return (\n      this.ready &&\n      (!this._contactMatcher.ready ||\n        !this._conversationMatcher.ready ||\n        !this._dateTimeFormat.ready ||\n        !this._extensionInfo.ready ||\n        !this._messageStore.ready ||\n        !this._rolesAndPermissions.ready ||\n        !this._storage.ready ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._readyCheckFunction())\n    );\n  }\n\n  _onReset() {\n    this._lastProcessedConversations = null;\n    this._lastAutoLog = null;\n    this._autoLogPromise = null;\n    this._autoLogQueue = [];\n  }\n\n  async _processQueue() {\n    const { ownerId } = this._auth;\n    await sleep(300);\n    if (ownerId !== this._auth.ownerId) return;\n    await Promise.all(\n      this._autoLogQueue\n        .splice(0, 10)\n        .map((conversation) => this._processConversationLog({ conversation })),\n    );\n    if (ownerId === this._auth.ownerId && this._autoLogQueue.length > 0) {\n      this._autoLogPromise = this._processQueue();\n    } else {\n      this._autoLogPromise = null;\n    }\n  }\n\n  _queueAutoLogConversation({ conversation }) {\n    this._autoLogQueue.push(conversation);\n    if (!this._autoLogPromise) {\n      this._autoLogPromise = this._processQueue();\n    }\n  }\n\n  _getCorrespondentMatches(conversation) {\n    return (\n      (conversation.correspondents &&\n        conversation.correspondents.reduce((result, contact) => {\n          const number = contact.phoneNumber || contact.extensionNumber;\n          return number && this._contactMatcher.dataMapping[number]\n            ? result.concat(this._contactMatcher.dataMapping[number])\n            : result;\n        }, [])) ||\n      []\n    );\n  }\n\n  getLastMatchedCorrespondentEntity(conversation) {\n    const conversationLog = this.conversationLogMap[\n      conversation.conversationId\n    ];\n    if (!conversationLog) {\n      return null;\n    }\n    const lastRecord = Object.keys(conversationLog)\n      .map((date) => this.conversationLogMap[conversation.conversationId][date])\n      .sort(sortByDate)\n      .find((item) => item.conversationLogMatches.length > 0);\n    if (\n      lastRecord &&\n      this._conversationMatcher.dataMapping[lastRecord.conversationLogId] &&\n      this._conversationMatcher.dataMapping[lastRecord.conversationLogId].length\n    ) {\n      const lastActivity = this._conversationMatcher.dataMapping[\n        lastRecord.conversationLogId\n      ][0];\n      const correspondentMatches = this._getCorrespondentMatches(lastRecord);\n      return correspondentMatches.find((item) =>\n        this._isLoggedContact(conversation, lastActivity, item),\n      );\n    }\n    return null;\n  }\n\n  async _processConversationLog({ conversation }) {\n    // await this._conversationMatcher.triggerMatch();\n    await this._conversationMatcher.match({\n      queries: [conversation.conversationLogId],\n    });\n    if (\n      this._isAutoUpdate &&\n      this._conversationMatcher.dataMapping[conversation.conversationLogId] &&\n      this._conversationMatcher.dataMapping[conversation.conversationLogId]\n        .length\n    ) {\n      // update conversation\n      await this._autoLogConversation({\n        conversation,\n      });\n    } else if (this.autoLog && conversation.type === messageTypes.sms) {\n      // new entry\n      const numbers = [];\n      const numberMap = {};\n      /* eslint { \"no-inner-declarations\": 0 } */\n      function addIfNotExist(contact) {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        if (number && !numberMap[number]) {\n          numbers.push(number);\n          numberMap[number] = true;\n        }\n      }\n      addIfNotExist(conversation.self);\n      conversation.correspondents.forEach(addIfNotExist);\n      await this._contactMatcher.match({ queries: numbers });\n      const selfNumber =\n        conversation.self &&\n        (conversation.self.phoneNumber || conversation.self.extensionNumber);\n      const selfMatches =\n        (selfNumber && this._contactMatcher.dataMapping[conversation.self]) ||\n        [];\n      const correspondentMatches = this._getCorrespondentMatches(conversation);\n\n      const selfEntity =\n        (selfMatches && selfMatches.length === 1 && selfMatches[0]) || null;\n\n      let correspondentEntity = this.getLastMatchedCorrespondentEntity(\n        conversation,\n      );\n\n      correspondentEntity =\n        correspondentEntity ||\n        (correspondentMatches &&\n          correspondentMatches.length === 1 &&\n          correspondentMatches[0]) ||\n        null;\n      await this._autoLogConversation({\n        conversation,\n        selfEntity,\n        correspondentEntity,\n      });\n    }\n  }\n\n  accordWithProcessLogRequirement(...rest) {\n    return (\n      !this._accordWithLogRequirement || this._accordWithLogRequirement(...rest)\n    );\n  }\n\n  _processConversationLogMap() {\n    if (this.ready && this._lastAutoLog !== this.autoLog) {\n      this._lastAutoLog = this.autoLog;\n      if (this.autoLog) {\n        // force conversation log checking when switch auto log to on\n        this._lastProcessedConversations = null;\n      }\n    }\n    if (\n      this.ready &&\n      this._lastProcessedConversations !== this.conversationLogMap\n    ) {\n      this._conversationMatcher.triggerMatch();\n      this._contactMatcher.triggerMatch();\n      const oldMap = this._lastProcessedConversations || {};\n      this._lastProcessedConversations = this.conversationLogMap;\n      if (!this._tabManager || this._tabManager.active) {\n        Object.keys(this._lastProcessedConversations).forEach(\n          (conversationId) => {\n            Object.keys(\n              this._lastProcessedConversations[conversationId],\n            ).forEach((date) => {\n              const conversation = this._lastProcessedConversations[\n                conversationId\n              ][date];\n              if (\n                !oldMap[conversationId] ||\n                !oldMap[conversationId][date] ||\n                conversation.messages[0].id !==\n                  oldMap[conversationId][date].messages[0].id\n              ) {\n                if (this.accordWithProcessLogRequirement(conversation)) {\n                  this._queueAutoLogConversation({\n                    conversation,\n                  });\n                }\n              }\n            });\n          },\n        );\n      }\n    }\n  }\n\n  async _autoLogConversation({\n    conversation,\n    selfEntity,\n    correspondentEntity,\n  }) {\n    await this.log({\n      conversation,\n      selfEntity,\n      correspondentEntity,\n    });\n  }\n\n  @proxify\n  async log({ conversation, ...options }) {\n    super.log({ item: conversation, ...options });\n  }\n\n  @proxify\n  async logConversation({\n    conversationId,\n    correspondentEntity,\n    redirect,\n    ...options\n  }) {\n    if (this.conversationLogMap[conversationId]) {\n      await Promise.all(\n        Object.keys(this.conversationLogMap[conversationId])\n          .map((date) => this.conversationLogMap[conversationId][date])\n          .sort(sortByDate)\n          .map((conversation, idx) => {\n            const queueIndex = this._autoLogQueue.find(\n              (item) =>\n                item.conversationLogId === conversation.conversationLogId,\n            );\n            if (queueIndex > -1) {\n              this._autoLogQueue.splice(queueIndex, 1);\n            }\n            return this.log({\n              ...options,\n              conversation,\n              correspondentEntity,\n              redirect: redirect && idx === 0, // only direct on the first item\n            });\n          }),\n      );\n    }\n  }\n\n  get available() {\n    const {\n      SMSReceiving,\n      PagerReceiving,\n    } = this._rolesAndPermissions.serviceFeatures;\n    return !!(\n      (SMSReceiving && SMSReceiving.enabled) ||\n      (PagerReceiving && PagerReceiving.enabled)\n    );\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  @proxify\n  async setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  @selector\n  conversationLogMap = [\n    () => this._messageStore.conversationStore,\n    () => this._extensionInfo.extensionNumber,\n    () => this._conversationMatcher.dataMapping,\n    (conversationStore, extensionNumber, conversationLogMapping = {}) => {\n      const messages = Object.values(conversationStore).reduce(\n        (allMessages, messages) => [...allMessages, ...messages],\n        [],\n      );\n      const mapping = {};\n      messages\n        .slice()\n        .sort(sortByDate)\n        .forEach((message) => {\n          const { conversationId } = message;\n          const date = this._formatDateTime({\n            type: 'date',\n            utcTimestamp: message.creationTime,\n          });\n          if (!mapping[conversationId]) {\n            mapping[conversationId] = {};\n          }\n          if (!mapping[conversationId][date]) {\n            const conversationLogId = getLogId({ conversationId, date });\n            mapping[conversationId][date] = {\n              conversationLogId,\n              conversationId,\n              creationTime: message.creationTime, // for sorting\n              date,\n              type: message.type,\n              messages: [],\n              conversationLogMatches:\n                conversationLogMapping[conversationLogId] || [],\n              ...getNumbersFromMessage({ extensionNumber, message }),\n            };\n          }\n          mapping[conversationId][date].messages.push(message);\n        });\n      return mapping;\n    },\n  ];\n\n  @selector\n  conversationLogIds = [\n    () => this.conversationLogMap,\n    (conversationLogMap) => {\n      const logIds = [];\n      Object.keys(conversationLogMap).forEach((conversationId) => {\n        Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n          logIds.push(\n            conversationLogMap[conversationId][date].conversationLogId,\n          );\n        });\n      });\n      return logIds;\n    },\n  ];\n\n  @selector\n  uniqueNumbers = [\n    () => this.conversationLogMap,\n    (conversationLogMap) => {\n      const output = [];\n      const numberMap = {};\n      function addIfNotExist(contact = {}) {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        if (number && !numberMap[number]) {\n          output.push(number);\n          numberMap[number] = true;\n        }\n      }\n      Object.keys(conversationLogMap).forEach((conversationId) => {\n        Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n          const conversation = conversationLogMap[conversationId][date];\n          addIfNotExist(conversation.self);\n          conversation.correspondents.forEach(addIfNotExist);\n        });\n      });\n      return output;\n    },\n  ];\n\n  getConversationLogId(message) {\n    if (!message) {\n      return;\n    }\n    const { conversationId } = message;\n    const date = this._formatDateTime({\n      type: 'date',\n      utcTimestamp: message.creationTime,\n    });\n    return getLogId({\n      conversationId,\n      date,\n    });\n  }\n\n  get dataMapping() {\n    return this._conversationMatcher.dataMapping;\n  }\n}\n"],"file":"index.js"}