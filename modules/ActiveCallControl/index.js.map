{"version":3,"sources":["modules/ActiveCallControl/index.js"],"names":["DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","DEFAULT_BUSY_TIMEOUT","telephonySessionsEndPoint","storageKey","subscribeEvent","ActiveCallControl","deps","dep","optional","client","auth","ttl","timeToRetry","storage","subscription","connectivityMonitor","rolesAndPermissions","availabilityMonitor","tabManager","callMonitor","polling","disableCache","alert","numberValidate","accountInfo","extensionInfo","options","actionTypes","_updateSessionsHandler","store","dispatch","type","updateActiveSessions","timestamp","Date","now","sessionDatas","_rcCallControl","sessions","map","s","data","_client","_storage","_subscription","ensureExist","_connectivityMonitor","_rolesAndPermissions","_availabilityMonitor","_callMonitor","_tabManager","_ttl","_timeToRetry","_auth","_promise","_lastSubscriptionMessage","_storageKey","_polling","_alert","_numberValidate","_accountInfo","_extensionInfo","_reducer","registerReducer","key","reducer","subscribe","_onStateChange","_shouldInit","init","_connectivity","connectivity","_init","initSuccess","_shouldReset","_resetModuleStatus","ready","_hasPermission","_subscriptionHandler","_checkConnectivity","_checkTabActive","loggedIn","pending","resetSuccess","active","_fetchData","_syncData","_startPolling","_retry","t","_clearTimeout","_timeoutId","setTimeout","fetchData","activeCalls","calls","loadSessions","forEach","session","_newSessionHandler","RingCentralCallControl","sdk","service","preloadDevices","preloadSessions","info","account","on","_tabActive","_shouldFetch","removeListener","message","test","event","body","onNotificationEvent","removeActiveSession","telephonySessionId","setActiveSessionId","restoreSessions","activeSessions","mute","find","id","muteSuccess","warning","callControlError","muteConflictError","checkIfHAError","generalError","muteError","unmute","unmuteSuccess","unMuteConflictError","unmuteError","recordingId","getRecordingId","resumeRecord","createRecord","recording","recordings","recodingId","pauseRecord","activeSession","getActiveSession","stopRecord","hangUp","drop","_onCallEndFunc","hangUpSuccess","hangUpError","reject","toVoicemail","rejectSuccess","rejectError","hold","holdSuccess","holdConflictError","holdError","unhold","unholdSuccess","unHoldConflictError","transferNumber","transfer","validateNumbers","validatedResult","result","errors","error","callErrors","payload","phoneNumber","transferError","validPhoneNumber","numbers","e164","indexOf","mainCompanyNumber","join","transferSuccess","flipValue","flip","callFlipId","flipSuccess","flipError","ringoutEnabled","getItem","state","activeSessionId","busy","status","moduleStatuses","Pollable","selector","sessionId","_t","accumulator","call","reduce"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,KAAK,EAAL,GAAU,IAA9B;AACA,IAAMC,qBAAqB,GAAG,KAAK,IAAnC;AACA,IAAMC,oBAAoB,GAAG,IAAI,IAAjC;AACA,IAAMC,yBAAyB,GAAG,wBAAlC;AACA,IAAMC,UAAU,GAAG,mBAAnB;AACA,IAAMC,cAAc,GAAG,2CAAvB;IAoBqBC,iB,WAlBpB,gBAAO;AACNC,EAAAA,IAAI,EAAE,CACJ,QADI,EAEJ,MAFI,EAGJ,cAHI,EAIJ,qBAJI,EAKJ,qBALI,EAMJ,aANI,EAOJ,OAPI,EAQJ,gBARI,EASJ,aATI,EAUJ,eAVI,EAWJ;AAAEC,IAAAA,GAAG,EAAE,YAAP;AAAqBC,IAAAA,QAAQ,EAAE;AAA/B,GAXI,EAYJ;AAAED,IAAAA,GAAG,EAAE,SAAP;AAAkBC,IAAAA,QAAQ,EAAE;AAA5B,GAZI,EAaJ;AAAED,IAAAA,GAAG,EAAE,0BAAP;AAAmCC,IAAAA,QAAQ,EAAE;AAA7C,GAbI,EAcJ;AAAED,IAAAA,GAAG,EAAE,qBAAP;AAA8BC,IAAAA,QAAQ,EAAE;AAAxC,GAdI;AADA,CAAP,C;;;;;AAmBC,mCAmBG;AAAA;;AAAA;;AAAA,QAlBDC,MAkBC,QAlBDA,MAkBC;AAAA,QAjBDC,IAiBC,QAjBDA,IAiBC;AAAA,wBAhBDC,GAgBC;AAAA,QAhBDA,GAgBC,yBAhBKZ,WAgBL;AAAA,gCAfDa,WAeC;AAAA,QAfDA,WAeC,iCAfaZ,qBAeb;AAAA,QAdDa,OAcC,QAdDA,OAcC;AAAA,QAbDC,YAaC,QAbDA,YAaC;AAAA,QAZDC,mBAYC,QAZDA,mBAYC;AAAA,QAXDC,mBAWC,QAXDA,mBAWC;AAAA,QAVDC,mBAUC,QAVDA,mBAUC;AAAA,QATDC,UASC,QATDA,UASC;AAAA,QARDC,WAQC,QARDA,WAQC;AAAA,4BAPDC,OAOC;AAAA,QAPDA,OAOC,6BAPS,KAOT;AAAA,iCANDC,YAMC;AAAA,QANDA,YAMC,kCANc,KAMd;AAAA,QALDC,KAKC,QALDA,KAKC;AAAA,QAJDC,cAIC,QAJDA,cAIC;AAAA,QAHDC,WAGC,QAHDA,WAGC;AAAA,QAFDC,aAEC,QAFDA,aAEC;AAAA,QADEC,OACF;;AAAA;;AACD,8DACKA,OADL;AAEEC,MAAAA,WAAW,EAAXA;AAFF;;AADC,UA6MHC,sBA7MG,GA6MsB,YAAM;AAC7B,YAAKC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,QAAAA,IAAI,EAAE,MAAKJ,WAAL,CAAiBK,oBADL;AAElBC,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAFO;AAGlBC,QAAAA,YAAY,EAAE,MAAKC,cAAL,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAACC,IAAT;AAAA,SAAjC;AAHI,OAApB;AAKD,KAnNE;;AAAA;;AAAA;;AAAA;;AAKD,UAAKC,OAAL,GAAejC,MAAf;;AACA,QAAI,CAACY,YAAL,EAAmB;AACjB,YAAKsB,QAAL,GAAgB9B,OAAhB;AACD;;AACD,UAAK+B,aAAL,GAAqB,2CAAMC,uBAAN,iBAAkB/B,YAAlB,EAAgC,cAAhC,CAArB;AACA,UAAKgC,oBAAL,GAA4B,2CAAMD,uBAAN,iBAC1B9B,mBAD0B,EAE1B,qBAF0B,CAA5B;AAIA,UAAKgC,oBAAL,GAA4B,2CAAMF,uBAAN,iBAC1B7B,mBAD0B,EAE1B,qBAF0B,CAA5B;AAIA,UAAKgC,oBAAL,GAA4B/B,mBAA5B;AACA,UAAKgC,YAAL,GAAoB,2CAAMJ,uBAAN,iBAAkB1B,WAAlB,EAA+B,aAA/B,CAApB;AACA,UAAK+B,WAAL,GAAmBhC,UAAnB;AACA,UAAKiC,IAAL,GAAYxC,GAAZ;AACA,UAAKyC,YAAL,GAAoBxC,WAApB;AACA,UAAKyC,KAAL,GAAa,2CAAMR,uBAAN,iBAAkBnC,IAAlB,EAAwB,MAAxB,CAAb;AACA,UAAK4C,QAAL,GAAgB,IAAhB;AACA,UAAKC,wBAAL,GAAgC,IAAhC;AACA,UAAKC,WAAL,GAAmBrD,UAAnB;AACA,UAAKsD,QAAL,GAAgBrC,OAAhB;AACA,UAAKsC,MAAL,GAAcpC,KAAd;AACA,UAAKqC,eAAL,GAAuBpC,cAAvB;AACA,UAAKqC,YAAL,GAAoBpC,WAApB;AACA,UAAKqC,cAAL,GAAsBpC,aAAtB;AACA,UAAKY,cAAL,GAAsB,IAAtB;;AAEA,QAAI,MAAKM,QAAT,EAAmB;AACjB,YAAKmB,QAAL,GAAgB,6CAA4B,MAAKnC,WAAjC,CAAhB;;AACA,YAAKgB,QAAL,CAAcoB,eAAd,CAA8B;AAC5BC,QAAAA,GAAG,EAAE,MAAKR,WADkB;AAE5BS,QAAAA,OAAO,EAAE,gCAAe,MAAKtC,WAApB;AAFmB,OAA9B;AAID,KAND,MAMO;AACL,YAAKmC,QAAL,GAAgB,6CAA4B,MAAKnC,WAAjC,EAA8C;AAC5Dc,QAAAA,IAAI,EAAE,gCAAe,MAAKd,WAApB;AADsD,OAA9C,CAAhB;AAGD;;AA5CA;AA6CF;;;;iCAEY;AAAA;;AACX,WAAKE,KAAL,CAAWqC,SAAX,CAAqB;AAAA,eAAM,MAAI,CAACC,cAAL,EAAN;AAAA,OAArB;AACD;;;;;;;;;qBAGK,KAAKC,WAAL,E;;;;;AACF,qBAAKvC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB0C;AADL,iBAApB;AAGA,qBAAKC,aAAL,GAAqB,KAAKxB,oBAAL,CAA0ByB,YAA/C;;uBACM,KAAKC,KAAL,E;;;AACN,qBAAK3C,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB8C;AADL,iBAApB;;;;;AAGK,oBAAI,KAAKC,YAAL,EAAJ,EAAyB;AAC9B,uBAAKC,kBAAL;AACD,iBAFM,MAEA,IAAI,KAAKC,KAAL,IAAc,KAAKC,cAAvB,EAAuC;AAC5C,uBAAKC,oBAAL;;AACA,uBAAKC,kBAAL;;AACA,uBAAKC,eAAL;AACD;;;;;;;;;;;;;;;;;;kCAGW;AACZ,aACE,KAAK3B,KAAL,CAAW4B,QAAX,IACA,KAAKrB,YAAL,CAAkBgB,KADlB,IAEA,KAAKf,cAAL,CAAoBe,KAFpB,KAGC,CAAC,KAAKjC,QAAN,IAAkB,KAAKA,QAAL,CAAciC,KAHjC,KAIA,KAAKhC,aAAL,CAAmBgC,KAJnB,IAKA,KAAK9B,oBAAL,CAA0B8B,KAL1B,IAMA,KAAK3B,YAAL,CAAkB2B,KANlB,KAOC,CAAC,KAAK1B,WAAN,IAAqB,KAAKA,WAAL,CAAiB0B,KAPvC,KAQA,KAAK7B,oBAAL,CAA0B6B,KAR1B,KASC,CAAC,KAAK5B,oBAAN,IAA8B,KAAKA,oBAAL,CAA0B4B,KATzD,KAUA,KAAKM,OAXP;AAaD;;;mCAEc;AACb,aACE,CAAC,CAAC,KAAK7B,KAAL,CAAW4B,QAAZ,IACC,CAAC,KAAKrB,YAAL,CAAkBgB,KADpB,IAEC,CAAC,KAAKf,cAAL,CAAoBe,KAFtB,IAGE,CAAC,CAAC,KAAKjC,QAAP,IAAmB,CAAC,KAAKA,QAAL,CAAciC,KAHpC,IAIC,CAAC,KAAKhC,aAAL,CAAmBgC,KAJrB,IAKE,CAAC,CAAC,KAAK1B,WAAP,IAAsB,CAAC,KAAKA,WAAL,CAAiB0B,KAL1C,IAMC,CAAC,KAAK9B,oBAAL,CAA0B8B,KAN5B,IAOC,CAAC,KAAK3B,YAAL,CAAkB2B,KAPpB,IAQC,CAAC,KAAK7B,oBAAL,CAA0B6B,KAR5B,IASE,CAAC,CAAC,KAAK5B,oBAAP,IAA+B,CAAC,KAAKA,oBAAL,CAA0B4B,KAT7D,KAUA,KAAKA,KAXP;AAaD;;;yCAEoB;AACnB,WAAK/C,KAAL,CAAWC,QAAX,CAAoB;AAClBC,QAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBwD;AADL,OAApB;AAGD;;;mCAMc;AACb,aAAO,CAAC,KAAKjC,WAAN,IAAqB,KAAKA,WAAL,CAAiBkC,MAA7C;AACD;;;;;;;;;AAGC,oBAAI,CAAC,KAAK9B,QAAV,EAAoB;AAClB,uBAAKA,QAAL,GAAgB,KAAK+B,UAAL,EAAhB;AACD;;;uBACK,KAAK/B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;uBAKH,KAAKgC,SAAL,E;;;AACN,oBAAI,KAAK7B,QAAT,EAAmB;AACjB,uBAAK8B,aAAL;AACD;;AACD,qBAAKjC,QAAL,GAAgB,IAAhB;;;;;;;AAEA,qBAAKA,QAAL,GAAgB,IAAhB;;AACA,oBAAI,KAAKG,QAAT,EAAmB;AACjB,uBAAK8B,aAAL,CAAmB,KAAK3E,WAAxB;AACD,iBAFD,MAEO;AACL,uBAAK4E,MAAL;AACD;;;;;;;;;;;;;;;;;;;;oCAK0D;AAAA;;AAAA,UAAjDC,CAAiD,uEAA7C,KAAKxD,SAAL,GAAiB,KAAKtB,GAAtB,GAA4B,EAA5B,GAAiCuB,IAAI,CAACC,GAAL,EAAY;;AAC7D,WAAKuD,aAAL;;AACA,WAAKC,UAAL,GAAkBC,UAAU,CAAC,YAAM;AACjC,QAAA,MAAI,CAACD,UAAL,GAAkB,IAAlB;;AACA,YAAI,CAAC,MAAI,CAACzC,WAAN,IAAqB,MAAI,CAACA,WAAL,CAAiBkC,MAA1C,EAAkD;AAChD,cAAI,CAAC,MAAI,CAACnD,SAAN,IAAmBC,IAAI,CAACC,GAAL,KAAa,MAAI,CAACF,SAAlB,GAA8B,MAAI,CAACtB,GAA1D,EAA+D;AAC7D,YAAA,MAAI,CAACkF,SAAL;AACD,WAFD,MAEO;AACL,YAAA,MAAI,CAACN,aAAL;AACD;AACF,SAND,MAMO,IAAI,MAAI,CAACtD,SAAL,IAAkBC,IAAI,CAACC,GAAL,KAAa,MAAI,CAACF,SAAlB,GAA8B,MAAI,CAACtB,GAAzD,EAA8D;AACnE,UAAA,MAAI,CAAC4E,aAAL;AACD,SAFM,MAEA;AACL,UAAA,MAAI,CAACA,aAAL,CAAmB,MAAI,CAAC3E,WAAxB;AACD;AACF,OAb2B,EAazB6E,CAbyB,CAA5B;AAcD;;;;;;;;;;;;;AAISK,gBAAAA,W,GAAc,KAAK7C,YAAL,CAAkB8C,K;;uBAChC,KAAK1D,cAAL,CAAoB2D,YAApB,CAAiCF,WAAjC,C;;;AACN,qBAAKjE,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBK,oBADL;AAElBC,kBAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAFO;AAGlBC,kBAAAA,YAAY,EAAE,KAAKC,cAAL,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,UAACC,CAAD;AAAA,2BAAOA,CAAC,CAACC,IAAT;AAAA,mBAAjC;AAHI,iBAApB;;AAKA,qBAAKJ,cAAL,CAAoBC,QAApB,CAA6B2D,OAA7B,CAAqC,UAACC,OAAD,EAAa;AAChD,kBAAA,MAAI,CAACC,kBAAL,CAAwBD,OAAxB;AACD,iBAFD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASG,KAAKrB,c;;;;;;;;AACV,qBAAKjC,aAAL,CAAmBsB,SAAnB,CAA6B9D,cAA7B;;AACA,qBAAKiC,cAAL,GAAsB,IAAI+D,8CAAJ,CAA2B;AAC/CC,kBAAAA,GAAG,EAAE,KAAK3D,OAAL,CAAa4D,OAD6B;AAE/CC,kBAAAA,cAAc,EAAE,KAF+B;AAG/CC,kBAAAA,eAAe,EAAE,KAH8B;AAI/C/E,kBAAAA,aAAa,kCACR,KAAKoC,cAAL,CAAoB4C,IADZ;AAEXC,oBAAAA,OAAO,EAAE,KAAK9C,YAAL,CAAkB6C;AAFhB;AAJkC,iBAA3B,CAAtB;;AASA,qBAAKpE,cAAL,CAAoBsE,EAApB,CAAuB,KAAvB,EAA8B,UAACT,OAAD,EAAa;AACzC,kBAAA,MAAI,CAACC,kBAAL,CAAwBD,OAAxB;AACD,iBAFD;;AAGA,qBAAKU,UAAL,GAAkB,KAAK1D,WAAL,CAAiBkC,MAAnC;;qBACI,KAAKyB,YAAL,E;;;;;;;uBAEM,KAAKhB,SAAL,E;;;;;;;;;;AAEN,qBAAKL,MAAL;;;;;;;AAEG,oBAAI,KAAK/B,QAAT,EAAmB;AACxB,uBAAK8B,aAAL;AACD,iBAFM,MAEA;AACL,uBAAKC,MAAL;AACD;;;;;;;;;;;;;;;;;;uCAWgBU,O,EAAS;AAC1B,WAAKtE,sBAAL;;AACAsE,MAAAA,OAAO,CAACY,cAAR,CAAuB,QAAvB,EAAiC,KAAKlF,sBAAtC;AACAsE,MAAAA,OAAO,CAACY,cAAR,CAAuB,OAAvB,EAAgC,KAAKlF,sBAArC;AACAsE,MAAAA,OAAO,CAACY,cAAR,CAAuB,YAAvB,EAAqC,KAAKlF,sBAA1C;AACAsE,MAAAA,OAAO,CAACS,EAAR,CAAW,QAAX,EAAqB,KAAK/E,sBAA1B;AACAsE,MAAAA,OAAO,CAACS,EAAR,CAAW,OAAX,EAAoB,KAAK/E,sBAAzB;AACAsE,MAAAA,OAAO,CAACS,EAAR,CAAW,YAAX,EAAyB,KAAK/E,sBAA9B;AACD;;;2CAEsB;AACrB,UACE,CAAC,KAAKgD,KAAN,IACC,KAAKjC,QAAL,IAAiB,KAAKO,WAAtB,IAAqC,CAAC,KAAKA,WAAL,CAAiBkC,MAF1D,EAGE;AACA;AACD;;AANoB,UAOb2B,OAPa,GAOD,KAAKnE,aAPJ,CAObmE,OAPa;;AAQrB,UACEA,OAAO,IACPA,OAAO,KAAK,KAAKxD,wBADjB,IAEArD,yBAAyB,CAAC8G,IAA1B,CAA+BD,OAAO,CAACE,KAAvC,CAFA,IAGAF,OAAO,CAACG,IAJV,EAKE;AACA,aAAK3D,wBAAL,GAAgCwD,OAAhC;;AACA,YAAI,KAAK1E,cAAT,EAAyB;AACvB,eAAKA,cAAL,CAAoB8E,mBAApB,CAAwCJ,OAAxC;AACD;AACF;AACF;;;0CAEqB;AACpB,WAAKlF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,QAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiByF;AADL,OAApB;AAGD,K,CAED;;;;uCACmBC,kB,EAAoB;AACrC,WAAKxF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,QAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB2F,kBADL;AAElBD,QAAAA,kBAAkB,EAAlBA;AAFkB,OAApB;AAID;;;yCAEoB;AACnB,UACE,KAAKvE,oBAAL,IACA,KAAKA,oBAAL,CAA0B8B,KAD1B,IAEA,KAAKN,aAAL,KAAuB,KAAKxB,oBAAL,CAA0ByB,YAHnD,EAIE;AACA,aAAKD,aAAL,GAAqB,KAAKxB,oBAAL,CAA0ByB,YAA/C;;AACA,YAAI,KAAKD,aAAT,EAAwB;AACtB,eAAKuB,SAAL;AACD;AACF;AACF;;;sCAEiB;AAAA;;AAChB,UAAI,CAAC,KAAK3C,WAAN,IAAqB,CAAC,KAAKP,QAA/B,EAAyC;AACvC;AACD;;AACD,UAAI,KAAKiE,UAAL,KAAoB,KAAK1D,WAAL,CAAiBkC,MAAzC,EAAiD;AAC/C,aAAKwB,UAAL,GAAkB,KAAK1D,WAAL,CAAiBkC,MAAnC;;AACA,YAAI,KAAKlC,WAAL,CAAiBkC,MAAjB,IAA2B,KAAK/C,cAApC,EAAoD;AAClD,eAAKA,cAAL,CAAoBkF,eAApB,CAAoC,KAAK9E,IAAL,CAAUH,QAA9C;;AACA,eAAKD,cAAL,CAAoBC,QAApB,CAA6B2D,OAA7B,CAAqC,UAACC,OAAD,EAAa;AAChD,YAAA,MAAI,CAACC,kBAAL,CAAwBD,OAAxB;AACD,WAFD;AAGD;AACF;AACF;;;qCAEgBmB,kB,EAAoB;AACnC,aAAO,KAAKG,cAAL,CAAoBH,kBAApB,CAAP;AACD;;;;4FAEUA,kB;;;;;;AACT,qBAAKxF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB8F,IADL;AAElBxF,kBAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAFO,iBAApB;;AAKQ+D,gBAAAA,O,GAAU,KAAK7D,cAAL,CAAoBC,QAApB,CAA6BoF,IAA7B,CACd,UAAClF,CAAD;AAAA,yBAAOA,CAAC,CAACmF,EAAF,KAASN,kBAAhB;AAAA,iBADc,C;;uBAGVnB,OAAO,CAACuB,IAAR,E;;;AACN,qBAAK5F,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBiG;AADL,iBAApB;;;;;;;;AAIA,oBAAI,wCAAJ,EAAyB;AACvB,uBAAKlE,MAAL,CAAYmE,OAAZ,CAAoB;AAClBd,oBAAAA,OAAO,EAAEe,6BAAiBC;AADR,mBAApB;AAGD,iBAJD,MAIO,IACL,CAAC,KAAK/E,oBAAN,IACA,CAAC,KAAKA,oBAAL,CAA0BgF,cAA1B,cAFI,EAGL;AACA,uBAAKtE,MAAL,CAAYmE,OAAZ,CAAoB;AAAEd,oBAAAA,OAAO,EAAEe,6BAAiBG;AAA5B,mBAApB;AACD;;AACD,qBAAKpG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBuG;AADL,iBAApB;;;;;;;;;;;;;;;;;;;8FAMSb,kB;;;;;;AACX,qBAAKxF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBwG,MADL;AAElBlG,kBAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAFO,iBAApB;;AAKQ+D,gBAAAA,O,GAAU,KAAK7D,cAAL,CAAoBC,QAApB,CAA6BoF,IAA7B,CACd,UAAClF,CAAD;AAAA,yBAAOA,CAAC,CAACmF,EAAF,KAASN,kBAAhB;AAAA,iBADc,C;;uBAGVnB,OAAO,CAACiC,MAAR,E;;;AACN,qBAAKtG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiByG;AADL,iBAApB;;;;;;;;AAIA,oBAAI,wCAAJ,EAAyB;AACvB,uBAAK1E,MAAL,CAAYmE,OAAZ,CAAoB;AAClBd,oBAAAA,OAAO,EAAEe,6BAAiBO;AADR,mBAApB;AAGD,iBAJD,MAIO,IACL,CAAC,KAAKrF,oBAAN,IACA,CAAC,KAAKA,oBAAL,CAA0BgF,cAA1B,cAFI,EAGL;AACA,uBAAKtE,MAAL,CAAYmE,OAAZ,CAAoB;AAAEd,oBAAAA,OAAO,EAAEe,6BAAiBG;AAA5B,mBAApB;AACD;;AACD,qBAAKpG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB2G;AADL,iBAApB;;;;;;;;;;;;;;;;;;;mGAMcjB,kB;;;;;;;AAERnB,gBAAAA,O,GAAU,KAAK7D,cAAL,CAAoBC,QAApB,CAA6BoF,IAA7B,CACd,UAAClF,CAAD;AAAA,yBAAOA,CAAC,CAACmF,EAAF,KAASN,kBAAhB;AAAA,iBADc,C;AAGVkB,gBAAAA,W,GAAc,KAAKC,cAAL,CAAoBtC,OAApB,C;;qBAChBqC,W;;;;;;uBACIrC,OAAO,CAACuC,YAAR,CAAqBF,WAArB,C;;;;;;;;uBAEArC,OAAO,CAACwC,YAAR,CAAqBH,WAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;mCAUGrC,O,EAAS;AACtB,UAAMyC,SAAS,GAAGzC,OAAO,CAAC0C,UAAR,CAAmB,CAAnB,CAAlB;AACA,UAAMC,UAAU,GAAGF,SAAS,IAAIA,SAAS,CAAChB,EAA1C;AACA,aAAOkB,UAAP;AACD;;;;kGAEgBxB,kB;;;;;;;AAEPnB,gBAAAA,O,GAAU,KAAK7D,cAAL,CAAoBC,QAApB,CAA6BoF,IAA7B,CACd,UAAClF,CAAD;AAAA,yBAAOA,CAAC,CAACmF,EAAF,KAASN,kBAAhB;AAAA,iBADc,C;AAGVkB,gBAAAA,W,GAAc,KAAKC,cAAL,CAAoBtC,OAApB,C;;uBACdA,OAAO,CAAC4C,WAAR,CAAoBP,WAApB,C;;;AACAQ,gBAAAA,a,GAAgB,KAAKC,gBAAL,CAAsB3B,kBAAtB,C;AACtB,qBAAKxF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBsH,UADL;AAElBF,kBAAAA,aAAa,EAAbA;AAFkB,iBAApB;;;;;;;;;;;;;;;;;;;;;;;;;;+FASS1B,kB;;;;;;AACX,qBAAKxF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBuH,MADL;AAElBjH,kBAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAFO,iBAApB;;AAKQ+D,gBAAAA,O,GAAU,KAAK7D,cAAL,CAAoBC,QAApB,CAA6BoF,IAA7B,CACd,UAAClF,CAAD;AAAA,yBAAOA,CAAC,CAACmF,EAAF,KAASN,kBAAhB;AAAA,iBADc,C;;uBAGVnB,OAAO,CAACiD,IAAR,E;;;AACN,oBAAI,OAAO,KAAKC,cAAZ,KAA+B,UAAnC,EAA+C;AAC7C,uBAAKA,cAAL;AACD;;AACD,qBAAKvH,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB0H;AADL,iBAApB;;;;;;;;AAIA,oBACE,CAAC,KAAKrG,oBAAN,IACA,CAAC,KAAKA,oBAAL,CAA0BgF,cAA1B,eAFH,EAGE;AACA,uBAAKtE,MAAL,CAAYmE,OAAZ,CAAoB;AAAEd,oBAAAA,OAAO,EAAEe,6BAAiBG;AAA5B,mBAApB;AACD;;AAED,qBAAKpG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB2H;AADL,iBAApB;;;;;;;;;;;;;;;;;;;+FAMSjC,kB;;;;;;AACX,qBAAKxF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB4H,MADL;AAElBtH,kBAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAFO,iBAApB;;AAKQ+D,gBAAAA,O,GAAU,KAAK7D,cAAL,CAAoBC,QAApB,CAA6BoF,IAA7B,CACd,UAAClF,CAAD;AAAA,yBAAOA,CAAC,CAACmF,EAAF,KAASN,kBAAhB;AAAA,iBADc,C;;uBAGVnB,OAAO,CAACsD,WAAR,E;;;AACN,qBAAK3H,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB8H;AADL,iBAApB;;;;;;;;AAIA,oBACE,CAAC,KAAKzG,oBAAN,IACA,CAAC,KAAKA,oBAAL,CAA0BgF,cAA1B,eAFH,EAGE;AACA,uBAAKtE,MAAL,CAAYmE,OAAZ,CAAoB;AAAEd,oBAAAA,OAAO,EAAEe,6BAAiBG;AAA5B,mBAApB;AACD;;AACD,qBAAKpG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB+H;AADL,iBAApB;;;;;;;;;;;;;;;;;;;6FAMOrC,kB;;;;;;AACT,qBAAKxF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBgI,IADL;AAElB1H,kBAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAFO,iBAApB;;AAKQ+D,gBAAAA,O,GAAU,KAAK7D,cAAL,CAAoBC,QAApB,CAA6BoF,IAA7B,CACd,UAAClF,CAAD;AAAA,yBAAOA,CAAC,CAACmF,EAAF,KAASN,kBAAhB;AAAA,iBADc,C;;uBAGVnB,OAAO,CAACyD,IAAR,E;;;AACN,qBAAK9H,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBiI;AADL,iBAApB;;;;;;;;AAIA,oBAAI,yCAAJ,EAAyB;AACvB,uBAAKlG,MAAL,CAAYmE,OAAZ,CAAoB;AAClBd,oBAAAA,OAAO,EAAEe,6BAAiB+B;AADR,mBAApB;AAGD,iBAJD,MAIO,IACL,CAAC,KAAK7G,oBAAN,IACA,CAAC,KAAKA,oBAAL,CAA0BgF,cAA1B,eAFI,EAGL;AACA,uBAAKtE,MAAL,CAAYmE,OAAZ,CAAoB;AAAEd,oBAAAA,OAAO,EAAEe,6BAAiBG;AAA5B,mBAApB;AACD;;AAED,qBAAKpG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBmI;AADL,iBAApB;;;;;;;;;;;;;;;;;;;+FAMSzC,kB;;;;;;AACX,qBAAKxF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBoI,MADL;AAElB9H,kBAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAFO,iBAApB;;AAKQ+D,gBAAAA,O,GAAU,KAAK7D,cAAL,CAAoBC,QAApB,CAA6BoF,IAA7B,CACd,UAAClF,CAAD;AAAA,yBAAOA,CAAC,CAACmF,EAAF,KAASN,kBAAhB;AAAA,iBADc,C;;uBAGVnB,OAAO,CAAC6D,MAAR,E;;;AACN,qBAAKlI,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBqI;AADL,iBAApB;;;;;;;;AAIA,oBAAI,yCAAJ,EAAyB;AACvB,uBAAKtG,MAAL,CAAYmE,OAAZ,CAAoB;AAClBd,oBAAAA,OAAO,EAAEe,6BAAiBmC;AADR,mBAApB;AAGD,iBAJD,MAIO,IACL,CAAC,KAAKjH,oBAAN,IACA,CAAC,KAAKA,oBAAL,CAA0BgF,cAA1B,eAFI,EAGL;AACA,uBAAKtE,MAAL,CAAYmE,OAAZ,CAAoB;AAClBd,oBAAAA,OAAO,EAAEe,6BAAiBG;AADR,mBAApB;AAGD;;AACD,qBAAKpG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBmI;AADL,iBAApB;;;;;;;;;;;;;;;;;;;iGAMWI,c,EAAgB7C,kB;;;;;;;;AAC7B,qBAAKxF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBwI,QADL;AAElBlI,kBAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAFO,iBAApB;;AAKQ+D,gBAAAA,O,GAAU,KAAK7D,cAAL,CAAoBC,QAApB,CAA6BoF,IAA7B,CACd,UAAClF,CAAD;AAAA,yBAAOA,CAAC,CAACmF,EAAF,KAASN,kBAAhB;AAAA,iBADc,C;;uBAGc,KAAK1D,eAAL,CAAqByG,eAArB,CAAqC,CACjEF,cADiE,CAArC,C;;;AAAxBG,gBAAAA,e;;oBAGDA,eAAe,CAACC,M;;;;;AACnBD,gBAAAA,eAAe,CAACE,MAAhB,CAAuBtE,OAAvB,CAA+B,UAACuE,KAAD,EAAW;AACxC,sBACE,CAAC,MAAI,CAACxH,oBAAN,IACA,CAAC,MAAI,CAACA,oBAAL,CAA0BgF,cAA1B,CAAyCwC,KAAzC,CAFH,EAGE;AACA,oBAAA,MAAI,CAAC9G,MAAL,CAAYmE,OAAZ,CAAoB;AAClBd,sBAAAA,OAAO,EAAE0D,uBAAWD,KAAK,CAACzI,IAAjB,CADS;AAElB2I,sBAAAA,OAAO,EAAE;AACPC,wBAAAA,WAAW,EAAEH,KAAK,CAACG;AADZ;AAFS,qBAApB;AAMD;AACF,iBAZD;AAaA,qBAAK9I,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBiJ;AADL,iBAApB;;;;AAKIC,gBAAAA,gB,GACJR,eAAe,CAACS,OAAhB,CAAwB,CAAxB,KAA8BT,eAAe,CAACS,OAAhB,CAAwB,CAAxB,EAA2BC,I;AACvDJ,gBAAAA,W,GAAcE,gB;;AAClB,oBAAIA,gBAAgB,CAACG,OAAjB,CAAyB,GAAzB,MAAkC,CAAC,CAAvC,EAA0C;AACxCL,kBAAAA,WAAW,GAAG,CACZ,KAAK/G,YAAL,CAAkBqH,iBADN,EAEZJ,gBAFY,EAGZK,IAHY,CAGP,GAHO,CAAd;AAID;;AACDhF,gBAAAA,OAAO,CAACiE,QAAR,CAAiB;AAAEQ,kBAAAA,WAAW,EAAXA;AAAF,iBAAjB;AACA,qBAAK9I,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBwJ;AADL,iBAApB;;;;;;;;AAIA,oBACE,CAAC,KAAKnI,oBAAN,IACA,CAAC,KAAKA,oBAAL,CAA0BgF,cAA1B,eAFH,EAGE;AACA,uBAAKtE,MAAL,CAAYmE,OAAZ,CAAoB;AAAEd,oBAAAA,OAAO,EAAEe,6BAAiBG;AAA5B,mBAApB;AACD;;AACD,qBAAKpG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBiJ;AADL,iBAApB;;;;;;;;;;;;;;;QAMJ;;;;;6FACWQ,S,EAAW/D,kB;;;;;;AACpB,qBAAKxF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB0J,IADL;AAElBpJ,kBAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAFO,iBAApB;;AAKQ+D,gBAAAA,O,GAAU,KAAK7D,cAAL,CAAoBC,QAApB,CAA6BoF,IAA7B,CACd,UAAClF,CAAD;AAAA,yBAAOA,CAAC,CAACmF,EAAF,KAASN,kBAAhB;AAAA,iBADc,C;;uBAGVnB,OAAO,CAACmF,IAAR,CAAa;AAAEC,kBAAAA,UAAU,EAAEF;AAAd,iBAAb,C;;;AACN,qBAAKvJ,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB4J;AADL,iBAApB;;;;;;;AAIA,qBAAK1J,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiB6J;AADL,iBAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBA3diB;AACnB,aAAO,KAAKzI,oBAAL,CAA0B0I,cAAjC;AACD;;;wBAqeU;AACT,aACG,KAAK9I,QAAL,IACC,KAAKA,QAAL,CAAciC,KADf,IAEC,KAAKjC,QAAL,CAAc+I,OAAd,CAAsB,KAAKlI,WAA3B,CAFF,IAGA,KAAKmI,KAJP;AAMD;;;wBAEqB;AACpB,aAAO,KAAKlJ,IAAL,CAAUmJ,eAAV,IAA6B,IAApC;AACD;AAED;;;;;;;;wBAKW;AACT,aAAO1J,IAAI,CAACC,GAAL,KAAa,KAAKM,IAAL,CAAUoJ,IAAvB,GAA8B5L,oBAArC;AACD;;;wBAEe;AACd,aAAO,KAAKwC,IAAL,CAAUR,SAAjB;AACD;;;wBAEiB;AAChB,aAAO,KAAKmB,YAAZ;AACD;;;wBAES;AACR,aAAO,KAAKD,IAAZ;AACD;;;wBAEY;AACX,aAAO,KAAKwI,KAAL,CAAWG,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKA,MAAL,KAAgBC,2BAAenH,KAAtC;AACD;;;;EA/oB4CoH,qB,yFAipB5CC,kB;;;;;;;WACe,CACd;AAAA,aAAM,MAAI,CAACL,eAAX;AAAA,KADc,EAEd;AAAA,aAAM,MAAI,CAACpE,cAAX;AAAA,KAFc,EAGd,UAAC0E,SAAD;AAAA,aAAe,MAAI,CAAClD,gBAAL,CAAsBkD,SAAtB,CAAf;AAAA,KAHc,C;;mFAMfD,kB;;;;;;;WACgB,CACf;AAAA,aAAM,MAAI,CAAChJ,YAAL,CAAkB8C,KAAxB;AAAA,KADe,EAEf;AAAA,aAAM,MAAI,CAACtD,IAAL,CAAUH,QAAhB;AAAA,KAFe,EAGf;AAAA,aAAM,MAAI,CAACL,SAAX;AAAA,KAHe,EAIf,UAAC8D,KAAD,EAAQzD,QAAR,EAAkB6J,EAAlB,EAAyB;AACvB,UAAMlI,OAAO,GAAG,SAAVA,OAAU,CAACmI,WAAD,EAAcC,IAAd,EAAuB;AAAA,YAC7BhF,kBAD6B,GACNgF,IADM,CAC7BhF,kBAD6B;AAErC,YAAMnB,OAAO,GAAG5D,QAAQ,CAACoF,IAAT,CAAc,UAAClF,CAAD;AAAA,iBAAOA,CAAC,CAACmF,EAAF,KAASN,kBAAhB;AAAA,SAAd,CAAhB;;AACA,YAAI,CAACnB,OAAL,EAAc;AACZ,iBAAOkG,WAAP;AACD;;AACDA,QAAAA,WAAW,CAAC/E,kBAAD,CAAX,GAAkC,+BAAiB;AACjDgF,UAAAA,IAAI,EAAJA,IADiD;AAEjDnG,UAAAA,OAAO,EAAPA;AAFiD,SAAjB,CAAlC;AAIA,eAAOkG,WAAP;AACD,OAXD;;AAYA,aAAOrG,KAAK,CAACuG,MAAN,CAAarI,OAAb,EAAsB,EAAtB,CAAP;AACD,KAlBc,C;;yGAqBhBgI,kB;;;;;;;WACsC,CACrC;AAAA,aAAM,OAAI,CAAChJ,YAAL,CAAkB8C,KAAxB;AAAA,KADqC,EAErC,UAACA,KAAD,EAAW;AACT,UAAM9B,OAAO,GAAG,SAAVA,OAAU,CAACmI,WAAD,EAAcC,IAAd,EAAuB;AAAA,YAC7BhF,kBAD6B,GACKgF,IADL,CAC7BhF,kBAD6B;AAAA,YACT6E,SADS,GACKG,IADL,CACTH,SADS;AAErCE,QAAAA,WAAW,CAACF,SAAD,CAAX,GAAyB7E,kBAAzB;AACA,eAAO+E,WAAP;AACD,OAJD;;AAKA,aAAOrG,KAAK,CAACuG,MAAN,CAAarI,OAAb,EAAsB,EAAtB,CAAP;AACD,KAToC,C","sourcesContent":["import { RingCentralCallControl } from 'ringcentral-call-control';\n\nimport { selector } from '../../lib/selector';\n\nimport { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport callErrors from '../Call/callErrors';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getActiveCallControlReducer from './getActiveCallControlReducer';\nimport getDataReducer from './getDataReducer';\nimport { normalizeSession, confictError } from './helpers';\nimport callControlError from './callControlError';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst DEFAULT_BUSY_TIMEOUT = 3 * 1000;\nconst telephonySessionsEndPoint = /\\/telephony\\/sessions$/;\nconst storageKey = 'activeCallControl';\nconst subscribeEvent = '/account/~/extension/~/telephony/sessions';\n\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    'Subscription',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    'CallMonitor',\n    'Alert',\n    'NumberValidate',\n    'AccountInfo',\n    'ExtensionInfo',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'ActiveCallControlOptions', optional: true },\n    { dep: 'AvailabilityMonitor', optional: true },\n  ],\n})\nexport default class ActiveCallControl extends Pollable {\n  constructor({\n    client,\n    auth,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    storage,\n    subscription,\n    connectivityMonitor,\n    rolesAndPermissions,\n    availabilityMonitor,\n    tabManager,\n    callMonitor,\n    polling = false,\n    disableCache = false,\n    alert,\n    numberValidate,\n    accountInfo,\n    extensionInfo,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._subscription = this::ensureExist(subscription, 'subscription');\n    this._connectivityMonitor = this::ensureExist(\n      connectivityMonitor,\n      'connectivityMonitor',\n    );\n    this._rolesAndPermissions = this::ensureExist(\n      rolesAndPermissions,\n      'rolesAndPermissions',\n    );\n    this._availabilityMonitor = availabilityMonitor;\n    this._callMonitor = this::ensureExist(callMonitor, 'callMonitor');\n    this._tabManager = tabManager;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._auth = this::ensureExist(auth, 'auth');\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    this._storageKey = storageKey;\n    this._polling = polling;\n    this._alert = alert;\n    this._numberValidate = numberValidate;\n    this._accountInfo = accountInfo;\n    this._extensionInfo = extensionInfo;\n    this._rcCallControl = null;\n\n    if (this._storage) {\n      this._reducer = getActiveCallControlReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._storageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getActiveCallControlReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this._connectivity = this._connectivityMonitor.connectivity;\n      await this._init();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (this.ready && this._hasPermission) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n      this._checkTabActive();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this._accountInfo.ready &&\n      this._extensionInfo.ready &&\n      (!this._storage || this._storage.ready) &&\n      this._subscription.ready &&\n      this._connectivityMonitor.ready &&\n      this._callMonitor.ready &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._rolesAndPermissions.ready &&\n      (!this._availabilityMonitor || this._availabilityMonitor.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._auth.loggedIn ||\n        !this._accountInfo.ready ||\n        !this._extensionInfo.ready ||\n        (!!this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._tabManager && !this._tabManager.ready) ||\n        !this._connectivityMonitor.ready ||\n        !this._callMonitor.ready ||\n        !this._rolesAndPermissions.ready ||\n        (!!this._availabilityMonitor && !this._availabilityMonitor.ready)) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.ringoutEnabled;\n  }\n\n  _shouldFetch() {\n    return !this._tabManager || this._tabManager.active;\n  }\n\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    await this._promise;\n  }\n\n  async _fetchData() {\n    try {\n      await this._syncData();\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  _startPolling(t = this.timestamp + this.ttl + 10 - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._tabManager || this._tabManager.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  async _syncData() {\n    try {\n      const activeCalls = this._callMonitor.calls;\n      await this._rcCallControl.loadSessions(activeCalls);\n      this.store.dispatch({\n        type: this.actionTypes.updateActiveSessions,\n        timestamp: Date.now(),\n        sessionDatas: this._rcCallControl.sessions.map((s) => s.data),\n      });\n      this._rcCallControl.sessions.forEach((session) => {\n        this._newSessionHandler(session);\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async _init() {\n    if (!this._hasPermission) return;\n    this._subscription.subscribe(subscribeEvent);\n    this._rcCallControl = new RingCentralCallControl({\n      sdk: this._client.service,\n      preloadDevices: false,\n      preloadSessions: false,\n      extensionInfo: {\n        ...this._extensionInfo.info,\n        account: this._accountInfo.info,\n      },\n    });\n    this._rcCallControl.on('new', (session) => {\n      this._newSessionHandler(session);\n    });\n    this._tabActive = this._tabManager.active;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n  }\n\n  _updateSessionsHandler = () => {\n    this.store.dispatch({\n      type: this.actionTypes.updateActiveSessions,\n      timestamp: Date.now(),\n      sessionDatas: this._rcCallControl.sessions.map((s) => s.data),\n    });\n  };\n\n  _newSessionHandler(session) {\n    this._updateSessionsHandler();\n    session.removeListener('status', this._updateSessionsHandler);\n    session.removeListener('muted', this._updateSessionsHandler);\n    session.removeListener('recordings', this._updateSessionsHandler);\n    session.on('status', this._updateSessionsHandler);\n    session.on('muted', this._updateSessionsHandler);\n    session.on('recordings', this._updateSessionsHandler);\n  }\n\n  _subscriptionHandler() {\n    if (\n      !this.ready ||\n      (this._storage && this._tabManager && !this._tabManager.active)\n    ) {\n      return;\n    }\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      telephonySessionsEndPoint.test(message.event) &&\n      message.body\n    ) {\n      this._lastSubscriptionMessage = message;\n      if (this._rcCallControl) {\n        this._rcCallControl.onNotificationEvent(message);\n      }\n    }\n  }\n\n  removeActiveSession() {\n    this.store.dispatch({\n      type: this.actionTypes.removeActiveSession,\n    });\n  }\n\n  // count it as load (should only call on container init step)\n  setActiveSessionId(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.setActiveSessionId,\n      telephonySessionId,\n    });\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n\n  _checkTabActive() {\n    if (!this._tabManager || !this._storage) {\n      return;\n    }\n    if (this._tabActive !== this._tabManager.active) {\n      this._tabActive = this._tabManager.active;\n      if (this._tabManager.active && this._rcCallControl) {\n        this._rcCallControl.restoreSessions(this.data.sessions);\n        this._rcCallControl.sessions.forEach((session) => {\n          this._newSessionHandler(session);\n        });\n      }\n    }\n  }\n\n  getActiveSession(telephonySessionId) {\n    return this.activeSessions[telephonySessionId];\n  }\n\n  async mute(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.mute,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.mute();\n      this.store.dispatch({\n        type: this.actionTypes.muteSuccess,\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.muteConflictError,\n        });\n      } else if (\n        !this._availabilityMonitor ||\n        !this._availabilityMonitor.checkIfHAError(error)\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.muteError,\n      });\n    }\n  }\n\n  async unmute(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.unmute,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.unmute();\n      this.store.dispatch({\n        type: this.actionTypes.unmuteSuccess,\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.unMuteConflictError,\n        });\n      } else if (\n        !this._availabilityMonitor ||\n        !this._availabilityMonitor.checkIfHAError(error)\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.unmuteError,\n      });\n    }\n  }\n\n  async startRecord(telephonySessionId) {\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      if (recordingId) {\n        await session.resumeRecord(recordingId);\n      } else {\n        await session.createRecord(recordingId);\n      }\n    } catch (error) {\n      // this.store.dispatch({\n      //   type: this.actionTypes.recordFail,\n      //   sessionId,\n      // });\n    }\n  }\n\n  getRecordingId(session) {\n    const recording = session.recordings[0];\n    const recodingId = recording && recording.id;\n    return recodingId;\n  }\n\n  async stopRecord(telephonySessionId) {\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      await session.pauseRecord(recordingId);\n      const activeSession = this.getActiveSession(telephonySessionId);\n      this.store.dispatch({\n        type: this.actionTypes.stopRecord,\n        activeSession,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async hangUp(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.hangUp,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.drop();\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.hangUpSuccess,\n      });\n    } catch (error) {\n      if (\n        !this._availabilityMonitor ||\n        !this._availabilityMonitor.checkIfHAError(error)\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.hangUpError,\n      });\n    }\n  }\n\n  async reject(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.reject,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.toVoicemail();\n      this.store.dispatch({\n        type: this.actionTypes.rejectSuccess,\n      });\n    } catch (error) {\n      if (\n        !this._availabilityMonitor ||\n        !this._availabilityMonitor.checkIfHAError(error)\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.rejectError,\n      });\n    }\n  }\n\n  async hold(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.hold,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.hold();\n      this.store.dispatch({\n        type: this.actionTypes.holdSuccess,\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.holdConflictError,\n        });\n      } else if (\n        !this._availabilityMonitor ||\n        !this._availabilityMonitor.checkIfHAError(error)\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.holdError,\n      });\n    }\n  }\n\n  async unhold(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.unhold,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.unhold();\n      this.store.dispatch({\n        type: this.actionTypes.unholdSuccess,\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.unHoldConflictError,\n        });\n      } else if (\n        !this._availabilityMonitor ||\n        !this._availabilityMonitor.checkIfHAError(error)\n      ) {\n        this._alert.warning({\n          message: callControlError.generalError,\n        });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.holdError,\n      });\n    }\n  }\n\n  async transfer(transferNumber, telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.transfer,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      const validatedResult = await this._numberValidate.validateNumbers([\n        transferNumber,\n      ]);\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach((error) => {\n          if (\n            !this._availabilityMonitor ||\n            !this._availabilityMonitor.checkIfHAError(error)\n          ) {\n            this._alert.warning({\n              message: callErrors[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          }\n        });\n        this.store.dispatch({\n          type: this.actionTypes.transferError,\n        });\n        return;\n      }\n      const validPhoneNumber =\n        validatedResult.numbers[0] && validatedResult.numbers[0].e164;\n      let phoneNumber = validPhoneNumber;\n      if (validPhoneNumber.indexOf('+') === -1) {\n        phoneNumber = [\n          this._accountInfo.mainCompanyNumber,\n          validPhoneNumber,\n        ].join('*');\n      }\n      session.transfer({ phoneNumber });\n      this.store.dispatch({\n        type: this.actionTypes.transferSuccess,\n      });\n    } catch (error) {\n      if (\n        !this._availabilityMonitor ||\n        !this._availabilityMonitor.checkIfHAError(error)\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.transferError,\n      });\n    }\n  }\n\n  // Incomplete Implementation?\n  async flip(flipValue, telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.flip,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.flip({ callFlipId: flipValue });\n      this.store.dispatch({\n        type: this.actionTypes.flipSuccess,\n      });\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.flipError,\n      });\n      throw error;\n    }\n  }\n\n  async forward() {\n    // No implement at the moment\n    // Need to check the API document\n  }\n\n  get data() {\n    return (\n      (this._storage &&\n        this._storage.ready &&\n        this._storage.getItem(this._storageKey)) ||\n      this.state\n    );\n  }\n\n  get activeSessionId() {\n    return this.data.activeSessionId || null;\n  }\n\n  /**\n   * Mitigation strategy for avoiding 404/409 on call control endpoings.\n   * This should gradually move towards per session controls rather than\n   * a global busy timeout.\n   */\n  get busy() {\n    return Date.now() - this.data.busy < DEFAULT_BUSY_TIMEOUT;\n  }\n\n  get timestamp() {\n    return this.data.timestamp;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  @selector\n  activeSession = [\n    () => this.activeSessionId,\n    () => this.activeSessions,\n    (sessionId) => this.getActiveSession(sessionId),\n  ];\n\n  @selector\n  activeSessions = [\n    () => this._callMonitor.calls,\n    () => this.data.sessions,\n    () => this.timestamp,\n    (calls, sessions, _t) => {\n      const reducer = (accumulator, call) => {\n        const { telephonySessionId } = call;\n        const session = sessions.find((s) => s.id === telephonySessionId);\n        if (!session) {\n          return accumulator;\n        }\n        accumulator[telephonySessionId] = normalizeSession({\n          call,\n          session,\n        });\n        return accumulator;\n      };\n      return calls.reduce(reducer, {});\n    },\n  ];\n\n  @selector\n  sessionIdToTelephonySessionIdMapping = [\n    () => this._callMonitor.calls,\n    (calls) => {\n      const reducer = (accumulator, call) => {\n        const { telephonySessionId, sessionId } = call;\n        accumulator[sessionId] = telephonySessionId;\n        return accumulator;\n      };\n      return calls.reduce(reducer, {});\n    },\n  ];\n}\n"],"file":"index.js"}