{"version":3,"sources":["modules/ContactDetailsUI/index.js"],"names":["DEFAULT_DIALER_ROUTE","DEFAULT_COMPOSETEXT_ROUTE","ContactDetailsUI","name","deps","dep","optional","params","dialerRoute","composeTextRoute","phone","locale","contactDetails","contactSearch","rolesAndPermissions","connectivityManager","rateLimiter","currentLocale","contactItem","contact","disableLinks","isOfflineMode","isVoipOnlyMode","throttling","disableCallButton","isWebphoneUnavailableMode","isWebphoneInitializing","showSpinner","ready","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","call","dialerUI","composeText","regionSettings","routerInteraction","getContact","find","id","contactId","type","contactType","clearContact","clear","formatNumber","phoneNumber","cleanedNumber","toString","isE164Number","formatedNumber","countryCode","beFormated","getAvatar","getProfileImage","getPresence","onBackClick","goBack","onClickToDial","callingEnabled","recipient","isIdle","push","onClickToCall","undefined","onClickToSMS","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","RcUIModule"],"mappings":"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","sourcesContent":["import { Module } from 'ringcentral-integration/lib/di';\nimport {\n  isE164,\n  parseIncompletePhoneNumber,\n} from '@ringcentral-integration/phone-number';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport RcUIModule from '../../lib/RcUIModule';\n\nconst DEFAULT_DIALER_ROUTE = '/dialer';\nconst DEFAULT_COMPOSETEXT_ROUTE = '/composeText';\n\n@Module({\n  name: 'ContactDetailsUI',\n  deps: [\n    'RouterInteraction',\n    'ContactDetails',\n    'ContactSearch',\n    'RolesAndPermissions',\n    'RateLimiter',\n    'RegionSettings',\n    'ConnectivityManager',\n    'Call',\n    'DialerUI',\n    'ComposeText',\n    'Brand',\n    'Locale',\n    'CallingSettings',\n    {\n      dep: 'Webphone',\n      optional: true,\n    },\n    {\n      dep: 'ContactDetailsUIOptions',\n      optional: true,\n    },\n  ],\n})\nexport default class ContactDetailsUI extends RcUIModule {\n  getUIProps({\n    params,\n    dialerRoute = DEFAULT_DIALER_ROUTE,\n    composeTextRoute = DEFAULT_COMPOSETEXT_ROUTE,\n    phone: {\n      locale,\n      contactDetails,\n      contactSearch,\n      rolesAndPermissions,\n      connectivityManager,\n      rateLimiter,\n    },\n  }) {\n    return {\n      params,\n      dialerRoute,\n      composeTextRoute,\n      currentLocale: locale.currentLocale,\n      contactItem: contactDetails.contact,\n      disableLinks:\n        connectivityManager.isOfflineMode ||\n        connectivityManager.isVoipOnlyMode ||\n        rateLimiter.throttling,\n      disableCallButton:\n        connectivityManager.isOfflineMode ||\n        connectivityManager.isWebphoneUnavailableMode ||\n        connectivityManager.isWebphoneInitializing ||\n        rateLimiter.throttling,\n      showSpinner: !(\n        locale.ready &&\n        contactSearch.ready &&\n        contactDetails.ready &&\n        rolesAndPermissions.ready\n      ),\n      outboundSmsPermission:\n        rolesAndPermissions.permissions &&\n        rolesAndPermissions.permissions.OutboundSMS,\n      internalSmsPermission:\n        rolesAndPermissions.permissions &&\n        rolesAndPermissions.permissions.InternalSMS,\n    };\n  }\n\n  getUIFunctions({\n    params,\n    dialerRoute = DEFAULT_DIALER_ROUTE,\n    composeTextRoute = DEFAULT_COMPOSETEXT_ROUTE,\n    phone: {\n      call,\n      dialerUI,\n      composeText,\n      contactSearch,\n      contactDetails,\n      regionSettings,\n      routerInteraction,\n      rolesAndPermissions,\n    },\n  }) {\n    return {\n      getContact() {\n        contactDetails.find({\n          id: params.contactId,\n          type: params.contactType,\n        });\n      },\n      clearContact() {\n        contactDetails.clear();\n      },\n      formatNumber(phoneNumber) {\n        // if the cleaned phone number is not a E164 format\n        // we will show it directly, doesn't format it.\n        const cleanedNumber = parseIncompletePhoneNumber(\n          phoneNumber.toString(),\n        );\n        const isE164Number = isE164(cleanedNumber);\n        if (isE164Number) {\n          const formatedNumber = formatNumber({\n            phoneNumber,\n            countryCode: regionSettings.countryCode,\n          });\n          return {\n            phoneNumber: formatedNumber,\n            beFormated: true,\n          };\n        }\n        return {\n          phoneNumber,\n          beFormated: false,\n        };\n      },\n      getAvatar(contact) {\n        return contactDetails.getProfileImage(contact);\n      },\n      getPresence(contact) {\n        return contactDetails.getPresence(contact);\n      },\n      onBackClick() {\n        routerInteraction.goBack();\n      },\n      onClickToDial:\n        dialerUI && rolesAndPermissions.callingEnabled\n          ? (recipient) => {\n              if (call.isIdle) {\n                routerInteraction.push(dialerRoute);\n                dialerUI.call({ recipient });\n                contactDetails.onClickToCall();\n              }\n            }\n          : undefined,\n      onClickToSMS: composeText\n        ? async (contact, isDummyContact = false) => {\n            if (routerInteraction) {\n              routerInteraction.push(composeTextRoute);\n            }\n            // if contact autocomplete, if no match fill the number only\n            if (contact.name && contact.phoneNumber && isDummyContact) {\n              composeText.updateTypingToNumber(contact.name);\n              contactSearch.search({ searchString: contact.name });\n            } else {\n              composeText.addToNumber(contact);\n              if (composeText.typingToNumber === contact.phoneNumber) {\n                composeText.cleanTypingToNumber();\n              }\n            }\n            // for track\n            contactDetails.onClickToSMS();\n          }\n        : undefined,\n    };\n  }\n}\n"],"file":"index.js"}