{"version":3,"sources":["modules/GlipCompany/index.js"],"names":["GlipCompany","deps","dep","optional","client","rolesAndPermissions","options","fetchFunction","_client","glip","companies","get","response","readyCheckFn","_rolesAndPermissions","ready","cleanOnReset","ensureExist","call","info","name","domain","id","hasGlipPermission","DataFetcher","selector","data"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaqBA,W;AAXrB;;;;OAIC,gBAAO;AACNC,EAAAA,IAAI,EAAE,CACJ,QADI,EAEJ,qBAFI,EAGJ;AAAEC,IAAAA,GAAG,EAAE,oBAAP;AAA6BC,IAAAA,QAAQ,EAAE;AAAvC,GAHI;AADA,CAAP,C;;;;;AAQC;;;;;AAKA,6BAAyD;AAAA;;AAAA,QAA3CC,MAA2C,QAA3CA,MAA2C;AAAA,QAAnCC,mBAAmC,QAAnCA,mBAAmC;AAAA,QAAXC,OAAW;;AAAA;;AACvD;AACEF,MAAAA,MAAM,EAANA,MADF;AAEEG,MAAAA,aAAa;AAAA,qFAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACU,MAAKC,OAAL,CACpBC,IADoB,GAEpBC,SAFoB,CAEV,GAFU,EAGpBC,GAHoB,EADV;;AAAA;AACPC,kBAAAA,QADO;AAAA,mDAKNA,QALM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,SAFf;AASEC,MAAAA,YAAY,EAAE;AAAA,eAAM,MAAKC,oBAAL,CAA0BC,KAAhC;AAAA,OAThB;AAUEC,MAAAA,YAAY,EAAE;AAVhB,OAWKV,OAXL;;AADuD;;AAcvD,UAAKQ,oBAAL,GAA4BG,wBAAYC,IAAZ,gCAE1Bb,mBAF0B,EAG1B,qBAH0B,CAA5B;AAduD;AAmBxD;;;;wBAEW;AACV,aAAO,aAAP;AACD;;;wBAKU;AACT,aAAO,KAAKc,IAAL,CAAUC,IAAjB;AACD;;;wBAEY;AACX,aAAO,KAAKD,IAAL,CAAUE,MAAjB;AACD;;;wBAEQ;AACP,aAAO,KAAKF,IAAL,CAAUG,EAAjB;AACD;;;wBAEoB;AACnB,aAAO,CAAC,CAAC,KAAKR,oBAAL,CAA0BS,iBAAnC;AACD;;;;EAhDsCC,wB,gFA+BtCC,kB;;;;;;;WACM,CAAC;AAAA,aAAM,MAAI,CAACC,IAAX;AAAA,KAAD,EAAkB,UAACA,IAAD;AAAA,aAAUA,IAAI,IAAI,EAAlB;AAAA,KAAlB,C","sourcesContent":["import { Module } from '../../lib/di';\nimport DataFetcher from '../../lib/DataFetcher';\nimport { selector } from '../../lib/selector';\nimport ensureExist from '../../lib/ensureExist';\n\n/**\n * @class\n * @description Glip Company managing module.\n */\n@Module({\n  deps: [\n    'Client',\n    'RolesAndPermissions',\n    { dep: 'GLipCompanyOptions', optional: true },\n  ],\n})\nexport default class GlipCompany extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({ client, rolesAndPermissions, ...options }) {\n    super({\n      client,\n      fetchFunction: async () => {\n        const response = await this._client\n          .glip()\n          .companies('~')\n          .get();\n        return response;\n      },\n      readyCheckFn: () => this._rolesAndPermissions.ready,\n      cleanOnReset: true,\n      ...options,\n    });\n    this._rolesAndPermissions = ensureExist.call(\n      this,\n      rolesAndPermissions,\n      'rolesAndPermissions',\n    );\n  }\n\n  get _name() {\n    return 'glipCompany';\n  }\n\n  @selector\n  info = [() => this.data, (data) => data || {}];\n\n  get name() {\n    return this.info.name;\n  }\n\n  get domain() {\n    return this.info.domain;\n  }\n\n  get id() {\n    return this.info.id;\n  }\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.hasGlipPermission;\n  }\n}\n"],"file":"index.js"}