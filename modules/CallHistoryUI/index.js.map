{"version":3,"sources":["modules/CallHistoryUI/index.ts"],"names":["CallHistoryUI","name","deps","dep","optional","phone","brand","call","callHistory","callLogger","composeText","connectivityManager","connectivityMonitor","dateTimeFormat","locale","rateLimiter","regionSettings","rolesAndPermissions","extensionInfo","enableContactFallback","useNewList","fullName","title","i18n","getString","currentLocale","calls","latestCalls","areaCode","countryCode","currentSiteCode","site","code","isMultipleSiteEnabled","disableLinks","isOfflineMode","isVoipOnlyMode","throttling","disableCallButton","isWebphoneUnavailableMode","isWebphoneInitializing","disableClickToDial","isIdle","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","ready","autoLog","contactMatcher","dialerUI","contactDetailsUI","routerInteraction","contactSearch","onCreateContact","dateTimeFormatter","formatDateTime","bind","onLogCall","isLoggedContact","dialerRoute","composeTextRoute","onViewContact","contact","type","id","showContactDetails","direct","phoneNumber","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","onClickToDial","callingEnabled","recipient","push","onClickToCall","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","onClickToSMS","redirect","logCall","RcUIModule"],"mappings":"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","sourcesContent":["import { Module } from 'ringcentral-integration/lib/di';\nimport RcUIModule from '../../lib/RcUIModule';\nimport i18n from './i18n';\n\n@Module({\n  name: 'CallHistoryUI',\n  deps: [\n    'Locale',\n    'Brand',\n    'CallHistory',\n    'RegionSettings',\n    'ConnectivityMonitor',\n    'RateLimiter',\n    'DateTimeFormat',\n    'RolesAndPermissions',\n    { dep: 'CallLogger', optional: true },\n    { dep: 'Call', optional: true },\n    { dep: 'ComposeText', optional: true },\n    { dep: 'DialerUI', optional: true },\n    { dep: 'ContactDetailsUI', optional: true },\n    { dep: 'ExtensionInfo', optional: true },\n    'ContactMatcher',\n    'RouterInteraction',\n    'ContactSearch',\n    'ConnectivityManager',\n  ],\n})\nexport default class CallHistoryUI extends RcUIModule {\n  getUIProps({\n    phone: {\n      brand,\n      call,\n      callHistory,\n      callLogger,\n      composeText,\n      connectivityManager,\n      connectivityMonitor,\n      dateTimeFormat,\n      locale,\n      rateLimiter,\n      regionSettings,\n      rolesAndPermissions,\n      extensionInfo,\n    },\n    enableContactFallback = false,\n    useNewList = false,\n  }) {\n    return {\n      enableContactFallback,\n      brand: brand.fullName,\n      title: i18n.getString('title', locale.currentLocale),\n      currentLocale: locale.currentLocale,\n      calls: callHistory.latestCalls,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n      currentSiteCode: extensionInfo?.site?.code ?? '',\n      isMultipleSiteEnabled: extensionInfo?.isMultipleSiteEnabled ?? false,\n      disableLinks:\n        connectivityManager.isOfflineMode ||\n        connectivityManager.isVoipOnlyMode ||\n        rateLimiter.throttling,\n      disableCallButton:\n        connectivityManager.isOfflineMode ||\n        connectivityManager.isWebphoneUnavailableMode ||\n        connectivityManager.isWebphoneInitializing ||\n        rateLimiter.throttling,\n      disableClickToDial: !(call && call.isIdle),\n      outboundSmsPermission: !!(\n        rolesAndPermissions.permissions &&\n        rolesAndPermissions.permissions.OutboundSMS\n      ),\n      internalSmsPermission: !!(\n        rolesAndPermissions.permissions &&\n        rolesAndPermissions.permissions.InternalSMS\n      ),\n      loggingMap: callLogger && callLogger.loggingMap,\n      showSpinner: !(\n        callHistory.ready &&\n        locale.ready &&\n        regionSettings.ready &&\n        dateTimeFormat.ready &&\n        connectivityMonitor.ready &&\n        rolesAndPermissions.ready &&\n        (!call || call.ready) &&\n        (!composeText || composeText.ready) &&\n        (!callLogger || callLogger.ready)\n      ),\n      autoLog: !!(callLogger && callLogger.autoLog),\n      useNewList,\n    };\n  }\n\n  getUIFunctions({\n    phone: {\n      dateTimeFormat,\n      callLogger,\n      contactMatcher,\n      call,\n      dialerUI,\n      contactDetailsUI,\n      composeText,\n      routerInteraction,\n      contactSearch,\n      callHistory,\n      rolesAndPermissions,\n    },\n    onCreateContact,\n    dateTimeFormatter = dateTimeFormat.formatDateTime.bind(dateTimeFormat),\n    onLogCall,\n    isLoggedContact,\n    dialerRoute = '/dialer',\n    composeTextRoute = '/composeText',\n    onViewContact,\n  }) {\n    return {\n      dateTimeFormatter,\n      onViewContact:\n        onViewContact ||\n        (({ contact: { type, id } }) => {\n          if (contactDetailsUI) {\n            contactDetailsUI.showContactDetails({\n              type,\n              id,\n              direct: true,\n            });\n          }\n        }),\n      onCreateContact: onCreateContact\n        ? async ({ phoneNumber, name, entityType }) => {\n            const hasMatchNumber = await contactMatcher.hasMatchNumber({\n              phoneNumber,\n              ignoreCache: true,\n            });\n\n            if (!hasMatchNumber) {\n              await onCreateContact({ phoneNumber, name, entityType });\n              await contactMatcher.forceMatchNumber({ phoneNumber });\n            }\n          }\n        : undefined,\n      onClickToDial:\n        dialerUI && rolesAndPermissions.callingEnabled\n          ? (recipient) => {\n              if (call.isIdle) {\n                routerInteraction.push(dialerRoute);\n                dialerUI.call({ recipient });\n                callHistory.onClickToCall();\n              }\n            }\n          : undefined,\n      onClickToSms: composeText\n        ? async (contact, isDummyContact = false) => {\n            if (routerInteraction) {\n              routerInteraction.push(composeTextRoute);\n            }\n            // if contact autocomplete, if no match fill the number only\n            if (contact.name && contact.phoneNumber && isDummyContact) {\n              composeText.updateTypingToNumber(contact.name);\n              contactSearch.search({ searchString: contact.name });\n            } else {\n              composeText.addToNumber(contact);\n              if (composeText.typingToNumber === contact.phoneNumber) {\n                composeText.cleanTypingToNumber();\n              }\n            }\n            callHistory.onClickToSMS();\n          }\n        : undefined,\n      isLoggedContact,\n      onLogCall:\n        onLogCall ||\n        (callLogger &&\n          (async ({ call, contact, redirect = true }) => {\n            await callLogger.logCall({\n              call,\n              contact,\n              redirect,\n            });\n          })),\n    };\n  }\n}\n"],"file":"index.js"}