{"version":3,"sources":["modules/EvAgentSessionUI/EvAgentSessionUI.ts"],"names":["EvAgentSessionUI","name","deps","dep","optional","that","_deps","locale","currentLocale","evAgentSession","inboundQueues","formGroup","selectedInboundQueueIds","enableCache","storageKey","isLoading","setIsLoading","configureAgent","needAssignFormGroupValue","console","error","modal","confirm","title","i18n","getString","content","okText","cancelText","onOK","onSaveUpdate","onCancel","resetFormGroup","goToSettingsPage","isSessionChanged","showSaveEditionModal","updateAgent","voiceConnectionChanged","gateId","inboundQueuesState","setInboundQueuesState","index","findIndex","option","selectedInboundQueue","checked","severalAssign","map","routerInteraction","goBack","queues","cb","inboundQueue","setFormGroup","loginType","autoAnswer","selectedIntegratedSoftphone","defaultAutoAnswerOn","skillProfileList","loginTypeList","isExternalPhone","evAuth","agentPermissions","allowAutoAnswer","allowLoginControl","allowInbound","selectedSkillProfileId","extensionNumber","inboundQueuesFieldText","isExtensionNumber","showAutoAnswer","showInboundQueues","showSkillProfile","length","setSkillProfileId","setLoginType","setExtensionNumber","setAutoAnswer","submitInboundQueues","setConfigure","goToSettingsPageWhetherSessionChanged","searchOption","text","gateName","toLowerCase","includes","getAssignedInboundQueues","filter","isAllAssign","assignedInboundQueues","isSeveralAssign","checkBoxOnChange","_checkBoxOnChange","allCheckBoxOnChange","_allCheckBoxOnChange","find","dropDownOptions","None","id","loginTypes","integratedSoftphone","RcUIModuleV2","storage","state","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  computed,\n  RcUIModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport { dropDownOptions, loginTypes, LoginTypes } from '../../enums';\n\nimport {\n  ChangeQueueStateFn,\n  EvAgentSessionUIFunctions,\n  EvAgentSessionUIProps,\n} from '../../interfaces/EvAgentSessionUI.interface';\nimport { AvailableQueue } from '../../interfaces/SelectableQueue.interface';\nimport { sortByName } from '../../lib/sortByName';\nimport { Deps, SessionConfigUI } from './EvAgentSessionUI.interface';\nimport i18n from './i18n';\n\n@Module({\n  name: 'EvAgentSessionUI',\n  deps: [\n    'Locale',\n    'RouterInteraction',\n    'EvAuth',\n    'EvAgentSession',\n    'EvSettings',\n    'EvWorkingState',\n    'Storage',\n    'Modal',\n    'EvCallMonitor',\n    { dep: 'EvAgentSessionUIOptions', optional: true },\n  ],\n})\nclass EvAgentSessionUI extends RcUIModuleV2<Deps> implements SessionConfigUI {\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvAgentSessionUI',\n    });\n  }\n\n  @storage\n  @state\n  isLoading = false;\n\n  @computed((that: EvAgentSessionUI) => [\n    that._deps.locale.currentLocale,\n    that._deps.evAgentSession.inboundQueues,\n    that._deps.evAgentSession.formGroup.selectedInboundQueueIds,\n  ])\n  get inboundQueuesFieldText() {\n    const { selectedInboundQueueIds } = this._deps.evAgentSession.formGroup;\n    const { inboundQueues } = this._deps.evAgentSession;\n    const { currentLocale } = this._deps.locale;\n\n    if (selectedInboundQueueIds.length === 1) {\n      const selectedInboundQueue = inboundQueues.find(\n        (inboundQueue) => inboundQueue.gateId === selectedInboundQueueIds[0],\n      );\n      return selectedInboundQueue.gateName;\n    }\n\n    if (selectedInboundQueueIds.length > 1) {\n      return `${i18n.getString('multiple', currentLocale)} (${\n        selectedInboundQueueIds.length\n      })`;\n    }\n\n    return i18n.getString(dropDownOptions.None, currentLocale);\n  }\n\n  @action\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading;\n  }\n\n  onInit() {\n    this.setIsLoading(false);\n  }\n\n  async setConfigure() {\n    this.setIsLoading(true);\n    try {\n      await this._deps.evAgentSession.configureAgent({\n        needAssignFormGroupValue: true,\n      });\n    } catch (e) {\n      console.error(e);\n      return;\n    } finally {\n      this.setIsLoading(false);\n    }\n  }\n\n  private showSaveEditionModal() {\n    const { currentLocale } = this._deps.locale;\n\n    this._deps.modal.confirm({\n      title: i18n.getString('saveEditionModalTitle', currentLocale),\n      content: i18n.getString('saveEditionModalContent', currentLocale),\n      okText: i18n.getString('save', currentLocale),\n      cancelText: i18n.getString('cancel', currentLocale),\n      onOK: () => {\n        this.onSaveUpdate();\n      },\n      onCancel: () => {\n        this._deps.evAgentSession.resetFormGroup();\n        this._deps.evAgentSession.goToSettingsPage();\n      },\n    });\n  }\n\n  goToSettingsPageWhetherSessionChanged() {\n    if (this._deps.evAgentSession.isSessionChanged) {\n      return this.showSaveEditionModal();\n    }\n    this._deps.evAgentSession.goToSettingsPage();\n  }\n\n  async onSaveUpdate() {\n    if (!this._deps.evAgentSession.isSessionChanged) {\n      return this._deps.evAgentSession.goToSettingsPage();\n    }\n\n    await this._deps.evAgentSession.updateAgent(this.voiceConnectionChanged);\n  }\n\n  // InboundQueue Panel\n  @computed((that: EvAgentSessionUI) => [\n    that._deps.evAgentSession.formGroup.selectedInboundQueueIds,\n    that._deps.evAgentSession.inboundQueues,\n  ])\n  get inboundQueues() {\n    const {\n      inboundQueues,\n      formGroup: { selectedInboundQueueIds },\n    } = this._deps.evAgentSession;\n\n    return sortByName(\n      inboundQueues.map((inboundQueue) => {\n        return {\n          ...inboundQueue,\n          checked: !!selectedInboundQueueIds.find(\n            (id) => id === inboundQueue.gateId,\n          ),\n        };\n      }),\n      'gateName',\n    );\n  }\n\n  private _checkBoxOnChange(\n    gateId: string,\n    inboundQueuesState: AvailableQueue[],\n    setInboundQueuesState: ChangeQueueStateFn,\n  ) {\n    const inboundQueues = [...inboundQueuesState];\n    const index = inboundQueues.findIndex((option) => option.gateId === gateId);\n    const selectedInboundQueue = inboundQueues[index];\n\n    inboundQueues[index] = {\n      ...selectedInboundQueue,\n      checked: !selectedInboundQueue.checked,\n    };\n\n    setInboundQueuesState(inboundQueues);\n  }\n\n  private _allCheckBoxOnChange(\n    severalAssign: boolean,\n    inboundQueuesState: AvailableQueue[],\n    setInboundQueuesState: ChangeQueueStateFn,\n  ) {\n    const inboundQueues = [...inboundQueuesState].map((option) => {\n      return {\n        ...option,\n        // new object\n        checked: severalAssign || !option.checked,\n      };\n    });\n    setInboundQueuesState(inboundQueues);\n  }\n\n  goBack() {\n    this._deps.routerInteraction.goBack();\n  }\n\n  submitInboundQueues(queues: AvailableQueue[], cb: () => void) {\n    const selectedInboundQueueIds = queues.map(\n      (inboundQueue) => inboundQueue.gateId,\n    );\n    this._deps.evAgentSession.setFormGroup({ selectedInboundQueueIds });\n    cb();\n  }\n\n  get selectedIntegratedSoftphone() {\n    return (\n      this._deps.evAgentSession.formGroup.loginType ===\n      loginTypes.integratedSoftphone\n    );\n  }\n\n  get voiceConnectionChanged() {\n    return (\n      this._deps.evAgentSession.loginType !==\n      this._deps.evAgentSession.formGroup.loginType\n    );\n  }\n\n  setLoginType(loginType: LoginTypes) {\n    // set login type first, and reset autoAnswer after login type changed\n    this._deps.evAgentSession.setFormGroup({ loginType });\n    const autoAnswer = this.selectedIntegratedSoftphone\n      ? this._deps.evAgentSession.autoAnswer\n      : this._deps.evAgentSession.defaultAutoAnswerOn;\n    this._deps.evAgentSession.setFormGroup({\n      autoAnswer,\n    });\n  }\n\n  getUIProps(): EvAgentSessionUIProps {\n    const {\n      skillProfileList,\n      loginTypeList,\n      isExternalPhone,\n      // takingCall,\n    } = this._deps.evAgentSession;\n    const {\n      allowAutoAnswer,\n      allowLoginControl,\n      allowInbound,\n    } = this._deps.evAuth.agentPermissions;\n    const {\n      selectedSkillProfileId,\n      loginType,\n      extensionNumber,\n      autoAnswer,\n    } = this._deps.evAgentSession.formGroup;\n    return {\n      selectedSkillProfileId,\n      loginType,\n      extensionNumber,\n      inboundQueuesFieldText: this.inboundQueuesFieldText,\n      // takingCall,\n      autoAnswer,\n      skillProfileList,\n      loginTypeList,\n      isExtensionNumber: isExternalPhone,\n      isLoading: this.isLoading,\n      currentLocale: this._deps.locale.currentLocale,\n      // Inboudqueue Panel\n      inboundQueues: this.inboundQueues,\n      showAutoAnswer: allowAutoAnswer && this.selectedIntegratedSoftphone,\n      showInboundQueues: allowLoginControl && allowInbound,\n      showSkillProfile: allowLoginControl && skillProfileList.length > 0,\n    };\n  }\n\n  getUIFunctions(): EvAgentSessionUIFunctions {\n    return {\n      setSkillProfileId: (selectedSkillProfileId) =>\n        this._deps.evAgentSession.setFormGroup({ selectedSkillProfileId }),\n      setLoginType: (loginType) => this.setLoginType(loginType),\n      setExtensionNumber: (extensionNumber) =>\n        this._deps.evAgentSession.setFormGroup({ extensionNumber }),\n      setAutoAnswer: (autoAnswer) =>\n        this._deps.evAgentSession.setFormGroup({ autoAnswer }),\n      submitInboundQueues: (queues, cb) => this.submitInboundQueues(queues, cb),\n      // setTakingCall: (takingCall) =>\n      //   this._deps.evAgentSession.setTakingCall(takingCall),\n      setConfigure: () => this.setConfigure(),\n      goToSettingsPage: () => this._deps.evAgentSession.goToSettingsPage(),\n      goToSettingsPageWhetherSessionChanged: () =>\n        this.goToSettingsPageWhetherSessionChanged(),\n      onSaveUpdate: () => this.onSaveUpdate(),\n      // Inboudqueue Panel\n      searchOption: (option, text) =>\n        option.gateName &&\n        option.gateName.toLowerCase().includes(text.toLowerCase()),\n      goBack: () => this.goBack(),\n      getAssignedInboundQueues: (inboundQueues) =>\n        inboundQueues.filter(({ checked }) => checked),\n      isAllAssign: (assignedInboundQueues, inboundQueues) =>\n        !!assignedInboundQueues.length &&\n        assignedInboundQueues.length === inboundQueues.length,\n      isSeveralAssign: (assignedInboundQueues, inboundQueues) =>\n        !!assignedInboundQueues.length &&\n        assignedInboundQueues.length !== inboundQueues.length,\n      checkBoxOnChange: (...args) => this._checkBoxOnChange(...args),\n      allCheckBoxOnChange: (...args) => this._allCheckBoxOnChange(...args),\n    };\n  }\n}\nexport { EvAgentSessionUI };\n"],"file":"EvAgentSessionUI.js"}