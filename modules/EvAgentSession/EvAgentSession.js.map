{"version":3,"sources":["modules/EvAgentSession/EvAgentSession.ts"],"names":["ACCEPTABLE_LOGIN_TYPES","loginTypes","integratedSoftphone","RC_PHONE","externalPhone","DEFAULT_LOGIN_TYPE","NONE","dropDownOptions","None","WAIT_EV_SERVER_ROLLBACK_DELAY","DEFAULT_FORM_GROUP","selectedInboundQueueIds","loginType","selectedSkillProfileId","extensionNumber","EvAgentSession","name","deps","dep","optional","that","_deps","locale","currentLocale","evAuth","agent","agentConfig","auth","isFreshLogin","skillProfileList","inboundQueues","_","type","trackEvents","agentSessionSetLoginType","value","skillProfileId","agentSessionSetSkillProfileId","ids","agentSessionSetInboundQueueIds","takingCall","agentSessionSetTakingCall","autoAnswer","agentSessionSetAutoAnswer","formGroup","agentSessionConfigureAgent","selectedSkillProfile","selectedInboundQueues","tabManagerEnabled","_heartBeat","isSuccessByLocal","isIntegratedSoftphone","hasMultipleTabs","enableCache","storageKey","isForceLogin","onConfigSuccess","onTriggerConfig","clearCalls","_loginPromise","_isAgentUpdating","_updateSessionBlockId","heartBeatInterval","evAgentSessionOptions","HeartBeat","tabManager","_tabbie","prefix","onLoginSuccess","_afterLogin","configured","_autoConfigureAgent","console","error","setFreshConfig","routerInteraction","push","beforeAgentLogout","resetAllConfig","setConfigSuccess","destroy","configSuccess","status","_onConfigureAgentSuccess","_clearCalls","defaultSkillProfile","map","inboundQueue","gateId","setInboundQueueIds","setExtensionNumber","setLoginType","setSkillProfileId","resetFormGroup","data","setFormGroup","loggedIn","connected","ready","_checkTabManagerEvent","event","tabManagerEvents","AGENT_CONFIG_SUCCESS","UPDATE_SESSION","UPDATE_SESSION_SUCCESS","UPDATE_SESSION_SUCCESS_ALERT","_othersTabConfigureAgent","block","onceLogout","loginAgent","unblock","log","window","location","reload","_showUpdateSuccessAlert","checkSelectIsInList","some","profile","profileId","checkedInboundQueues","reduce","result","inboundQueueId","triggerEvent","config","_checkFieldsResult","_connectEvServer","newReconnect","_handleAgentResult","_onTriggerAgentConfig","_sendTabManager","heartBeatOnSuccess","voiceConnectionChanged","next","sendLogoutTabEvent","logoutAgent","isForce","updateAgentConfigs","goToSettingsPage","alert","success","message","messageTypes","UPDATE_AGENT_SUCCESS","danger","AGENT_CONFIG_DETAIL_ERROR","ttl","payload","UPDATE_AGENT_ERROR","AGENT_CONFIG_ERROR","Error","assignFormGroupValue","isWorkingByLocal","heartBeatOnWorking","configureAgent","evClient","multiLoginRequest","find","item","isDefault","forEach","hook","e","getAgentConfig","setAgent","EXISTING_LOGIN_FOUND","modal","confirmSync","title","i18n","getString","content","okText","cancelText","onOK","modalId","EXISTING_LOGIN_ENGAGED","length","NO_AGENT_SELECTED","dialDest","_getDialDest","queueIds","EMPTY_PHONE_NUMBER","formatPhoneNumber","phoneNumber","areaCode","regionSettings","input","parsedNumber","isValid","INVALID_PHONE_NUMBER","send","localStorage","enabled","id","label","inboundSettings","availableQueues","queue","gateName","checked","defaultSkill","_pickSkillProfile","availableSkillProfiles","unshift","profileName","results","filter","sessionConfigs","RcModuleV2","storage","state","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  track,\n} from '@ringcentral-integration/core';\nimport { format, parse } from '@ringcentral-integration/phone-number';\nimport { equals } from 'ramda';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport sleep from 'ringcentral-integration/lib/sleep';\n\nimport {\n  dropDownOptions,\n  LoginTypes,\n  loginTypes,\n  messageTypes,\n  tabManagerEvents,\n} from '../../enums';\nimport { LoginType } from '../../interfaces/EvAgentSessionUI.interface';\nimport {\n  EvAgentConfig,\n  EvAvailableSkillProfile,\n  EvConfigureAgentOptions,\n} from '../../lib/EvClient';\nimport { HeartBeat } from '../../lib/heartBeat';\nimport { trackEvents } from '../../lib/trackEvents';\nimport { AgentSession, Deps, FormGroup } from './EvAgentSession.interface';\nimport i18n from './i18n';\n\nconst ACCEPTABLE_LOGIN_TYPES = [\n  loginTypes.integratedSoftphone,\n  loginTypes.RC_PHONE,\n  loginTypes.externalPhone,\n];\nconst DEFAULT_LOGIN_TYPE = loginTypes.integratedSoftphone;\n\nconst NONE = dropDownOptions.None;\n\n// wait all tab is logout complete, server has some delay after logout\nconst WAIT_EV_SERVER_ROLLBACK_DELAY = 2000;\n\nconst DEFAULT_FORM_GROUP = {\n  selectedInboundQueueIds: [] as any,\n  loginType: DEFAULT_LOGIN_TYPE,\n  selectedSkillProfileId: NONE,\n  extensionNumber: '',\n};\n\n@Module({\n  name: 'EvAgentSession',\n  deps: [\n    'EvClient',\n    'Auth',\n    'EvAuth',\n    'Storage',\n    'Alert',\n    'Auth',\n    'Locale',\n    'RegionSettings',\n    'RouterInteraction',\n    'Modal',\n    'Block',\n    { dep: 'TabManager', optional: true },\n    { dep: 'EvAgentSessionOptions', optional: true },\n  ],\n})\nclass EvAgentSession extends RcModuleV2<Deps> implements AgentSession {\n  isForceLogin = false;\n  onConfigSuccess: Function[] = [];\n  onTriggerConfig: Function[] = [];\n  clearCalls?: () => void;\n\n  private _loginPromise: Promise<void>;\n  private _heartBeat: HeartBeat;\n  private _isAgentUpdating = false;\n  private _updateSessionBlockId: string;\n\n  get isConfigTab() {\n    return !this.tabManagerEnabled || this._heartBeat?.isSuccessByLocal;\n  }\n\n  get shouldBlockBrowser() {\n    // when there is not integrated softphone and not has multiple tabs\n    return !this.isIntegratedSoftphone && !this.hasMultipleTabs;\n  }\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvAgentSession',\n    });\n    const heartBeatInterval =\n      this._deps.evAgentSessionOptions?.heartBeatInterval ?? 1000;\n\n    if (this.tabManagerEnabled) {\n      this._heartBeat = new HeartBeat(\n        `${this._deps.tabManager._tabbie.prefix}sessionConfig`,\n        heartBeatInterval,\n      );\n    }\n\n    // #region those event should put in constructor, that _shouldInit will effect that binding timing.\n    this._deps.evAuth.onLoginSuccess(async () => {\n      if (this._isAgentUpdating) {\n        return;\n      }\n\n      this._afterLogin();\n\n      if (!this._deps.auth.isFreshLogin && this.configured) {\n        try {\n          return await this._autoConfigureAgent();\n        } catch (e) {\n          console.error(e);\n        }\n      }\n\n      this.setFreshConfig();\n\n      this._deps.routerInteraction.push('/sessionConfig');\n    });\n\n    this.onConfigSuccess.push(async () => {\n      if (this._isAgentUpdating) {\n        this._isAgentUpdating = false;\n      } else {\n        this._deps.routerInteraction.push('/dialer');\n      }\n    });\n\n    this._deps.evAuth.beforeAgentLogout(() => {\n      if (!this._isAgentUpdating) {\n        this.resetAllConfig();\n      }\n      this.setConfigSuccess(false);\n      this._heartBeat?.destroy();\n    });\n    // #endregion\n  }\n\n  @storage\n  @state\n  selectedSkillProfileId: string = NONE;\n\n  @storage\n  @state\n  selectedInboundQueueIds: string[] = [];\n\n  @storage\n  @state\n  loginType: LoginTypes = DEFAULT_LOGIN_TYPE;\n\n  @storage\n  @state\n  extensionNumber = '';\n\n  @storage\n  @state\n  takingCall = true;\n\n  @storage\n  @state\n  autoAnswer = false;\n\n  @storage\n  @state\n  configured = false;\n\n  @state\n  configSuccess = false;\n\n  @storage\n  @state\n  formGroup: FormGroup = DEFAULT_FORM_GROUP;\n\n  get isExternalPhone() {\n    return this.formGroup.loginType === loginTypes.externalPhone;\n  }\n\n  get isIntegratedSoftphone() {\n    return this.loginType === loginTypes.integratedSoftphone;\n  }\n\n  get localStorage() {\n    return window?.localStorage;\n  }\n\n  get tabManagerEnabled() {\n    return this._deps.tabManager?._tabbie.enabled;\n  }\n\n  get hasMultipleTabs() {\n    return this._deps.tabManager?.hasMultipleTabs;\n  }\n\n  @computed((that: EvAgentSession) => [that._deps.locale.currentLocale])\n  get loginTypeList() {\n    const { currentLocale } = this._deps.locale;\n\n    return ACCEPTABLE_LOGIN_TYPES.map(\n      (type) =>\n        ({\n          id: type,\n          label: i18n.getString(type, currentLocale),\n        } as LoginType),\n    );\n  }\n\n  @computed((that: EvAgentSession) => [\n    that._deps.evAuth.agent.agentConfig,\n    that._deps.auth.isFreshLogin,\n  ])\n  get inboundQueues() {\n    const { agentConfig } = this._deps.evAuth.agent;\n\n    if (!agentConfig || !agentConfig.inboundSettings) {\n      return [];\n    }\n    const {\n      inboundSettings: { availableQueues = [] },\n    } = agentConfig;\n\n    const { isFreshLogin } = this._deps.auth;\n\n    return availableQueues.map((queue) => ({\n      gateId: queue.gateId,\n      gateName: queue.gateName,\n      checked: isFreshLogin,\n    }));\n  }\n\n  @computed((that: EvAgentSession) => [that.skillProfileList])\n  get defaultSkillProfile() {\n    const defaultSkill = this._pickSkillProfile(this.skillProfileList);\n    return defaultSkill ? defaultSkill.profileId : NONE;\n  }\n\n  @computed((that: EvAgentSession) => [\n    that._deps.evAuth.agent.agentConfig,\n    that._deps.locale.currentLocale,\n  ])\n  get skillProfileList() {\n    const { agentConfig } = this._deps.evAuth.agent;\n\n    if (!agentConfig || !agentConfig.inboundSettings) {\n      return [];\n    }\n    const {\n      inboundSettings: { availableSkillProfiles = [] },\n    } = agentConfig;\n\n    const defaultSkill = this._pickSkillProfile(availableSkillProfiles);\n\n    if (!defaultSkill && availableSkillProfiles.length > 0) {\n      availableSkillProfiles.unshift({\n        profileId: NONE,\n        profileName: i18n.getString(NONE, this._deps.locale.currentLocale),\n      });\n    }\n\n    return availableSkillProfiles;\n  }\n\n  @computed((that: EvAgentSession) => [\n    that.skillProfileList,\n    that.selectedSkillProfileId,\n  ])\n  get selectedSkillProfile() {\n    const selectedSkillProfile = this.skillProfileList.find(\n      (profile) => profile.profileId === this.formGroup.selectedSkillProfileId,\n    );\n    return selectedSkillProfile?.profileName;\n  }\n\n  @computed((that: EvAgentSession) => [\n    that.inboundQueues,\n    that.selectedInboundQueueIds,\n  ])\n  get selectedInboundQueues() {\n    const results = this.formGroup.selectedInboundQueueIds.map((id) => {\n      return this.inboundQueues.find((queue) => queue.gateId === id);\n    });\n    return results.filter((result) => result).map((result) => result.gateName);\n  }\n\n  @action\n  resetAllConfig() {\n    this.selectedInboundQueueIds = [];\n    this.selectedSkillProfileId = NONE;\n    this.loginType = DEFAULT_LOGIN_TYPE;\n    this.extensionNumber = '';\n    this.takingCall = true;\n    this.autoAnswer = false;\n    this.configSuccess = false;\n    this.configured = false;\n  }\n\n  @action\n  setConfigSuccess(status: boolean) {\n    if (status) {\n      this._onConfigureAgentSuccess();\n    }\n\n    this.configSuccess = status;\n    this.configured = status;\n  }\n\n  @track((_: EvAgentSession, type: LoginTypes) => [\n    trackEvents.agentSessionSetLoginType,\n    { value: type },\n  ])\n  @action\n  setLoginType(type: LoginTypes) {\n    this.loginType = type;\n  }\n\n  @track((_: EvAgentSession, skillProfileId: string) => [\n    trackEvents.agentSessionSetSkillProfileId,\n    { value: skillProfileId },\n  ])\n  @action\n  setSkillProfileId(skillProfileId: string) {\n    this.selectedSkillProfileId = skillProfileId;\n  }\n\n  @track((_: EvAgentSession, ids: string[]) => [\n    trackEvents.agentSessionSetInboundQueueIds,\n    { value: ids },\n  ])\n  @action\n  setInboundQueueIds(ids: string[]) {\n    this.selectedInboundQueueIds = ids;\n  }\n\n  @action\n  setExtensionNumber(extensionNumber: string) {\n    this.extensionNumber = extensionNumber;\n  }\n\n  @track((_: EvAgentSession, takingCall: boolean) => [\n    trackEvents.agentSessionSetTakingCall,\n    { value: takingCall },\n  ])\n  @action\n  setTakingCall(takingCall: boolean) {\n    this.takingCall = takingCall;\n  }\n\n  @track((_: EvAgentSession, autoAnswer: boolean) => [\n    trackEvents.agentSessionSetAutoAnswer,\n    { value: autoAnswer },\n  ])\n  @action\n  setAutoAnswer(autoAnswer: boolean) {\n    this.autoAnswer = autoAnswer;\n  }\n\n  @action\n  setFreshConfig() {\n    this._clearCalls();\n\n    this.loginType = DEFAULT_LOGIN_TYPE;\n    this.extensionNumber = '';\n    this.takingCall = true;\n    this.autoAnswer = false;\n    this.configSuccess = false;\n    this.configured = false;\n\n    this.selectedSkillProfileId = this.defaultSkillProfile;\n    this.selectedInboundQueueIds = this.inboundQueues.map(\n      (inboundQueue) => inboundQueue.gateId,\n    );\n  }\n\n  assignFormGroupValue() {\n    const {\n      selectedInboundQueueIds,\n      extensionNumber,\n      loginType,\n      selectedSkillProfileId,\n    } = this.formGroup;\n    this.setInboundQueueIds(selectedInboundQueueIds);\n    this.setExtensionNumber(extensionNumber);\n    this.setLoginType(loginType);\n    this.setSkillProfileId(selectedSkillProfileId);\n    this.resetFormGroup();\n  }\n\n  @action\n  setFormGroup(data: FormGroup) {\n    this.formGroup = { ...this.formGroup, ...data };\n  }\n\n  resetFormGroup() {\n    this.setFormGroup({\n      selectedInboundQueueIds: this.selectedInboundQueueIds,\n      selectedSkillProfileId: this.selectedSkillProfileId,\n      loginType: this.loginType,\n      extensionNumber: this.extensionNumber,\n    });\n  }\n\n  @computed((that: EvAgentSession) => [\n    that.selectedInboundQueueIds,\n    that.selectedSkillProfileId,\n    that.loginType,\n    that.extensionNumber,\n    that.formGroup,\n  ])\n  get isSessionChanged() {\n    const sessionConfigs = {\n      selectedInboundQueueIds: this.selectedInboundQueueIds,\n      selectedSkillProfileId: this.selectedSkillProfileId,\n      loginType: this.loginType,\n      extensionNumber: this.extensionNumber,\n    };\n    return !equals(sessionConfigs, this.formGroup);\n  }\n\n  _shouldInit() {\n    return (\n      super._shouldInit() &&\n      this._deps.auth.loggedIn &&\n      this._deps.evAuth.connected\n    );\n  }\n\n  _shouldReset() {\n    return super._shouldReset() && !this._deps.auth.loggedIn;\n  }\n\n  async onStateChange() {\n    if (this.ready && this.tabManagerEnabled && this._deps.tabManager.ready) {\n      await this._checkTabManagerEvent();\n    }\n  }\n\n  private async _checkTabManagerEvent() {\n    const { event } = this._deps.tabManager;\n    if (event) {\n      switch (event.name) {\n        case tabManagerEvents.AGENT_CONFIG_SUCCESS:\n          await this._othersTabConfigureAgent();\n          break;\n        case tabManagerEvents.UPDATE_SESSION:\n          this._updateSessionBlockId = this._deps.block.block();\n          this._isAgentUpdating = true;\n          this._deps.evAuth.onceLogout(async () => {\n            await sleep(WAIT_EV_SERVER_ROLLBACK_DELAY);\n            this._loginPromise = this._deps.evAuth.loginAgent();\n          });\n          break;\n        case tabManagerEvents.UPDATE_SESSION_SUCCESS:\n          try {\n            await this._loginPromise;\n            await this._autoConfigureAgent();\n            this._deps.block.unblock(this._updateSessionBlockId);\n\n            this._isAgentUpdating = false;\n          } catch (error) {\n            // when that auto config fail, just reload that tab\n            console.log(error);\n            window.location.reload();\n          }\n          break;\n        case tabManagerEvents.UPDATE_SESSION_SUCCESS_ALERT:\n          this._showUpdateSuccessAlert();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private _afterLogin() {\n    // if that is not first login set SessionConfig data again\n    if (!this._deps.auth.isFreshLogin) {\n      const checkSelectIsInList = this.skillProfileList.some(\n        (profile) => profile.profileId === this.selectedSkillProfileId,\n      );\n      if (!checkSelectIsInList) {\n        this.setSkillProfileId(this.defaultSkillProfile);\n      }\n\n      // check all selected queue is in inboundQueue list\n      const checkedInboundQueues = this.selectedInboundQueueIds.reduce(\n        (result, inboundQueueId) => {\n          if (\n            this.inboundQueues.some(\n              (inboundQueue) => inboundQueue.gateId === inboundQueueId,\n            )\n          ) {\n            result.push(inboundQueueId);\n          }\n          return result;\n        },\n        [],\n      );\n      this.setInboundQueueIds(checkedInboundQueues);\n    }\n  }\n\n  /**\n   * config agent in session config page\n   * @param triggerEvent is that should trigger event, default is true\n   */\n  @track((that: EvAgentSession) => [\n    trackEvents.agentSessionConfigureAgent,\n    {\n      'Voice Connection': that.loginType,\n      'Persistent Voice Connection': that.takingCall,\n      'Skill Profile': that.selectedSkillProfile,\n      'Inbound Queues': that.selectedInboundQueues,\n      'Auto Answer': that.autoAnswer,\n    },\n  ])\n  async configureAgent(triggerEvent: boolean = true) {\n    const config = this._checkFieldsResult();\n    this._clearCalls();\n\n    let result = await this._connectEvServer(config);\n\n    // Session timeout\n    // this will occur when stay in session config page for long time\n    if (result.data.status !== 'SUCCESS') {\n      this._deps.routerInteraction.push('/sessionConfig');\n      await this._deps.evAuth.newReconnect(false);\n\n      result = await this._connectEvServer(config);\n    }\n\n    this._handleAgentResult(result.data);\n\n    if (triggerEvent) {\n      this._onTriggerAgentConfig();\n      this._sendTabManager(tabManagerEvents.AGENT_CONFIG_SUCCESS);\n      this.setConfigSuccess(true);\n    }\n\n    if (this.tabManagerEnabled) {\n      this._heartBeat.heartBeatOnSuccess();\n    }\n  }\n\n  async updateAgent(voiceConnectionChanged: boolean) {\n    await this._deps.block.next(async () => {\n      const config = this._checkFieldsResult();\n\n      this._clearCalls();\n\n      this._isAgentUpdating = true;\n\n      if (voiceConnectionChanged) {\n        this._sendTabManager(tabManagerEvents.UPDATE_SESSION);\n        this._deps.evAuth.sendLogoutTabEvent();\n\n        await this._deps.evAuth.logoutAgent();\n\n        // wait all login is logout complete.\n        await sleep(WAIT_EV_SERVER_ROLLBACK_DELAY);\n\n        await this._deps.evAuth.loginAgent();\n        config.isForce = true;\n      }\n\n      const result = await this._connectEvServer(config);\n      this._handleAgentResult(result.data);\n\n      this._onTriggerAgentConfig();\n\n      this.setConfigSuccess(true);\n\n      await this.updateAgentConfigs();\n\n      if (this.tabManagerEnabled) {\n        this._heartBeat.heartBeatOnSuccess();\n      }\n\n      if (voiceConnectionChanged) {\n        this._sendTabManager(tabManagerEvents.UPDATE_SESSION_SUCCESS);\n      }\n\n      this.goToSettingsPage();\n\n      this._sendTabManager(tabManagerEvents.UPDATE_SESSION_SUCCESS_ALERT);\n      this._showUpdateSuccessAlert();\n    });\n  }\n\n  goToSettingsPage() {\n    this._deps.routerInteraction.push('/settings');\n  }\n\n  private _showUpdateSuccessAlert() {\n    this._deps.alert.success({\n      message: messageTypes.UPDATE_AGENT_SUCCESS,\n    });\n  }\n\n  private _handleAgentResult({ message, status }: EvAgentConfig) {\n    if (status !== 'SUCCESS') {\n      if (typeof message === 'string') {\n        this._deps.alert.danger({\n          message: messageTypes.AGENT_CONFIG_DETAIL_ERROR,\n          ttl: 0,\n          payload: message,\n        });\n      } else {\n        this._deps.alert.danger({\n          message: this._isAgentUpdating\n            ? messageTypes.UPDATE_AGENT_ERROR\n            : messageTypes.AGENT_CONFIG_ERROR,\n          ttl: 0,\n        });\n      }\n      throw new Error(message);\n    }\n    this.assignFormGroupValue();\n  }\n\n  private _autoConfigureAgent() {\n    if (this.tabManagerEnabled) {\n      const isWorkingByLocal = this._heartBeat.isWorkingByLocal;\n\n      if (!isWorkingByLocal) {\n        this._heartBeat.heartBeatOnWorking();\n      }\n\n      // check isSuccess first\n      if (this._heartBeat.isSuccessByLocal || this._isAgentUpdating) {\n        return this._othersTabConfigureAgent();\n      }\n\n      // then check local\n      if (!isWorkingByLocal) {\n        return this.configureAgent();\n      }\n    } else {\n      return this.configureAgent();\n    }\n  }\n\n  async _othersTabConfigureAgent() {\n    if (this.configSuccess) {\n      return;\n    }\n    try {\n      await this._deps.evClient.multiLoginRequest();\n\n      this.setConfigSuccess(true);\n\n      await this.updateAgentConfigs();\n\n      this._heartBeat.heartBeatOnSuccess();\n      return;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  private _pickSkillProfile(skillProfileList: EvAvailableSkillProfile[]) {\n    return skillProfileList.find((item) => item.isDefault === '1');\n  }\n\n  private _onConfigureAgentSuccess() {\n    this.onConfigSuccess.forEach((hook) => {\n      try {\n        hook();\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  private _onTriggerAgentConfig() {\n    this.onTriggerConfig.forEach((hook) => {\n      try {\n        hook();\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  async updateAgentConfigs() {\n    const agentConfig = await this._deps.evClient.getAgentConfig();\n    const agent = {\n      ...this._deps.evAuth.agent,\n      agentConfig,\n    };\n    this._deps.evAuth.setAgent(agent);\n  }\n\n  private async _connectEvServer(config: EvConfigureAgentOptions) {\n    let result = await this._deps.evClient.configureAgent(config);\n    const { status } = result.data;\n\n    if (status === messageTypes.EXISTING_LOGIN_FOUND) {\n      const { currentLocale } = this._deps.locale;\n\n      // TODO: think about sync up in all tabs?\n      const modalId = await this._deps.modal.confirmSync({\n        title: i18n.getString('multipleLoginsTitle', currentLocale),\n        content: i18n.getString('multipleLoginsContent', currentLocale),\n        okText: i18n.getString('multipleLoginsConfirm', currentLocale),\n        cancelText: i18n.getString('multipleLoginsCancel', currentLocale),\n        onOK: async () => {\n          result = await this._deps.evClient.configureAgent({\n            ...config,\n            isForce: true,\n          });\n          this.isForceLogin = true;\n        },\n      });\n\n      if (!modalId) {\n        this.isForceLogin = false;\n        throw new Error(status);\n      }\n    } else if (status === messageTypes.EXISTING_LOGIN_ENGAGED) {\n      this._deps.alert.danger({\n        message: messageTypes.EXISTING_LOGIN_ENGAGED,\n        ttl: 0,\n      });\n\n      throw new Error(messageTypes.EXISTING_LOGIN_ENGAGED);\n    }\n\n    return result;\n  }\n\n  private _checkFieldsResult(): EvConfigureAgentOptions {\n    if (this.formGroup.selectedInboundQueueIds.length === 0) {\n      this._deps.alert.danger({\n        message: messageTypes.NO_AGENT_SELECTED,\n        ttl: 0,\n      });\n      throw new Error(`'queueIds' is an empty array.`);\n    }\n\n    return {\n      dialDest: this._getDialDest(),\n      queueIds: this.formGroup.selectedInboundQueueIds,\n      skillProfileId:\n        this.formGroup.selectedSkillProfileId === NONE\n          ? ''\n          : this.formGroup.selectedSkillProfileId,\n    };\n  }\n\n  private _getDialDest() {\n    // Only external phone has number input\n    switch (this.formGroup.loginType) {\n      case loginTypes.externalPhone: {\n        if (!this.formGroup.extensionNumber) {\n          this._deps.alert.danger({\n            message: messageTypes.EMPTY_PHONE_NUMBER,\n            ttl: 0,\n          });\n          throw new Error(`'extensionNumber' is an empty number.`);\n        }\n        const formatPhoneNumber = format({\n          phoneNumber: this.formGroup.extensionNumber,\n          areaCode: this._deps.regionSettings.areaCode,\n        });\n        const { parsedNumber, isValid } = parse({\n          input: formatPhoneNumber,\n        });\n        if (!isValid || !parsedNumber || parsedNumber === '') {\n          this._deps.alert.danger({\n            message: messageTypes.INVALID_PHONE_NUMBER,\n            ttl: 0,\n          });\n          throw new Error(`'extensionNumber' is not a valid number.`);\n        }\n        this.setFormGroup({ extensionNumber: parsedNumber });\n        return this.formGroup.extensionNumber;\n      }\n      case loginTypes.integratedSoftphone:\n        return 'integrated';\n      case loginTypes.RC_PHONE:\n      default:\n        return 'RC_PHONE';\n    }\n  }\n\n  private _sendTabManager(event: string, value?: any) {\n    this._deps.tabManager?.send(event, value);\n  }\n\n  private _clearCalls() {\n    if (typeof this.clearCalls === 'function') {\n      this.clearCalls();\n    }\n  }\n}\n\nexport { EvAgentSession };\n"],"file":"EvAgentSession.js"}