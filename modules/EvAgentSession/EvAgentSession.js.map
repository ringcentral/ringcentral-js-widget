{"version":3,"sources":["modules/EvAgentSession/EvAgentSession.ts"],"names":["ACCEPTABLE_LOGIN_TYPES","loginTypes","integratedSoftphone","RC_PHONE","externalPhone","DEFAULT_LOGIN_TYPE","NONE","dropDownOptions","None","WAIT_EV_SERVER_ROLLBACK_DELAY","DEFAULT_FORM_GROUP","selectedInboundQueueIds","loginType","selectedSkillProfileId","extensionNumber","autoAnswer","EvAgentSession","name","deps","dep","optional","that","_deps","locale","currentLocale","evAuth","agent","auth","isFreshLogin","skillProfileList","inboundQueues","_","type","trackEvents","agentSessionSetLoginType","value","skillProfileId","agentSessionSetSkillProfileId","ids","agentSessionSetInboundQueueIds","takingCall","agentSessionSetTakingCall","agentSessionSetAutoAnswer","formGroup","agentSessionConfigureAgent","selectedSkillProfile","selectedInboundQueues","_tabConfigSuccess","alive","_tabConfigWorking","tabManagerEnabled","isAlive","isIntegratedSoftphone","hasMultipleTabs","enableCache","storageKey","isForceLogin","isReconnected","isAgentUpdating","_isReConfiguring","_autoConfigureRetryTimes","_eventEmitter","EventEmitter","_loginPromise","_updateSessionBlockId","_isLogin","TabLife","tabManager","prefix","_mainTabBeforeunloadHandler","console","log","isMainTab","firstTabIdExcludeMainTab","_mainTabAfterUnloadHandler","setMainTabId","_sendTabManager","tabManagerEvents","MAIN_TAB_WILL_UNLOAD","onceLoginSuccess","beforeAgentLogout","_resetAllState","presence","beforeunloadHandler","shouldBlockBrowser","configSuccess","configured","token","accessToken","status","_emitConfigSuccess","_clearCalls","defaultAutoAnswerOn","defaultSkillProfileId","_modules","agentPermissions","allowInbound","map","inboundQueue","gateId","data","setFormGroup","loggedIn","checkIsMainTabAlive","id","beforeunload","add","onAfterUnload","_init","onConfigSuccess","calls","length","setDialoutStatus","dialoutStatuses","idle","routerInteraction","push","block","next","configureAgent","triggerEvent","error","_emitReConfigFail","_configWorkingAlive","_mainTabHandle","_configSuccessAlive","connected","_tabReConfig","onLeave","isFirstTab","isLeave","_pollAskIfCanBeNewMainTab","_initTabLife","_initAgentSession","onLoginSuccess","_afterLogin","_autoConfigureAgent","e","setFreshConfig","resetFormGroup","_navigateToSessionConfigPage","resetAllConfig","setConfigSuccess","_destroyTabLife","clear","removeAfterUnloadListener","ready","_checkTabManagerEvent","event","args","AGENT_CONFIG_SUCCESS","UPDATE_SESSION","SET_MIAN_TAB_ID","UPDATE_SESSION_SUCCESS","UPDATE_SESSION_SUCCESS_ALERT","UPDATE_SESSION_FAIL","RELOGIN","CONFIGURE_FAIL","_othersTabConfigureAgent","_configureFail","onceLogoutThenLogin","then","loginPromise","tabbie","_newMainTabReConfig","mainTabId","setMainTabIdInThisTab","_unblockUpdateSession","window","location","reload","_showUpdateSuccessAlert","reLoginAgent","isBlock","alertMessage","messageTypes","NOT_INBOUND_QUEUE_SELECTED","unblock","init","destroy","checkSelectIsInList","some","profile","profileId","setSkillProfileId","checkedInboundQueues","reduce","result","inboundQueueId","setInboundQueueIds","emit","agentSessionEvents","TRIGGER_CONFIG","callback","on","CONFIG_SUCCESS","RECONFIG_FAIL","_setMainTabId","evClient","getRefreshedToken","emitSetMainTabComplete","getAgentConfig","agentConfig","setAgent","config","_checkFieldsResult","needAssignFormGroupValue","_connectEvServer","newReconnect","_handleAgentResult","_emitTriggerConfig","voiceConnectionChanged","isForce","updateAgentConfigs","goToSettingsPage","fn","alert","danger","message","ttl","sendLogoutTabEvent","refreshToken","access_token","setAccessToken","logoutAgent","loginAgent","Promise","resolve","onceLogout","success","UPDATE_AGENT_SUCCESS","AGENT_CONFIG_DETAIL_ERROR","payload","UPDATE_AGENT_ERROR","AGENT_CONFIG_ERROR","Error","assignFormGroupValue","timeoutId","resolves","race","res","once","tabs","checkIsAlive","setTimeout","clearTimeout","off","forEach","r","needAsyncAllTabs","multiLoginRequest","notInboundQueueSelected","find","item","isDefault","EXISTING_LOGIN_FOUND","modalUI","confirm","title","i18n","getString","content","okText","cancelText","onOK","size","confirmed","EXISTING_LOGIN_ENGAGED","dialDest","_getDialDest","queueIds","EMPTY_PHONE_NUMBER","formatPhoneNumber","phoneNumber","input","parsedNumber","isValid","INVALID_PHONE_NUMBER","send","clearCalls","localStorage","enable","label","inboundSettings","availableQueues","queue","gateName","checked","defaultSkill","_pickSkillProfile","availableSkillProfiles","profileName","results","filter","sessionConfigs","RcModuleV2","storage","state","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  track,\n} from '@ringcentral-integration/core';\nimport { format, parse } from '@ringcentral-integration/phone-number';\nimport { EventEmitter } from 'events';\nimport { equals } from 'ramda';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport sleep from 'ringcentral-integration/lib/sleep';\n\nimport {\n  agentSessionEvents,\n  dialoutStatuses,\n  dropDownOptions,\n  LoginTypes,\n  loginTypes,\n  messageTypes,\n  tabManagerEvents,\n} from '../../enums';\nimport { LoginType } from '../../interfaces/EvAgentSessionUI.interface';\nimport {\n  EvAgentConfig,\n  EvAvailableSkillProfile,\n  EvConfigureAgentOptions,\n} from '../../lib/EvClient';\nimport { TabLife } from '../../lib/tabLife';\nimport { trackEvents } from '../../lib/trackEvents';\nimport { AgentSession, Deps, FormGroup } from './EvAgentSession.interface';\nimport i18n from './i18n';\nimport { tabManagerEnabled } from './tabManagerEnabled.decorator';\n\nconst ACCEPTABLE_LOGIN_TYPES = [\n  loginTypes.integratedSoftphone,\n  loginTypes.RC_PHONE,\n  loginTypes.externalPhone,\n];\nconst DEFAULT_LOGIN_TYPE = loginTypes.integratedSoftphone;\n\nconst NONE = dropDownOptions.None;\n\n// ! wait all tab is logout complete, server has some delay after logout\nconst WAIT_EV_SERVER_ROLLBACK_DELAY = 2000;\n\nconst DEFAULT_FORM_GROUP = {\n  selectedInboundQueueIds: [] as any,\n  loginType: DEFAULT_LOGIN_TYPE,\n  selectedSkillProfileId: NONE,\n  extensionNumber: '',\n  autoAnswer: false,\n};\n\ntype AutoConfigType =\n  | 'already success'\n  | 'other tab config'\n  | 'config'\n  | 'retry';\n\ntype ConfigureAgentParams = {\n  config?: EvConfigureAgentOptions;\n  triggerEvent?: boolean;\n  needAssignFormGroupValue?: boolean;\n};\n\n@Module({\n  name: 'EvAgentSession',\n  deps: [\n    'EvClient',\n    'Auth',\n    'EvAuth',\n    'Storage',\n    'Alert',\n    'Auth',\n    'Locale',\n    'Presence',\n    'RouterInteraction',\n    'ModalUI',\n    'Block',\n    'Beforeunload',\n    { dep: 'TabManager', optional: true },\n    { dep: 'EvAgentSessionOptions', optional: true },\n  ],\n})\nclass EvAgentSession extends RcModuleV2<Deps> implements AgentSession {\n  isForceLogin = false;\n  isReconnected = false;\n  isAgentUpdating = false;\n\n  private _isReConfiguring = false;\n\n  _autoConfigureRetryTimes = 0;\n\n  private _eventEmitter = new EventEmitter();\n  private _loginPromise: Promise<void>;\n\n  private _updateSessionBlockId: string;\n  private _isLogin = false;\n\n  private _tabConfigWorking = new TabLife(\n    `${this._deps.tabManager.prefix}sessionConfig_working`,\n  );\n\n  private _tabConfigSuccess = new TabLife(\n    `${this._deps.tabManager.prefix}sessionConfig_success`,\n  );\n\n  @tabManagerEnabled()\n  private _configSuccessAlive() {\n    this._tabConfigSuccess.alive();\n  }\n\n  @tabManagerEnabled()\n  private _configWorkingAlive() {\n    this._tabConfigWorking.alive();\n  }\n\n  async isConfigTabAlive() {\n    return !this.tabManagerEnabled || this._tabConfigSuccess?.isAlive();\n  }\n\n  get shouldBlockBrowser() {\n    // when there is not integrated softphone and not has multiple tabs\n    return !this.isIntegratedSoftphone && !this.hasMultipleTabs;\n  }\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvAgentSession',\n    });\n    // ! that onceLoginSuccess for get event before onInitOnce.\n    this._deps.evAuth.onceLoginSuccess(() => {\n      // when that is seconds time get onLoginSuccess\n      console.log('----------onLoginSuccess1');\n      this._isLogin = true;\n    });\n    // ! logout event should in constructor, when logout that will not call init.\n    this._deps.evAuth.beforeAgentLogout(() => {\n      this._resetAllState();\n    });\n\n    this._deps.presence.beforeunloadHandler = () => this.shouldBlockBrowser;\n  }\n\n  @storage\n  @state\n  selectedSkillProfileId: string = NONE;\n\n  @storage\n  @state\n  selectedInboundQueueIds: string[] = [];\n\n  @storage\n  @state\n  loginType: LoginTypes = DEFAULT_LOGIN_TYPE;\n\n  @storage\n  @state\n  extensionNumber = '';\n\n  @storage\n  @state\n  takingCall = true;\n\n  @storage\n  @state\n  autoAnswer = false;\n\n  @storage\n  @state\n  configured = false;\n\n  @state\n  configSuccess = false;\n\n  @storage\n  @state\n  formGroup: FormGroup = DEFAULT_FORM_GROUP;\n\n  @storage\n  @state\n  accessToken = '';\n\n  get isExternalPhone() {\n    return this.formGroup.loginType === loginTypes.externalPhone;\n  }\n\n  get isIntegratedSoftphone() {\n    return this.loginType === loginTypes.integratedSoftphone;\n  }\n\n  get localStorage() {\n    return window?.localStorage;\n  }\n\n  get tabManagerEnabled() {\n    return this._deps.tabManager?.enable;\n  }\n\n  get hasMultipleTabs() {\n    return this._deps.tabManager?.hasMultipleTabs;\n  }\n\n  @computed((that: EvAgentSession) => [that._deps.locale.currentLocale])\n  get loginTypeList() {\n    const { currentLocale } = this._deps.locale;\n\n    return ACCEPTABLE_LOGIN_TYPES.map(\n      (type) =>\n        ({\n          id: type,\n          label: i18n.getString(type, currentLocale),\n        } as LoginType),\n    );\n  }\n\n  @computed((that: EvAgentSession) => [\n    that._deps.evAuth.agent,\n    that._deps.auth.isFreshLogin,\n  ])\n  get inboundQueues() {\n    const { agentConfig, agentPermissions } = this._deps.evAuth;\n    if (\n      !agentConfig ||\n      !agentConfig?.inboundSettings ||\n      !agentPermissions?.allowInbound\n    ) {\n      return [];\n    }\n    const {\n      inboundSettings: { availableQueues = [] },\n    } = agentConfig;\n\n    const { isFreshLogin } = this._deps.auth;\n\n    return availableQueues.map((queue) => ({\n      gateId: queue.gateId,\n      gateName: queue.gateName,\n      checked: isFreshLogin,\n    }));\n  }\n\n  @computed((that: EvAgentSession) => [that.skillProfileList])\n  get defaultSkillProfileId() {\n    const defaultSkill = this._pickSkillProfile(this.skillProfileList);\n    return defaultSkill ? defaultSkill.profileId : NONE;\n  }\n\n  @computed((that: EvAgentSession) => [\n    that._deps.evAuth.agent,\n    that._deps.locale.currentLocale,\n  ])\n  get skillProfileList() {\n    const { agentConfig } = this._deps.evAuth.agent || {};\n\n    if (!agentConfig || !agentConfig.inboundSettings) {\n      return [];\n    }\n    const {\n      inboundSettings: { availableSkillProfiles = [] },\n    } = agentConfig;\n\n    const defaultSkill = this._pickSkillProfile(availableSkillProfiles);\n\n    if (!defaultSkill && availableSkillProfiles.length > 0) {\n      return [\n        {\n          profileId: NONE,\n          profileName: i18n.getString(NONE, this._deps.locale.currentLocale),\n        },\n        ...availableSkillProfiles,\n      ];\n    }\n\n    return availableSkillProfiles;\n  }\n\n  @computed((that: EvAgentSession) => [\n    that.skillProfileList,\n    that.selectedSkillProfileId,\n  ])\n  get selectedSkillProfile() {\n    const selectedSkillProfile = this.skillProfileList.find(\n      (profile) => profile.profileId === this.formGroup.selectedSkillProfileId,\n    );\n    return selectedSkillProfile?.profileName;\n  }\n\n  @computed((that: EvAgentSession) => [\n    that.inboundQueues,\n    that.selectedInboundQueueIds,\n  ])\n  get selectedInboundQueues() {\n    const results = this.formGroup.selectedInboundQueueIds.map((id) => {\n      return this.inboundQueues.find((queue) => queue.gateId === id);\n    });\n    return results.filter((result) => result).map((result) => result.gateName);\n  }\n\n  @action\n  resetAllConfig() {\n    this.selectedInboundQueueIds = [];\n    this.selectedSkillProfileId = NONE;\n    this.loginType = DEFAULT_LOGIN_TYPE;\n    this.extensionNumber = '';\n    this.takingCall = true;\n    this.autoAnswer = false;\n    this.configSuccess = false;\n    this.configured = false;\n  }\n\n  @action\n  setAccessToken(token: string) {\n    this.accessToken = token;\n  }\n\n  @action\n  setConfigSuccess(status: boolean) {\n    console.log('setConfigSuccess~', status);\n    if (status) {\n      this._emitConfigSuccess();\n    }\n\n    this.configSuccess = status;\n    this.configured = status;\n  }\n\n  @track((_: EvAgentSession, type: LoginTypes) => [\n    trackEvents.agentSessionSetLoginType,\n    { value: type },\n  ])\n  @action\n  setLoginType(type: LoginTypes) {\n    this.loginType = type;\n  }\n\n  @track((_: EvAgentSession, skillProfileId: string) => [\n    trackEvents.agentSessionSetSkillProfileId,\n    { value: skillProfileId },\n  ])\n  @action\n  setSkillProfileId(skillProfileId: string) {\n    this.selectedSkillProfileId = skillProfileId;\n  }\n\n  @track((_: EvAgentSession, ids: string[]) => [\n    trackEvents.agentSessionSetInboundQueueIds,\n    { value: ids },\n  ])\n  @action\n  setInboundQueueIds(ids: string[]) {\n    this.selectedInboundQueueIds = ids;\n  }\n\n  @action\n  setExtensionNumber(extensionNumber: string) {\n    this.extensionNumber = extensionNumber;\n  }\n\n  @track((_: EvAgentSession, takingCall: boolean) => [\n    trackEvents.agentSessionSetTakingCall,\n    { value: takingCall },\n  ])\n  @action\n  setTakingCall(takingCall: boolean) {\n    this.takingCall = takingCall;\n  }\n\n  @track((_: EvAgentSession, autoAnswer: boolean) => [\n    trackEvents.agentSessionSetAutoAnswer,\n    { value: autoAnswer },\n  ])\n  @action\n  setAutoAnswer(autoAnswer: boolean) {\n    this.autoAnswer = autoAnswer;\n  }\n\n  @action\n  setFreshConfig() {\n    this._clearCalls();\n\n    this.loginType = DEFAULT_LOGIN_TYPE;\n    this.extensionNumber = '';\n    this.takingCall = true;\n    this.autoAnswer = this.defaultAutoAnswerOn;\n    this.configSuccess = false;\n    this.configured = false;\n\n    this.selectedSkillProfileId = this.defaultSkillProfileId;\n    if (this._modules.evAuth.agentPermissions.allowInbound) {\n      this.selectedInboundQueueIds = this.inboundQueues.map(\n        (inboundQueue) => inboundQueue.gateId,\n      );\n    }\n  }\n\n  get defaultAutoAnswerOn() {\n    return this._deps.evAuth.agentPermissions.defaultAutoAnswerOn;\n  }\n\n  @action\n  assignFormGroupValue() {\n    const {\n      selectedInboundQueueIds,\n      extensionNumber,\n      loginType,\n      selectedSkillProfileId,\n      autoAnswer,\n    } = this.formGroup;\n    this.selectedInboundQueueIds = selectedInboundQueueIds;\n    this.extensionNumber = extensionNumber;\n    this.loginType = loginType;\n    this.selectedSkillProfileId = selectedSkillProfileId;\n    this.autoAnswer = autoAnswer;\n  }\n\n  @action\n  setFormGroup(data: FormGroup) {\n    this.formGroup = { ...this.formGroup, ...data };\n  }\n\n  resetFormGroup() {\n    this.setFormGroup({\n      selectedInboundQueueIds: this.selectedInboundQueueIds,\n      selectedSkillProfileId: this.selectedSkillProfileId,\n      loginType: this.loginType,\n      extensionNumber: this.extensionNumber,\n      autoAnswer: this.autoAnswer,\n    });\n  }\n\n  @computed((that: EvAgentSession) => [\n    that.selectedInboundQueueIds,\n    that.selectedSkillProfileId,\n    that.loginType,\n    that.extensionNumber,\n    that.formGroup,\n  ])\n  get isSessionChanged() {\n    const sessionConfigs = {\n      selectedInboundQueueIds: this.selectedInboundQueueIds,\n      selectedSkillProfileId: this.selectedSkillProfileId,\n      loginType: this.loginType,\n      extensionNumber: this.extensionNumber,\n      autoAnswer: this.autoAnswer,\n    };\n    return !equals(sessionConfigs, this.formGroup);\n  }\n\n  _shouldReset() {\n    return super._shouldReset() && !this._deps.auth.loggedIn;\n  }\n\n  async checkIsMainTabAlive() {\n    return this._deps.tabManager.checkIsMainTabAlive();\n  }\n\n  private _mainTabBeforeunloadHandler = () => {\n    console.log(\n      '_mainTabBeforeunloadHandler~~',\n      this._deps.tabManager.hasMultipleTabs,\n      this.isMainTab,\n      this._deps.tabManager.firstTabIdExcludeMainTab,\n    );\n\n    if (\n      this._deps.tabManager.hasMultipleTabs &&\n      this.isMainTab &&\n      this._deps.tabManager.firstTabIdExcludeMainTab\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  private _mainTabAfterUnloadHandler = () => {\n    console.log(\n      '_mainTabAfterUnloadHandler~~',\n      this._deps.tabManager.firstTabIdExcludeMainTab,\n    );\n    if (!this.isMainTab) return;\n    const firstTabIdExcludeMainTab = this._deps.tabManager\n      .firstTabIdExcludeMainTab;\n\n    this._deps.tabManager.setMainTabId(firstTabIdExcludeMainTab);\n\n    this._sendTabManager(\n      tabManagerEvents.MAIN_TAB_WILL_UNLOAD,\n      firstTabIdExcludeMainTab,\n    );\n  };\n\n  @tabManagerEnabled()\n  private _setMainTabId() {\n    console.log('_setMainTabId~~~');\n    const { id } = this._deps.tabManager;\n    this._deps.tabManager.setMainTabId(id);\n    this._deps.beforeunload.add(this._mainTabBeforeunloadHandler);\n    this._deps.beforeunload.onAfterUnload(\n      this._mainTabAfterUnloadHandler,\n      true,\n    );\n  }\n\n  onInitOnce() {\n    this._init();\n\n    this.onConfigSuccess(() => {\n      if (this._deps.presence.calls.length === 0) {\n        this._deps.presence.setDialoutStatus(dialoutStatuses.idle);\n      }\n\n      if (this.isAgentUpdating) {\n        this.isAgentUpdating = false;\n      } else {\n        console.log('!!!!to Dialer');\n        this._deps.routerInteraction.push('/dialer');\n      }\n    });\n  }\n\n  private async _tabReConfig() {\n    console.log('_tabReConfig~~~', this._isReConfiguring);\n    if (this._isReConfiguring) return;\n\n    this._isReConfiguring = true;\n\n    if (this.isIntegratedSoftphone) {\n      try {\n        await this._deps.block.next(async () => {\n          // !! sip register need to configure agent at fisrt\n          await this.configureAgent({\n            triggerEvent: false,\n          });\n        });\n      } catch (error) {\n        console.error('re config fail', error);\n        this._emitReConfigFail();\n        return;\n      }\n    } else {\n      this._configWorkingAlive();\n    }\n\n    this.isReconnected = true;\n\n    this._mainTabHandle();\n    this._configSuccessAlive();\n\n    this._isReConfiguring = false;\n  }\n\n  // _newMainTabReConfig and _pollAskIfCanBeNewMainTab are all for handle new main tab\n  private async _newMainTabReConfig() {\n    console.log(\n      '_newMainTabReConfig~',\n      !this.isReconnected,\n      this._deps.evAuth.connected,\n      this.configSuccess,\n      this.isMainTab,\n    );\n\n    if (\n      !this.isReconnected &&\n      this._deps.evAuth.connected &&\n      this.configSuccess &&\n      this.isMainTab\n    ) {\n      console.log('_newMainTabReConfig success~');\n      await this._tabReConfig();\n    }\n  }\n\n  @tabManagerEnabled()\n  private _pollAskIfCanBeNewMainTab() {\n    console.log('_pollAskIfCanBeNewMainTab~~');\n    this._tabConfigSuccess.onLeave(async () => {\n      console.log(\n        '_tabReConfig in _pollAskIfCanBeNewMainTab~',\n        this._deps.tabManager.isFirstTab,\n        this._deps.evAuth.connected,\n        this.configSuccess,\n        !this._isReConfiguring,\n      );\n      if (\n        this._deps.tabManager.isFirstTab &&\n        this._deps.evAuth.connected &&\n        this.configSuccess &&\n        !this._isReConfiguring &&\n        (await this._tabConfigWorking.isLeave())\n      ) {\n        await this._tabReConfig();\n      } else if (!this.isMainTab) {\n        this._pollAskIfCanBeNewMainTab();\n      }\n    }, 3000);\n  }\n\n  private async _init() {\n    if (this._isLogin) {\n      this._initTabLife();\n      await this._initAgentSession();\n    }\n    // ! that must call after onInitOnce, because when that is not in init once,\n    // ! that configured will some times to be false because storage block\n    this._deps.evAuth.onLoginSuccess(() => {\n      // when that is seconds time get onLoginSuccess\n      console.log('----------onLoginSuccess2');\n      this._initTabLife();\n      this._initAgentSession();\n    });\n  }\n\n  private _initAgentSession() {\n    console.log('_initAgentSession~', this.isAgentUpdating);\n    if (this.isAgentUpdating) {\n      return;\n    }\n    this._afterLogin();\n\n    console.log('autoconfig~', !this._deps.auth.isFreshLogin, this.configured);\n\n    if (this._deps.auth.isFreshLogin === false && this.configured) {\n      try {\n        return this._autoConfigureAgent();\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    this.setFreshConfig();\n\n    this.resetFormGroup();\n\n    this._navigateToSessionConfigPage();\n  }\n\n  private _navigateToSessionConfigPage() {\n    this._deps.routerInteraction.push('/sessionConfig');\n    console.log('to sessionConfig~~');\n  }\n\n  // ! also reset in onReset for auth logout by rc\n  onReset() {\n    console.log('onReset in EvAgentSession~~');\n    try {\n      this._resetAllState();\n      this.isAgentUpdating = false;\n    } catch (error) {\n      // ignore error\n    }\n  }\n\n  private _resetAllState() {\n    console.log('_resetAllState~~', this.isMainTab);\n    if (!this.isAgentUpdating) {\n      this.resetAllConfig();\n    }\n    if (this.isMainTab) {\n      this._deps.tabManager.setMainTabId(null);\n    }\n    this.setConfigSuccess(false);\n    this.isReconnected = false;\n    this._destroyTabLife();\n    this._deps.beforeunload.clear();\n    this._deps.beforeunload.removeAfterUnloadListener(\n      this._mainTabAfterUnloadHandler,\n    );\n  }\n\n  async onStateChange() {\n    if (this.ready && this.tabManagerEnabled && this._deps.tabManager.ready) {\n      await this._checkTabManagerEvent();\n    }\n  }\n\n  private async _checkTabManagerEvent() {\n    const { event } = this._deps.tabManager;\n    const data = event?.args[0];\n    if (event) {\n      switch (event.name) {\n        case tabManagerEvents.AGENT_CONFIG_SUCCESS:\n          console.log(\n            '_othersTabConfigureAgent from tabManagerEvents.AGENT_CONFIG_SUCCESS~~',\n          );\n          try {\n            await this._othersTabConfigureAgent();\n          } catch (error) {\n            this._configureFail();\n          }\n          break;\n        case tabManagerEvents.UPDATE_SESSION:\n          this._updateSessionBlockId = this._deps.block.block();\n          this.isAgentUpdating = true;\n\n          // if voiceConnectionChanged\n          if (data) {\n            this.onceLogoutThenLogin().then((loginPromise) => {\n              this._loginPromise = loginPromise;\n            });\n          }\n          break;\n        case tabManagerEvents.MAIN_TAB_WILL_UNLOAD:\n          console.log(\n            'MAIN_TAB_WILL_UNLOAD~~',\n            data === this._deps.tabManager.tabbie.id,\n            this.isMainTab,\n          );\n          if (data === this._deps.tabManager.tabbie.id || this.isMainTab) {\n            // now this tab is the new main tab\n            await this._newMainTabReConfig();\n          }\n          break;\n        case tabManagerEvents.SET_MIAN_TAB_ID:\n          if (this._deps.tabManager.mainTabId !== data) {\n            console.log('SET_MIAN_TAB_ID in this tab~');\n            this._deps.tabManager.setMainTabIdInThisTab(data);\n          }\n          break;\n        case tabManagerEvents.UPDATE_SESSION_SUCCESS:\n          try {\n            console.log('UPDATE_SESSION_SUCCESS~~', data);\n            // if voiceConnectionChanged\n            if (data) {\n              this._destroyTabLife();\n              this._initTabLife();\n              await this._loginPromise;\n              await this._othersTabConfigureAgent();\n            } else {\n              this.setConfigSuccess(true);\n            }\n\n            this._unblockUpdateSession();\n\n            this.isAgentUpdating = false;\n          } catch (error) {\n            // when that auto config fail, just reload that tab\n            console.log(error);\n            window.location.reload();\n          }\n          break;\n        case tabManagerEvents.UPDATE_SESSION_SUCCESS_ALERT:\n          this._showUpdateSuccessAlert();\n          break;\n        case tabManagerEvents.UPDATE_SESSION_FAIL:\n          this._unblockUpdateSession();\n          break;\n        case tabManagerEvents.RELOGIN:\n          await this.reLoginAgent({\n            isBlock: true,\n            alertMessage: messageTypes.NOT_INBOUND_QUEUE_SELECTED,\n          });\n          break;\n        case tabManagerEvents.CONFIGURE_FAIL:\n          console.log('other tab be called to invoke _configureFail~~');\n          this._configureFail();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private _unblockUpdateSession() {\n    this._deps.block.unblock(this._updateSessionBlockId);\n  }\n\n  @tabManagerEnabled()\n  private _initTabLife() {\n    console.log('initTabLife~');\n    this._tabConfigWorking.init();\n    this._tabConfigSuccess.init();\n  }\n\n  @tabManagerEnabled()\n  private _destroyTabLife() {\n    this._tabConfigWorking?.destroy();\n    this._tabConfigSuccess?.destroy();\n  }\n\n  private _afterLogin() {\n    // if that is not first login set SessionConfig data again\n    if (!this._deps.auth.isFreshLogin) {\n      const checkSelectIsInList = this.skillProfileList.some(\n        (profile) => profile.profileId === this.selectedSkillProfileId,\n      );\n      if (!checkSelectIsInList) {\n        this.setSkillProfileId(this.defaultSkillProfileId);\n      }\n\n      // check all selected queue is in inboundQueue list\n      const checkedInboundQueues = this.selectedInboundQueueIds.reduce(\n        (result, inboundQueueId) => {\n          if (\n            this.inboundQueues.some(\n              (inboundQueue) => inboundQueue.gateId === inboundQueueId,\n            )\n          ) {\n            result.push(inboundQueueId);\n          }\n          return result;\n        },\n        [],\n      );\n      this.setInboundQueueIds(checkedInboundQueues);\n    }\n  }\n\n  private _emitTriggerConfig() {\n    this._eventEmitter.emit(agentSessionEvents.TRIGGER_CONFIG);\n  }\n\n  onTriggerConfig(callback: () => void) {\n    this._eventEmitter.on(agentSessionEvents.TRIGGER_CONFIG, callback);\n    return this;\n  }\n\n  private _emitConfigSuccess() {\n    this._eventEmitter.emit(agentSessionEvents.CONFIG_SUCCESS);\n  }\n\n  onConfigSuccess(callback: () => void) {\n    this._eventEmitter.on(agentSessionEvents.CONFIG_SUCCESS, callback);\n    return this;\n  }\n\n  private _emitReConfigFail() {\n    this._eventEmitter.emit(agentSessionEvents.RECONFIG_FAIL);\n  }\n\n  onReConfigFail(callback: () => void) {\n    this._eventEmitter.on(agentSessionEvents.RECONFIG_FAIL, callback);\n    return this;\n  }\n\n  private _mainTabHandle() {\n    console.log('_mainTabHandle~~');\n    this._setMainTabId();\n    // refresh token prevent get token fail to get sip_info\n    this._deps.evClient.getRefreshedToken();\n    this._deps.tabManager.emitSetMainTabComplete();\n  }\n\n  async updateAgentConfigs() {\n    const agentConfig = await this._deps.evClient.getAgentConfig();\n    const agent = {\n      ...this._deps.evAuth.agent,\n      agentConfig,\n    };\n    this._deps.evAuth.setAgent(agent);\n    // !! update agentConfig need before set config success.\n    this.setConfigSuccess(true);\n  }\n\n  /**\n   * config agent in session config page\n   * @param triggerEvent is that should trigger event, default is true\n   */\n  @track((that: EvAgentSession) => [\n    trackEvents.agentSessionConfigureAgent,\n    {\n      'Voice Connection': that.loginType,\n      'Persistent Voice Connection': that.takingCall,\n      'Skill Profile': that.selectedSkillProfile,\n      'Inbound Queues': that.selectedInboundQueues,\n      'Auto Answer': that.autoAnswer,\n    },\n  ])\n  async configureAgent({\n    config = this._checkFieldsResult(this.formGroup),\n    triggerEvent = true,\n    needAssignFormGroupValue = false,\n  }: ConfigureAgentParams = {}) {\n    this._configWorkingAlive();\n    console.log('configureAgent~~', triggerEvent);\n    this._clearCalls();\n    let result = await this._connectEvServer(config);\n\n    // Session timeout\n    // this will occur when stay in session config page for long time\n    if (result.data.status !== 'SUCCESS') {\n      this._navigateToSessionConfigPage();\n      await this._deps.evAuth.newReconnect(false);\n\n      result = await this._connectEvServer(config);\n    }\n\n    this._handleAgentResult({ config: result.data, needAssignFormGroupValue });\n\n    if (triggerEvent) {\n      this._mainTabHandle();\n      this._emitTriggerConfig();\n      this._configSuccessAlive();\n      this._sendTabManager(tabManagerEvents.AGENT_CONFIG_SUCCESS);\n      this.setConfigSuccess(true);\n    }\n  }\n\n  async updateAgent(voiceConnectionChanged: boolean) {\n    try {\n      await this._deps.block.next(async () => {\n        if (voiceConnectionChanged) this._configWorkingAlive();\n        const config = this._checkFieldsResult(this.formGroup);\n\n        this._clearCalls();\n\n        this.isAgentUpdating = true;\n\n        this._sendTabManager(\n          tabManagerEvents.UPDATE_SESSION,\n          voiceConnectionChanged,\n        );\n\n        if (voiceConnectionChanged) await this.reLoginAgent();\n\n        config.isForce = true;\n        const result = await this._connectEvServer(config);\n        this._handleAgentResult({\n          config: result.data,\n          isAgentUpdating: true,\n          needAssignFormGroupValue: true,\n        });\n\n        if (voiceConnectionChanged) {\n          this._mainTabHandle();\n          this._emitTriggerConfig();\n        }\n\n        await this.updateAgentConfigs();\n\n        if (voiceConnectionChanged) this._configSuccessAlive();\n\n        // * update session complete, and config ready\n        this._sendTabManager(\n          tabManagerEvents.UPDATE_SESSION_SUCCESS,\n          voiceConnectionChanged,\n        );\n\n        this.goToSettingsPage();\n\n        this._sendTabManager(tabManagerEvents.UPDATE_SESSION_SUCCESS_ALERT);\n        this._showUpdateSuccessAlert();\n      });\n    } catch (error) {\n      this._sendTabManager(tabManagerEvents.UPDATE_SESSION_FAIL);\n      this._unblockUpdateSession();\n\n      console.error('error', error);\n    }\n  }\n\n  async reLoginAgent({\n    isBlock,\n    alertMessage,\n  }: {\n    isBlock?: boolean;\n    alertMessage?: string;\n  } = {}) {\n    const fn = async () => {\n      if (alertMessage) {\n        this._deps.alert.danger({\n          message: alertMessage,\n          ttl: 0,\n        });\n      }\n      this._deps.evAuth.sendLogoutTabEvent();\n\n      const { access_token } = await this._deps.auth.refreshToken();\n      this.setAccessToken(access_token);\n\n      // * then do logout send to every tab\n      await this._deps.evAuth.logoutAgent();\n\n      // ! wait all tab is logout complete, server has some delay after logout\n      await sleep(WAIT_EV_SERVER_ROLLBACK_DELAY);\n\n      await this._deps.evAuth.loginAgent(this.accessToken);\n    };\n\n    return isBlock ? this._deps.block.next(fn) : fn();\n  }\n\n  onceLogoutThenLogin() {\n    return new Promise<Promise<void>>((resolve) => {\n      this._deps.evAuth.onceLogout(async () => {\n        // ! wait all tab is logout complete, server has some delay after logout\n        await sleep(WAIT_EV_SERVER_ROLLBACK_DELAY);\n        resolve(this._deps.evAuth.loginAgent(this.accessToken));\n      });\n    });\n  }\n\n  goToSettingsPage() {\n    this._deps.routerInteraction.push('/settings');\n  }\n\n  private _showUpdateSuccessAlert() {\n    this._deps.alert.success({\n      message: messageTypes.UPDATE_AGENT_SUCCESS,\n    });\n  }\n\n  private _handleAgentResult({\n    config: { message, status },\n    isAgentUpdating,\n    needAssignFormGroupValue,\n  }: {\n    config: EvAgentConfig;\n    isAgentUpdating?: boolean;\n    needAssignFormGroupValue?: boolean;\n  }) {\n    if (status !== 'SUCCESS') {\n      if (typeof message === 'string') {\n        this._deps.alert.danger({\n          message: messageTypes.AGENT_CONFIG_DETAIL_ERROR,\n          ttl: 0,\n          payload: message,\n        });\n      } else {\n        this._deps.alert.danger({\n          message: isAgentUpdating\n            ? messageTypes.UPDATE_AGENT_ERROR\n            : messageTypes.AGENT_CONFIG_ERROR,\n          ttl: 0,\n        });\n      }\n      throw new Error(message);\n    }\n    if (needAssignFormGroupValue) {\n      this.assignFormGroupValue();\n    }\n  }\n\n  private async _autoConfigureAgent(): Promise<void> {\n    console.log('_autoConfigureAgent~', this.tabManagerEnabled);\n\n    const isFirstTab = this._deps.tabManager.isFirstTab;\n\n    if (this._autoConfigureRetryTimes >= 5) {\n      console.log('stop autoConfigureRetry~~', this._autoConfigureRetryTimes);\n      this._autoConfigureRetryTimes = 0;\n      return this._configureFail(isFirstTab);\n    }\n\n    let timeoutId: NodeJS.Timeout = null;\n    if (this.tabManagerEnabled) {\n      const resolves: ((\n        value?: AutoConfigType | PromiseLike<AutoConfigType>,\n      ) => void)[] = [null, null, null];\n      return Promise.race<AutoConfigType>([\n        new Promise<AutoConfigType>((res) => {\n          console.log('res already success~~');\n          resolves[0] = () => res('already success');\n\n          this._eventEmitter.once(\n            agentSessionEvents.CONFIG_SUCCESS,\n            resolves[0],\n          );\n        }),\n        new Promise<AutoConfigType>((res) => {\n          resolves[1] = res;\n          // check isSuccess first\n          if (this.isAgentUpdating || this._deps.tabManager.tabs.length !== 1) {\n            const checkIsAlive = () => {\n              console.log('checkIsAlive~~');\n              this._tabConfigSuccess.isAlive().then(async (result) => {\n                console.log('isAlive ?~', result);\n                if (result) {\n                  console.log('res other tab config~~');\n                  res('other tab config');\n                } else {\n                  checkIsAlive();\n                }\n              });\n            };\n\n            checkIsAlive();\n          }\n        }),\n        new Promise<AutoConfigType>((res) => {\n          resolves[2] = res;\n          // when there is too many tab, that event will block\n          // then check local\n          if (isFirstTab) {\n            this._tabConfigWorking.isLeave().then(async (result) => {\n              console.log('isLeave ?~', result);\n              if (result) {\n                this._configWorkingAlive();\n                console.log('res config~~');\n                res('config');\n              }\n            });\n          }\n        }),\n        new Promise<AutoConfigType>((res) => {\n          timeoutId = setTimeout(() => {\n            res('retry');\n          }, 10000);\n        }),\n      ])\n        .then((result) => {\n          clearTimeout(timeoutId);\n          this._eventEmitter.off(\n            agentSessionEvents.CONFIG_SUCCESS,\n            resolves[0],\n          );\n          console.log('clear all memory with promise~');\n          // clear all memory with promise\n          resolves.forEach((r) => r());\n          resolves.length = 0;\n\n          console.log('!!!!!', result);\n\n          switch (result) {\n            case 'retry':\n              console.log('retry auto config~');\n              this._autoConfigureRetryTimes++;\n              return this._autoConfigureAgent();\n            case 'other tab config':\n              console.log('_othersTabConfigureAgent in auto config~~');\n              return this._othersTabConfigureAgent();\n            case 'config': {\n              console.log('configureAgent in auto config~~');\n              //! when reConfig, if that change queue or others field in ev admin, that will get error, should redirect to sessionPage\n              const config = this._checkFieldsResult({\n                selectedInboundQueueIds: this.selectedInboundQueueIds,\n                selectedSkillProfileId: this.selectedSkillProfileId,\n                loginType: this.loginType,\n                extensionNumber: this.extensionNumber,\n              });\n              return this.configureAgent({ config });\n            }\n            case 'already success':\n            default:\n              return Promise.resolve();\n          }\n        })\n        .catch((e) => {\n          console.log('_autoConfigureAgent error~~', e);\n          this._configureFail(isFirstTab);\n          return e;\n        });\n    }\n\n    return this.configureAgent();\n  }\n\n  _configureFail(needAsyncAllTabs = false) {\n    console.log(\n      '_configureFail~~',\n      this._deps.tabManager.hasMultipleTabs,\n      needAsyncAllTabs,\n    );\n    if (this._deps.tabManager.hasMultipleTabs && needAsyncAllTabs) {\n      this._sendTabManager(tabManagerEvents.CONFIGURE_FAIL);\n    }\n    this.setConfigSuccess(false);\n    this._navigateToSessionConfigPage();\n  }\n\n  async _othersTabConfigureAgent() {\n    console.log('_othersTabConfigureAgent~~', this.configSuccess);\n    if (this.configSuccess) {\n      return;\n    }\n\n    await this._deps.evClient.multiLoginRequest();\n\n    await this.updateAgentConfigs();\n\n    if (this.notInboundQueueSelected) {\n      this._sendTabManager(tabManagerEvents.RELOGIN);\n      await this.reLoginAgent({\n        isBlock: true,\n        alertMessage: messageTypes.NOT_INBOUND_QUEUE_SELECTED,\n      });\n    }\n\n    this._pollAskIfCanBeNewMainTab();\n  }\n\n  private _pickSkillProfile(skillProfileList: EvAvailableSkillProfile[]) {\n    return skillProfileList.find((item) => item.isDefault === '1');\n  }\n\n  private async _connectEvServer(config: EvConfigureAgentOptions) {\n    console.log('configure ev agent in _connectEvServer~~');\n    let result = await this._deps.evClient.configureAgent(config);\n    const { status } = result.data;\n\n    if (status === messageTypes.EXISTING_LOGIN_FOUND) {\n      const { currentLocale } = this._deps.locale;\n\n      // TODO: think about sync up in all tabs?\n      const confirmed = await this._deps.modalUI.confirm(\n        {\n          title: i18n.getString('multipleLoginsTitle', currentLocale),\n          content: i18n.getString('multipleLoginsContent', currentLocale),\n          okText: i18n.getString('multipleLoginsConfirm', currentLocale),\n          cancelText: i18n.getString('multipleLoginsCancel', currentLocale),\n          onOK: async () => {\n            result = await this._deps.evClient.configureAgent({\n              ...config,\n              isForce: true,\n            });\n            this.isForceLogin = true;\n          },\n          size: 'xsmall',\n        },\n        true,\n      );\n\n      if (!confirmed) {\n        this.isForceLogin = false;\n        throw new Error(status);\n      }\n    } else if (status === messageTypes.EXISTING_LOGIN_ENGAGED) {\n      this._deps.alert.danger({\n        message: messageTypes.EXISTING_LOGIN_ENGAGED,\n        ttl: 0,\n      });\n\n      throw new Error(messageTypes.EXISTING_LOGIN_ENGAGED);\n    }\n\n    return result;\n  }\n\n  private _checkFieldsResult(formGroup: FormGroup): EvConfigureAgentOptions {\n    const { selectedInboundQueueIds, selectedSkillProfileId } = formGroup;\n    if (this.notInboundQueueSelected) {\n      this._deps.alert.danger({\n        message: messageTypes.NOT_INBOUND_QUEUE_SELECTED,\n        ttl: 0,\n      });\n      throw new Error(`'queueIds' is an empty array.`);\n    }\n\n    return {\n      dialDest: this._getDialDest(formGroup),\n      queueIds: selectedInboundQueueIds,\n      skillProfileId:\n        selectedSkillProfileId === NONE ? '' : selectedSkillProfileId,\n    };\n  }\n\n  private _getDialDest({ loginType, extensionNumber }: FormGroup) {\n    // Only external phone has number input\n    switch (loginType) {\n      case loginTypes.externalPhone: {\n        if (!extensionNumber) {\n          this._deps.alert.danger({\n            message: messageTypes.EMPTY_PHONE_NUMBER,\n            ttl: 0,\n          });\n          throw new Error(`'extensionNumber' is an empty number.`);\n        }\n        const formatPhoneNumber = format({\n          phoneNumber: extensionNumber,\n        });\n        const { parsedNumber, isValid } = parse({\n          input: formatPhoneNumber,\n        });\n        if (!isValid || !parsedNumber || parsedNumber === '') {\n          this._deps.alert.danger({\n            message: messageTypes.INVALID_PHONE_NUMBER,\n            ttl: 0,\n          });\n          throw new Error(`'extensionNumber' is not a valid number.`);\n        }\n        this.setFormGroup({ extensionNumber: parsedNumber });\n        return extensionNumber;\n      }\n      case loginTypes.integratedSoftphone:\n        return 'integrated';\n      case loginTypes.RC_PHONE:\n      default:\n        return 'RC_PHONE';\n    }\n  }\n\n  private _sendTabManager(event: string, value?: any) {\n    this._deps.tabManager?.send(event, value);\n  }\n\n  private _clearCalls() {\n    this._deps.presence.clearCalls();\n  }\n\n  get isMainTab() {\n    return this._deps.tabManager.isMainTab;\n  }\n\n  get notInboundQueueSelected() {\n    return (\n      !this._deps.evAuth.agentPermissions.allowInbound ||\n      this.formGroup.selectedInboundQueueIds.length === 0\n    );\n  }\n}\n\nexport { EvAgentSession };\n"],"file":"EvAgentSession.js"}