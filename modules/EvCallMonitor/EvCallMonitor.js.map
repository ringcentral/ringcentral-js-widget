{"version":3,"sources":["modules/EvCallMonitor/EvCallMonitor.ts"],"names":["EvCallMonitor","name","deps","dep","optional","presence","evClient","evSessionConfig","contactMatcher","activityMatcher","modules","_oldCalls","_onCallEndedHooks","_onCallRingHooks","handleActivityMatch","getCallsMapping","callsDataMapping","contactMatches","activityMatches","Object","entries","reduce","mapping","key","call","contactMatchIdentify","phoneNumber","ani","callType","toLowerCase","id","session","getCallId","baggage","agentFirstName","agentLastName","agentName","getUniqueIdentifies","calls","beforeunloadHandler","event","_modules","hasMultipleTabs","returnValue","preventDefault","Set","addQuerySource","getQueriesFn","readyCheckFn","ready","addCallRingHook","callIds","forceMatchNumber","length","onCallRing","onCallEnded","uii","sessionId","encodeUii","otherCallIds","callsMapping","decodeUii","mainUii","getMainId","includes","currentOtherCallIds","filter","currentCallIds","map","forceMatch","match","queries","_getQueries","ignoreCache","window","addEventListener","hook","removeEventListener","callback","add","getCalls","getOtherCalls","getCallLogs","callLogsIds","dataMapping","RcModuleV2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAGA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAcMA,a,WAVL,gBAAO;AACNC,EAAAA,IAAI,EAAE,eADA;AAENC,EAAAA,IAAI,EAAE,CACJ,UADI,EAEJ,UAFI,EAGJ,iBAHI,EAIJ;AAAEC,IAAAA,GAAG,EAAE,gBAAP;AAAyBC,IAAAA,QAAQ,EAAE;AAAnC,GAJI,EAKJ;AAAED,IAAAA,GAAG,EAAE,iBAAP;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GALI;AAFA,CAAP,C;;;;;AAmBC,+BAMG;AAAA;;AAAA,QALDC,QAKC,QALDA,QAKC;AAAA,QAJDC,QAIC,QAJDA,QAIC;AAAA,QAHDC,eAGC,QAHDA,eAGC;AAAA,QAFDC,cAEC,QAFDA,cAEC;AAAA,QADDC,eACC,QADDA,eACC;;AAAA;;AACD,8BAAM;AACJC,MAAAA,OAAO,EAAE;AACPL,QAAAA,QAAQ,EAARA,QADO;AAEPC,QAAAA,QAAQ,EAARA,QAFO;AAGPC,QAAAA,eAAe,EAAfA,eAHO;AAIPC,QAAAA,cAAc,EAAdA,cAJO;AAKPC,QAAAA,eAAe,EAAfA;AALO;AADL,KAAN;AADC,UAdKE,SAcL;AAAA,UAZKC,iBAYL;AAAA,UAVKC,gBAUL;AAAA,UARIC,mBAQJ;AAAA,UAiFHC,eAjFG,GAiFe,0BAChB;AAAA,aAAM,MAAKC,gBAAX;AAAA,KADgB,EAEhB;AAAA,aAAM,MAAKC,cAAX;AAAA,KAFgB,EAGhB;AAAA,aAAM,MAAKC,eAAX;AAAA,KAHgB,EAIhB,UAACF,gBAAD,EAAmBC,cAAnB,EAAmCC,eAAnC,EAAuD;AACrD,aAAOC,MAAM,CAACC,OAAP,CAAeJ,gBAAf,EAAiCK,MAAjC,CAAwC,UAACC,OAAD,SAA0B;AAAA;AAAA,YAAfC,GAAe;AAAA,YAAVC,IAAU;;AACvE,YAAMC,oBAAoB,GAAG,sDAA2B;AACtDC,UAAAA,WAAW,EAAEF,IAAI,CAACG,GADoC;AAEtDC,UAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAAL,CAAcC,WAAd;AAF4C,SAA3B,CAA7B;AAIA,YAAMC,EAAE,GAAGN,IAAI,CAACO,OAAL,GAAe,MAAKC,SAAL,CAAeR,IAAI,CAACO,OAApB,CAAf,GAA8C,IAAzD;;AALuE,oBAM7BP,IAAI,CAACS,OAAL,IAAgB,EANa;AAAA,YAM/DC,cAN+D,SAM/DA,cAN+D;AAAA,YAM/CC,aAN+C,SAM/CA,aAN+C;;AAOvE,YAAMC,SAAS,GACbF,cAAc,IAAIC,aAAlB,aACOD,cADP,cACyBC,aADzB,IAEI,IAHN;AAIA,+CACKb,OADL,2BAEGC,GAFH,kCAGOC,IAHP;AAIIY,UAAAA,SAAS,EAATA,SAJJ;AAKI;AACAnB,UAAAA,cAAc,EAAEA,cAAc,CAACQ,oBAAD,CAAd,IAAwC,EAN5D;AAOIP,UAAAA,eAAe,EACbY,EAAE,IAAIZ,eAAe,CAACY,EAAD,CAArB,GAA4BZ,eAAe,CAACY,EAAD,CAA3C,GAAkD;AARxD;AAWD,OAtBM,EAsBJ,EAtBI,CAAP;AAuBD,KA5Be,CAjFf;AAAA,UAgHHO,mBAhHG,GAgHmB,0BACpB;AAAA,aAAM,MAAKC,KAAX;AAAA,KADoB,EAEpB,UAACA,KAAD;AAAA,aAAW,qDAA0BA,KAA1B,CAAX;AAAA,KAFoB,CAhHnB;;AAAA,UA8JKC,mBA9JL,GA8J2B,UAACC,KAAD,EAA8B;AAC1D,UAAI,MAAKC,QAAL,CAAclC,eAAd,CAA8BmC,eAAlC,EAAmD;AACjD;AACA,eAAOF,KAAK,CAACG,WAAb;AACD,OAHD,MAGO;AACLH,QAAAA,KAAK,CAACI,cAAN;AACAJ,QAAAA,KAAK,CAACG,WAAN,GAAoB,EAApB;AACD;AACF,KAtKE;;AAUD,UAAKhC,SAAL,GAAiB,EAAjB;AACA,UAAKE,gBAAL,GAAwB,IAAIgC,GAAJ,EAAxB;AACA,UAAKjC,iBAAL,GAAyB,IAAIiC,GAAJ,EAAzB;;AACA,QAAI,MAAKJ,QAAL,CAAcjC,cAAlB,EAAkC;AAChC,YAAKiC,QAAL,CAAcjC,cAAd,CAA6BsC,cAA7B,CAA4C;AAC1CC,QAAAA,YAAY,EAAE;AAAA,iBAAM,MAAKV,mBAAL,EAAN;AAAA,SAD4B;AAE1CW,QAAAA,YAAY,EAAE;AAAA,iBAAM,MAAKP,QAAL,CAAcpC,QAAd,CAAuB4C,KAA7B;AAAA;AAF4B,OAA5C;;AAIA,YAAKC,eAAL,uEAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AACb1B,gBAAAA,IADa,GACN,MAAKT,eAAL,GAAuB,MAAKoC,OAAL,CAAa,CAAb,CAAvB,CADM;AAEb1B,gBAAAA,oBAFa,GAEU,sDAA2B;AACtDC,kBAAAA,WAAW,EAAEF,IAAI,CAACG,GADoC;AAEtDC,kBAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAAL,CAAcC,WAAd;AAF4C,iBAA3B,CAFV;AAAA;AAAA,uBAMb,MAAKY,QAAL,CAAcjC,cAAd,CAA6B4C,gBAA7B,CAA8C;AAClD1B,kBAAAA,WAAW,EAAED;AADqC,iBAA9C,CANa;;AAAA;AASnB,oBAAI,MAAKX,mBAAT,EAA8B;AAC5B,wBAAKA,mBAAL;AACD;;AAXkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAArB;AAaD;;AAED,QAAI,MAAK2B,QAAL,CAAchC,eAAlB,EAAmC;AACjC,YAAKgC,QAAL,CAAchC,eAAd,CAA8BqC,cAA9B,CAA6C;AAC3CC,QAAAA,YAAY,EAAE;AAAA,iBAAM,MAAKI,OAAX;AAAA,SAD6B;AAE3CH,QAAAA,YAAY,EAAE;AAAA,iBAAM,MAAKP,QAAL,CAAcpC,QAAd,CAAuB4C,KAA7B;AAAA;AAF6B,OAA7C;AAID;;AAtCA;AAuCF;;;;oCA8Ee;AACd,UAAI,KAAKX,KAAL,CAAWe,MAAX,GAAoB,KAAK1C,SAAL,CAAe0C,MAAvC,EAA+C;AAC7C,aAAK1C,SAAL,GAAiB,KAAK2B,KAAtB;;AACA,YAAI,KAAKA,KAAL,CAAWe,MAAX,GAAoB,CAApB,IAAyB,KAAKf,KAAL,CAAW,CAAX,CAA7B,EAA4C;AAC1C,eAAKgB,UAAL;AACD;AACF,OALD,MAKO,IAAI,KAAKhB,KAAL,CAAWe,MAAX,GAAoB,KAAK1C,SAAL,CAAe0C,MAAvC,EAA+C;AACpD,aAAK1C,SAAL,GAAiB,KAAK2B,KAAtB;AACA,aAAKiB,WAAL;AACD;AACF;;;qCAEgE;AAAA,UAArDC,GAAqD,SAArDA,GAAqD;AAAA,UAAhDC,SAAgD,SAAhDA,SAAgD;AAC/D,aAAO,KAAKhB,QAAL,CAAcnC,QAAd,CAAuBoD,SAAvB,CAAiC;AAAEF,QAAAA,GAAG,EAAHA,GAAF;AAAOC,QAAAA,SAAS,EAATA;AAAP,OAAjC,CAAP;AACD;;;sCAGCN,O,EACAQ,Y,EACAC,Y,EACA9B,E,EACA;AACA,UAAM0B,GAAG,GAAG,KAAKf,QAAL,CAAcnC,QAAd,CAAuBuD,SAAvB,CAAiC/B,EAAjC,CAAZ;;AACA,UAAMgC,OAAO,GAAG,KAAKrB,QAAL,CAAcnC,QAAd,CAAuByD,SAAvB,CAAiCP,GAAjC,CAAhB;;AACA,UAAI,CAACG,YAAY,CAACK,QAAb,CAAsBF,OAAtB,CAAD,IAAmC,CAACX,OAAO,CAACa,QAAR,CAAiBlC,EAAjB,CAAxC,EAA8D,OAAO,EAAP;AAC9D,UAAMmC,mBAAmB,GAAGN,YAAY,CAACO,MAAb,CAC1B,UAACpC,EAAD;AAAA,eAAQA,EAAE,CAACkC,QAAH,CAAYR,GAAZ,KAAoB1B,EAAE,KAAKgC,OAAnC;AAAA,OAD0B,CAA5B;AAGA,UAAMK,cAAc,IAAIL,OAAJ,EAAahC,EAAb,4BAAoBmC,mBAApB,EAApB;AACA,aAAOE,cAAc,CAACC,GAAf,CAAmB,UAACtC,EAAD;AAAA,eAAQ8B,YAAY,CAAC9B,EAAD,CAApB;AAAA,OAAnB,CAAP;AACD;;;4CAEkD;AAAA,sFAAJ,EAAI;AAAA,mCAA3BuC,UAA2B;AAAA,UAA3BA,UAA2B,iCAAd,KAAc;;AACjD;AACA;AACA,aAAO,KAAK5B,QAAL,CAAchC,eAAd,CAA8B6D,KAA9B,CAAoC;AACzCC,QAAAA,OAAO,EAAE,KAAK9B,QAAL,CAAchC,eAAd,CAA8B+D,WAA9B,EADgC;AAEzCC,QAAAA,WAAW,EAAEJ;AAF4B,OAApC,CAAP;AAID;;;;;;;;;;;AAaCK,gBAAAA,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwC,KAAKpC,mBAA7C;uDACmB,KAAK1B,gB;;;;;;;;;;;AAAb+D,gBAAAA,I;;uBACHA,IAAI,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKZF,gBAAAA,MAAM,CAACG,mBAAP,CAA2B,cAA3B,EAA2C,KAAKtC,mBAAhD;wDACmB,KAAK3B,iB;;;;;;;;;;;AAAbgE,gBAAAA,I;;uBACHA,IAAI,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAISE,Q,EAAqB;AAC1C,WAAKjE,gBAAL,CAAsBkE,GAAtB,CAA0BD,QAA1B;;AACA,aAAO,IAAP;AACD;;;uCAEyBA,Q,EAAqB;AAC7C,WAAKjE,gBAAL,WAA6BiE,QAA7B;AACD;;;qCAEuBA,Q,EAAqB;AAC3C,WAAKlE,iBAAL,CAAuBmE,GAAvB,CAA2BD,QAA3B;;AACA,aAAO,IAAP;AACD;;;wCAE0BA,Q,EAAqB;AAC9C,WAAKlE,iBAAL,WAA8BkE,QAA9B;AACD;;;wBA7Jc;AACb,aAAO,KAAKxC,KAAL,CAAWe,MAAX,GAAoB,CAA3B;AACD;;;wBAEW;AACV,aAAO,KAAKZ,QAAL,CAAcpC,QAAd,CAAuB2E,QAAvB,MAAqC,EAA5C;AACD;;;wBAEgB;AACf,aAAO,KAAKvC,QAAL,CAAcpC,QAAd,CAAuB4E,aAAvB,MAA0C,EAAjD;AACD;;;wBAEc;AACb,aAAO,KAAKxC,QAAL,CAAcpC,QAAd,CAAuB6E,WAAvB,MAAwC,EAA/C;AACD;;;wBAEa;AACZ,aAAO,KAAKzC,QAAL,CAAcpC,QAAd,CAAuB8C,OAAvB,IAAkC,EAAzC;AACD;;;wBAEkB;AACjB,aAAO,KAAKV,QAAL,CAAcpC,QAAd,CAAuBsD,YAAvB,IAAuC,EAA9C;AACD;;;wBAEiB;AAChB,aAAO,KAAKlB,QAAL,CAAcpC,QAAd,CAAuB8E,WAAvB,IAAsC,EAA7C;AACD;;;wBAEsB;AACrB,aAAO,KAAK1C,QAAL,CAAcpC,QAAd,CAAuBuD,YAAvB,IAAuC,EAA9C;AACD;;;wBAEoC;AACnC,aAAQ,KAAKnB,QAAL,CAAcjC,cAAd,CAA6B4E,WAA9B,IAAqD,EAA5D;AACD;;;wBAEqB;AACpB,aAAO,KAAK3C,QAAL,CAAchC,eAAd,CAA8B2E,WAA9B,IAA6C,EAApD;AACD;;;;EA9FyBC,gB","sourcesContent":["import { RcModuleV2, createSelector } from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { Mapping } from 'ringcentral-widgets/typings';\nimport { EvCallData } from '../../interfaces/EvData.interface';\nimport { makeCallsUniqueIdentifies } from '../../lib/callUniqueIdentifies';\nimport { contactMatchIdentifyEncode } from '../../lib/contactMatchIdentify';\nimport { EvAddSessionNotification } from '../../lib/EvClient/interfaces';\nimport { CallMonitor, DepsModules } from './EvCallMonitor.interface';\n\n@Module({\n  name: 'EvCallMonitor',\n  deps: [\n    'Presence',\n    'EvClient',\n    'EvSessionConfig',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n  ],\n})\nclass EvCallMonitor extends RcModuleV2<DepsModules> implements CallMonitor {\n  private _oldCalls: EvCallData[];\n\n  private _onCallEndedHooks: Set<() => void>;\n\n  private _onCallRingHooks: Set<() => void>;\n\n  public handleActivityMatch: () => void;\n\n  constructor({\n    presence,\n    evClient,\n    evSessionConfig,\n    contactMatcher,\n    activityMatcher,\n  }) {\n    super({\n      modules: {\n        presence,\n        evClient,\n        evSessionConfig,\n        contactMatcher,\n        activityMatcher,\n      },\n    });\n    this._oldCalls = [];\n    this._onCallRingHooks = new Set();\n    this._onCallEndedHooks = new Set();\n    if (this._modules.contactMatcher) {\n      this._modules.contactMatcher.addQuerySource({\n        getQueriesFn: () => this.getUniqueIdentifies(),\n        readyCheckFn: () => this._modules.presence.ready,\n      });\n      this.addCallRingHook(async () => {\n        const call = this.getCallsMapping()[this.callIds[0]];\n        const contactMatchIdentify = contactMatchIdentifyEncode({\n          phoneNumber: call.ani,\n          callType: call.callType.toLowerCase(),\n        });\n        await this._modules.contactMatcher.forceMatchNumber({\n          phoneNumber: contactMatchIdentify,\n        });\n        if (this.handleActivityMatch) {\n          this.handleActivityMatch();\n        }\n      });\n    }\n\n    if (this._modules.activityMatcher) {\n      this._modules.activityMatcher.addQuerySource({\n        getQueriesFn: () => this.callIds,\n        readyCheckFn: () => this._modules.presence.ready,\n      });\n    }\n  }\n\n  get isOnCall() {\n    return this.calls.length > 0;\n  }\n\n  get calls() {\n    return this._modules.presence.getCalls() || [];\n  }\n\n  get otherCalls() {\n    return this._modules.presence.getOtherCalls() || [];\n  }\n\n  get callLogs() {\n    return this._modules.presence.getCallLogs() || [];\n  }\n\n  get callIds() {\n    return this._modules.presence.callIds || [];\n  }\n\n  get otherCallIds() {\n    return this._modules.presence.otherCallIds || [];\n  }\n\n  get callLogsIds() {\n    return this._modules.presence.callLogsIds || [];\n  }\n\n  get callsDataMapping() {\n    return this._modules.presence.callsMapping || {};\n  }\n\n  get contactMatches(): Mapping<any[]> {\n    return (this._modules.contactMatcher.dataMapping as any) || {};\n  }\n\n  get activityMatches() {\n    return this._modules.activityMatcher.dataMapping || {};\n  }\n\n  getCallsMapping = createSelector(\n    () => this.callsDataMapping,\n    () => this.contactMatches,\n    () => this.activityMatches,\n    (callsDataMapping, contactMatches, activityMatches) => {\n      return Object.entries(callsDataMapping).reduce((mapping, [key, call]) => {\n        const contactMatchIdentify = contactMatchIdentifyEncode({\n          phoneNumber: call.ani,\n          callType: call.callType.toLowerCase(),\n        });\n        const id = call.session ? this.getCallId(call.session) : null;\n        const { agentFirstName, agentLastName } = call.baggage || {};\n        const agentName =\n          agentFirstName && agentLastName\n            ? `${agentFirstName} ${agentLastName}`\n            : null;\n        return {\n          ...mapping,\n          [key]: {\n            ...call,\n            agentName,\n            // TODO confirm about using `toMatches` & `fromMatches`?\n            contactMatches: contactMatches[contactMatchIdentify] || [],\n            activityMatches:\n              id && activityMatches[id] ? activityMatches[id] : [],\n          } as EvCallData,\n        };\n      }, {});\n    },\n  );\n\n  getUniqueIdentifies = createSelector(\n    () => this.calls,\n    (calls) => makeCallsUniqueIdentifies(calls),\n  );\n\n  onStateChange() {\n    if (this.calls.length > this._oldCalls.length) {\n      this._oldCalls = this.calls;\n      if (this.calls.length > 0 && this.calls[0]) {\n        this.onCallRing();\n      }\n    } else if (this.calls.length < this._oldCalls.length) {\n      this._oldCalls = this.calls;\n      this.onCallEnded();\n    }\n  }\n\n  getCallId({ uii, sessionId }: Partial<EvAddSessionNotification>) {\n    return this._modules.evClient.encodeUii({ uii, sessionId });\n  }\n\n  getActiveCallList(\n    callIds: string[],\n    otherCallIds: string[],\n    callsMapping: Mapping<EvCallData>,\n    id: string,\n  ) {\n    const uii = this._modules.evClient.decodeUii(id);\n    const mainUii = this._modules.evClient.getMainId(uii);\n    if (!otherCallIds.includes(mainUii) || !callIds.includes(id)) return [];\n    const currentOtherCallIds = otherCallIds.filter(\n      (id) => id.includes(uii) && id !== mainUii,\n    );\n    const currentCallIds = [mainUii, id, ...currentOtherCallIds];\n    return currentCallIds.map((id) => callsMapping[id]);\n  }\n\n  updateActivityMatches({ forceMatch = false } = {}) {\n    // it's async function\n    // TODO: fix type in DataMatcher\n    return this._modules.activityMatcher.match({\n      queries: this._modules.activityMatcher._getQueries(),\n      ignoreCache: forceMatch,\n    });\n  }\n\n  private beforeunloadHandler = (event: BeforeUnloadEvent) => {\n    if (this._modules.evSessionConfig.hasMultipleTabs) {\n      // Guarantee the browser unload by removing the returnValue property of the event\n      delete event.returnValue;\n    } else {\n      event.preventDefault();\n      event.returnValue = '';\n    }\n  };\n\n  private async onCallRing() {\n    window.addEventListener('beforeunload', this.beforeunloadHandler);\n    for (const hook of this._onCallRingHooks) {\n      await hook();\n    }\n  }\n\n  private async onCallEnded() {\n    window.removeEventListener('beforeunload', this.beforeunloadHandler);\n    for (const hook of this._onCallEndedHooks) {\n      await hook();\n    }\n  }\n\n  public addCallRingHook(callback: () => any) {\n    this._onCallRingHooks.add(callback);\n    return this;\n  }\n\n  public removeCallRingHook(callback: () => any) {\n    this._onCallRingHooks.delete(callback);\n  }\n\n  public addCallEndedHook(callback: () => any) {\n    this._onCallEndedHooks.add(callback);\n    return this;\n  }\n\n  public removeCallEndedHook(callback: () => any) {\n    this._onCallEndedHooks.delete(callback);\n  }\n}\n\nexport { EvCallMonitor };\n"],"file":"EvCallMonitor.js"}