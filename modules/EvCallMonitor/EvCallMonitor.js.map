{"version":3,"sources":["modules/EvCallMonitor/EvCallMonitor.ts"],"names":["EvCallMonitor","name","deps","dep","optional","that","callsDataMapping","contactMatches","activityMatches","calls","handleActivityMatch","_eventEmitter","EventEmitter","_oldCalls","_beforeunloadHandler","_deps","evAgentSession","shouldBlockBrowser","onCallRing","ani","callType","beforeunload","add","contactMatcher","addQuerySource","getQueriesFn","uniqueIdentifies","readyCheckFn","presence","ready","contactMatchIdentify","phoneNumber","forceMatchNumber","onCallEnded","remove","activityMatcher","callIds","uii","id","evClient","getMainId","callsMapping","configSuccess","length","currentCall","mainCall","getMainCall","emit","callStatus","RINGING","clearCalls","call","ENDED","sessionId","encodeUii","otherCallIds","decodeUii","mainUii","includes","currentOtherCallIds","filter","currentCallIds","map","forceMatch","match","queries","_getQueries","ignoreCache","callback","on","otherCalls","callLogs","callLogsIds","dataMapping","Object","entries","reduce","mapping","key","session","getCallId","baggage","agentFirstName","agentLastName","agentName","RcModuleV2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAGA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBMA,a,WAZL,gBAAO;AACNC,EAAAA,IAAI,EAAE,eADA;AAENC,EAAAA,IAAI,EAAE,CACJ,UADI,EAEJ,UAFI,EAGJ,cAHI,EAIJ,gBAJI,EAKJ,uBALI,EAMJ;AAAEC,IAAAA,GAAG,EAAE,gBAAP;AAAyBC,IAAAA,QAAQ,EAAE;AAAnC,GANI,EAOJ;AAAED,IAAAA,GAAG,EAAE,iBAAP;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GAPI;AAFA,CAAP,C,UA+FE,oBAAS,UAACC,IAAD;AAAA,SAAyB,CACjCA,IAAI,CAACC,gBAD4B,EAEjCD,IAAI,CAACE,cAF4B,EAGjCF,IAAI,CAACG,eAH4B,CAAzB;AAAA,CAAT,C,UAoCA,oBAAS,UAACH,IAAD;AAAA,SAAyB,CAACA,IAAI,CAACI,KAAN,CAAzB;AAAA,CAAT,C;;;;;AA9GD,yBAAYP,IAAZ,EAAwB;AAAA;;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA;AADI,KAAN;AADsB,UARxBQ,mBAQwB;AAAA,UANhBC,aAMgB,GANA,IAAIC,oBAAJ,EAMA;AAAA,UALhBC,SAKgB,GALU,EAKV;;AAAA,UAHhBC,oBAGgB,GAHO;AAAA,aAC7B,MAAKC,KAAL,CAAWC,cAAX,CAA0BC,kBADG;AAAA,KAGP;;AAKtB,UAAKC,UAAL;AAAA,0EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,gBAAAA,GAAT,QAASA,GAAT,EAAcC,QAAd,QAAcA,QAAd;;AACd,sBAAKL,KAAL,CAAWM,YAAX,CAAwBC,GAAxB,CAA4B,MAAKR,oBAAjC;;AADc,qBAGV,MAAKC,KAAL,CAAWQ,cAHD;AAAA;AAAA;AAAA;;AAIZ,sBAAKR,KAAL,CAAWQ,cAAX,CAA0BC,cAA1B,CAAyC;AACvCC,kBAAAA,YAAY,EAAE;AAAA,2BAAM,MAAKC,gBAAX;AAAA,mBADyB;AAEvCC,kBAAAA,YAAY,EAAE;AAAA,2BAAM,MAAKZ,KAAL,CAAWa,QAAX,CAAoBC,KAA1B;AAAA;AAFyB,iBAAzC;;AAIMC,gBAAAA,oBARM,GAQiB,sDAA2B;AACtDC,kBAAAA,WAAW,EAAEZ,GADyC;AAEtDC,kBAAAA,QAAQ,EAARA;AAFsD,iBAA3B,CARjB;AAAA;AAAA,uBAYN,MAAKL,KAAL,CAAWQ,cAAX,CAA0BS,gBAA1B,CAA2C;AAC/CD,kBAAAA,WAAW,EAAED;AADkC,iBAA3C,CAZM;;AAAA;AAeZ,oBAAI,MAAKpB,mBAAT,EAA8B;AAC5B,wBAAKA,mBAAL;AACD;;AAjBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAhB;;AAAA;AAAA;AAAA;AAAA,SAmBGuB,WAnBH,CAmBe,YAAM;AACnB,YAAKlB,KAAL,CAAWM,YAAX,CAAwBa,MAAxB,CAA+B,MAAKpB,oBAApC;AACD,KArBD;;AAuBA,mCAAKC,KAAL,CAAWoB,eAAX,gFAA4BX,cAA5B,CAA2C;AACzCC,MAAAA,YAAY,EAAE;AAAA,eAAM,MAAKW,OAAX;AAAA,OAD2B;AAEzCT,MAAAA,YAAY,EAAE;AAAA,eAAM,MAAKZ,KAAL,CAAWa,QAAX,CAAoBC,KAA1B;AAAA;AAF2B,KAA3C;AA5BsB;AAgCvB;;;;gCAmFWQ,G,EAAa;AACvB,UAAMC,EAAE,GAAG,KAAKvB,KAAL,CAAWwB,QAAX,CAAoBC,SAApB,CAA8BH,GAA9B,CAAX;;AACA,aAAO,KAAKtB,KAAL,CAAWa,QAAX,CAAoBa,YAApB,CAAiCH,EAAjC,CAAP;AACD;;;oCAEe;AACd,UAAI,KAAKvB,KAAL,CAAWC,cAAX,CAA0B0B,aAA9B,EAA6C;AAC3C,YAAI,KAAKjC,KAAL,CAAWkC,MAAX,GAAoB,KAAK9B,SAAL,CAAe8B,MAAvC,EAA+C;AAC7C,cAAMC,YAAW,GAAG,KAAKnC,KAAL,CAAW,CAAX,CAApB;AACA,cAAMoC,QAAQ,GAAG,KAAKC,WAAL,CAAiBF,YAAW,CAACP,GAA7B,CAAjB;;AAEA,cAAIO,YAAW,IAAIC,QAAnB,EAA6B;AAC3B,iBAAKhC,SAAL,GAAiB,KAAKJ,KAAtB;;AAEA,iBAAKE,aAAL,CAAmBoC,IAAnB,CAAwBC,kBAAWC,OAAnC,EAA4CL,YAA5C;AACD,WAJD,MAIO;AACL,iBAAK7B,KAAL,CAAWa,QAAX,CAAoBsB,UAApB;AACD;AACF,SAXD,MAWO,IAAI,KAAKzC,KAAL,CAAWkC,MAAX,GAAoB,KAAK9B,SAAL,CAAe8B,MAAvC,EAA+C;AACpD,cAAMQ,IAAI,GAAG,KAAKtC,SAAL,CAAe,CAAf,CAAb;AACA,eAAKA,SAAL,GAAiB,KAAKJ,KAAtB;;AAEA,eAAKE,aAAL,CAAmBoC,IAAnB,CAAwBC,kBAAWI,KAAnC,EAA0CD,IAA1C;AACD;AACF;AACF;;;qCAEgE;AAAA,UAArDd,GAAqD,SAArDA,GAAqD;AAAA,UAAhDgB,SAAgD,SAAhDA,SAAgD;AAC/D,aAAO,KAAKtC,KAAL,CAAWwB,QAAX,CAAoBe,SAApB,CAA8B;AAAEjB,QAAAA,GAAG,EAAHA,GAAF;AAAOgB,QAAAA,SAAS,EAATA;AAAP,OAA9B,CAAP;AACD;;;sCAGCjB,O,EACAmB,Y,EACAd,Y,EACAH,E,EACA;AACA,UAAMD,GAAG,GAAG,KAAKtB,KAAL,CAAWwB,QAAX,CAAoBiB,SAApB,CAA8BlB,EAA9B,CAAZ;;AACA,UAAMmB,OAAO,GAAG,KAAK1C,KAAL,CAAWwB,QAAX,CAAoBC,SAApB,CAA8BH,GAA9B,CAAhB;;AACA,UAAI,CAACkB,YAAY,CAACG,QAAb,CAAsBD,OAAtB,CAAD,IAAmC,CAACrB,OAAO,CAACsB,QAAR,CAAiBpB,EAAjB,CAAxC,EAA8D,OAAO,EAAP;AAC9D,UAAMqB,mBAAmB,GAAGJ,YAAY,CAACK,MAAb,CAC1B,UAACtB,EAAD;AAAA,eAAQA,EAAE,CAACoB,QAAH,CAAYrB,GAAZ,KAAoBC,EAAE,KAAKmB,OAAnC;AAAA,OAD0B,CAA5B;AAGA,UAAMI,cAAc,IAAIJ,OAAJ,EAAanB,EAAb,4BAAoBqB,mBAApB,EAApB;AACA,aAAOE,cAAc,CAACC,GAAf,CAAmB,UAACxB,EAAD;AAAA,eAAQG,YAAY,CAACH,EAAD,CAApB;AAAA,OAAnB,CAAP;AACD;;;4CAEkD;AAAA,sFAAJ,EAAI;AAAA,mCAA3ByB,UAA2B;AAAA,UAA3BA,UAA2B,iCAAd,KAAc;;AACjD;AACA;AACA,aAAO,KAAKhD,KAAL,CAAWoB,eAAX,CAA2B6B,KAA3B,CAAiC;AACtCC,QAAAA,OAAO,EAAE,KAAKlD,KAAL,CAAWoB,eAAX,CAA2B+B,WAA3B,EAD6B;AAEtCC,QAAAA,WAAW,EAAEJ;AAFyB,OAAjC,CAAP;AAID;;;+BAEUK,Q,EAA6C;AACtD,WAAKzD,aAAL,CAAmB0D,EAAnB,CAAsBrB,kBAAWC,OAAjC,EAA0C,UAACL,WAAD;AAAA,eACxCwB,QAAQ,CAACxB,WAAD,CADgC;AAAA,OAA1C;;AAGA,aAAO,IAAP;AACD;;;gCAEWwB,Q,EAA6C;AACvD,WAAKzD,aAAL,CAAmB0D,EAAnB,CAAsBrB,kBAAWI,KAAjC,EAAwC,UAACR,WAAD;AAAA,eACtCwB,QAAQ,CAACxB,WAAD,CAD8B;AAAA,OAAxC;;AAGA,aAAO,IAAP;AACD;;;wBArJc;AACb,aAAO,KAAKnC,KAAL,CAAWkC,MAAX,GAAoB,CAA3B;AACD;;;wBAEW;AACV,aAAO,KAAK5B,KAAL,CAAWa,QAAX,CAAoBnB,KAApB,IAA6B,EAApC;AACD;;;wBAEgB;AACf,aAAO,KAAKM,KAAL,CAAWa,QAAX,CAAoB0C,UAApB,IAAkC,EAAzC;AACD;;;wBAEc;AACb,aAAO,KAAKvD,KAAL,CAAWa,QAAX,CAAoB2C,QAApB,IAAgC,EAAvC;AACD;;;wBAEa;AACZ,aAAO,KAAKxD,KAAL,CAAWa,QAAX,CAAoBQ,OAApB,IAA+B,EAAtC;AACD;;;wBAEkB;AACjB,aAAO,KAAKrB,KAAL,CAAWa,QAAX,CAAoB2B,YAApB,IAAoC,EAA3C;AACD;;;wBAEiB;AAChB,aAAO,KAAKxC,KAAL,CAAWa,QAAX,CAAoB4C,WAApB,IAAmC,EAA1C;AACD;;;wBAEsB;AACrB,aAAO,KAAKzD,KAAL,CAAWa,QAAX,CAAoBa,YAApB,IAAoC,EAA3C;AACD;;;wBAEoC;AACnC,aAAQ,KAAK1B,KAAL,CAAWQ,cAAX,CAA0BkD,WAA3B,IAAkD,EAAzD;AACD;;;wBAEqB;AACpB,aAAO,KAAK1D,KAAL,CAAWoB,eAAX,CAA2BsC,WAA3B,IAA0C,EAAjD;AACD;;;wBAOkB;AAAA;;AAAA,UACTnE,gBADS,GAC6C,IAD7C,CACTA,gBADS;AAAA,UACSC,cADT,GAC6C,IAD7C,CACSA,cADT;AAAA,UACyBC,eADzB,GAC6C,IAD7C,CACyBA,eADzB;AAGjB,aAAOkE,MAAM,CAACC,OAAP,CAAerE,gBAAf,EAAiCsE,MAAjC,CACL,UAACC,OAAD,SAA0B;AAAA;AAAA,YAAfC,GAAe;AAAA,YAAV3B,IAAU;;AACxB,YAAMrB,oBAAoB,GAAG,sDAA2B;AACtDC,UAAAA,WAAW,EAAEoB,IAAI,CAAChC,GADoC;AAEtDC,UAAAA,QAAQ,EAAE+B,IAAI,CAAC/B;AAFuC,SAA3B,CAA7B;AAIA,YAAMkB,EAAE,GAAGa,IAAI,CAAC4B,OAAL,GAAe,MAAI,CAACC,SAAL,CAAe7B,IAAI,CAAC4B,OAApB,CAAf,GAA8C,IAAzD;;AALwB,oBAMkB5B,IAAI,CAAC8B,OAAL,IAAgB,EANlC;AAAA,YAMhBC,cANgB,SAMhBA,cANgB;AAAA,YAMAC,aANA,SAMAA,aANA;;AAOxB,YAAMC,SAAS,GACbF,cAAc,IAAIC,aAAlB,aACOD,cADP,cACyBC,aADzB,IAEI,IAHN;AAIA,+CACKN,OADL,2BAEGC,GAFH,kCAGO3B,IAHP;AAIIiC,UAAAA,SAAS,EAATA,SAJJ;AAKI;AACA7E,UAAAA,cAAc,EAAEA,cAAc,CAACuB,oBAAD,CAAd,IAAwC,EAN5D;AAOItB,UAAAA,eAAe,EACb8B,EAAE,IAAI9B,eAAe,CAAC8B,EAAD,CAArB,GAA4B9B,eAAe,CAAC8B,EAAD,CAA3C,GAAkD;AARxD;AAWD,OAvBI,EAwBL,EAxBK,CAAP;AA0BD;;;wBAGsB;AACrB,aAAO,qDAA0B,KAAK7B,KAA/B,CAAP;AACD;;;;EA1HyB4E,gB","sourcesContent":["import { computed, RcModuleV2 } from '@ringcentral-integration/core';\nimport { EventEmitter } from 'events';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { Mapping } from 'ringcentral-widgets/typings';\n\nimport { callStatus } from '../../enums';\nimport { EvCallData } from '../../interfaces/EvData.interface';\nimport { makeCallsUniqueIdentifies } from '../../lib/callUniqueIdentifies';\nimport { contactMatchIdentifyEncode } from '../../lib/contactMatchIdentify';\nimport { EvAddSessionNotification } from '../../lib/EvClient/interfaces';\nimport { CallMonitor, Deps } from './EvCallMonitor.interface';\n\n@Module({\n  name: 'EvCallMonitor',\n  deps: [\n    'Presence',\n    'EvClient',\n    'Beforeunload',\n    'EvAgentSession',\n    'EvIntegratedSoftphone',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n  ],\n})\nclass EvCallMonitor extends RcModuleV2<Deps> implements CallMonitor {\n  handleActivityMatch: () => void;\n\n  private _eventEmitter = new EventEmitter();\n  private _oldCalls: EvCallData[] = [];\n\n  private _beforeunloadHandler = () =>\n    this._deps.evAgentSession.shouldBlockBrowser;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n\n    this.onCallRing(async ({ ani, callType }) => {\n      this._deps.beforeunload.add(this._beforeunloadHandler);\n\n      if (this._deps.contactMatcher) {\n        this._deps.contactMatcher.addQuerySource({\n          getQueriesFn: () => this.uniqueIdentifies,\n          readyCheckFn: () => this._deps.presence.ready,\n        });\n        const contactMatchIdentify = contactMatchIdentifyEncode({\n          phoneNumber: ani,\n          callType,\n        });\n        await this._deps.contactMatcher.forceMatchNumber({\n          phoneNumber: contactMatchIdentify,\n        });\n        if (this.handleActivityMatch) {\n          this.handleActivityMatch();\n        }\n      }\n    }).onCallEnded(() => {\n      this._deps.beforeunload.remove(this._beforeunloadHandler);\n    });\n\n    this._deps.activityMatcher?.addQuerySource({\n      getQueriesFn: () => this.callIds,\n      readyCheckFn: () => this._deps.presence.ready,\n    });\n  }\n\n  get isOnCall() {\n    return this.calls.length > 0;\n  }\n\n  get calls() {\n    return this._deps.presence.calls || [];\n  }\n\n  get otherCalls() {\n    return this._deps.presence.otherCalls || [];\n  }\n\n  get callLogs() {\n    return this._deps.presence.callLogs || [];\n  }\n\n  get callIds() {\n    return this._deps.presence.callIds || [];\n  }\n\n  get otherCallIds() {\n    return this._deps.presence.otherCallIds || [];\n  }\n\n  get callLogsIds() {\n    return this._deps.presence.callLogsIds || [];\n  }\n\n  get callsDataMapping() {\n    return this._deps.presence.callsMapping || {};\n  }\n\n  get contactMatches(): Mapping<any[]> {\n    return (this._deps.contactMatcher.dataMapping as any) || {};\n  }\n\n  get activityMatches() {\n    return this._deps.activityMatcher.dataMapping || {};\n  }\n\n  @computed((that: EvCallMonitor) => [\n    that.callsDataMapping,\n    that.contactMatches,\n    that.activityMatches,\n  ])\n  get callsMapping() {\n    const { callsDataMapping, contactMatches, activityMatches } = this;\n\n    return Object.entries(callsDataMapping).reduce<Mapping<EvCallData>>(\n      (mapping, [key, call]) => {\n        const contactMatchIdentify = contactMatchIdentifyEncode({\n          phoneNumber: call.ani,\n          callType: call.callType,\n        });\n        const id = call.session ? this.getCallId(call.session) : null;\n        const { agentFirstName, agentLastName } = call.baggage || {};\n        const agentName =\n          agentFirstName && agentLastName\n            ? `${agentFirstName} ${agentLastName}`\n            : null;\n        return {\n          ...mapping,\n          [key]: {\n            ...call,\n            agentName,\n            // TODO confirm about using `toMatches` & `fromMatches`?\n            contactMatches: contactMatches[contactMatchIdentify] || [],\n            activityMatches:\n              id && activityMatches[id] ? activityMatches[id] : [],\n          } as EvCallData,\n        };\n      },\n      {},\n    );\n  }\n\n  @computed((that: EvCallMonitor) => [that.calls])\n  get uniqueIdentifies() {\n    return makeCallsUniqueIdentifies(this.calls);\n  }\n\n  getMainCall(uii: string) {\n    const id = this._deps.evClient.getMainId(uii);\n    return this._deps.presence.callsMapping[id];\n  }\n\n  onStateChange() {\n    if (this._deps.evAgentSession.configSuccess) {\n      if (this.calls.length > this._oldCalls.length) {\n        const currentCall = this.calls[0];\n        const mainCall = this.getMainCall(currentCall.uii);\n\n        if (currentCall && mainCall) {\n          this._oldCalls = this.calls;\n\n          this._eventEmitter.emit(callStatus.RINGING, currentCall);\n        } else {\n          this._deps.presence.clearCalls();\n        }\n      } else if (this.calls.length < this._oldCalls.length) {\n        const call = this._oldCalls[0];\n        this._oldCalls = this.calls;\n\n        this._eventEmitter.emit(callStatus.ENDED, call);\n      }\n    }\n  }\n\n  getCallId({ uii, sessionId }: Partial<EvAddSessionNotification>) {\n    return this._deps.evClient.encodeUii({ uii, sessionId });\n  }\n\n  getActiveCallList(\n    callIds: string[],\n    otherCallIds: string[],\n    callsMapping: Mapping<EvCallData>,\n    id: string,\n  ) {\n    const uii = this._deps.evClient.decodeUii(id);\n    const mainUii = this._deps.evClient.getMainId(uii);\n    if (!otherCallIds.includes(mainUii) || !callIds.includes(id)) return [];\n    const currentOtherCallIds = otherCallIds.filter(\n      (id) => id.includes(uii) && id !== mainUii,\n    );\n    const currentCallIds = [mainUii, id, ...currentOtherCallIds];\n    return currentCallIds.map((id) => callsMapping[id]);\n  }\n\n  updateActivityMatches({ forceMatch = false } = {}) {\n    // it's async function\n    // TODO: fix type in DataMatcher\n    return this._deps.activityMatcher.match({\n      queries: this._deps.activityMatcher._getQueries(),\n      ignoreCache: forceMatch,\n    });\n  }\n\n  onCallRing(callback: (currentCall?: EvCallData) => any) {\n    this._eventEmitter.on(callStatus.RINGING, (currentCall) =>\n      callback(currentCall),\n    );\n    return this;\n  }\n\n  onCallEnded(callback: (currentCall?: EvCallData) => any) {\n    this._eventEmitter.on(callStatus.ENDED, (currentCall) =>\n      callback(currentCall),\n    );\n    return this;\n  }\n}\n\nexport { EvCallMonitor };\n"],"file":"EvCallMonitor.js"}