{"version":3,"sources":["modules/NumberValidate/index.js"],"names":["NumberValidate","deps","dep","optional","brand","client","companyContacts","regionSettings","accountInfo","extensionInfo","options","actionTypes","numberValidateActionTypes","_brand","_client","_companyContacts","ensureExist","call","_regionSettings","_accountInfo","_extensionInfo","_reducer","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","ready","dispatch","type","initSuccess","resetSuccess","input","countryCode","areaCode","hasInvalidChars","isValid","hasPlus","phoneNumber","isServiceNumber","id","length","special","extensionNumber","filteredContacts","ivrContacts","contacts","concat","find","item","extensionFromContacts","isMultipleSiteEnabled","site","getAvailableExtension","isAvailableExtension","companyNumber","normalizedCompanyNumber","mainCompanyNumber","phoneNumbers","validateResult","validateFormat","result","validateWithNumberParser","validatedNumbers","errors","map","isNoToNumber","push","isNoAreaCode","_numberParser","pasedNumers","validatedPhoneNumbers","_isSpecial","originalString","number","availableExtension","extensionObj","numbers","homeCountry","normalizedNumbers","_numberParserApi","response","international","country","callingCode","originalStrings","numberParser","parse","post","state","status","moduleStatuses","RcModule","proxify"],"mappings":"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","sourcesContent":["import { parse } from '@ringcentral-integration/phone-number';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport { isExtensionExist, isAnExtension } from '../../lib/contactHelper';\nimport isBlank from '../../lib/isBlank';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport proxify from '../../lib/proxy/proxify';\nimport ensureExist from '../../lib/ensureExist';\n\nimport { numberValidateActionTypes } from './numberValidateActionTypes';\nimport getNumberValidateReducer from './getNumberValidateReducer';\n\n/**\n * @class\n * @description Validate number with number parser api\n */\n@Module({\n  deps: [\n    'Brand',\n    'Client',\n    'RegionSettings',\n    'AccountInfo',\n    { dep: 'ExtensionInfo', optional: true },\n    { dep: 'CompanyContacts' },\n  ],\n})\nexport default class NumberValidate extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {CompanyContacts} params.companyContacts - companyContacts module instance\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   */\n  constructor({\n    brand,\n    client,\n    companyContacts,\n    regionSettings,\n    accountInfo,\n    extensionInfo,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: numberValidateActionTypes,\n    });\n    this._brand = brand;\n    this._client = client;\n    this._companyContacts = ensureExist.call(\n      this,\n      companyContacts,\n      'companyContacts',\n    );\n\n    this._regionSettings = regionSettings;\n    this._accountInfo = accountInfo;\n    this._extensionInfo = extensionInfo;\n    this._reducer = getNumberValidateReducer(this.actionTypes);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._brand.ready &&\n      this._regionSettings.ready &&\n      this._companyContacts.ready &&\n      this._accountInfo.ready &&\n      !this.ready\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _shouldReset() {\n    return (\n      (!this._brand.ready ||\n        !this._accountInfo.ready ||\n        !this._regionSettings.ready ||\n        !this._companyContacts.ready) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  isNoToNumber(input) {\n    if (isBlank(input)) {\n      return true;\n    }\n    const { hasInvalidChars, isValid } = parse({\n      input,\n      countryCode: this._regionSettings.countryCode,\n      areaCode: this._regionSettings.areaCode,\n    });\n    if (hasInvalidChars || !isValid) {\n      return true;\n    }\n    return false;\n  }\n\n  @proxify\n  isNoAreaCode(input) {\n    const { hasPlus, phoneNumber, isServiceNumber } = parse({\n      input,\n      countryCode: this._regionSettings.countryCode,\n      areaCode: this._regionSettings.areaCode,\n    });\n    const { countryCode, areaCode } = this._regionSettings;\n    if (\n      this._brand.id === '1210' &&\n      !isServiceNumber &&\n      !hasPlus &&\n      phoneNumber.length === 7 &&\n      (countryCode === 'CA' || countryCode === 'US') &&\n      areaCode === ''\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  _isSpecial(phoneNumber) {\n    if (phoneNumber && phoneNumber.special) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * TODO: Currently we don't have clearly defined business rule on\n   * what extension numbers are considered available for dialing.\n   * @param {*} extensionNumber\n   * @returns {String} extensionNumber | null\n   */\n  getAvailableExtension(extensionNumber) {\n    if (!isAnExtension(extensionNumber)) {\n      return null;\n    }\n    const { filteredContacts, ivrContacts } = this._companyContacts;\n    const contacts = filteredContacts.concat(ivrContacts);\n    return (\n      contacts.find((item) =>\n        isExtensionExist({\n          extensionNumber,\n          extensionFromContacts: item.extensionNumber,\n          options: {\n            isMultipleSiteEnabled:\n              this._extensionInfo?.isMultipleSiteEnabled ?? false,\n            site: this._extensionInfo?.site ?? null,\n          },\n        }),\n      )?.extensionNumber ?? null\n    );\n  }\n\n  isAvailableExtension(extensionNumber) {\n    return !!this.getAvailableExtension(extensionNumber);\n  }\n\n  isNotAnExtension(extensionNumber) {\n    if (\n      extensionNumber &&\n      extensionNumber.length <= 6 &&\n      !this._companyContacts.isAvailableExtension(extensionNumber)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  isCompanyExtension(companyNumber, extensionNumber) {\n    const { countryCode, areaCode } = this._regionSettings;\n    const normalizedCompanyNumber = normalizeNumber({\n      phoneNumber: companyNumber,\n      countryCode,\n      areaCode,\n    });\n    if (normalizedCompanyNumber !== this._accountInfo.mainCompanyNumber) {\n      return false;\n    }\n    return this._companyContacts.isAvailableExtension(extensionNumber);\n  }\n\n  @proxify\n  async validateNumbers(phoneNumbers) {\n    const validateResult = this.validateFormat(phoneNumbers);\n    if (!validateResult.result) {\n      return validateResult;\n    }\n    const validatedNumbers = await this.validateWithNumberParser(phoneNumbers);\n    return validatedNumbers;\n  }\n\n  @proxify\n  validateFormat(phoneNumbers) {\n    const errors = [];\n    phoneNumbers.map((phoneNumber) => {\n      if (this.isNoToNumber(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noToNumber' });\n        return null;\n      }\n      if (this.isNoAreaCode(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noAreaCode' });\n      }\n      return null;\n    });\n    return {\n      result: errors.length === 0,\n      errors,\n    };\n  }\n\n  @proxify\n  async validateWithNumberParser(phoneNumbers) {\n    const pasedNumers = await this._numberParser(phoneNumbers);\n    const errors = [];\n    const validatedPhoneNumbers = [];\n    pasedNumers.map((phoneNumber) => {\n      if (this._isSpecial(phoneNumber)) {\n        errors.push({\n          phoneNumber: phoneNumber.originalString,\n          type: 'specialNumber',\n        });\n        return null;\n      }\n      const number = phoneNumber.originalString;\n      const availableExtension = this.getAvailableExtension(number);\n\n      if (isAnExtension(number) && !availableExtension) {\n        errors.push({\n          phoneNumber: phoneNumber.originalString,\n          type: 'notAnExtension',\n        });\n        return null;\n      }\n\n      const extensionObj = availableExtension ? { availableExtension } : {};\n      validatedPhoneNumbers.push({ ...phoneNumber, ...extensionObj });\n      return null;\n    });\n    return {\n      result: errors.length === 0,\n      numbers: validatedPhoneNumbers,\n      errors,\n    };\n  }\n\n  @proxify\n  async _numberParser(phoneNumbers) {\n    const { countryCode, areaCode } = this._regionSettings;\n    const homeCountry = countryCode ? { homeCountry: countryCode } : {};\n    const normalizedNumbers = phoneNumbers.map((phoneNumber) =>\n      normalizeNumber({ phoneNumber, countryCode, areaCode }),\n    );\n    const response = await this._numberParserApi(\n      normalizedNumbers,\n      homeCountry,\n    );\n    return response.phoneNumbers.map((phoneNumber) => ({\n      ...phoneNumber,\n      international:\n        !!phoneNumber.country &&\n        phoneNumber.country.callingCode !== response.homeCountry.callingCode,\n    }));\n  }\n\n  @proxify\n  async _numberParserApi(originalStrings, homeCountry) {\n    const response = await this._client\n      .numberParser()\n      .parse()\n      .post(\n        {\n          originalStrings,\n        },\n        homeCountry,\n      );\n    return response;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n}\n"],"file":"index.js"}