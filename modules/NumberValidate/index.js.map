{"version":3,"sources":["modules/NumberValidate/index.js"],"names":["NumberValidate","deps","dep","brand","client","companyContacts","regionSettings","accountInfo","options","actionTypes","numberValidateActionTypes","_brand","_client","_companyContacts","ensureExist","_regionSettings","_accountInfo","_reducer","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","ready","dispatch","type","initSuccess","resetSuccess","input","countryCode","areaCode","hasInvalidChars","isValid","hasPlus","phoneNumber","isServiceNumber","id","length","special","extensionNumber","isAvailableExtension","companyNumber","normalizedCompanyNumber","mainCompanyNumber","phoneNumbers","validateResult","validateFormat","result","validateWithNumberParser","validatedNumbers","errors","map","isNoToNumber","push","isNoAreaCode","_numberParser","pasedNumers","validatedPhoneNumbers","_isSpecial","originalString","isNotAnExtension","numbers","homeCountry","normalizedNumbers","_numberParserApi","response","international","country","callingCode","originalStrings","numberParser","parse","post","state","status","moduleStatuses","RcModule","proxify"],"mappings":"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","sourcesContent":["import { parse } from '@ringcentral-integration/phone-number';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport proxify from '../../lib/proxy/proxify';\nimport ensureExist from '../../lib/ensureExist';\n\nimport numberValidateActionTypes from './numberValidateActionTypes';\nimport getNumberValidateReducer from './getNumberValidateReducer';\n\n/**\n * @class\n * @description Validate number with number parser api\n */\n@Module({\n  deps: [\n    'Brand',\n    'Client',\n    'RegionSettings',\n    'AccountInfo',\n    { dep: 'CompanyContacts' },\n  ],\n})\nexport default class NumberValidate extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {CompanyContacts} params.companyContacts - companyContacts module instance\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   */\n  constructor({\n    brand,\n    client,\n    companyContacts,\n    regionSettings,\n    accountInfo,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: numberValidateActionTypes,\n    });\n    this._brand = brand;\n    this._client = client;\n    this._companyContacts = this::ensureExist(\n      companyContacts,\n      'companyContacts',\n    );\n\n    this._regionSettings = regionSettings;\n    this._accountInfo = accountInfo;\n    this._reducer = getNumberValidateReducer(this.actionTypes);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._brand.ready &&\n      this._regionSettings.ready &&\n      this._companyContacts.ready &&\n      this._accountInfo.ready &&\n      !this.ready\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _shouldReset() {\n    return (\n      (!this._brand.ready ||\n        !this._accountInfo.ready ||\n        !this._regionSettings.ready ||\n        !this._companyContacts.ready) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  isNoToNumber(input) {\n    if (isBlank(input)) {\n      return true;\n    }\n    const { hasInvalidChars, isValid } = parse({\n      input,\n      countryCode: this._regionSettings.countryCode,\n      areaCode: this._regionSettings.areaCode,\n    });\n    if (hasInvalidChars || !isValid) {\n      return true;\n    }\n    return false;\n  }\n\n  isNoAreaCode(input) {\n    const { hasPlus, phoneNumber, isServiceNumber } = parse({\n      input,\n      countryCode: this._regionSettings.countryCode,\n      areaCode: this._regionSettings.areaCode,\n    });\n    const { countryCode, areaCode } = this._regionSettings;\n    if (\n      this._brand.id === '1210' &&\n      !isServiceNumber &&\n      !hasPlus &&\n      phoneNumber.length === 7 &&\n      (countryCode === 'CA' || countryCode === 'US') &&\n      areaCode === ''\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  _isSpecial(phoneNumber) {\n    if (phoneNumber && phoneNumber.special) {\n      return true;\n    }\n    return false;\n  }\n\n  isNotAnExtension(extensionNumber) {\n    if (\n      extensionNumber &&\n      extensionNumber.length <= 6 &&\n      !this._companyContacts.isAvailableExtension(extensionNumber)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  isCompanyExtension(companyNumber, extensionNumber) {\n    const { countryCode, areaCode } = this._regionSettings;\n    const normalizedCompanyNumber = normalizeNumber({\n      phoneNumber: companyNumber,\n      countryCode,\n      areaCode,\n    });\n    if (normalizedCompanyNumber !== this._accountInfo.mainCompanyNumber) {\n      return false;\n    }\n    return this._companyContacts.isAvailableExtension(extensionNumber);\n  }\n\n  @proxify\n  async validateNumbers(phoneNumbers) {\n    const validateResult = this.validateFormat(phoneNumbers);\n    if (!validateResult.result) {\n      return validateResult;\n    }\n    const validatedNumbers = await this.validateWithNumberParser(phoneNumbers);\n    return validatedNumbers;\n  }\n\n  validateFormat(phoneNumbers) {\n    const errors = [];\n    phoneNumbers.map((phoneNumber) => {\n      if (this.isNoToNumber(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noToNumber' });\n        return null;\n      }\n      if (this.isNoAreaCode(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noAreaCode' });\n      }\n      return null;\n    });\n    return {\n      result: errors.length === 0,\n      errors,\n    };\n  }\n\n  @proxify\n  async validateWithNumberParser(phoneNumbers) {\n    const pasedNumers = await this._numberParser(phoneNumbers);\n    const errors = [];\n    const validatedPhoneNumbers = [];\n    pasedNumers.map((phoneNumber) => {\n      if (this._isSpecial(phoneNumber)) {\n        errors.push({\n          phoneNumber: phoneNumber.originalString,\n          type: 'specialNumber',\n        });\n        return null;\n      }\n      if (this.isNotAnExtension(phoneNumber.originalString)) {\n        errors.push({\n          phoneNumber: phoneNumber.originalString,\n          type: 'notAnExtension',\n        });\n        return null;\n      }\n      validatedPhoneNumbers.push(phoneNumber);\n      return null;\n    });\n    return {\n      result: errors.length === 0,\n      numbers: validatedPhoneNumbers,\n      errors,\n    };\n  }\n\n  @proxify\n  async _numberParser(phoneNumbers) {\n    const { countryCode, areaCode } = this._regionSettings;\n    const homeCountry = countryCode ? { homeCountry: countryCode } : {};\n    const normalizedNumbers = phoneNumbers.map((phoneNumber) =>\n      normalizeNumber({ phoneNumber, countryCode, areaCode }),\n    );\n    const response = await this._numberParserApi(\n      normalizedNumbers,\n      homeCountry,\n    );\n    return response.phoneNumbers.map((phoneNumber) => ({\n      ...phoneNumber,\n      international:\n        !!phoneNumber.country &&\n        phoneNumber.country.callingCode !== response.homeCountry.callingCode,\n    }));\n  }\n\n  @proxify\n  async _numberParserApi(originalStrings, homeCountry) {\n    const response = await this._client\n      .numberParser()\n      .parse()\n      .post(\n        {\n          originalStrings,\n        },\n        homeCountry,\n      );\n    return response;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n}\n"],"file":"index.js"}