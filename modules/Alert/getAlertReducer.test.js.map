{"version":3,"sources":["modules/Alert/getAlertReducer.test.ts"],"names":["describe","it","getMessagesReducer","to","be","a","types","actionTypes","reducer","undefined","deep","equal","originalState","type","alert","id","message","payload","ttl","level","timestamp","allowDuplicates","dismiss","ids","dismissAll","getAlertReducer","messagesReducer","messages"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport getAlertReducer, { getMessagesReducer } from './getAlertReducer';\nimport actionTypes from './actionTypes';\n\ndescribe('getMessagesReducer', () => {\n  it('should be a function', () => {\n    expect(getMessagesReducer).to.be.a('function');\n  });\n  it('should return a reducer', () => {\n    expect(getMessagesReducer({ types: actionTypes })).to.be.a('function');\n  });\n  describe('messagesReducer', () => {\n    const reducer = getMessagesReducer(actionTypes);\n    it('should have initial state of []', () => {\n      expect(reducer(undefined, {})).to.deep.equal([]);\n    });\n    it('should return original state if type is not recognized', () => {\n      const originalState = [];\n      expect(reducer(originalState, { type: 'foo' })).to.equal(originalState);\n    });\n    it('should add new message to state on alert', () => {\n      expect(\n        reducer([], {\n          type: actionTypes.alert,\n          id: 'foo',\n          message: 'bar',\n          payload: 'payload',\n          ttl: 0,\n          level: 'level',\n          timestamp: 1234,\n        }),\n      ).to.deep.equal([\n        {\n          id: 'foo',\n          message: 'bar',\n          payload: 'payload',\n          ttl: 0,\n          level: 'level',\n          timestamp: 1234,\n        },\n      ]);\n      expect(\n        reducer([{}, {}], {\n          type: actionTypes.alert,\n          id: 'foo',\n          message: 'bar',\n          payload: 'payload',\n          ttl: 0,\n          level: 'level',\n          timestamp: 1234,\n        }),\n      ).to.deep.equal([\n        {},\n        {},\n        {\n          id: 'foo',\n          message: 'bar',\n          payload: 'payload',\n          ttl: 0,\n          level: 'level',\n          timestamp: 1234,\n        },\n      ]);\n    });\n    it('should return state if allowDuplicates === false and message already exists', () => {\n      const originalState = [\n        {\n          message: 'foo',\n        },\n      ];\n      expect(\n        reducer(originalState, {\n          type: actionTypes.alert,\n          message: 'foo',\n          allowDuplicates: false,\n        }),\n      ).to.equal(originalState);\n    });\n    it('should remove messages specified by the ids on dismiss', () => {\n      expect(\n        reducer([{ id: 'foo' }, { id: 'bar' }, { id: 'rogue' }], {\n          type: actionTypes.dismiss,\n          ids: ['foo', 'bar'],\n        }),\n      ).to.deep.equal([\n        {\n          id: 'rogue',\n        },\n      ]);\n    });\n    it('should remove all messages on dismissAll', () => {\n      expect(\n        reducer([{ id: 'foo' }, { id: 'bar' }, { id: 'rogue' }], {\n          type: actionTypes.dismissAll,\n        }),\n      ).to.deep.equal([]);\n    });\n  });\n});\n\ndescribe('getAlertReducer', () => {\n  it('should be a function', () => {\n    expect(getAlertReducer).to.be.a('function');\n  });\n  it('should return a reducer', () => {\n    expect(getAlertReducer(actionTypes)).to.be.a('function');\n  });\n  it('should return a combined reducer', () => {\n    const reducer = getAlertReducer(actionTypes);\n    const messagesReducer = getMessagesReducer(actionTypes);\n    expect(reducer(undefined, {})).to.deep.equal({\n      messages: messagesReducer(undefined, {}),\n    });\n  });\n});\n"],"file":"getAlertReducer.test.js"}