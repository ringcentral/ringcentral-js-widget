{"version":3,"sources":["modules/Alert/Alert.ts"],"names":["Alert","deps","dep","optional","ttl","options","_ttl","_autoDismiss","now","Date","ids","state","messages","filter","item","timestamp","map","id","length","dismiss","_reducer","actionTypes","message","payload","level","alertLevels","info","allowDuplicates","loading","action","uuid","v4","store","dispatch","type","alert","setTimeout","danger","warning","success","update","concat","dismissAll","moduleStatuses","ready","RcModule","proxify"],"mappings":"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","sourcesContent":["import uuid from 'uuid';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport actionTypes from './actionTypes';\nimport alertLevels, { AlertLevelType } from './alertLevels';\nimport getAlertReducer from './getAlertReducer';\nimport proxify from '../../lib/proxy/proxify';\n\nexport interface AlertModel {\n  message: string;\n  payload?: any;\n  ttl?: number;\n  allowDuplicates?: boolean;\n  /**\n   * show loading with new notification\n   */\n  loading?: boolean;\n  /**\n   * action template(right area) with new notification\n   */\n  action?: React.ReactNode;\n}\n\nexport type AlertLevel = {\n  level?: AlertLevelType;\n};\n\n/**\n * @class\n * @description Alert messages managing module.\n */\n@Module({\n  deps: [{ dep: 'AlertOptions', optional: true }],\n})\nexport default class Alert extends RcModule<typeof actionTypes> {\n  private _ttl: number;\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Number} params.ttl - Default time-to-live for alert messages.\n   */\n  constructor({ ttl = 5000, ...options }) {\n    super({\n      ...options,\n    });\n    this._reducer = getAlertReducer(this.actionTypes);\n    this._ttl = ttl;\n  }\n\n  get _actionTypes() {\n    return actionTypes;\n  }\n\n  _onStateChange() {\n    /* do nothing */\n  }\n\n  // this module has no dependency, and is always ready\n  // eslint-disable-next-line class-methods-use-this\n  get status() {\n    return moduleStatuses.ready;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get ready() {\n    return true;\n  }\n\n  get messages() {\n    return this.state.messages;\n  }\n\n  /**\n   * @function\n   * @description Scans the messages for expired ones and dismiss them.\n   */\n  _autoDismiss = () => {\n    const now = Date.now();\n    const ids = this.state.messages\n      .filter((item) => item.ttl > 0 && now - item.timestamp > item.ttl)\n      .map((item) => item.id);\n    if (ids.length) {\n      this.dismiss(ids);\n    }\n  };\n\n  /**\n   * @function\n   * @description Add alert message to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {alertLevels} options.level\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  @proxify\n  alert({\n    message,\n    payload,\n    level = alertLevels.info as AlertLevelType,\n    ttl = this._ttl,\n    allowDuplicates = true,\n    loading = false,\n    action,\n  }: AlertModel & AlertLevel) {\n    const id = uuid.v4();\n    this.store.dispatch({\n      type: this.actionTypes.alert,\n      message,\n      payload,\n      level,\n      // when loading the ttl will be zero, make this never dismiss\n      ttl: loading ? 0 : ttl,\n      allowDuplicates,\n      id,\n      timestamp: Date.now(),\n      loading,\n      action,\n    });\n    if (ttl > 0) {\n      setTimeout(this._autoDismiss, ttl + 10);\n    }\n    return id;\n  }\n\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"danger\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  danger(options: AlertModel) {\n    return this.alert({\n      ...options,\n      level: alertLevels.danger as AlertLevelType,\n    });\n  }\n\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"warning\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  warning(options: AlertModel) {\n    return this.alert({\n      ...options,\n      level: alertLevels.warning as AlertLevelType,\n    });\n  }\n\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"info\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  info(options: AlertModel) {\n    return this.alert({\n      ...options,\n      level: alertLevels.info as AlertLevelType,\n    });\n  }\n\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"success\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  success(options: AlertModel) {\n    return this.alert({\n      ...options,\n      level: alertLevels.success as AlertLevelType,\n    });\n  }\n\n  /**\n   * @function\n   * @description Update the message with given id.\n   * @param {Array<String>|String} id - The message id of you want to update.\n   * @param options - update options.\n   */\n  update(\n    id: string,\n    options: Partial<Pick<AlertModel, 'message' | 'loading' | 'action'>>,\n  ) {\n    this.store.dispatch({\n      type: this.actionTypes.update,\n      ...options,\n      id,\n    });\n  }\n\n  /**\n   * @function\n   * @description Dismiss the message from the state.\n   * @param {Array<String>|String} ids - The id, or array of ids to be dismissed.\n   */\n  @proxify\n  dismiss(ids: string | string[]) {\n    this.store.dispatch({\n      type: this.actionTypes.dismiss,\n      ids: [].concat(ids),\n    });\n  }\n\n  /**\n   * @function\n   * @description Dismiss all messages.\n   */\n  @proxify\n  dismissAll() {\n    this.store.dispatch({\n      type: this.actionTypes.dismissAll,\n    });\n  }\n}\n"],"file":"Alert.js"}