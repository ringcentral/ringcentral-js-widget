{"version":3,"sources":["modules/Alert/getAlertReducer.ts"],"names":["getMessagesReducer","types","state","type","message","payload","ttl","level","ids","timestamp","id","allowDuplicates","loading","action","alert","find","item","update","map","dismiss","filter","indexOf","dismissAll","getAlertReducer","messages"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAEO,SAASA,kBAAT,CAA4BC,KAA5B,EAAmC;AACxC,SAAO,YAeF;AAAA,QAdHC,KAcG,uEAdK,EAcL;;AAAA;AAAA,QAZDC,IAYC,QAZDA,IAYC;AAAA,QAXDC,OAWC,QAXDA,OAWC;AAAA,QAVDC,OAUC,QAVDA,OAUC;AAAA,QATDC,GASC,QATDA,GASC;AAAA,QARDC,KAQC,QARDA,KAQC;AAAA,QAPDC,GAOC,QAPDA,GAOC;AAAA,QANDC,SAMC,QANDA,SAMC;AAAA,QALDC,EAKC,QALDA,EAKC;AAAA,QAJDC,eAIC,QAJDA,eAIC;AAAA,QAHDC,OAGC,QAHDA,OAGC;AAAA,QAFDC,MAEC,QAFDA,MAEC;;AACH,YAAQV,IAAR;AACE,WAAKF,KAAK,CAACa,KAAX;AACE,YACE,CAACH,eAAD,IACAT,KAAK,CAACa,IAAN,CAAW,UAACC,IAAD;AAAA,iBAAUA,IAAI,CAACZ,OAAL,KAAiBA,OAAjB,IAA4BY,IAAI,CAACT,KAAL,KAAeA,KAArD;AAAA,SAAX,CAFF,EAGE;AACA,iBAAOL,KAAP;AACD;;AACD,4CACKA,KADL,IAEE;AACEQ,UAAAA,EAAE,EAAFA,EADF;AAEEN,UAAAA,OAAO,EAAPA,OAFF;AAGEC,UAAAA,OAAO,EAAPA,OAHF;AAIEC,UAAAA,GAAG,EAAHA,GAJF;AAKEC,UAAAA,KAAK,EAALA,KALF;AAMEE,UAAAA,SAAS,EAATA,SANF;AAOEG,UAAAA,OAAO,EAAPA,OAPF;AAQEC,UAAAA,MAAM,EAANA;AARF,SAFF;;AAaF,WAAKZ,KAAK,CAACgB,MAAX;AACE,eAAOf,KAAK,CAACgB,GAAN,CAAU,UAACF,IAAD;AAAA,iBACfA,IAAI,CAACN,EAAL,KAAYA,EAAZ,qBAESM,IAFT;AAGMZ,YAAAA,OAAO,EAAPA,OAHN;AAIMQ,YAAAA,OAAO,EAAPA,OAJN;AAKMC,YAAAA,MAAM,EAANA;AALN,eAOIG,IARW;AAAA,SAAV,CAAP;;AAWF,WAAKf,KAAK,CAACkB,OAAX;AACE,eAAOjB,KAAK,CAACkB,MAAN,CAAa,UAACJ,IAAD;AAAA,iBAAUR,GAAG,CAACa,OAAJ,CAAYL,IAAI,CAACN,EAAjB,MAAyB,CAAC,CAApC;AAAA,SAAb,CAAP;;AACF,WAAKT,KAAK,CAACqB,UAAX;AACE,eAAO,EAAP;;AACF;AACE,eAAOpB,KAAP;AAtCJ;AAwCD,GAxDD;AAyDD;;AAEc,SAASqB,eAAT,CAAyBtB,KAAzB,EAAgC;AAC7C,SAAO,4BAAgB;AACrBuB,IAAAA,QAAQ,EAAExB,kBAAkB,CAACC,KAAD;AADP,GAAhB,CAAP;AAGD","sourcesContent":["import { combineReducers } from 'redux';\n\nexport function getMessagesReducer(types) {\n  return (\n    state = [],\n    {\n      type,\n      message,\n      payload,\n      ttl,\n      level,\n      ids,\n      timestamp,\n      id,\n      allowDuplicates,\n      loading,\n      action,\n    },\n  ) => {\n    switch (type) {\n      case types.alert:\n        if (\n          !allowDuplicates &&\n          state.find((item) => item.message === message && item.level === level)\n        ) {\n          return state;\n        }\n        return [\n          ...state,\n          {\n            id,\n            message,\n            payload,\n            ttl,\n            level,\n            timestamp,\n            loading,\n            action,\n          },\n        ];\n      case types.update:\n        return state.map((item) =>\n          item.id === id\n            ? {\n                ...item,\n                message,\n                loading,\n                action,\n              }\n            : item,\n        );\n\n      case types.dismiss:\n        return state.filter((item) => ids.indexOf(item.id) === -1);\n      case types.dismissAll:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getAlertReducer(types) {\n  return combineReducers({\n    messages: getMessagesReducer(types),\n  });\n}\n"],"file":"getAlertReducer.js"}