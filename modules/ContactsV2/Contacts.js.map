{"version":3,"sources":["modules/ContactsV2/Contacts.ts"],"names":["DEFAULT_SOURCE_FILTER","Contacts","name","deps","dep","optional","that","_contactSources","size","checkSourceUpdated","filteredContacts","searchFilter","sourceFilter","Map","_sourcesLastStatus","_sourcesUpdatedAt","Date","now","_deps","contactSources","source","addSource","_updateFilter","auth","loggedIn","sourceModuleReady","pending","ready","sourceName","Error","has","getPresence","getProfileImage","searchForPhoneNumbers","filterContacts","matchContactsByPhoneNumber","set","updated","Array","from","keys","get","lastStatus","sourceReady","data","contacts","sources","values","filter","result","Promise","all","map","promise","resolve","then","items","concat","error","console","searchString","phoneNumber","phoneNumbers","type","id","contactId","toString","find","x","contact","useCache","syncPromises","sync","push","names","AllContactSourceName","allContacts","RcModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import {\n  RcModuleV2,\n  state,\n  action,\n  computed,\n} from '@ringcentral-integration/core';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport {\n  uniqueContactItems,\n  sortContactItemsByName,\n  groupByFirstLetterOfName,\n  getFilterContacts,\n  AllContactSourceName,\n} from '../../lib/contactHelper';\nimport proxify from '../../lib/proxy/proxify';\nimport { Deps, UpdateFilterOptions } from './Contacts.interface';\nimport {\n  IContact,\n  TypedContact,\n  TypedPhoneNumber,\n  ContactSource,\n} from '../../interfaces/Contact.model';\n\nexport const DEFAULT_SOURCE_FILTER = 'all';\n\n@Module({\n  name: 'Contacts',\n  deps: [\n    'Auth',\n    { dep: 'ContactSources', optional: true },\n    { dep: 'ContactsOptions', optional: true },\n  ],\n})\nexport class Contacts extends RcModuleV2<Deps> {\n  protected _contactSources = new Map<string, ContactSource>();\n\n  protected _sourcesLastStatus = new Map<\n    string,\n    { ready?: boolean; data?: IContact[] }\n  >();\n\n  protected _sourcesUpdatedAt = Date.now();\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    for (const source of this._deps.contactSources ?? []) {\n      this.addSource(source);\n    }\n  }\n\n  @state\n  searchFilter = '';\n\n  @state\n  sourceFilter = DEFAULT_SOURCE_FILTER;\n\n  @action\n  protected _updateFilter({ sourceFilter, searchFilter }: UpdateFilterOptions) {\n    this.searchFilter = searchFilter ?? this.searchFilter;\n    this.sourceFilter = sourceFilter ?? this.sourceFilter;\n  }\n\n  onReset() {\n    this._updateFilter({\n      sourceFilter: DEFAULT_SOURCE_FILTER,\n      searchFilter: '',\n    });\n  }\n\n  _shouldInit() {\n    return this._deps.auth.loggedIn && this.sourceModuleReady && this.pending;\n  }\n\n  _shouldReset() {\n    return (!this._deps.auth.loggedIn || !this.sourceModuleReady) && this.ready;\n  }\n\n  @proxify\n  async updateFilter({ sourceFilter, searchFilter }: UpdateFilterOptions) {\n    this._updateFilter({ sourceFilter, searchFilter });\n  }\n\n  addSource(source: ContactSource) {\n    if (!source.sourceName) {\n      throw new Error('[Contacts > ContactSource > sourceName] is required');\n    }\n    if (this._contactSources.has(source.sourceName)) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > sourceName] already exists`,\n      );\n    }\n    if (source.getPresence && typeof source.getPresence !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getPresence] must be a function`,\n      );\n    }\n    if (\n      source.getProfileImage &&\n      typeof source.getProfileImage !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getProfileImage] must be a function`,\n      );\n    }\n    if (\n      source.searchForPhoneNumbers &&\n      typeof source.searchForPhoneNumbers !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] must be a function`,\n      );\n    }\n    if (source.filterContacts && typeof source.filterContacts !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > filterContacts] must be a function`,\n      );\n    }\n    if (\n      source.matchContactsByPhoneNumber &&\n      typeof source.matchContactsByPhoneNumber !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] must be a function`,\n      );\n    }\n    this._contactSources.set(source.sourceName, source);\n    this._sourcesLastStatus.set(source.sourceName, {});\n    this._sourcesUpdatedAt = Date.now();\n  }\n\n  checkSourceUpdated() {\n    let updated = false;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      const lastStatus = this._sourcesLastStatus.get(sourceName);\n      if (\n        lastStatus.ready !== source.sourceReady ||\n        lastStatus.data !== source.contacts\n      ) {\n        updated = true;\n        this._sourcesLastStatus.set(sourceName, {\n          ready: source.sourceReady,\n          data: source.contacts,\n        });\n      }\n    }\n    if (updated) {\n      this._sourcesUpdatedAt = Date.now();\n    }\n    return this._sourcesUpdatedAt;\n  }\n\n  async filterContacts(searchFilter: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.filterContacts === 'function',\n    );\n    let result: IContact[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(source.filterContacts(searchFilter));\n        return promise\n          .then((items) => {\n            result = result.concat(items);\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > filterContacts] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async searchForPhoneNumbers(searchString: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.searchForPhoneNumbers === 'function',\n    );\n    let result: TypedPhoneNumber[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.searchForPhoneNumbers(searchString),\n        );\n        return promise\n          .then((items) => {\n            result = result.concat(items);\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContactsByPhoneNumber(phoneNumber: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.matchContactsByPhoneNumber === 'function',\n    );\n    let result: TypedContact[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.matchContactsByPhoneNumber(phoneNumber),\n        );\n        return promise\n          .then((items) => {\n            result = result.concat(items);\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContacts({ phoneNumbers }: { phoneNumbers: string[] }) {\n    const result: Record<string, TypedContact[]> = {};\n    await Promise.all(\n      phoneNumbers.map((phoneNumber) => {\n        const promise = this.matchContactsByPhoneNumber(phoneNumber);\n        return promise.then((items) => {\n          result[phoneNumber] = items;\n        });\n      }),\n    );\n    return result;\n  }\n\n  find({ type, id }: { type: string; id: string }) {\n    const contactId = (id || '').toString();\n    const source = this._contactSources.get(type);\n    if (source) {\n      return source.contacts.find((x) => x.id.toString() === contactId);\n    }\n    return null;\n  }\n\n  @proxify\n  async getProfileImage(contact: IContact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getProfileImage) {\n      const result = await source.getProfileImage(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async getPresence(contact: IContact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getPresence) {\n      const result = await source.getPresence(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async sync(...args: unknown[]) {\n    const syncPromises = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (typeof source.sync === 'function') {\n        syncPromises.push(source.sync(...args));\n      }\n    }\n    await Promise.all(syncPromises);\n  }\n\n  get sourceModuleReady() {\n    let ready = true;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (!source.ready) {\n        ready = false;\n      }\n    }\n    return ready;\n  }\n\n  get companyContacts() {\n    const source = this._contactSources.get('company');\n    if (source) {\n      return source.contacts;\n    }\n    return [];\n  }\n\n  get personalContacts() {\n    const source = this._contactSources.get('personal');\n    if (source) {\n      return source.contacts;\n    }\n    return [];\n  }\n\n  @computed<Contacts>((that) => [\n    that._contactSources.size,\n    that.checkSourceUpdated(),\n  ])\n  get sourceNames() {\n    const names = [AllContactSourceName];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (source.sourceReady) {\n        names.push(sourceName);\n      }\n    }\n    return names;\n  }\n\n  @computed<Contacts>((that) => [that.checkSourceUpdated()])\n  get allContacts() {\n    let contacts: IContact[] = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (source.sourceReady) {\n        contacts = contacts.concat(source.contacts);\n      }\n    }\n    return contacts;\n  }\n\n  @computed<Contacts>(({ filteredContacts }) => [filteredContacts])\n  get contactGroups() {\n    return groupByFirstLetterOfName(\n      sortContactItemsByName(uniqueContactItems(this.filteredContacts)),\n    );\n  }\n\n  @computed<Contacts>((that) => [\n    that.searchFilter,\n    that.sourceFilter,\n    that.checkSourceUpdated(),\n  ])\n  get filteredContacts() {\n    let contacts: IContact[];\n    if (\n      isBlank(this.searchFilter) &&\n      (this.sourceFilter === AllContactSourceName || isBlank(this.sourceFilter))\n    ) {\n      return this.allContacts;\n    }\n    if (\n      this.sourceFilter !== AllContactSourceName &&\n      !isBlank(this.sourceFilter)\n    ) {\n      const source = this._contactSources.get(this.sourceFilter);\n      if (source && source.sourceReady) {\n        /* eslint { \"prefer-destructuring\": 0 } */\n        contacts = source.contacts;\n      } else {\n        contacts = [];\n      }\n    } else {\n      contacts = this.allContacts;\n    }\n    if (!isBlank(this.searchFilter)) {\n      contacts = getFilterContacts(contacts, this.searchFilter);\n    }\n    return contacts;\n  }\n}\n"],"file":"Contacts.js"}