{"version":3,"sources":["modules/EvInboundQueuesUI/EvInboundQueuesUI.ts"],"names":["EvInboundQueuesUI","name","deps","locale","routerInteraction","evSessionConfig","evClient","modules","getInboundQueues","_modules","selectedInboundQueueIds","inboundQueues","map","inboundQueue","checked","find","id","gateId","inboundQueuesState","setInboundQueuesState","index","findIndex","option","selectedInboundQueue","severalAssign","queues","setInboundQueueIds","push","currentLocale","renderFunction","gateName","searchOption","text","toLowerCase","includes","submitInboundQueues","goBack","getAssignedInboundQueues","filter","isAllAssign","assignedInboundQueues","length","isSeveralAssign","checkBoxOnChange","_checkBoxOnChange","allCheckBoxOnChange","_allCheckBoxOnChange","RcUIModuleV2"],"mappings":"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","sourcesContent":["import { RcUIModuleV2, createSelector } from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport {\n  ChangeQueueStateFn,\n  EvInboundQueuesUIFunctions,\n  EvInboundQueuesUIProps,\n} from '../../interfaces/EvInboundQueuesUI.interface';\nimport { AvailableQueue } from '../../interfaces/SelectableQueue.interface';\nimport { DepsModules, InboundQueuesUI } from './EvInboundQueuesUI.interface';\nimport { sortByName } from '../../lib/sortByName';\n\n@Module({\n  name: 'EvInboundQueuesUI',\n  deps: ['Locale', 'RouterInteraction', 'EvSessionConfig', 'EvClient'],\n})\nclass EvInboundQueuesUI extends RcUIModuleV2<DepsModules>\n  implements InboundQueuesUI {\n  constructor({ locale, routerInteraction, evSessionConfig, evClient }) {\n    super({\n      modules: {\n        locale,\n        routerInteraction,\n        evClient,\n        evSessionConfig,\n      },\n    });\n  }\n\n  getInboundQueues = createSelector(\n    () => this._modules.evSessionConfig.selectedInboundQueueIds,\n    () => this._modules.evSessionConfig.getInboundQueues(),\n    (selectedInboundQueueIds, inboundQueues) => {\n      return sortByName(\n        inboundQueues.map((inboundQueue) => {\n          return {\n            ...inboundQueue,\n            checked: !!selectedInboundQueueIds.find(\n              (id) => id === inboundQueue.gateId,\n            ),\n          };\n        }),\n        'gateName',\n      );\n    },\n  );\n\n  private _checkBoxOnChange(\n    gateId: string,\n    inboundQueuesState: AvailableQueue[],\n    setInboundQueuesState: ChangeQueueStateFn,\n  ) {\n    const inboundQueues = [...inboundQueuesState];\n    const index = inboundQueues.findIndex((option) => option.gateId === gateId);\n    const selectedInboundQueue = inboundQueues[index];\n\n    inboundQueues[index] = {\n      ...selectedInboundQueue,\n      checked: !selectedInboundQueue.checked,\n    };\n\n    setInboundQueuesState(inboundQueues);\n  }\n\n  private _allCheckBoxOnChange(\n    severalAssign: boolean,\n    inboundQueuesState: AvailableQueue[],\n    setInboundQueuesState: ChangeQueueStateFn,\n  ) {\n    const inboundQueues = [...inboundQueuesState].map((option) => {\n      return {\n        ...option,\n        // new object\n        checked: severalAssign || !option.checked,\n      };\n    });\n    setInboundQueuesState(inboundQueues);\n  }\n\n  private submitInboundQueues(queues: AvailableQueue[]) {\n    this._modules.evSessionConfig.setInboundQueueIds(\n      queues.map((inboundQueue) => inboundQueue.gateId),\n    );\n    this._modules.routerInteraction.push('/sessionConfig');\n  }\n\n  getUIProps(): EvInboundQueuesUIProps {\n    return {\n      currentLocale: this._modules.locale.currentLocale,\n      inboundQueues: this.getInboundQueues(),\n    };\n  }\n\n  getUIFunctions(): EvInboundQueuesUIFunctions {\n    return {\n      renderFunction: (option) => option.gateName,\n      searchOption: (option, text) =>\n        option.gateName &&\n        option.gateName.toLowerCase().includes(text.toLowerCase()),\n      submitInboundQueues: (queues: AvailableQueue[]) =>\n        this.submitInboundQueues(queues),\n      goBack: () => this._modules.routerInteraction.goBack(),\n      getAssignedInboundQueues: (inboundQueues) =>\n        inboundQueues.filter(({ checked }) => checked),\n      isAllAssign: (assignedInboundQueues, inboundQueues) =>\n        !!assignedInboundQueues.length &&\n        assignedInboundQueues.length === inboundQueues.length,\n      isSeveralAssign: (assignedInboundQueues, inboundQueues) =>\n        !!assignedInboundQueues.length &&\n        assignedInboundQueues.length !== inboundQueues.length,\n      checkBoxOnChange: (...args) => this._checkBoxOnChange(...args),\n      allCheckBoxOnChange: (...args) => this._allCheckBoxOnChange(...args),\n    };\n  }\n}\nexport { EvInboundQueuesUI };\n"],"file":"EvInboundQueuesUI.js"}