{"version":3,"sources":["modules/AvailabilityMonitor/index.js"],"names":["HEALTH_CHECK_INTERVAL","STATUS_END_POINT","DEFAULT_TIME","AvailabilityMonitor","deps","dep","optional","alert","client","environment","enabled","options","actionTypes","_enabled","_client","ensureExist","call","_environment","_lastEnvironmentCounter","_healthRetryTime","_reducer","_beforeRequestHandler","bind","_requestErrorHandler","_refreshErrorHandler","_refreshSuccessHandler","_switchToNormalMode","_switchToVoIPOnlyMode","_randomTime","_limitedTimeout","_normalTimeout","pending","ready","changeCounter","_shouldInit","store","dispatch","type","init","_bindHandlers","initSuccess","_shouldRebindHandlers","subscribe","_onStateChange","_unbindHandlers","service","platform","on","events","beforeRequest","requestError","addListener","loginSuccess","logoutSuccess","logoutError","refreshError","refreshSuccess","removeListener","params","isLimitedAvailabilityMode","requestUrl","requestMethod","url","method","Error","errorMessages","serviceLimited","headers","retryAfter","parseFloat","get","Number","isNaN","error","response","_json","clone","json","extractedUrl","hasLimitedStatusError","limitedModeStatusError","_retrieveRetryAfter","_switchToLimitedMode","_retry","isOffline","message","RES_STATUS","status","auth","refreshTokenValid","isVoIPOnlyMode","VoIPOnlyReset","VoIPOnlyMode","isLimitedMode","limitedMode","normalMode","_clearLimitedTimeout","_clearNormalTimeout","clearTimeout","skipAuthCheck","res","setTimeout","_healthCheck","_getStatus","console","_throttledHealthCheck","errMessage","state","moduleStatuses","RcModule"],"mappings":"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","sourcesContent":["/**\n * Created by Sophie, updated by Bruce\n */\nimport { pathOr } from 'ramda';\nimport { Module } from '../../lib/di';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport RcModule from '../../lib/RcModule';\nimport getAvailabilityModeReducer from './availabilityMonitorReducer';\nimport actionTypes from './actionTypes';\nimport {\n  extractUrl,\n  isHAError,\n  generateRandomNumber,\n  isHAEnabledAPI,\n} from './availabilityMonitorHelper';\nimport errorMessages from './errorMessages';\nimport throttle from '../../lib/throttle';\nimport validateIsOffline from '../../lib/validateIsOffline';\n\n// Constants\nexport const HEALTH_CHECK_INTERVAL = 60 * 1000;\nexport const STATUS_END_POINT = '/restapi/v1.0/status';\nconst DEFAULT_TIME = 0;\n\n/**\n * @class AvailabilityMonitor\n * @description Connectivity monitor module\n */\n@Module({\n  deps: [\n    'Client',\n    { dep: 'Environment', optional: true },\n    { dep: 'AvailabilityMonitorOptions', optional: true },\n  ],\n})\nexport default class AvailabilityMonitor extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Environment} params.environment - environment module instance\n   */\n  constructor({ alert, client, environment, enabled = false, ...options }) {\n    super({\n      actionTypes,\n      enabled,\n      ...options,\n    });\n\n    this._enabled = enabled;\n    this._client = ensureExist.call(this, client, 'client');\n    this._environment = environment;\n    this._lastEnvironmentCounter = 0;\n    this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    this._reducer = getAvailabilityModeReducer(this.actionTypes);\n\n    // auto bind this\n    this._beforeRequestHandler = this._beforeRequestHandler.bind(this);\n    this._requestErrorHandler = this._requestErrorHandler.bind(this);\n    this._refreshErrorHandler = this._refreshErrorHandler.bind(this);\n    this._refreshSuccessHandler = this._refreshSuccessHandler.bind(this);\n    this._switchToNormalMode = this._switchToNormalMode.bind(this);\n    this._switchToVoIPOnlyMode = this._switchToVoIPOnlyMode.bind(this);\n    this._randomTime = DEFAULT_TIME;\n    this._limitedTimeout = null;\n    this._normalTimeout = null;\n  }\n\n  _shouldInit() {\n    return !!(this.pending && (!this._environment || this._environment.ready));\n  }\n\n  _shouldRebindHandlers() {\n    return !!(\n      this.ready &&\n      this._environment &&\n      this._environment.ready &&\n      this._environment.changeCounter !== this._lastEnvironmentCounter\n    );\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this._bindHandlers();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldRebindHandlers()) {\n      this._lastEnvironmentCounter = this._environment.changeCounter;\n      this._bindHandlers();\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _bindHandlers() {\n    if (this._unbindHandlers) {\n      this._unbindHandlers();\n    }\n\n    const client = this._client.service.client();\n    const platform = this._client.service.platform();\n\n    // TODO: in other modules, when they catch error first check if app is in HA mode.\n    client.on(client.events.beforeRequest, this._beforeRequestHandler);\n    client.on(client.events.requestError, this._requestErrorHandler);\n    platform.addListener(\n      platform.events.loginSuccess,\n      this._switchToNormalMode,\n    );\n    platform.addListener(\n      platform.events.logoutSuccess,\n      this._switchToNormalMode,\n    );\n    platform.addListener(platform.events.logoutError, this._switchToNormalMode);\n    platform.addListener(\n      platform.events.refreshError,\n      this._refreshErrorHandler,\n    );\n    platform.addListener(\n      platform.events.refreshSuccess,\n      this._refreshSuccessHandler,\n    );\n\n    this._unbindHandlers = () => {\n      client.removeListener(\n        client.events.beforeRequest,\n        this._beforeRequestHandler,\n      );\n      client.removeListener(\n        client.events.requestError,\n        this._requestErrorHandler,\n      );\n      platform.removeListener(\n        platform.events.loginSuccess,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.logoutSuccess,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.logoutError,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.refreshError,\n        this._refreshErrorHandler,\n      );\n      platform.removeListener(\n        platform.events.refreshSuccess,\n        this._refreshSuccessHandler,\n      );\n      this._unbindHandlers = null;\n    };\n  }\n\n  _beforeRequestHandler(params) {\n    if (!this.isLimitedAvailabilityMode || !this._enabled) {\n      return;\n    }\n\n    const requestUrl = pathOr(null, ['_request', 'url'], params);\n    const requestMethod = pathOr(null, ['_request', 'method'], params);\n\n    if (!requestUrl || !requestMethod) {\n      return;\n    }\n\n    // In the limited availability mode, should not block status check api\n    // or highly availability api.\n    if (\n      extractUrl({ url: requestUrl }) === STATUS_END_POINT ||\n      isHAEnabledAPI({ url: requestUrl, method: requestMethod })\n    ) {\n      return;\n    }\n\n    throw new Error(errorMessages.serviceLimited);\n  }\n\n  /**\n   * Retrieve retry after value from response headers\n   * @param {*} headers\n   */\n  _retrieveRetryAfter(headers) {\n    try {\n      const retryAfter = parseFloat(headers.get('Retry-After') || -1);\n      return Number.isNaN(retryAfter) ? -1 : retryAfter;\n    } catch (error) {\n      return -1;\n    }\n  }\n\n  /**\n   * Check if app can enter LA mode.\n   * If this module is not enabled, just return.\n   *\n   * @param {*} error Http response\n   * @memberof AvailabilityMonitor\n   */\n  async _requestErrorHandler(error) {\n    if (error.response && !error.response._json) {\n      error.response._json = await error.response.clone().json();\n    }\n    const requestUrl = pathOr('', ['request', 'url'], error);\n    const extractedUrl = extractUrl({\n      url: requestUrl,\n    });\n\n    // If app is in Limited Mode and staus API met a status which is not 200 nor 503\n    if (\n      this.isLimitedAvailabilityMode &&\n      extractedUrl === STATUS_END_POINT &&\n      !isHAError(error)\n    ) {\n      if (!this.hasLimitedStatusError) {\n        this.store.dispatch({\n          type: this.actionTypes.limitedModeStatusError,\n        });\n      }\n      return;\n    }\n\n    if (!isHAError(error) || !this._enabled) {\n      return;\n    }\n\n    const headers = pathOr({}, ['response', 'headers'], error);\n    const retryAfter = this._retrieveRetryAfter(headers);\n\n    if (retryAfter > 0) {\n      // Retry-After unit is secons, make it mili-secons\n      this._healthRetryTime = retryAfter * 1000;\n    } else {\n      this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    }\n\n    this._switchToLimitedMode();\n    this._retry();\n  }\n\n  async _refreshErrorHandler(error) {\n    const isOffline = validateIsOffline(error.message);\n\n    const platform = this._client.service.platform();\n    const RES_STATUS = (error.response && error.response.status) || null;\n    const refreshTokenValid =\n      (isOffline || RES_STATUS >= 500) &&\n      (await platform.auth().refreshTokenValid());\n    if (refreshTokenValid) {\n      this._switchToVoIPOnlyMode();\n    }\n  }\n\n  _refreshSuccessHandler() {\n    if (this.isVoIPOnlyMode) {\n      this.store.dispatch({\n        type: this.actionTypes.VoIPOnlyReset,\n      });\n    }\n  }\n\n  _switchToVoIPOnlyMode() {\n    if (this.isVoIPOnlyMode) {\n      return;\n    }\n\n    this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    this.store.dispatch({\n      type: this.actionTypes.VoIPOnlyMode,\n    });\n    this._retry();\n  }\n\n  _switchToLimitedMode() {\n    if (this.isLimitedMode) {\n      return;\n    }\n\n    this.store.dispatch({\n      type: this.actionTypes.limitedMode,\n    });\n  }\n\n  _switchToNormalMode() {\n    if (!this.isLimitedAvailabilityMode) {\n      return;\n    }\n\n    this.store.dispatch({\n      type: this.actionTypes.normalMode,\n    });\n\n    this._clearLimitedTimeout();\n    this._clearNormalTimeout();\n  }\n\n  _clearLimitedTimeout() {\n    if (this._limitedTimeout) {\n      clearTimeout(this._limitedTimeout);\n      this._limitedTimeout = null;\n    }\n  }\n\n  _clearNormalTimeout() {\n    if (this._normalTimeout) {\n      clearTimeout(this._normalTimeout);\n      this._normalTimeout = null;\n    }\n  }\n\n  async _getStatus() {\n    const res = await this._client.service\n      .platform()\n      .get('/restapi/v1.0/status', null, { skipAuthCheck: true });\n    return res;\n  }\n\n  _retry() {\n    if (!this._limitedTimeout) {\n      this._limitedTimeout = setTimeout(() => {\n        this._clearLimitedTimeout();\n        this._healthCheck();\n      }, this._healthRetryTime);\n    }\n  }\n\n  /**\n   * Inner method of health checking\n   * @returns\n   * @memberof AvailabilityMonitor\n   */\n  async _healthCheck() {\n    try {\n      const response = await this._getStatus();\n      if (!response || response.status !== 200) {\n        return;\n      }\n    } catch (err) {\n      console.error('error from request of /restapi/v1.0/status.');\n      return;\n    }\n    this._randomTime = this._randomTime || generateRandomNumber(); // Generate random seconds (1 ~ 121)\n    this._normalTimeout = setTimeout(() => {\n      this._clearNormalTimeout();\n      this._switchToNormalMode();\n    }, this._randomTime * 1000);\n  }\n\n  /**\n   * Health check with status API\n   */\n  async healthCheck() {\n    if (!this._throttledHealthCheck) {\n      this._throttledHealthCheck = throttle(async () => {\n        await this._healthCheck();\n      });\n    }\n\n    this._throttledHealthCheck();\n  }\n\n  /**\n   * Check if the error is Survival Mode error,\n   * Or if app is already in Survival Mode and current request is blocked with an error.\n   */\n  async checkIfHAError(error) {\n    const errMessage = pathOr(null, ['message'], error);\n    if (error.response) {\n      error.response._json = await error.response.clone().json();\n    }\n    return isHAError(error) || errMessage === errorMessages.serviceLimited;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get isVoIPOnlyMode() {\n    return this.state.isVoIPOnlyMode;\n  }\n\n  get isLimitedMode() {\n    return this.state.isLimitedMode;\n  }\n\n  /**\n   * Is App in limited mode\n   *\n   * @readonly\n   * @memberof AvailabilityMonitor\n   */\n  get isLimitedAvailabilityMode() {\n    return this.isLimitedMode || this.isVoIPOnlyMode;\n  }\n\n  /**\n   * When App is in Limited Mode and Status check met a non-503 error\n   */\n  get hasLimitedStatusError() {\n    return this.state.hasLimitedStatusError;\n  }\n}\n"],"file":"index.js"}