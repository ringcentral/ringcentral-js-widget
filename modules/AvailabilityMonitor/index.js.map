{"version":3,"sources":["modules/AvailabilityMonitor/index.js"],"names":["HEALTH_CHECK_INTERVAL","STATUS_END_POINT","DEFAULT_TIME","AvailabilityMonitor","deps","dep","optional","alert","client","environment","enabled","options","actionTypes","_enabled","_client","ensureExist","_environment","_lastEnvironmentCounter","_healthRetryTime","_reducer","_beforeRequestHandler","_requestErrorHandler","_refreshErrorHandler","_refreshSuccessHandler","_switchToNormalMode","_switchToVoIPOnlyMode","_randomTime","_limitedTimeout","_normalTimeout","pending","ready","changeCounter","_shouldInit","store","dispatch","type","init","_bindHandlers","initSuccess","_shouldRebindHandlers","subscribe","_onStateChange","_unbindHandlers","service","platform","on","events","beforeRequest","requestError","addListener","loginSuccess","logoutSuccess","logoutError","refreshError","refreshSuccess","removeListener","params","isLimitedAvailabilityMode","requestUrl","requestMethod","url","method","Error","errorMessages","serviceLimited","headers","retryAfter","parseFloat","get","h","Array","isArray","Number","isNaN","error","extractedUrl","hasLimitedStatusError","limitedModeStatusError","_retrieveRetryAfter","_switchToLimitedMode","_retry","isOffline","message","RES_STATUS","apiResponse","_response","status","refreshTokenValid","auth","isVoIPOnlyMode","VoIPOnlyReset","VoIPOnlyMode","isLimitedMode","limitedMode","normalMode","_clearLimitedTimeout","_clearNormalTimeout","clearTimeout","skipAuthCheck","res","response","setTimeout","_healthCheck","_getStatus","console","_throttledHealthCheck","errMessage","state","moduleStatuses","RcModule"],"mappings":"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","sourcesContent":["/**\n * Created by Sophie, updated by Bruce\n */\nimport { pathOr } from 'ramda';\nimport { Module } from '../../lib/di';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport RcModule from '../../lib/RcModule';\nimport getAvailabilityModeReducer from './availabilityMonitorReducer';\nimport actionTypes from './actionTypes';\nimport {\n  extractUrl,\n  isHAError,\n  generateRandomNumber,\n  isHAEnabledAPI,\n} from './availabilityMonitorHelper';\nimport errorMessages from './errorMessages';\nimport throttle from '../../lib/throttle';\n\n// Constants\nexport const HEALTH_CHECK_INTERVAL = 60 * 1000;\nexport const STATUS_END_POINT = '/restapi/v1.0/status';\nconst DEFAULT_TIME = 0;\n\n/**\n * @class AvailabilityMonitor\n * @description Connectivity monitor module\n */\n@Module({\n  deps: [\n    'Client',\n    { dep: 'Environment', optional: true },\n    { dep: 'AvailabilityMonitorOptions', optional: true },\n  ],\n})\nexport default class AvailabilityMonitor extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Environment} params.environment - environment module instance\n   */\n  constructor({ alert, client, environment, enabled = false, ...options }) {\n    super({\n      actionTypes,\n      enabled,\n      ...options,\n    });\n\n    this._enabled = enabled;\n    this._client = this::ensureExist(client, 'client');\n    this._environment = environment;\n    this._lastEnvironmentCounter = 0;\n    this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    this._reducer = getAvailabilityModeReducer(this.actionTypes);\n\n    // auto bind this\n    this._beforeRequestHandler = this::this._beforeRequestHandler;\n    this._requestErrorHandler = this::this._requestErrorHandler;\n    this._refreshErrorHandler = this::this._refreshErrorHandler;\n    this._refreshSuccessHandler = this::this._refreshSuccessHandler;\n    this._switchToNormalMode = this::this._switchToNormalMode;\n    this._switchToVoIPOnlyMode = this::this._switchToVoIPOnlyMode;\n    this._randomTime = DEFAULT_TIME;\n    this._limitedTimeout = null;\n    this._normalTimeout = null;\n  }\n\n  _shouldInit() {\n    return !!(this.pending && (!this._environment || this._environment.ready));\n  }\n\n  _shouldRebindHandlers() {\n    return !!(\n      this.ready &&\n      this._environment &&\n      this._environment.ready &&\n      this._environment.changeCounter !== this._lastEnvironmentCounter\n    );\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this._bindHandlers();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldRebindHandlers()) {\n      this._lastEnvironmentCounter = this._environment.changeCounter;\n      this._bindHandlers();\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _bindHandlers() {\n    if (this._unbindHandlers) {\n      this._unbindHandlers();\n    }\n\n    const client = this._client.service.platform().client();\n    const platform = this._client.service.platform();\n\n    // TODO: in other modules, when they catch error first check if app is in HA mode.\n    client.on(client.events.beforeRequest, this._beforeRequestHandler);\n    client.on(client.events.requestError, this._requestErrorHandler);\n    platform.addListener(\n      platform.events.loginSuccess,\n      this._switchToNormalMode,\n    );\n    platform.addListener(\n      platform.events.logoutSuccess,\n      this._switchToNormalMode,\n    );\n    platform.addListener(platform.events.logoutError, this._switchToNormalMode);\n    platform.addListener(\n      platform.events.refreshError,\n      this._refreshErrorHandler,\n    );\n    platform.addListener(\n      platform.events.refreshSuccess,\n      this._refreshSuccessHandler,\n    );\n\n    this._unbindHandlers = () => {\n      client.removeListener(\n        client.events.beforeRequest,\n        this._beforeRequestHandler,\n      );\n      client.removeListener(\n        client.events.requestError,\n        this._requestErrorHandler,\n      );\n      platform.removeListener(\n        platform.events.loginSuccess,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.logoutSuccess,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.logoutError,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.refreshError,\n        this._refreshErrorHandler,\n      );\n      platform.removeListener(\n        platform.events.refreshSuccess,\n        this._refreshSuccessHandler,\n      );\n      this._unbindHandlers = null;\n    };\n  }\n\n  _beforeRequestHandler(params) {\n    if (!this.isLimitedAvailabilityMode || !this._enabled) {\n      return;\n    }\n\n    const requestUrl = pathOr(null, ['_request', 'url'], params);\n    const requestMethod = pathOr(null, ['_request', 'method'], params);\n\n    if (!requestUrl || !requestMethod) {\n      return;\n    }\n\n    // In the limited availability mode, should not block status check api\n    // or highly availability api.\n    if (\n      extractUrl({ url: requestUrl }) === STATUS_END_POINT ||\n      isHAEnabledAPI({ url: requestUrl, method: requestMethod })\n    ) {\n      return;\n    }\n\n    throw new Error(errorMessages.serviceLimited);\n  }\n\n  /**\n   * Retrieve retry after value from repsonse headers\n   * @param {*} headers\n   */\n  _retrieveRetryAfter(headers) {\n    try {\n      let retryAfter = parseFloat(headers.get('Retry-After') || -1);\n      if (retryAfter < 0) {\n        const h = pathOr({}, ['_headers', 'retry-after'], headers) || -1;\n        retryAfter = Array.isArray(h) ? parseFloat(h[0]) : -1;\n        // retryAfter = h['retry-after'] || -1;\n      }\n\n      return Number.isNaN(retryAfter) ? -1 : retryAfter;\n    } catch (error) {\n      return -1;\n    }\n  }\n\n  /**\n   * Check if app can enter LA mode.\n   * If this module is not enabled, just return.\n   *\n   * @param {*} error Http response\n   * @memberof AvailabilityMonitor\n   */\n  _requestErrorHandler(error) {\n    const requestUrl = pathOr('', ['apiResponse', '_request', 'url'], error);\n    const extractedUrl = extractUrl({\n      url: requestUrl,\n    });\n\n    // If app is in Limited Mode and staus API met a status which is not 200 nor 503\n    if (\n      this.isLimitedAvailabilityMode &&\n      extractedUrl === STATUS_END_POINT &&\n      !isHAError(error)\n    ) {\n      if (!this.hasLimitedStatusError) {\n        this.store.dispatch({\n          type: this.actionTypes.limitedModeStatusError,\n        });\n      }\n      return;\n    }\n\n    if (!isHAError(error) || !this._enabled) {\n      return;\n    }\n\n    const headers = pathOr({}, ['apiResponse', '_response', 'headers'], error);\n    const retryAfter = this._retrieveRetryAfter(headers);\n\n    if (retryAfter > 0) {\n      // Retry-After unit is secons, make it mili-secons\n      this._healthRetryTime = retryAfter * 1000;\n    } else {\n      this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    }\n\n    this._switchToLimitedMode();\n    this._retry();\n  }\n\n  _refreshErrorHandler(error) {\n    const isOffline =\n      error.message === 'Failed to fetch' ||\n      error.message === 'The Internet connection appears to be offline.' ||\n      error.message === 'NetworkError when attempting to fetch resource.' ||\n      error.message ===\n        'Network Error 0x2ee7, Could not complete the operation due to error 00002ee7.';\n\n    const platform = this._client.service.platform();\n    const RES_STATUS =\n      (error.apiResponse &&\n        error.apiResponse._response &&\n        error.apiResponse._response.status) ||\n      null;\n    const refreshTokenValid =\n      (isOffline || RES_STATUS >= 500) && platform.auth().refreshTokenValid();\n    if (refreshTokenValid) {\n      this._switchToVoIPOnlyMode();\n    }\n  }\n\n  _refreshSuccessHandler() {\n    if (this.isVoIPOnlyMode) {\n      this.store.dispatch({\n        type: this.actionTypes.VoIPOnlyReset,\n      });\n    }\n  }\n\n  _switchToVoIPOnlyMode() {\n    if (this.isVoIPOnlyMode) {\n      return;\n    }\n\n    this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    this.store.dispatch({\n      type: this.actionTypes.VoIPOnlyMode,\n    });\n    this._retry();\n  }\n\n  _switchToLimitedMode() {\n    if (this.isLimitedMode) {\n      return;\n    }\n\n    this.store.dispatch({\n      type: this.actionTypes.limitedMode,\n    });\n  }\n\n  _switchToNormalMode() {\n    if (!this.isLimitedAvailabilityMode) {\n      return;\n    }\n\n    this.store.dispatch({\n      type: this.actionTypes.normalMode,\n    });\n\n    this._clearLimitedTimeout();\n    this._clearNormalTimeout();\n  }\n\n  _clearLimitedTimeout() {\n    if (this._limitedTimeout) {\n      clearTimeout(this._limitedTimeout);\n      this._limitedTimeout = null;\n    }\n  }\n\n  _clearNormalTimeout() {\n    if (this._normalTimeout) {\n      clearTimeout(this._normalTimeout);\n      this._normalTimeout = null;\n    }\n  }\n\n  async _getStatus() {\n    const res = await this._client.service\n      .platform()\n      .get('/status', null, { skipAuthCheck: true });\n    return res && res.response();\n  }\n\n  _retry() {\n    if (!this._limitedTimeout) {\n      this._limitedTimeout = setTimeout(() => {\n        this._clearLimitedTimeout();\n        this._healthCheck();\n      }, this._healthRetryTime);\n    }\n  }\n\n  /**\n   * Inner method of health checking\n   * @returns\n   * @memberof AvailabilityMonitor\n   */\n  async _healthCheck() {\n    try {\n      const response = await this._getStatus();\n      if (!response || response.status !== 200) {\n        return;\n      }\n    } catch (err) {\n      console.error('error from request of /restapi/v1.0/status.');\n      return;\n    }\n    this._randomTime = this._randomTime || generateRandomNumber(); // Generate random seconds (1 ~ 121)\n    this._normalTimeout = setTimeout(() => {\n      this._clearNormalTimeout();\n      this._switchToNormalMode();\n    }, this._randomTime * 1000);\n  }\n\n  /**\n   * Health check with status API\n   */\n  async healthCheck() {\n    if (!this._throttledHealthCheck) {\n      this._throttledHealthCheck = throttle(async () => {\n        await this._healthCheck();\n      });\n    }\n\n    this._throttledHealthCheck();\n  }\n\n  /**\n   * Check if the error is Survival Mode error,\n   * Or if app is already in Survival Mode and current request is blocked with an error.\n   */\n  checkIfHAError(error) {\n    const errMessage = pathOr(null, ['message'], error);\n\n    return isHAError(error) || errMessage === errorMessages.serviceLimited;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get isVoIPOnlyMode() {\n    return this.state.isVoIPOnlyMode;\n  }\n\n  get isLimitedMode() {\n    return this.state.isLimitedMode;\n  }\n\n  /**\n   * Is App in limited mode\n   *\n   * @readonly\n   * @memberof AvailabilityMonitor\n   */\n  get isLimitedAvailabilityMode() {\n    return this.isLimitedMode || this.isVoIPOnlyMode;\n  }\n\n  /**\n   * When App is in Limited Mode and Status check met a non-503 error\n   */\n  get hasLimitedStatusError() {\n    return this.state.hasLimitedStatusError;\n  }\n}\n"],"file":"index.js"}