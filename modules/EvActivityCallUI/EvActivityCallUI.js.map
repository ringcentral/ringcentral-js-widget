{"version":3,"sources":["modules/EvActivityCallUI/EvActivityCallUI.ts"],"names":["EvActivityCallUI","name","deps","dep","optional","that","_deps","evTransferCall","allowTransferCall","evRequeueCall","allowRequeueCall","currentEvMainCall","currentEvCall","callId","evCallDisposition","callsMapping","validated","required","locale","currentLocale","dispositionPickList","evCallMonitor","callIds","otherCallIds","callList","isMultipleCalls","evAuth","agentId","enableCache","storageKey","isFirstTimeHandled","pickUpDirectly","goToActivityCallPage","id","routerInteraction","push","status","saveStatus","disabled","dispositionId","notes","task","isEvCallDisposition","Object","hasOwnProperty","call","data","setDisposition","gate","gateGroupId","gateId","setStatus","selectedQueueGroupId","selectedGateId","stayOnCall","requeuing","changeTransferType","transferTypes","queue","_redirectTransferCall","type","resetTransferStatus","fetchAgentList","url","reset","evCall","activityCallId","disposeCall","ready","tabManagerEnabled","tabManager","_checkTabManagerEvent","event","tabManagerEvents","CALL_DISPOSITION_SUCCESS","_dispositionSuccess","some","key","saveFields","changeFormStatus","_hasError","changeSavingStatus","_sendTabManager","alert","danger","message","logTypes","CALL_DISPOSITION_FAILURE","ttl","success","setTimeout","goDialer","evWorkingState","setIsPendingDisposition","activeCallControl","value","send","currentLog","activityCallLog","showSmallCallControl","currentEvRawCall","endedCall","callStatus","isInbound","isOnMute","evIntegratedSoftphone","muteActive","isOnHold","isOnActive","isInComingCall","smallCallControlSize","environment","isWide","currentCallControlPermission","disableDispose","disableLinks","disableTransfer","allowTransfer","disableInternalTransfer","allowInternalTransfer","disableHold","allowHoldCall","disableHangup","allowHangupCall","disableMute","evAgentSession","isIntegratedSoftphone","showMuteButton","disableActive","ivrAlertData","goBack","onMute","mute","onUnmute","unmute","onHangup","hangUp","session","sessionId","onReject","reject","onHold","_onHoldOrUnHold","onUnHold","onActive","onUpdateCallLog","_submitData","onCopySuccess","toUpperCase","info","messageTypes","action","goToRequeueCallPage","goToTransferCallPage","transferType","connectivityMonitor","connectivity","rateLimiter","throttling","_tabbie","enabled","currentCall","allowHold","allowHangup","outdialDispositions","dispositions","map","item","label","disposition","callDisposition","undefined","callType","dnis","uii","ani","queueDts","fromNumber","toNumber","direction","from","phoneNumber","to","telephonyStatus","telephonySessionId","partyId","startTime","Date","getTime","offset","fromMatches","toMatches","activityMatches","currentSessionId","currentLogCall","isFailed","isAutoSave","isCreated","customLogFields","length","sort","maxLength","error","onChange","placeholder","i18n","getString","picklistOptions","enableScrollError","helperText","currentDisposition","find","noteRequired","requireNote","isHold","getMainCall","getActiveCallList","baggage","i","ivrAlertSubject","ivrAlertBody","subject","body","RcUIModuleV2","storage","state"],"mappings":"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","sourcesContent":["import {\n  action,\n  computed,\n  RcUIModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { keys } from 'ramda';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { CallLogPanelProps } from 'ringcentral-widgets/components/CallLogPanel';\n\nimport {\n  EvTransferType,\n  logTypes,\n  MessageTypes,\n  messageTypes,\n  tabManagerEvents,\n  transferTypes,\n} from '../../enums';\nimport {\n  EvActivityCallUIFunctions,\n  EvActivityCallUIProps,\n  EvCurrentLog,\n} from '../../interfaces/EvActivityCallUI.interface';\nimport { EvIvrData } from '../../interfaces/EvData.interface';\nimport { EvBaggage } from '../../lib/EvClient';\nimport { ActivityCallUI, Deps } from './EvActivityCallUI.interface';\nimport i18n from './i18n';\n\ntype FormState = {\n  validated?: Partial<EvActivityCallUI['validated']>;\n  required?: Partial<EvActivityCallUI['required']>;\n  disabled?: Partial<EvActivityCallUI['disabled']>;\n};\n\n@Module({\n  name: 'EvActivityCallUI',\n  deps: [\n    'Locale',\n    'Alert',\n    'ActiveCallControl',\n    'EvCallMonitor',\n    'EvCall',\n    'EvRequeueCall',\n    'EvTransferCall',\n    'EvCallDisposition',\n    'EvWorkingState',\n    'EvAgentSession',\n    'EvIntegratedSoftphone',\n    'RouterInteraction',\n    'ConnectivityMonitor',\n    'RateLimiter',\n    'Environment',\n    'Storage',\n    'EvAuth',\n    { dep: 'TabManager', optional: true },\n    { dep: 'EvActivityCallUIOptions', optional: true },\n  ],\n})\nclass EvActivityCallUI<T = {}> extends RcUIModuleV2<Deps & T>\n  implements ActivityCallUI {\n  public isFirstTimeHandled = false;\n\n  /** Is the call pick up directly */\n  pickUpDirectly = true;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvActivityCallUI',\n    });\n  }\n\n  @storage\n  @state\n  validated = {\n    dispositionId: true,\n    notes: true,\n  };\n\n  @storage\n  @state\n  required = {\n    notes: false,\n  };\n\n  @storage\n  @state\n  disabled: any = {};\n\n  @storage\n  @state\n  saveStatus: EvActivityCallUIProps['saveStatus'] = 'submit';\n\n  get callId() {\n    return this._deps.evCall.activityCallId;\n  }\n\n  get disableLinks() {\n    return (\n      !this._deps.connectivityMonitor.connectivity ||\n      this._deps.rateLimiter.throttling\n    );\n  }\n\n  get tabManagerEnabled() {\n    return this._deps.tabManager?._tabbie.enabled;\n  }\n\n  get currentEvCall() {\n    return this._deps.evCall.currentCall;\n  }\n\n  // TODO: should check with outbound call\n  get isInComingCall() {\n    return this._deps.evCall.isInbound && !this.pickUpDirectly;\n    // currentSession.callStatus === telephonyStatuses.ringing\n  }\n\n  // transferCall and requeueCall are two parts of transfer menu\n  get allowTransfer() {\n    return (\n      this._deps.evTransferCall.allowTransferCall ||\n      this._deps.evRequeueCall.allowRequeueCall\n    );\n  }\n\n  @computed((that: EvActivityCallUI) => [\n    that._deps.evTransferCall.allowTransferCall,\n    that._deps.evRequeueCall.allowRequeueCall,\n    that.currentEvMainCall,\n  ])\n  get currentCallControlPermission() {\n    return {\n      allowTransferCall: this._deps.evTransferCall.allowTransferCall,\n      allowRequeueCall: this._deps.evRequeueCall.allowRequeueCall,\n      allowHoldCall: this.currentEvMainCall?.allowHold,\n      allowHangupCall: this.currentEvMainCall?.allowHangup,\n    };\n  }\n\n  @computed((that: EvActivityCallUI) => [that.currentEvCall])\n  get dispositionPickList() {\n    return (\n      this.currentEvCall?.outdialDispositions?.dispositions?.map((item) => ({\n        ...item,\n        label: item.disposition,\n        value: item.dispositionId,\n      })) || []\n    );\n  }\n\n  // TODO add `callDisposition` in CallLog\n  @computed((that: EvActivityCallUI) => [\n    that.callId,\n    that.currentEvCall,\n    that._deps.evCallDisposition.callsMapping[that.callId],\n    that.validated,\n    that.required,\n    that._deps.locale.currentLocale,\n    that.dispositionPickList,\n  ])\n  get activityCallLog(): EvCurrentLog {\n    const {\n      callId,\n      currentEvCall: currentCall,\n\n      validated,\n      required,\n    } = this;\n\n    const callDisposition = this._deps.evCallDisposition.callsMapping[\n      this.callId\n    ];\n\n    if (!currentCall) {\n      return undefined;\n    }\n    const { callType, dnis, uii, ani, queueDts, agentId } = currentCall;\n\n    // TODO confirm about  dialDest or dnis?\n    const fromNumber = callType === 'OUTBOUND' ? dnis : ani;\n    // TODO confirm about  dialDest or dnis?\n    const toNumber = callType === 'OUTBOUND' ? ani : dnis;\n    const { dispositionId, notes } = callDisposition || {};\n\n    const dispositionPickList = this.dispositionPickList;\n\n    return {\n      currentEvRawCall: currentCall,\n      // the call which maps for rc component\n      call: {\n        id: uii,\n        direction: callType,\n        from: {\n          phoneNumber: fromNumber,\n          name: fromNumber,\n        },\n        to: {\n          phoneNumber: toNumber,\n          name: toNumber,\n        },\n        telephonyStatus: 'CallConnected', // TODO handle with call state and agent state\n        sessionId: currentCall.session.sessionId,\n        telephonySessionId: uii,\n        partyId: agentId,\n        startTime: new Date(queueDts).getTime(),\n        offset: 0,\n        fromMatches: [],\n        toMatches: [],\n        activityMatches: [],\n      },\n      currentSessionId: callId,\n      // TODO: this will be remove when api can using.\n      currentLogCall: {\n        isFailed: false,\n        isAutoSave: false,\n        isCreated: false,\n      },\n      customLogFields:\n        dispositionPickList.length === 0\n          ? []\n          : [\n              {\n                label: 'Notes',\n                sort: 3,\n                type: 'textarea',\n                value: 'notes',\n                maxLength: 32000,\n                required: required.notes,\n                error: !validated.notes,\n                onChange: (value: string) => {\n                  if (required.notes) {\n                    this.changeFormStatus({ validated: { notes: !!value } });\n                  } else {\n                    this.changeFormStatus({ validated: { notes: true } });\n                  }\n                },\n              },\n              {\n                label: 'Disposition',\n                sort: 5,\n                type: 'picklist',\n                value: 'dispositionId',\n                placeholder: i18n.getString(\n                  'pleaseSelect',\n                  this._deps.locale.currentLocale,\n                ),\n                required: true,\n                picklistOptions: dispositionPickList,\n                enableScrollError: true,\n                error: !validated.dispositionId,\n                helperText: !validated.dispositionId\n                  ? i18n.getString(\n                      'dispositionError',\n                      this._deps.locale.currentLocale,\n                    )\n                  : undefined,\n                onChange: (value: string) => {\n                  const currentDisposition = dispositionPickList.find(\n                    (item) => item.value === value,\n                  );\n\n                  const noteRequired =\n                    currentDisposition && currentDisposition.requireNote;\n\n                  this.changeFormStatus({\n                    validated: {\n                      dispositionId: !!value,\n                      notes: !noteRequired || (noteRequired && !!notes),\n                    },\n                    required: {\n                      notes: noteRequired,\n                    },\n                  });\n                },\n              },\n            ],\n      task: {\n        dispositionId,\n        notes,\n      },\n    };\n  }\n\n  @computed((that: EvActivityCallUI) => [\n    that.currentEvCall,\n    that.currentEvMainCall,\n  ])\n  get callStatus() {\n    let status: EvActivityCallUIProps['status'] = 'active';\n\n    if (this.currentEvCall?.endedCall) {\n      status = 'callEnd';\n    } else if (this.currentEvMainCall?.isHold) {\n      status = 'onHold';\n    }\n    return status;\n  }\n\n  @computed((that: EvActivityCallUI) => [that.currentEvCall])\n  get currentEvMainCall() {\n    return this.currentEvCall\n      ? this._deps.activeCallControl.getMainCall(this.currentEvCall.uii)\n      : null;\n  }\n\n  @computed((that: EvActivityCallUI) => [\n    that.callId,\n    that._deps.evCallMonitor.callIds,\n    that._deps.evCallMonitor.otherCallIds,\n    that._deps.evCallMonitor.callsMapping,\n  ])\n  get callList() {\n    const { callIds, otherCallIds, callsMapping } = this._deps.evCallMonitor;\n\n    return this._deps.evCallMonitor.getActiveCallList(\n      callIds,\n      otherCallIds,\n      callsMapping,\n      this.callId,\n    );\n  }\n\n  @computed((that: EvActivityCallUI) => [that.callList])\n  get isMultipleCalls() {\n    return this.callList.length > 2;\n  }\n\n  @computed((that: EvActivityCallUI) => [\n    that.isMultipleCalls,\n    that.callList,\n    that._deps.evAuth.agentId,\n    that.currentEvMainCall,\n  ])\n  get isOnHold() {\n    const { isMultipleCalls, callList, currentEvMainCall } = this;\n    if (isMultipleCalls) {\n      return !!callList.find(\n        (call) =>\n          !(call.session.agentId === this._deps.evAuth.agentId) &&\n          !!call.isHold,\n      );\n    }\n    return currentEvMainCall?.isHold;\n  }\n\n  @computed((that: EvActivityCallUI) => [that.currentEvCall])\n  get ivrAlertData() {\n    const call = this.currentEvCall;\n    const ivrAlertData = [];\n    if (call.baggage) {\n      for (let i = 1; i <= 3; i++) {\n        const ivrAlertSubject =\n          call.baggage[`ivrAlertSubject_${i}` as keyof EvBaggage];\n        const ivrAlertBody =\n          call.baggage[`ivrAlertBody_${i}` as keyof EvBaggage];\n        if (ivrAlertSubject || ivrAlertBody)\n          ivrAlertData.push({\n            subject: ivrAlertSubject || '',\n            body: ivrAlertBody || '',\n          });\n      }\n    }\n    return ivrAlertData as EvIvrData[];\n  }\n\n  @action\n  changeSavingStatus(status: EvActivityCallUIProps['saveStatus']) {\n    this.saveStatus = status;\n  }\n\n  @action\n  protected changeFormStatus({ validated, required, disabled }: FormState) {\n    if (validated) {\n      this.validated = {\n        ...this.validated,\n        ...validated,\n      };\n    }\n    if (required) {\n      this.required = {\n        ...this.required,\n        ...required,\n      };\n    }\n    if (disabled) {\n      this.disabled = {\n        ...this.disabled,\n        ...disabled,\n      };\n    }\n  }\n\n  @action\n  reset() {\n    this.validated = {\n      dispositionId: true,\n      notes: true,\n    };\n    this.required = {\n      notes: false,\n    };\n    this.disabled = {};\n    this.saveStatus = 'submit';\n  }\n\n  onUpdateCallLog(\n    { task }: Parameters<CallLogPanelProps['onUpdateCallLog']>[0],\n    id: Parameters<CallLogPanelProps['onUpdateCallLog']>[1],\n  ) {\n    const isEvCallDisposition =\n      Object.hasOwnProperty.call(task, 'dispositionId') ||\n      Object.hasOwnProperty.call(task, 'notes');\n    if (isEvCallDisposition) {\n      const data = {\n        ...this._deps.evCallDisposition.callsMapping[id],\n        ...task,\n      };\n      this._deps.evCallDisposition.setDisposition(id, {\n        dispositionId: data.dispositionId,\n        notes: data.notes,\n      });\n    }\n  }\n\n  goToActivityCallPage = (id: string = this.callId) => {\n    this._deps.routerInteraction.push(`/activityCallLog/${id}/activeCallList`);\n  };\n\n  goToRequeueCallPage() {\n    const { gateGroupId, gateId } = this._deps.evCallMonitor.callsMapping[\n      this.callId\n    ].gate;\n    this._deps.evRequeueCall.setStatus({\n      selectedQueueGroupId: gateGroupId,\n      selectedGateId: gateId,\n      stayOnCall: false,\n      requeuing: false,\n    });\n    this._deps.evTransferCall.changeTransferType(transferTypes.queue);\n    this._redirectTransferCall('/transferCall');\n  }\n\n  goToTransferCallPage(type: EvTransferType) {\n    this._deps.evTransferCall.resetTransferStatus();\n    this._deps.evTransferCall.fetchAgentList();\n    this._redirectTransferCall(`/transferCall/${type}`);\n  }\n\n  private _redirectTransferCall(url: string = '') {\n    this._deps.routerInteraction.push(`/activityCallLog/${this.callId}${url}`);\n  }\n\n  goDialer() {\n    this._deps.routerInteraction.push('/dialer');\n    this.reset();\n    this._deps.evCall.activityCallId = null;\n  }\n\n  async disposeCall() {\n    await this._deps.evCallDisposition.disposeCall(this.callId);\n  }\n\n  onStateChange() {\n    if (this.ready && this.tabManagerEnabled && this._deps.tabManager.ready) {\n      this._checkTabManagerEvent();\n    }\n  }\n\n  private _checkTabManagerEvent() {\n    const { event } = this._deps.tabManager;\n    if (event) {\n      // const data = event.args[0];\n      switch (event.name) {\n        case tabManagerEvents.CALL_DISPOSITION_SUCCESS:\n          this._dispositionSuccess();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private _hasError() {\n    return keys(this.validated).some((key) => {\n      return !this.validated[key];\n    });\n  }\n\n  private async _submitData(id: string) {\n    try {\n      const saveFields = this._deps.evCallDisposition.callsMapping[id];\n      if (saveFields) {\n        this.changeFormStatus({\n          validated: {\n            dispositionId: !!saveFields.dispositionId,\n            notes:\n              !this.required.notes || (saveFields.notes && this.required.notes),\n          },\n        });\n      }\n\n      if (this._hasError()) {\n        return;\n      }\n      this.changeSavingStatus('saving');\n      await this.disposeCall();\n\n      this._sendTabManager(tabManagerEvents.CALL_DISPOSITION_SUCCESS);\n      this._dispositionSuccess();\n    } catch (e) {\n      this._deps.alert.danger({\n        message: logTypes.CALL_DISPOSITION_FAILURE,\n        ttl: 0,\n      });\n      this.changeSavingStatus('submit');\n      throw e;\n    }\n  }\n\n  private _dispositionSuccess() {\n    this.changeSavingStatus('saved');\n\n    this._deps.alert.success({\n      message: logTypes.CALL_DISPOSITION_SUCCESS,\n    });\n    // delay for animation with loading ui.\n    setTimeout(() => this.goDialer(), 1000);\n\n    this._deps.evWorkingState.setIsPendingDisposition(false);\n  }\n\n  private _onHoldOrUnHold(type: 'hold' | 'unhold') {\n    if (this.isMultipleCalls) {\n      return this.goToActivityCallPage();\n    }\n    this._deps.activeCallControl[type]();\n  }\n\n  private _sendTabManager(event: string, value?: any) {\n    this._deps.tabManager?.send(event, value);\n  }\n\n  getUIProps({ id }: { id: string }): EvActivityCallUIProps {\n    this._deps.evCall.activityCallId = id;\n\n    return {\n      currentLog: this.activityCallLog,\n      showSmallCallControl: !this.activityCallLog?.currentEvRawCall?.endedCall,\n      currentLocale: this._deps.locale.currentLocale,\n      currentEvCall: this.currentEvCall,\n      saveStatus: this.saveStatus,\n      status: this.callStatus,\n      isInbound: this._deps.evCall.isInbound,\n      isOnMute: this._deps.evIntegratedSoftphone.muteActive,\n      isOnHold: this.isOnHold,\n      isOnActive: this.isMultipleCalls,\n      isInComingCall: this.isInComingCall,\n      smallCallControlSize: this._deps.environment.isWide ? 'medium' : 'small',\n      currentCallControlPermission: this.currentCallControlPermission,\n      disableDispose: this.disableLinks || this.saveStatus === 'saving',\n      disableTransfer:\n        this.disableLinks || this.isInComingCall || !this.allowTransfer,\n      disableInternalTransfer:\n        this.disableLinks ||\n        this.isInComingCall ||\n        !this.allowTransfer ||\n        !this._deps.evTransferCall.allowInternalTransfer,\n      disableHold:\n        this.disableLinks ||\n        this.isInComingCall ||\n        !this.currentCallControlPermission.allowHoldCall,\n      disableHangup:\n        this.disableLinks || !this.currentCallControlPermission.allowHangupCall,\n      disableMute:\n        !this._deps.evAgentSession.isIntegratedSoftphone || this.disableLinks,\n      showMuteButton: this._deps.evAgentSession.isIntegratedSoftphone,\n      disableActive: this.disableLinks,\n      ivrAlertData: this.ivrAlertData,\n    };\n  }\n\n  getUIFunctions(): EvActivityCallUIFunctions {\n    return {\n      goBack: () => {},\n      onMute: () => this._deps.activeCallControl.mute(),\n      onUnmute: () => this._deps.activeCallControl.unmute(),\n      onHangup: () =>\n        this._deps.activeCallControl.hangUp(\n          this.currentEvCall.session.sessionId,\n        ),\n      onReject: () => this._deps.activeCallControl.reject(),\n      onHold: () => this._onHoldOrUnHold('hold'),\n      onUnHold: () => this._onHoldOrUnHold('unhold'),\n      onActive: () => this.goToActivityCallPage(),\n      onUpdateCallLog: (data, id) => this.onUpdateCallLog(data, id),\n      disposeCall: async () => {\n        if (this.saveStatus === 'saved') {\n          return this.goDialer();\n        }\n        await this._submitData(this.callId);\n      },\n      onCopySuccess: (name) => {\n        name = name.toUpperCase();\n        this._deps.alert.info({\n          message: messageTypes[`COPY_${name}_SUCCESS` as MessageTypes],\n          action: '',\n        });\n      },\n      goToRequeueCallPage: () => this.goToRequeueCallPage(),\n      goToTransferCallPage: (transferType: EvTransferType) =>\n        this.goToTransferCallPage(transferType),\n    };\n  }\n}\nexport { EvActivityCallUI };\n"],"file":"EvActivityCallUI.js"}