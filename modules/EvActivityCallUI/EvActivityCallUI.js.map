{"version":3,"sources":["modules/EvActivityCallUI/EvActivityCallUI.ts"],"names":["EvActivityCallUI","name","deps","dep","optional","locale","alert","activeCallControl","evCallMonitor","evCall","evCallDisposition","routerInteraction","evRequeueCall","evTransferCall","evWorkingState","evSessionConfig","evIntegratedSoftphone","connectivityMonitor","rateLimiter","environment","modules","storage","tabManager","enableCache","storageKey","_lastSaveStatus","isFirstTimeHandled","pickUpDirectly","getCurrentCallControlPermission","getAllowTransferCall","getAllowRequeueCall","getCurrentEvMainCall","allowTransferCall","allowRequeueCall","currentEvMainCall","allowHoldCall","allowHold","allowHangupCall","allowHangup","allowMuteCall","currentEvCall","currentCall","_modules","checkAllowRequeue","checkAllowTransfer","getDispositionPickList","outdialDispositions","dispositions","map","item","label","disposition","value","dispositionId","getActivityCallLog","callId","callsMapping","validated","required","callDisposition","undefined","callType","dnis","uii","ani","queueDts","agentId","fromNumber","toNumber","notes","dispositionPickList","currentEvRawCall","call","id","direction","from","phoneNumber","to","telephonyStatus","sessionId","session","telephonySessionId","partyId","startTime","Date","getTime","offset","fromMatches","toMatches","activityMatches","currentSessionId","currentLogCall","isFailed","isAutoSave","isCreated","customLogFields","length","sort","type","maxLength","error","onChange","changeFormStatus","placeholder","i18n","getString","currentLocale","picklistOptions","enableScrollError","helperText","currentDisposition","find","noteRequired","requireNote","task","getCallStatus","status","endedCall","isHold","getMainCall","getCallList","callIds","otherCallIds","getCallsMapping","getActiveCallList","getIsMultipleCalls","callList","goToActivityCallPage","push","state","saveStatus","disabled","isEvCallDisposition","Object","hasOwnProperty","data","changeDisposition","gate","gateGroupId","gateId","setStatus","selectedQueueGroupId","selectedGateId","stayOnCall","requeuing","changeTransferType","transferTypes","queue","_redirectTransferCall","resetTransferStatus","fetchAgentList","url","reset","disposeCall","keys","some","key","saveFields","_hasError","changeSavingStatus","tabManagerEnabled","success","message","logTypes","CALL_DISPOSITION_SUCCESS","setTimeout","goDialer","setIsPendingDisposition","danger","CALL_DISPOSITION_FAILURE","ttl","hold","activityCallId","currentLog","showSmallCallControl","isInbound","isOnMute","muteActive","isOnHold","isOnActive","isInComingCall","smallCallControlSize","isWide","currentCallControlPermission","disableDispose","disableLinks","disableTransfer","allowTransfer","disableInternalTransfer","allowInternalTransfer","disableHold","disableHangup","disableMute","isIntegrated","disableActive","goBack","onMute","mute","onUnmute","unmute","onHangup","hangUp","onReject","reject","onHold","_onHold","onUnHold","unhold","onActive","onUpdateCallLog","_submitData","goToRequeueCallPage","goToTransferCallPage","transferType","connectivity","throttling","getCurrentCall","_tabbie","enabled","RcUIModuleV2","action"],"mappings":"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","sourcesContent":["import {\n  action,\n  createSelector,\n  RcModuleState,\n  RcUIModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { PickListOption } from 'ringcentral-widgets/components/CallLogFields';\n\nimport { EvTransferType, logTypes, transferTypes } from '../../enums';\nimport {\n  EvActivityCallUIFunctions,\n  EvActivityCallUIProps,\n  EvCurrentLog,\n} from '../../interfaces/EvActivityCallUI.interface';\nimport { EvDisposition } from '../../lib/EvClient';\nimport {\n  ActivityCallUI,\n  DepsModules,\n  State,\n} from './EvActivityCallUI.interface';\nimport i18n from './i18n';\n\ntype FormState = {\n  validated?: Partial<EvActivityCallUI['validated']>;\n  required?: Partial<EvActivityCallUI['required']>;\n  disabled?: Partial<EvActivityCallUI['disabled']>;\n};\n\ntype EvActivityCallUIState = RcModuleState<EvActivityCallUI, State>;\n\n@Module({\n  name: 'EvActivityCallUI',\n  deps: [\n    'Locale',\n    'Alert',\n    'ActiveCallControl',\n    'EvCallMonitor',\n    'EvCall',\n    'EvRequeueCall',\n    'EvTransferCall',\n    'EvCallDisposition',\n    'EvWorkingState',\n    'EvSessionConfig',\n    'EvIntegratedSoftphone',\n    'RouterInteraction',\n    'ConnectivityMonitor',\n    'RateLimiter',\n    'Environment',\n    'Storage',\n    { dep: 'TabManager', optional: true },\n    { dep: 'EvActivityCallUIOptions', optional: true },\n  ],\n})\nclass EvActivityCallUI<T = {}, K = {}>\n  extends RcUIModuleV2<DepsModules & T, EvActivityCallUIState & K>\n  implements ActivityCallUI {\n  protected _lastSaveStatus?: EvActivityCallUIProps['saveStatus'];\n\n  public isFirstTimeHandled = false;\n\n  /** Is the call pick up directly */\n  pickUpDirectly = true;\n\n  constructor({\n    locale,\n    alert,\n    activeCallControl,\n    evCallMonitor,\n    evCall,\n    evCallDisposition,\n    routerInteraction,\n    evRequeueCall,\n    evTransferCall,\n    evWorkingState,\n    evSessionConfig,\n    evIntegratedSoftphone,\n    connectivityMonitor,\n    rateLimiter,\n    environment,\n    modules,\n    storage,\n    tabManager,\n    enableCache = true,\n    storageKey = 'EvActivityCallUI',\n  }) {\n    super({\n      modules: {\n        locale,\n        alert,\n        activeCallControl,\n        evCallMonitor,\n        evCall,\n        evCallDisposition,\n        routerInteraction,\n        evRequeueCall,\n        evTransferCall,\n        evWorkingState,\n        evSessionConfig,\n        evIntegratedSoftphone,\n        connectivityMonitor,\n        rateLimiter,\n        environment,\n        storage,\n        tabManager,\n        ...modules,\n      },\n      enableCache,\n      storageKey,\n    });\n  }\n\n  @storage\n  @state\n  validated = {\n    dispositionId: true,\n    notes: true,\n  };\n\n  @storage\n  @state\n  required = {\n    notes: false,\n  };\n\n  @storage\n  @state\n  disabled: any = {};\n\n  @storage\n  @state\n  saveStatus: EvActivityCallUIProps['saveStatus'] = 'submit';\n\n  get callId() {\n    return this._modules.evCall.activityCallId;\n  }\n\n  get disableLinks() {\n    return (\n      !this._modules.connectivityMonitor.connectivity ||\n      this._modules.rateLimiter.throttling\n    );\n  }\n\n  get currentEvCall() {\n    return this._modules.evCall.getCurrentCall();\n  }\n\n  get isInbound() {\n    return this.currentEvCall?.callType === 'INBOUND';\n  }\n\n  // TODO: should check with outbound call\n  get isInComingCall() {\n    return this.isInbound && !this.pickUpDirectly;\n    // currentSession.callStatus === telephonyStatuses.ringing\n  }\n\n  // transferCall and requeueCall are two parts of transfer menu\n  get allowTransfer() {\n    return this.getAllowTransferCall() || this.getAllowRequeueCall();\n  }\n\n  getCurrentCallControlPermission = createSelector(\n    () => this.getAllowTransferCall(),\n    () => this.getAllowRequeueCall(),\n    () => this.getCurrentEvMainCall(),\n    (allowTransferCall, allowRequeueCall, currentEvMainCall) => {\n      return {\n        allowTransferCall,\n        allowRequeueCall,\n        allowHoldCall: currentEvMainCall?.allowHold,\n        allowHangupCall: currentEvMainCall?.allowHangup,\n        // TODO: allow mute feature\n        allowMuteCall: true,\n      };\n    },\n  );\n\n  getAllowRequeueCall = createSelector(\n    () => this.currentEvCall,\n    (currentCall) => {\n      return this._modules.evRequeueCall.checkAllowRequeue(currentCall);\n    },\n  );\n\n  getAllowTransferCall = createSelector(\n    () => this.currentEvCall,\n    (currentCall) => {\n      return this._modules.evTransferCall.checkAllowTransfer(currentCall);\n    },\n  );\n\n  getDispositionPickList = createSelector(\n    () => this.currentEvCall,\n    (currentCall): (PickListOption & Partial<EvDisposition>)[] => {\n      return (\n        currentCall?.outdialDispositions?.dispositions?.map((item) => ({\n          ...item,\n          label: item.disposition,\n          value: item.dispositionId,\n        })) || []\n      );\n    },\n  );\n\n  // TODO add `callDisposition` in CallLog\n  getActivityCallLog = createSelector(\n    () => this.callId,\n    () => this.currentEvCall,\n    () => this._modules.evCallDisposition.callsMapping[this.callId],\n    () => this.validated,\n    () => this.required,\n    (\n      callId,\n      currentCall,\n      callDisposition,\n      validated,\n      required,\n    ): EvCurrentLog => {\n      if (!currentCall) {\n        return undefined;\n      }\n      const { callType, dnis, uii, ani, queueDts, agentId } = currentCall;\n\n      // TODO confirm about  dialDest or dnis?\n      const fromNumber = callType === 'OUTBOUND' ? dnis : ani;\n      // TODO confirm about  dialDest or dnis?\n      const toNumber = callType === 'OUTBOUND' ? ani : dnis;\n      const { dispositionId, notes } = callDisposition || {};\n\n      const dispositionPickList = this.getDispositionPickList();\n\n      return {\n        currentEvRawCall: currentCall,\n        // the call which maps for rc component\n        call: {\n          id: uii,\n          direction: callType,\n          from: {\n            phoneNumber: fromNumber,\n            name: fromNumber,\n          },\n          to: {\n            phoneNumber: toNumber,\n            name: toNumber,\n          },\n          telephonyStatus: 'CallConnected', // TODO handle with call state and agent state\n          sessionId: currentCall.session.sessionId,\n          telephonySessionId: uii,\n          partyId: agentId,\n          startTime: new Date(queueDts).getTime(),\n          offset: 0,\n          fromMatches: [],\n          toMatches: [],\n          activityMatches: [],\n        },\n        currentSessionId: callId,\n        // TODO: this will be remove when api can using.\n        currentLogCall: {\n          isFailed: false,\n          isAutoSave: false,\n          isCreated: false,\n        },\n        customLogFields:\n          dispositionPickList.length === 0\n            ? []\n            : [\n                {\n                  label: 'Notes',\n                  sort: 3,\n                  type: 'textarea',\n                  value: 'notes',\n                  maxLength: 32000,\n                  required: required.notes,\n                  error: !validated.notes,\n                  onChange: (value: string) => {\n                    if (required.notes) {\n                      this.changeFormStatus({ validated: { notes: !!value } });\n                    } else {\n                      this.changeFormStatus({ validated: { notes: true } });\n                    }\n                  },\n                },\n                {\n                  label: 'Disposition',\n                  sort: 5,\n                  type: 'picklist',\n                  value: 'dispositionId',\n                  placeholder: i18n.getString(\n                    'pleaseSelect',\n                    this._modules.locale.currentLocale,\n                  ),\n                  required: true,\n                  picklistOptions: dispositionPickList,\n                  enableScrollError: true,\n                  error: !validated.dispositionId,\n                  helperText: !validated.dispositionId\n                    ? i18n.getString(\n                        'dispositionError',\n                        this._modules.locale.currentLocale,\n                      )\n                    : undefined,\n                  onChange: (value: string) => {\n                    const currentDisposition = dispositionPickList.find(\n                      (item) => item.value === value,\n                    );\n\n                    const noteRequired =\n                      currentDisposition && currentDisposition.requireNote;\n\n                    this.changeFormStatus({\n                      validated: {\n                        dispositionId: !!value,\n                        notes: !noteRequired || (noteRequired && !!notes),\n                      },\n                      required: {\n                        notes: noteRequired,\n                      },\n                    });\n                  },\n                },\n              ],\n        task: {\n          dispositionId,\n          notes,\n        },\n      };\n    },\n  );\n\n  getCallStatus = createSelector(\n    () => this.currentEvCall,\n    () => this.getCurrentEvMainCall(),\n    (currentEvCall, currentEvMainCall) => {\n      let status: EvActivityCallUIProps['status'] = 'active';\n\n      if (currentEvCall?.endedCall) {\n        status = 'callEnd';\n      } else if (currentEvMainCall.isHold) {\n        status = 'onHold';\n      }\n      return status;\n    },\n  );\n\n  getCurrentEvMainCall = createSelector(\n    () => this.currentEvCall,\n    (currentEvCall) => {\n      return this._modules.activeCallControl.getMainCall(currentEvCall.uii);\n    },\n  );\n\n  getCallList = createSelector(\n    () => this.callId,\n    () => this._modules.evCallMonitor.callIds,\n    () => this._modules.evCallMonitor.otherCallIds,\n    () => this._modules.evCallMonitor.getCallsMapping(),\n    (callId, callIds, otherCallIds, callsMapping) => {\n      return this._modules.evCallMonitor.getActiveCallList(\n        callIds,\n        otherCallIds,\n        callsMapping,\n        callId,\n      );\n    },\n  );\n\n  getIsMultipleCalls = createSelector(\n    () => this.getCallList(),\n    (callList) => callList.length > 2,\n  );\n\n  @action\n  changeSavingStatus(status: EvActivityCallUIProps['saveStatus']) {\n    this.state.saveStatus = status;\n  }\n\n  @action\n  protected changeFormStatus({ validated, required, disabled }: FormState) {\n    if (validated) {\n      this.state.validated = {\n        ...this.state.validated,\n        ...validated,\n      };\n    }\n    if (required) {\n      this.state.required = {\n        ...this.state.required,\n        ...required,\n      };\n    }\n    if (disabled) {\n      this.state.disabled = {\n        ...this.state.disabled,\n        ...disabled,\n      };\n    }\n  }\n\n  @action\n  reset() {\n    this.state.validated = {\n      dispositionId: true,\n      notes: true,\n    };\n    this.state.required = {\n      notes: false,\n    };\n    this.state.disabled = {};\n    this.state.saveStatus = 'submit';\n  }\n\n  onUpdateCallLog({ task }, id) {\n    const isEvCallDisposition =\n      Object.hasOwnProperty.call(task, 'dispositionId') ||\n      Object.hasOwnProperty.call(task, 'notes');\n    if (isEvCallDisposition) {\n      const data = {\n        ...this._modules.evCallDisposition.callsMapping[id],\n        ...task,\n      };\n      this._modules.evCallDisposition.changeDisposition(id, {\n        dispositionId: data.dispositionId,\n        notes: data.notes,\n      });\n    }\n  }\n\n  goToActivityCallPage = (id: string = this.callId) => {\n    this._modules.routerInteraction.push(\n      `/activityCallLog/${id}/activeCallList`,\n    );\n  };\n\n  goToRequeueCallPage() {\n    const {\n      gateGroupId,\n      gateId,\n    } = this._modules.evCallMonitor.getCallsMapping()[this.callId].gate;\n    this._modules.evRequeueCall.setStatus({\n      selectedQueueGroupId: gateGroupId,\n      selectedGateId: gateId,\n      stayOnCall: false,\n      requeuing: false,\n    });\n    this._modules.evTransferCall.changeTransferType(transferTypes.queue);\n    this._redirectTransferCall('/transferCall');\n  }\n\n  goToTransferCallPage(type: EvTransferType) {\n    this._modules.evTransferCall.resetTransferStatus();\n    this._modules.evTransferCall.fetchAgentList();\n    this._redirectTransferCall(`/transferCall/${type}`);\n  }\n\n  private _redirectTransferCall(url: string = '') {\n    this._modules.routerInteraction.push(\n      `/activityCallLog/${this.callId}${url}`,\n    );\n  }\n\n  goDialer() {\n    this._modules.routerInteraction.push('/dialer');\n    this.reset();\n  }\n\n  disposeCall() {\n    this._modules.evCallDisposition.disposeCall(this.callId);\n  }\n\n  private _hasError() {\n    return Object.keys(this.validated).some((key) => {\n      return !this.validated[key];\n    });\n  }\n\n  private async _submitData(id: string) {\n    try {\n      const saveFields = this._modules.evCallDisposition.callsMapping[id];\n      if (saveFields) {\n        this.changeFormStatus({\n          validated: {\n            dispositionId: !!saveFields.dispositionId,\n            notes:\n              !this.required.notes || (saveFields.notes && this.required.notes),\n          },\n        });\n      }\n\n      if (this._hasError()) {\n        return;\n      }\n      this.changeSavingStatus('saving');\n      await this.disposeCall();\n      this.changeSavingStatus('saved');\n      if (!this.tabManagerEnabled) {\n        this._modules.alert.success({\n          message: logTypes.CALL_DISPOSITION_SUCCESS,\n        });\n        // delay for animation with loading ui.\n        setTimeout(() => this.goDialer(), 1000);\n      }\n      this._modules.evWorkingState.setIsPendingDisposition(false);\n    } catch (e) {\n      this._modules.alert.danger({\n        message: logTypes.CALL_DISPOSITION_FAILURE,\n        ttl: 0,\n      });\n      this.changeSavingStatus('submit');\n      throw e;\n    }\n  }\n\n  get tabManagerEnabled() {\n    return this._modules.tabManager?._tabbie.enabled;\n  }\n\n  onStateChange() {\n    if (\n      this.tabManagerEnabled &&\n      this._lastSaveStatus === 'saving' &&\n      this.saveStatus === 'saved'\n    ) {\n      this._lastSaveStatus = this.saveStatus;\n      this._modules.alert.success({\n        message: logTypes.CALL_DISPOSITION_SUCCESS,\n      });\n      // delay for animation with loading ui.\n      setTimeout(() => this.goDialer(), 1000);\n    }\n    this._lastSaveStatus = this.saveStatus;\n  }\n\n  private _onHold() {\n    if (this.getIsMultipleCalls()) {\n      return this.goToActivityCallPage();\n    }\n    this._modules.activeCallControl.hold();\n  }\n\n  getUIProps({ id }): EvActivityCallUIProps {\n    this._modules.evCall.activityCallId = id;\n\n    return {\n      currentLog: this.getActivityCallLog(),\n      showSmallCallControl: !this.getActivityCallLog()?.currentEvRawCall\n        ?.endedCall,\n      currentLocale: this._modules.locale.currentLocale,\n      currentEvCall: this.currentEvCall,\n      saveStatus: this.saveStatus,\n      status: this.getCallStatus(),\n      isInbound: this.isInbound,\n      isOnMute: this._modules.evIntegratedSoftphone.muteActive,\n      isOnHold: this.getCurrentEvMainCall().isHold,\n      isOnActive: this.getIsMultipleCalls(),\n      isInComingCall: this.isInComingCall,\n      smallCallControlSize: this._modules.environment.isWide\n        ? 'medium'\n        : 'small',\n      currentCallControlPermission: this.getCurrentCallControlPermission(),\n      disableDispose: this.disableLinks || this.saveStatus === 'saving',\n      disableTransfer:\n        this.disableLinks || this.isInComingCall || !this.allowTransfer,\n      disableInternalTransfer:\n        this.disableLinks ||\n        this.isInComingCall ||\n        !this.allowTransfer ||\n        !this._modules.evTransferCall.allowInternalTransfer,\n      disableHold:\n        this.disableLinks ||\n        this.isInComingCall ||\n        !this.getCurrentCallControlPermission().allowHoldCall,\n      disableHangup:\n        this.disableLinks ||\n        !this.getCurrentCallControlPermission().allowHangupCall,\n      disableMute:\n        !this._modules.evSessionConfig.isIntegrated ||\n        this.disableLinks ||\n        !this.getCurrentCallControlPermission().allowMuteCall,\n      disableActive: this.disableLinks,\n    };\n  }\n\n  getUIFunctions(): EvActivityCallUIFunctions {\n    return {\n      goBack: () => {},\n      onMute: () => this._modules.activeCallControl.mute(),\n      onUnmute: () => this._modules.activeCallControl.unmute(),\n      onHangup: () =>\n        this._modules.activeCallControl.hangUp(\n          this.currentEvCall.session.sessionId,\n        ),\n      onReject: () => this._modules.activeCallControl.reject(),\n      onHold: () => this._onHold(),\n      onUnHold: () => this._modules.activeCallControl.unhold(),\n      onActive: () => this.goToActivityCallPage(),\n      onUpdateCallLog: (data, id) => this.onUpdateCallLog(data, id),\n      disposeCall: async () => {\n        if (this.saveStatus === 'saved') {\n          return this.goDialer();\n        }\n        await this._submitData(this.callId);\n      },\n      goToRequeueCallPage: () => this.goToRequeueCallPage(),\n      goToTransferCallPage: (transferType: EvTransferType) =>\n        this.goToTransferCallPage(transferType),\n    };\n  }\n}\nexport { EvActivityCallUI };\n"],"file":"EvActivityCallUI.js"}