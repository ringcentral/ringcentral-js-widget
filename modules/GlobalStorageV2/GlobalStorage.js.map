{"version":3,"sources":["modules/GlobalStorageV2/GlobalStorage.ts"],"names":["GlobalStorage","name","deps","dep","optional","StorageProvider","globalStorageOptions","_storage","_storageHandler","storedData","storageKey","prefix","_StorageProvider","getData","key","_storageReducers","removeItem","store","dispatch","type","_storageActionTypes","initSuccess","data","value","ready","sync","on","subscribe","status","moduleStatuses","pending","currentData","setItem","StorageBase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOaA,a,WAJZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,eADA;AAENC,EAAAA,IAAI,EAAE,CAAC;AAAEC,IAAAA,GAAG,EAAE,sBAAP;AAA+BC,IAAAA,QAAQ,EAAE;AAAzC,GAAD;AAFA,CAAP,C;;;;;AAcC,yBAAYF,IAAZ,EAAwB;AAAA;;AAAA;;AAAA;;AACtB,8BAAMA,IAAN,EAAY;AACVD,MAAAA,IAAI,EAAE,eADI;AAEVI,MAAAA,eAAe,2BAAEH,IAAI,CAACI,oBAAP,0DAAE,sBAA2BD;AAFlC,KAAZ;AADsB,UATdE,QASc;AAAA,UARdC,eAQc,GAFX,IAEW;AAAA;AAKvB,G,CAED;;;;;;;;;;;;;;AAEMC,gBAAAA,U,GAAkC,I;AAChCC,gBAAAA,U,aAAgB,KAAKC,MAAL,aAAiB,KAAKA,MAAtB,SAAkC,E;AACxD,qBAAKJ,QAAL,GAAgB,IAAI,KAAKK,gBAAT,CAA0B;AACxCF,kBAAAA,UAAU,EAAVA;AADwC,iBAA1B,CAAhB;;uBAGmB,KAAKH,QAAL,CAAcM,OAAd,E;;;AAAnBJ,gBAAAA,U;sDACkBA,U;;;;;;;;AAAPK,gBAAAA,G;;oBACJ,KAAKC,gBAAL,CAAsBD,GAAtB,C;;;;;AACH,uBAAOL,UAAU,CAACK,GAAD,CAAjB;;uBACM,KAAKP,QAAL,CAAcS,UAAd,CAAyBF,GAAzB,C;;;;;;;AAGV,qBAAKG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKC,mBAAL,CAAyBC,WADb;AAElBC,kBAAAA,IAAI,EAAEb;AAFY,iBAApB;;AAIA,qBAAKD,eAAL,GAAuB,gBAAoB;AAAA,sBAAjBM,GAAiB,QAAjBA,GAAiB;AAAA,sBAAZS,KAAY,QAAZA,KAAY;;AACzC,sBAAI,MAAI,CAACC,KAAT,EAAgB;AACdf,oBAAAA,UAAU,CAACK,GAAD,CAAV,GAAkBS,KAAlB;;AACA,oBAAA,MAAI,CAACN,KAAL,CAAWC,QAAX,CAAoB;AAClBC,sBAAAA,IAAI,EAAE,MAAI,CAACC,mBAAL,CAAyBK,IADb;AAElBX,sBAAAA,GAAG,EAAHA,GAFkB;AAGlBS,sBAAAA,KAAK,EAALA;AAHkB,qBAApB;AAKD;AACF,iBATD;;AAUA,qBAAKhB,QAAL,CAAcmB,EAAd,CAAiB,SAAjB,EAA4B,KAAKlB,eAAjC;;AACA,qBAAKS,KAAL,CAAWU,SAAX,CAAqB,YAAM;AACzB,sBAAI,MAAI,CAACC,MAAL,KAAgBC,2BAAeC,OAAnC,EAA4C;AAC1C;AACA,wBAAMC,WAAW,GAAG,MAAI,CAACT,IAAzB;;AACA,yBAAK,IAAMR,IAAX,IAAkBiB,WAAlB,EAA+B;AAC7B,0BAAItB,UAAU,CAACK,IAAD,CAAV,KAAoBiB,WAAW,CAACjB,IAAD,CAAnC,EAA0C;AACxC,wBAAA,MAAI,CAACP,QAAL,CAAcyB,OAAd,CAAsBlB,IAAtB,EAA2BiB,WAAW,CAACjB,IAAD,CAAtC;;AACAL,wBAAAA,UAAU,CAACK,IAAD,CAAV,GAAkBiB,WAAW,CAACjB,IAAD,CAA7B;AACD;AACF;AACF;AACF,iBAXD;;;;;;;;;;;;;;;;;;;EA9C+BmB,yB","sourcesContent":["import moduleStatuses from '../../enums/moduleStatuses';\nimport { Module } from '../../lib/di';\nimport { IStorage, StorageBase } from '../../lib/StorageBaseV2';\nimport { Deps } from './GlobalStorage.interface';\n\n@Module({\n  name: 'GlobalStorage',\n  deps: [{ dep: 'GlobalStorageOptions', optional: true }],\n})\nexport class GlobalStorage extends StorageBase<Deps> {\n  protected _storage: IStorage;\n  protected _storageHandler: ({\n    key,\n    value,\n  }: {\n    key: string;\n    value: unknown;\n  }) => void = null;\n\n  constructor(deps: Deps) {\n    super(deps, {\n      name: 'globalStorage',\n      StorageProvider: deps.globalStorageOptions?.StorageProvider,\n    });\n  }\n\n  // overridden RcModuleV2 `initModule`\n  async initModule() {\n    let storedData: Record<string, any> = null;\n    const storageKey = `${this.prefix ? `${this.prefix}-` : ''}GlobalStorage`;\n    this._storage = new this._StorageProvider({\n      storageKey,\n    });\n    storedData = await this._storage.getData();\n    for (const key in storedData) {\n      if (!this._storageReducers[key]) {\n        delete storedData[key];\n        await this._storage.removeItem(key);\n      }\n    }\n    this.store.dispatch({\n      type: this._storageActionTypes.initSuccess,\n      data: storedData,\n    });\n    this._storageHandler = ({ key, value }) => {\n      if (this.ready) {\n        storedData[key] = value;\n        this.store.dispatch({\n          type: this._storageActionTypes.sync,\n          key,\n          value,\n        });\n      }\n    };\n    this._storage.on('storage', this._storageHandler);\n    this.store.subscribe(() => {\n      if (this.status !== moduleStatuses.pending) {\n        // save new data to storage when changed\n        const currentData = this.data;\n        for (const key in currentData) {\n          if (storedData[key] !== currentData[key]) {\n            this._storage.setItem(key, currentData[key]);\n            storedData[key] = currentData[key];\n          }\n        }\n      }\n    });\n  }\n}\n"],"file":"GlobalStorage.js"}