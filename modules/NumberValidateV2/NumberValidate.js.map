{"version":3,"sources":["modules/NumberValidateV2/NumberValidate.ts"],"names":["NumberValidate","name","deps","dep","optional","input","countryCode","_deps","regionSettings","hasInvalidChars","isValid","hasPlus","phoneNumber","isServiceNumber","areaCode","brand","id","length","special","extensionNumber","extensionInfo","isMultipleSiteEnabled","site","companyContacts","filteredContacts","ivrContacts","contacts","concat","find","item","extensionFromContacts","options","siteCode","code","getAvailableExtension","isAvailableExtension","companyNumber","normalizedCompanyNumber","accountInfo","mainCompanyNumber","phoneNumbers","validateResult","validateFormat","result","validateWithNumberParser","validatedNumbers","errors","forEach","isNoToNumber","push","type","isNoAreaCode","_numberParser","parsedNumbers","validatedPhoneNumbers","map","_isSpecial","originalString","number","availableExtension","extensionObj","numbers","homeCountry","normalizedNumbers","_numberParserApi","response","international","country","callingCode","originalStrings","client","numberParser","parse","post","RcModuleV2","proxify"],"mappings":"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","sourcesContent":["import { parse } from '@ringcentral-integration/phone-number';\nimport { RcModuleV2 } from '@ringcentral-integration/core';\nimport { ParsePhoneNumberResponse } from '@rc-ex/core/definitions';\nimport { Module } from '../../lib/di';\nimport { isExtensionExist, isAnExtension } from '../../lib/contactHelper';\nimport isBlank from '../../lib/isBlank';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport proxify from '../../lib/proxy/proxify';\nimport {\n  Deps,\n  ValidatedPhoneNumbers,\n  ValidateFormattedError,\n  ValidateParsedError,\n  ValidateFormattingResult,\n  ValidateParsingResult,\n  ValidateResult,\n} from './NumberValidate.interface';\n\n@Module({\n  name: 'NumberValidate',\n  deps: [\n    'Brand',\n    'Client',\n    'RegionSettings',\n    'AccountInfo',\n    'CompanyContacts',\n    { dep: 'ExtensionInfo', optional: true },\n    { dep: 'NumberValidateOptions', optional: true },\n  ],\n})\nexport class NumberValidate extends RcModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  isNoToNumber(input: string) {\n    if (isBlank(input)) {\n      return true;\n    }\n    const { hasInvalidChars, isValid } = parse({\n      input,\n      countryCode: this._deps.regionSettings.countryCode,\n    });\n    if (hasInvalidChars || !isValid) {\n      return true;\n    }\n    return false;\n  }\n\n  isNoAreaCode(input: string) {\n    const { hasPlus, phoneNumber, isServiceNumber } = parse({\n      input,\n      countryCode: this._deps.regionSettings.countryCode,\n    });\n    const { countryCode, areaCode } = this._deps.regionSettings;\n    if (\n      this._deps.brand.id === '1210' &&\n      !isServiceNumber &&\n      !hasPlus &&\n      phoneNumber.length === 7 &&\n      (countryCode === 'CA' || countryCode === 'US') &&\n      areaCode === ''\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  _isSpecial(phoneNumber: { special?: boolean }) {\n    if (phoneNumber && phoneNumber.special) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * TODO: Currently we don't have clearly defined business rule on\n   * what extension numbers are considered available for dialing.\n   * @param {*} extensionNumber\n   * @returns {String} extensionNumber | null\n   */\n  getAvailableExtension(extensionNumber: string) {\n    if (!isAnExtension(extensionNumber)) {\n      return null;\n    }\n    const { isMultipleSiteEnabled, site } = this._deps.extensionInfo;\n    const { filteredContacts, ivrContacts } = this._deps.companyContacts;\n    const contacts = filteredContacts.concat(ivrContacts);\n    return (\n      contacts.find((item) =>\n        isExtensionExist({\n          extensionNumber,\n          extensionFromContacts: item.extensionNumber,\n          options: {\n            isMultipleSiteEnabled,\n            siteCode: site?.code,\n          },\n        }),\n      )?.extensionNumber ?? null\n    );\n  }\n\n  isAvailableExtension(extensionNumber: string) {\n    return !!this.getAvailableExtension(extensionNumber);\n  }\n\n  isNotAnExtension(extensionNumber: string) {\n    if (\n      extensionNumber &&\n      extensionNumber.length <= 6 &&\n      !this._deps.companyContacts.isAvailableExtension(extensionNumber)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  isCompanyExtension(companyNumber: string, extensionNumber: string) {\n    const { countryCode, areaCode } = this._deps.regionSettings;\n    const normalizedCompanyNumber = normalizeNumber({\n      phoneNumber: companyNumber,\n      countryCode,\n      areaCode,\n    });\n    if (normalizedCompanyNumber !== this._deps.accountInfo.mainCompanyNumber) {\n      return false;\n    }\n    return this._deps.companyContacts.isAvailableExtension(extensionNumber);\n  }\n\n  @proxify\n  async validateNumbers(phoneNumbers: string[]): Promise<ValidateResult> {\n    const validateResult = this.validateFormat(phoneNumbers);\n    if (!validateResult.result) {\n      return validateResult;\n    }\n    const validatedNumbers = await this.validateWithNumberParser(phoneNumbers);\n    return validatedNumbers;\n  }\n\n  validateFormat(phoneNumbers: string[]): ValidateFormattingResult {\n    const errors: ValidateFormattedError = [];\n    phoneNumbers.forEach((phoneNumber) => {\n      if (this.isNoToNumber(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noToNumber' });\n      } else if (this.isNoAreaCode(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noAreaCode' });\n      }\n    });\n    return {\n      result: errors.length === 0,\n      errors,\n    };\n  }\n\n  @proxify\n  async validateWithNumberParser(\n    phoneNumbers: string[],\n  ): Promise<ValidateParsingResult> {\n    const parsedNumbers = await this._numberParser(phoneNumbers);\n    const errors: ValidateParsedError = [];\n    const validatedPhoneNumbers: ValidatedPhoneNumbers = [];\n    parsedNumbers.map((phoneNumber) => {\n      if (this._isSpecial(phoneNumber)) {\n        errors.push({\n          phoneNumber: phoneNumber.originalString,\n          type: 'specialNumber',\n        });\n        return null;\n      }\n      const number = phoneNumber.originalString;\n      const availableExtension = this.getAvailableExtension(number);\n\n      if (isAnExtension(number) && !availableExtension) {\n        errors.push({\n          phoneNumber: phoneNumber.originalString,\n          type: 'notAnExtension',\n        });\n        return null;\n      }\n\n      const extensionObj = availableExtension ? { availableExtension } : {};\n      validatedPhoneNumbers.push({ ...phoneNumber, ...extensionObj });\n      return null;\n    });\n    return {\n      result: errors.length === 0,\n      numbers: validatedPhoneNumbers,\n      errors,\n    };\n  }\n\n  @proxify\n  async _numberParser(phoneNumbers: string[]) {\n    const { countryCode, areaCode } = this._deps.regionSettings;\n    const homeCountry = countryCode ? { homeCountry: countryCode } : {};\n    const normalizedNumbers = phoneNumbers.map((phoneNumber) =>\n      normalizeNumber({ phoneNumber, countryCode, areaCode }),\n    );\n    const response = await this._numberParserApi(\n      normalizedNumbers,\n      homeCountry,\n    );\n    return response.phoneNumbers.map((phoneNumber) => ({\n      ...phoneNumber,\n      international:\n        !!phoneNumber.country &&\n        phoneNumber.country.callingCode !== response.homeCountry.callingCode,\n    }));\n  }\n\n  @proxify\n  async _numberParserApi(\n    originalStrings: string[],\n    homeCountry: {\n      homeCountry?: string;\n    },\n  ) {\n    const response: ParsePhoneNumberResponse = await this._deps.client\n      .numberParser()\n      .parse()\n      .post(\n        {\n          originalStrings,\n        },\n        homeCountry,\n      );\n    return response;\n  }\n}\n"],"file":"NumberValidate.js"}