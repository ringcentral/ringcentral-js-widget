{"version":3,"sources":["modules/MainViewUI/MainViewUI.ts"],"names":["expiredWorkingTime","MainViewUI","name","deps","that","_deps","evWorkingState","agentStates","workingState","evSettings","isOffhooking","evCallMonitor","isOnCall","evAuth","agentPermissions","allowOffHook","oldIntervalTime","intervalTime","isTimingOneMinuteType","isOverOneMinute","_checkOverTime","agentStatesColors","agentState","resetSecond","parseInt","String","length","alertOverBreakTime","currentStateIndex","currentPath","routerInteraction","stateText","time","disabled","isPendingDisposition","isOffHookDisable","offhookState","isOffhook","isWide","environment","hideOffHookBtn","currentLocale","locale","goTo","path","push","changeWorkingState","state","getTimerText","getStateColor","handleWithIntervalTime","offhook","offHook","map","color","title","agentAuxState","findIndex","agentStateTypes","away","onBreak","lunch","indexOf","RcUIModuleV2"],"mappings":"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","sourcesContent":["import { computed, RcUIModuleV2 } from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport { agentStatesColors, agentStateTypes } from '../../enums';\nimport {\n  EvMainViewUIFunctions,\n  EvMainViewUIProps,\n} from '../../interfaces/EvMainViewUI.interface';\nimport { handleToClockTime } from '../../lib/time';\nimport { Deps, MainView } from './MainViewUI.interface';\n\nconst expiredWorkingTime = 60 * 1000;\n\n@Module({\n  name: 'MainViewUI',\n  deps: [\n    'Locale',\n    'RouterInteraction',\n    'EvWorkingState',\n    'EvSettings',\n    'EvCallMonitor',\n    'EvAuth',\n    'Environment',\n  ],\n})\nclass MainViewUI extends RcUIModuleV2<Deps> implements MainView {\n  public oldIntervalTime?: number;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  @computed((that: MainViewUI) => [that._deps.evWorkingState.agentStates])\n  get agentStates() {\n    return this._deps.evWorkingState.agentStates.map((state) => ({\n      ...state,\n      color: agentStatesColors[state.agentState],\n      title: state.agentAuxState,\n    }));\n  }\n\n  @computed((that: MainViewUI) => [\n    that.agentStates,\n    that._deps.evWorkingState.workingState,\n  ])\n  get currentStateIndex() {\n    const { workingState } = this._deps.evWorkingState;\n    return this.agentStates.findIndex(\n      (state) =>\n        state.agentAuxState === workingState.agentAuxState &&\n        state.agentState === workingState.agentState,\n    );\n  }\n\n  @computed((that: MainViewUI) => [that._deps.evWorkingState.workingState])\n  get stateText() {\n    const { workingState } = this._deps.evWorkingState;\n    return workingState.agentAuxState || workingState.agentState;\n  }\n\n  @computed((that: MainViewUI) => [that._deps.evWorkingState.workingState])\n  get isTimingOneMinuteType() {\n    const { workingState } = this._deps.evWorkingState;\n    return (\n      [\n        agentStateTypes.away,\n        agentStateTypes.onBreak,\n        agentStateTypes.lunch,\n      ].indexOf(workingState.agentState) > -1\n    );\n  }\n\n  @computed((that: MainViewUI) => [\n    that._deps.evSettings.isOffhooking,\n    that._deps.evCallMonitor.isOnCall,\n    that._deps.evAuth.agentPermissions.allowOffHook,\n  ])\n  get isOffHookDisable() {\n    return (\n      this._deps.evSettings.isOffhooking ||\n      this._deps.evCallMonitor.isOnCall ||\n      !this._deps.evAuth.agentPermissions.allowOffHook\n    );\n  }\n\n  @computed((that: MainViewUI) => [\n    that._deps.evAuth.agentPermissions.allowOffHook,\n  ])\n  get hideOffHookBtn() {\n    return !this._deps.evAuth.agentPermissions.allowOffHook;\n  }\n\n  getStateColor(intervalTime: number) {\n    if (this.isTimingOneMinuteType) {\n      const isOverOneMinute = this._checkOverTime(intervalTime);\n\n      if (isOverOneMinute) {\n        return 'red';\n      }\n    }\n\n    return (\n      agentStatesColors[this._deps.evWorkingState.workingState.agentState] ||\n      'grey'\n    );\n  }\n\n  getTimerText(intervalTime: number) {\n    if (!this.isTimingOneMinuteType) {\n      return handleToClockTime(intervalTime);\n    }\n\n    if (this._checkOverTime(intervalTime)) {\n      return `-${handleToClockTime(intervalTime - expiredWorkingTime)}`;\n    }\n\n    const resetSecond = parseInt(\n      `${(expiredWorkingTime - intervalTime) / 1000}`,\n      10,\n    );\n\n    return `00:${String(resetSecond).length < 2 ? '0' : ''}${resetSecond}`;\n  }\n\n  handleWithIntervalTime(intervalTime: number) {\n    const isOverOneMinute = this._checkOverTime(intervalTime);\n    // TODO think about when browser is block.\n    if (\n      this.oldIntervalTime < expiredWorkingTime &&\n      isOverOneMinute &&\n      this.isTimingOneMinuteType\n    ) {\n      this._deps.evWorkingState.alertOverBreakTime();\n    }\n    this.oldIntervalTime = intervalTime;\n  }\n\n  private _checkOverTime(intervalTime: number) {\n    return intervalTime > expiredWorkingTime;\n  }\n\n  getUIProps(): EvMainViewUIProps {\n    return {\n      agentStates: this.agentStates,\n      agentState: this._deps.evWorkingState.agentState,\n      currentStateIndex: this.currentStateIndex,\n      currentPath: this._deps.routerInteraction.currentPath,\n      stateText: this.stateText,\n      time: this._deps.evWorkingState.time,\n      disabled: this._deps.evWorkingState.isPendingDisposition,\n      isOffHookDisable: this.isOffHookDisable,\n      offhookState: this._deps.evSettings.offhookState,\n      isOffhook: this._deps.evSettings.isOffhook,\n      isOffhooking: this._deps.evSettings.isOffhooking,\n      isWide: this._deps.environment.isWide,\n      hideOffHookBtn: this.hideOffHookBtn,\n      currentLocale: this._deps.locale.currentLocale,\n    };\n  }\n\n  getUIFunctions(): EvMainViewUIFunctions {\n    return {\n      goTo: (path: string) => {\n        if (path) {\n          this._deps.routerInteraction.push(path);\n        }\n      },\n      changeWorkingState: (state) =>\n        this._deps.evWorkingState.changeWorkingState(state),\n      getTimerText: (intervalTime: number) => this.getTimerText(intervalTime),\n      getStateColor: (intervalTime: number) => this.getStateColor(intervalTime),\n      handleWithIntervalTime: (intervalTime: number) =>\n        this.handleWithIntervalTime(intervalTime),\n      offhook: () => {\n        if (!this.isOffHookDisable) {\n          this._deps.evSettings.offHook();\n        }\n      },\n    };\n  }\n}\n\nexport { MainViewUI };\n"],"file":"MainViewUI.js"}