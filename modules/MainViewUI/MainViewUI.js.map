{"version":3,"sources":["modules/MainViewUI/MainViewUI.ts"],"names":["expiredWorkingTime","MainViewUI","name","deps","dep","optional","routerInteraction","evWorkingState","locale","evSettings","evAuth","evCallMonitor","environment","modules","oldIntervalTime","getAgentStates","_modules","agentStates","map","state","color","agentStatesColors","agentState","title","agentAuxState","getCurrentStateIndex","getWorkingState","workingState","findIndex","getStateText","getIsTimingOneMinuteType","agentStateTypes","away","onBreak","lunch","indexOf","getIsOffHookDisable","isOffhooking","isOnCall","agentPermissions","allowOffHook","intervalTime","isOverOneMinute","_checkOverTime","resetSecond","parseInt","String","length","alertOverBreakTime","currentStateIndex","currentPath","stateText","time","disabled","isPendingDisposition","isOffHookDisable","offhookState","getOffhookState","isOffhook","isWide","currentLocale","goTo","path","push","changeWorkingState","getTimerText","getStateColor","handleWithIntervalTime","offhook","offHook","RcUIModuleV2"],"mappings":"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","sourcesContent":["import { RcUIModuleV2, createSelector } from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport { agentStatesColors, agentStateTypes } from '../../enums';\nimport {\n  EvMainViewUIFunctions,\n  EvMainViewUIProps,\n} from '../../interfaces/EvMainViewUI.interface';\nimport { handleToClockTime } from '../../lib/time';\nimport { DepsModules, MainView } from './MainViewUI.interface';\n\nconst expiredWorkingTime = 60 * 1000;\n\n@Module({\n  name: 'MainViewUI',\n  deps: [\n    'Locale',\n    'RouterInteraction',\n    'EvWorkingState',\n    'EvSettings',\n    'EvCallMonitor',\n    'EvAuth',\n    'Environment',\n    { dep: 'MainViewUIOptions', optional: true },\n  ],\n})\nclass MainViewUI extends RcUIModuleV2<DepsModules> implements MainView {\n  public oldIntervalTime?: number;\n\n  constructor({\n    routerInteraction,\n    evWorkingState,\n    locale,\n    evSettings,\n    evAuth,\n    evCallMonitor,\n    environment,\n  }) {\n    super({\n      modules: {\n        routerInteraction,\n        evWorkingState,\n        locale,\n        evSettings,\n        evAuth,\n        evCallMonitor,\n        environment,\n      },\n    });\n  }\n\n  getAgentStates = createSelector(\n    () => this._modules.evWorkingState.getAgentStates(),\n    (agentStates) => {\n      return agentStates.map((state) => ({\n        ...state,\n        color: agentStatesColors[state.agentState],\n        title: state.agentAuxState,\n      }));\n    },\n  );\n\n  getCurrentStateIndex = createSelector(\n    () => this.getAgentStates(),\n    () => this._modules.evWorkingState.getWorkingState(),\n    (agentStates, workingState) =>\n      agentStates.findIndex(\n        (state) =>\n          state.agentAuxState === workingState.agentAuxState &&\n          state.agentState === workingState.agentState,\n      ),\n  );\n\n  getStateText = createSelector(\n    () => this._modules.evWorkingState.getWorkingState(),\n    (workingState) => workingState.agentAuxState || workingState.agentState,\n  );\n\n  getIsTimingOneMinuteType = createSelector(\n    () => this._modules.evWorkingState.getWorkingState(),\n    (workingState) =>\n      [\n        agentStateTypes.away,\n        agentStateTypes.onBreak,\n        agentStateTypes.lunch,\n      ].indexOf(workingState.agentState) > -1,\n  );\n\n  getIsOffHookDisable = createSelector(\n    () => this._modules.evSettings.isOffhooking,\n    () => this._modules.evCallMonitor.isOnCall,\n    () => this._modules.evAuth.agentPermissions.allowOffHook,\n    (isOffhooking, isOnCall, allowOffHook) => {\n      return isOffhooking || isOnCall || !allowOffHook;\n    },\n  );\n\n  getStateColor(intervalTime: number) {\n    if (this.getIsTimingOneMinuteType()) {\n      const isOverOneMinute = this._checkOverTime(intervalTime);\n\n      if (isOverOneMinute) {\n        return 'red';\n      }\n    }\n\n    return (\n      agentStatesColors[\n        this._modules.evWorkingState.getWorkingState().agentState\n      ] || 'grey'\n    );\n  }\n\n  getTimerText(intervalTime: number) {\n    if (!this.getIsTimingOneMinuteType()) {\n      return handleToClockTime(intervalTime);\n    }\n\n    if (this._checkOverTime(intervalTime)) {\n      return `-${handleToClockTime(intervalTime - expiredWorkingTime)}`;\n    }\n\n    const resetSecond = parseInt(\n      `${(expiredWorkingTime - intervalTime) / 1000}`,\n      10,\n    );\n\n    return `00:${String(resetSecond).length < 2 ? '0' : ''}${resetSecond}`;\n  }\n\n  handleWithIntervalTime(intervalTime: number) {\n    const isOverOneMinute = this._checkOverTime(intervalTime);\n    // TODO think about when browser is block.\n    if (\n      this.oldIntervalTime < expiredWorkingTime &&\n      isOverOneMinute &&\n      this.getIsTimingOneMinuteType()\n    ) {\n      this._modules.evWorkingState.alertOverBreakTime();\n    }\n    this.oldIntervalTime = intervalTime;\n  }\n\n  private _checkOverTime(intervalTime: number) {\n    return intervalTime > expiredWorkingTime;\n  }\n\n  getUIProps(): EvMainViewUIProps {\n    return {\n      agentStates: this.getAgentStates(),\n      agentState: this._modules.evWorkingState.agentState,\n      currentStateIndex: this.getCurrentStateIndex(),\n      currentPath: this._modules.routerInteraction.currentPath,\n      stateText: this.getStateText(),\n      time: this._modules.evWorkingState.time,\n      disabled: this._modules.evWorkingState.isPendingDisposition,\n      isOffHookDisable: this.getIsOffHookDisable(),\n      offhookState: this._modules.evSettings.getOffhookState(),\n      isOffhook: this._modules.evSettings.isOffhook,\n      isOffhooking: this._modules.evSettings.isOffhooking,\n      isWide: this._modules.environment.isWide,\n      currentLocale: this._modules.locale.currentLocale,\n    };\n  }\n\n  getUIFunctions(): EvMainViewUIFunctions {\n    return {\n      goTo: (path: string) => {\n        if (path) {\n          this._modules.routerInteraction.push(path);\n        }\n      },\n      changeWorkingState: (state) =>\n        this._modules.evWorkingState.changeWorkingState(state),\n      getTimerText: (intervalTime: number) => this.getTimerText(intervalTime),\n      getStateColor: (intervalTime: number) => this.getStateColor(intervalTime),\n      handleWithIntervalTime: (intervalTime: number) =>\n        this.handleWithIntervalTime(intervalTime),\n      offhook: () => {\n        if (!this.getIsOffHookDisable()) {\n          this._modules.evSettings.offHook();\n        }\n      },\n    };\n  }\n}\n\nexport { MainViewUI };\n"],"file":"MainViewUI.js"}