{"version":3,"sources":["modules/CallLogUI/CallLogUI.tsx"],"names":["CallLogUI","name","deps","dep","optional","options","_deps","locale","callLogger","rateLimiter","regionSettings","dateTimeFormat","callLogSection","routerInteraction","activeCallControl","environmentOptions","rolesAndPermissions","connectivityMonitor","currentNotificationIdentify","currentIdentify","isInTransferPage","currentPath","match","currentLocale","header","showSpinner","ready","disableLinks","connectivity","throttling","currentSession","getActiveSession","sessionIdToTelephonySessionIdMapping","formatPhone","phoneNumber","areaCode","countryCode","goBack","closeLogSection","renderCallLogCallControl","currentTelephonySessionId","isWide","isCurrentDeviceCall","onSaveNotification","saveAndHandleNotification","onDiscardNotification","discardAndHandleNotification","onCloseNotification","closeLogNotification","onExpandNotification","expandLogNotification","onReject","sessionId","telephonySessionId","reject","onHangup","hangUp","RcUIModuleV2"],"mappings":"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","sourcesContent":["import { RcUIModuleV2 } from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport React from 'react';\nimport {\n  CallLogUIInterface,\n  Deps,\n  CallLogUIProps,\n  CallLogUIFunctions,\n} from './CallLogUI.interface';\n\nimport CallLogCallCtrlContainer from '../../containers/CallLogCallCtrlContainer';\n\n@Module({\n  name: 'CallLogUI',\n  deps: [\n    'Locale',\n    'CallLogger',\n    'RateLimiter',\n    'RegionSettings',\n    'DateTimeFormat',\n    'CallLogSection',\n    'RouterInteraction',\n    'ActiveCallControl',\n    'EnvironmentOptions',\n    'RolesAndPermissions',\n    'ConnectivityMonitor',\n    { dep: 'CallLogUIOptions', optional: true },\n  ],\n})\nclass CallLogUI<T = {}> extends RcUIModuleV2<Deps & T>\n  implements CallLogUIInterface {\n  constructor({ deps = {}, ...options }: Deps & { deps: Record<string, any> }) {\n    super({\n      deps: {\n        ...options,\n        ...deps,\n      },\n    });\n  }\n\n  getUIProps(): CallLogUIProps {\n    const {\n      locale,\n      callLogger,\n      rateLimiter,\n      regionSettings,\n      dateTimeFormat,\n      callLogSection,\n      routerInteraction,\n      activeCallControl,\n      environmentOptions,\n      rolesAndPermissions,\n      connectivityMonitor,\n    } = this._deps;\n    const { currentNotificationIdentify, currentIdentify } = callLogSection;\n    const isInTransferPage =\n      routerInteraction.currentPath.match('^/transfer/') !== null;\n\n    return {\n      currentLocale: locale.currentLocale,\n      header: true,\n      showSpinner: !(\n        locale.ready &&\n        regionSettings.ready &&\n        dateTimeFormat.ready &&\n        (!rolesAndPermissions || rolesAndPermissions.ready) &&\n        (!callLogger || callLogger.ready)\n      ),\n      isInTransferPage,\n      disableLinks: !connectivityMonitor.connectivity || rateLimiter.throttling,\n      currentIdentify,\n      // notification props\n      currentNotificationIdentify,\n      currentSession: activeCallControl.getActiveSession(\n        activeCallControl.sessionIdToTelephonySessionIdMapping[\n          currentNotificationIdentify\n        ],\n      ),\n    };\n  }\n\n  getUIFunctions(): CallLogUIFunctions {\n    const {\n      regionSettings,\n      callLogSection,\n      locale,\n      activeCallControl,\n    } = this._deps;\n    return {\n      formatPhone: (phoneNumber: string) =>\n        formatNumber({\n          phoneNumber,\n          areaCode: regionSettings.areaCode,\n          countryCode: regionSettings.countryCode,\n        }) || 'Unknown',\n      goBack: () => callLogSection.closeLogSection(),\n      renderCallLogCallControl: (\n        currentTelephonySessionId,\n        isWide,\n        isCurrentDeviceCall,\n      ) => (\n        <CallLogCallCtrlContainer\n          currentLocale={locale.currentLocale}\n          telephonySessionId={currentTelephonySessionId}\n          isCurrentDeviceCall={isCurrentDeviceCall}\n          isWide={isWide}\n        />\n      ),\n      // notification props\n      onSaveNotification: () => callLogSection.saveAndHandleNotification(),\n      onDiscardNotification: () =>\n        callLogSection.discardAndHandleNotification(),\n      onCloseNotification: () => callLogSection.closeLogNotification(),\n      onExpandNotification: () => callLogSection.expandLogNotification(),\n      onReject(sessionId) {\n        const telephonySessionId =\n          activeCallControl.sessionIdToTelephonySessionIdMapping[sessionId];\n        return activeCallControl.reject(telephonySessionId);\n      },\n      onHangup(sessionId) {\n        const telephonySessionId =\n          activeCallControl.sessionIdToTelephonySessionIdMapping[sessionId];\n        return activeCallControl.hangUp(telephonySessionId);\n      },\n    };\n  }\n}\n\nexport { CallLogUI };\n"],"file":"CallLogUI.js"}