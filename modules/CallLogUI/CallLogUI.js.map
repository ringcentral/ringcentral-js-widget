{"version":3,"sources":["modules/CallLogUI/CallLogUI.tsx"],"names":["CallLogUI","name","deps","dep","optional","options","_deps","locale","callLogger","rateLimiter","regionSettings","dateTimeFormat","callLogSection","routerInteraction","activeCallControl","rolesAndPermissions","connectivityMonitor","callingSettings","forwardingNumber","currentNotificationIdentify","currentIdentify","isInTransferPage","currentPath","match","currentLocale","header","showSpinner","ready","disableLinks","connectivity","throttling","currentSession","getActiveSession","sessionIdToTelephonySessionIdMapping","activeSession","isWebRTC","callWith","callingOptions","browser","forwardingNumbers","formatPhone","phoneNumber","areaCode","countryCode","i18n","getString","goBack","closeLogSection","closeLogNotification","renderCallLogCallControl","currentTelephonySessionId","isWide","isCurrentDeviceCall","onSaveNotification","saveAndHandleNotification","onDiscardNotification","discardAndHandleNotification","onCloseNotification","onExpandNotification","expandLogNotification","onReject","sessionId","telephonySessionId","reject","onHangup","hangUp","onIgnore","ignore","onForward","push","forward","endAndAnswer","answerAndEnd","holdAndAnswer","answerAndHold","toVoicemail","answer","clickForwardTrack","RcUIModuleV2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAQA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoBMA,S,WAlBL,gBAAO;AACNC,EAAAA,IAAI,EAAE,WADA;AAENC,EAAAA,IAAI,EAAE,CACJ,QADI,EAEJ,YAFI,EAGJ,aAHI,EAIJ,gBAJI,EAKJ,gBALI,EAMJ,gBANI,EAOJ,mBAPI,EAQJ,mBARI,EASJ,qBATI,EAUJ,qBAVI,EAWJ,iBAXI,EAYJ,kBAZI,EAaJ;AAAEC,IAAAA,GAAG,EAAE,kBAAP;AAA2BC,IAAAA,QAAQ,EAAE;AAArC,GAbI;AAFA,CAAP,C;;;;;AAqBC,2BAA6E;AAAA,yBAA/DF,IAA+D;AAAA,QAA/DA,IAA+D,0BAAxD,EAAwD;AAAA,QAAjDG,OAAiD;;AAAA;;AAAA,6BACrE;AACJH,MAAAA,IAAI,kCACCG,OADD,GAECH,IAFD;AADA,KADqE;AAO5E;;;;iCAE4B;AAAA,wBAcvB,KAAKI,KAdkB;AAAA,UAEzBC,MAFyB,eAEzBA,MAFyB;AAAA,UAGzBC,UAHyB,eAGzBA,UAHyB;AAAA,UAIzBC,WAJyB,eAIzBA,WAJyB;AAAA,UAKzBC,cALyB,eAKzBA,cALyB;AAAA,UAMzBC,cANyB,eAMzBA,cANyB;AAAA,UAOzBC,cAPyB,eAOzBA,cAPyB;AAAA,UAQzBC,iBARyB,eAQzBA,iBARyB;AAAA,UASzBC,iBATyB,eASzBA,iBATyB;AAAA,UAUzBC,mBAVyB,eAUzBA,mBAVyB;AAAA,UAWzBC,mBAXyB,eAWzBA,mBAXyB;AAAA,UAYzBC,eAZyB,eAYzBA,eAZyB;AAAA,UAazBC,gBAbyB,eAazBA,gBAbyB;AAAA,UAenBC,2BAfmB,GAe8BP,cAf9B,CAenBO,2BAfmB;AAAA,UAeUC,eAfV,GAe8BR,cAf9B,CAeUQ,eAfV;AAgB3B,UAAMC,gBAAgB,GACpBR,iBAAiB,CAACS,WAAlB,CAA8BC,KAA9B,CAAoC,aAApC,MAAuD,IADzD;AAGA,aAAO;AACLC,QAAAA,aAAa,EAAEjB,MAAM,CAACiB,aADjB;AAELC,QAAAA,MAAM,EAAE,IAFH;AAGLC,QAAAA,WAAW,EAAE,EACXnB,MAAM,CAACoB,KAAP,IACAjB,cAAc,CAACiB,KADf,IAEAhB,cAAc,CAACgB,KAFf,KAGC,CAACZ,mBAAD,IAAwBA,mBAAmB,CAACY,KAH7C,MAIC,CAACnB,UAAD,IAAeA,UAAU,CAACmB,KAJ3B,CADW,CAHR;AAULN,QAAAA,gBAAgB,EAAhBA,gBAVK;AAWLO,QAAAA,YAAY,EAAE,CAACZ,mBAAmB,CAACa,YAArB,IAAqCpB,WAAW,CAACqB,UAX1D;AAYLV,QAAAA,eAAe,EAAfA,eAZK;AAaL;AACAD,QAAAA,2BAA2B,EAA3BA,2BAdK;AAeLY,QAAAA,cAAc,EAAEjB,iBAAiB,CAACkB,gBAAlB,CACdlB,iBAAiB,CAACmB,oCAAlB,CACEd,2BADF,CADc,CAfX;AAoBLe,QAAAA,aAAa,EAAEpB,iBAAiB,CAACoB,aApB5B;AAqBLC,QAAAA,QAAQ,EAAElB,eAAe,CAACmB,QAAhB,KAA6BC,+BAAeC,OArBjD;AAsBLC,QAAAA,iBAAiB,EAAErB,gBAAgB,CAACqB;AAtB/B,OAAP;AAwBD;;;qCAEoC;AAAA,yBAO/B,KAAKjC,KAP0B;AAAA,UAEjCI,cAFiC,gBAEjCA,cAFiC;AAAA,UAGjCE,cAHiC,gBAGjCA,cAHiC;AAAA,UAIjCL,MAJiC,gBAIjCA,MAJiC;AAAA,UAKjCO,iBALiC,gBAKjCA,iBALiC;AAAA,UAMjCD,iBANiC,gBAMjCA,iBANiC;AAQnC,aAAO;AACL2B,QAAAA,WAAW,EAAE,qBAACC,WAAD;AAAA,iBACX,8BAAa;AACXA,YAAAA,WAAW,EAAXA,WADW;AAEXC,YAAAA,QAAQ,EAAEhC,cAAc,CAACgC,QAFd;AAGXC,YAAAA,WAAW,EAAEjC,cAAc,CAACiC;AAHjB,WAAb,KAIMC,iBAAKC,SAAL,CAAe,SAAf,EAA0BtC,MAAM,CAACiB,aAAjC,CALK;AAAA,SADR;AAOLsB,QAAAA,MAAM,EAAE,kBAAM;AACZlC,UAAAA,cAAc,CAACmC,eAAf;AACAnC,UAAAA,cAAc,CAACoC,oBAAf;AACD,SAVI;AAWLC,QAAAA,wBAAwB,EAAE,kCACxBC,yBADwB,EAExBC,MAFwB,EAGxBC,mBAHwB;AAAA,8BAKxB,gCAAC,oCAAD;AACE,YAAA,aAAa,EAAE7C,MAAM,CAACiB,aADxB;AAEE,YAAA,kBAAkB,EAAE0B,yBAFtB;AAGE,YAAA,mBAAmB,EAAEE,mBAHvB;AAIE,YAAA,MAAM,EAAED;AAJV,YALwB;AAAA,SAXrB;AAuBL;AACAE,QAAAA,kBAAkB,EAAE;AAAA,iBAAMzC,cAAc,CAAC0C,yBAAf,EAAN;AAAA,SAxBf;AAyBLC,QAAAA,qBAAqB,EAAE;AAAA,iBACrB3C,cAAc,CAAC4C,4BAAf,EADqB;AAAA,SAzBlB;AA2BLC,QAAAA,mBAAmB,EAAE;AAAA,iBAAM7C,cAAc,CAACoC,oBAAf,EAAN;AAAA,SA3BhB;AA4BLU,QAAAA,oBAAoB,EAAE;AAAA,iBAAM9C,cAAc,CAAC+C,qBAAf,EAAN;AAAA,SA5BjB;AA6BLC,QAAAA,QA7BK,oBA6BIC,SA7BJ,EA6Be;AAClB,cAAMC,kBAAkB,GACtBhD,iBAAiB,CAACmB,oCAAlB,CAAuD4B,SAAvD,CADF;AAEA,iBAAO/C,iBAAiB,CAACiD,MAAlB,CAAyBD,kBAAzB,CAAP;AACD,SAjCI;AAkCLE,QAAAA,QAlCK,oBAkCIH,SAlCJ,EAkCe;AAClB,cAAMC,kBAAkB,GACtBhD,iBAAiB,CAACmB,oCAAlB,CAAuD4B,SAAvD,CADF;AAEA,iBAAO/C,iBAAiB,CAACmD,MAAlB,CAAyBH,kBAAzB,CAAP;AACD,SAtCI;AAuCLI,QAAAA,QAAQ,EAAE,kBAACJ,kBAAD,EAAgC;AAAA;;AACxC,mCAAAhD,iBAAiB,CAACqD,MAAlB,qFAAArD,iBAAiB,EAAUgD,kBAAV,CAAjB;AACAlD,UAAAA,cAAc,CAACoC,oBAAf;AACD,SA1CI;AA2CLoB,QAAAA,SAAS,EAAE,mBAAC3B,WAAD,EAAsBqB,kBAAtB,EAAqD;AAC9D,cAAIrB,WAAW,KAAK,QAApB,EAA8B;AAC5B5B,YAAAA,iBAAiB,CAACwD,IAAlB,oBAAmCP,kBAAnC;AACD,WAFD,MAEO;AAAA;;AACL,qCAAAhD,iBAAiB,CAACwD,OAAlB,qFAAAxD,iBAAiB,EAAW2B,WAAX,EAAwBqB,kBAAxB,CAAjB;AACAlD,YAAAA,cAAc,CAACoC,oBAAf;AACD;AACF,SAlDI;AAmDLuB,QAAAA,YAAY,EAAE,sBAACT,kBAAD,EAAgC;AAAA;;AAC5C,mCAAAhD,iBAAiB,CAAC0D,YAAlB,qFAAA1D,iBAAiB,EAAgBgD,kBAAhB,CAAjB;AACAlD,UAAAA,cAAc,CAAC4C,4BAAf;AACD,SAtDI;AAuDLiB,QAAAA,aAAa,EAAE,uBAACX,kBAAD,EAAgC;AAAA;;AAC7C,oCAAAhD,iBAAiB,CAAC4D,aAAlB,uFAAA5D,iBAAiB,EAAiBgD,kBAAjB,CAAjB;AACAlD,UAAAA,cAAc,CAAC4C,4BAAf;AACD,SA1DI;AA2DLmB,QAAAA,WAAW,EAAE,qBAACb,kBAAD,EAAgC;AAC3ChD,UAAAA,iBAAiB,CAACiD,MAAlB,CAAyBD,kBAAzB;AACAlD,UAAAA,cAAc,CAACoC,oBAAf;AACD,SA9DI;AA+DL4B,QAAAA,MAAM,EAAE,gBAACd,kBAAD,EAAgC;AAAA;;AACtC,oCAAAhD,iBAAiB,CAAC8D,MAAlB,uFAAA9D,iBAAiB,EAAUgD,kBAAV,CAAjB;AACAlD,UAAAA,cAAc,CAAC4C,4BAAf;AACD,SAlEI;AAmELqB,QAAAA,iBAAiB,EAAE;AAAA;;AAAA,0CAAM/D,iBAAiB,CAAC+D,iBAAxB,0DAAM,2BAAA/D,iBAAiB,CAAvB;AAAA;AAnEd,OAAP;AAqED;;;;EArIOgE,kB","sourcesContent":["import { RcUIModuleV2 } from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport { callingOptions } from 'ringcentral-integration/modules/CallingSettingsV2/callingOptions';\nimport React from 'react';\nimport {\n  CallLogUIInterface,\n  Deps,\n  CallLogUIProps,\n  CallLogUIFunctions,\n} from './CallLogUI.interface';\n\nimport CallLogCallCtrlContainer from '../../containers/CallLogCallCtrlContainer';\nimport i18n from './i18n';\n\n@Module({\n  name: 'CallLogUI',\n  deps: [\n    'Locale',\n    'CallLogger',\n    'RateLimiter',\n    'RegionSettings',\n    'DateTimeFormat',\n    'CallLogSection',\n    'RouterInteraction',\n    'ActiveCallControl',\n    'RolesAndPermissions',\n    'ConnectivityMonitor',\n    'CallingSettings',\n    'ForwardingNumber',\n    { dep: 'CallLogUIOptions', optional: true },\n  ],\n})\nclass CallLogUI<T = {}>\n  extends RcUIModuleV2<Deps & T>\n  implements CallLogUIInterface {\n  constructor({ deps = {}, ...options }: Deps & { deps: Record<string, any> }) {\n    super({\n      deps: {\n        ...options,\n        ...deps,\n      },\n    });\n  }\n\n  getUIProps(): CallLogUIProps {\n    const {\n      locale,\n      callLogger,\n      rateLimiter,\n      regionSettings,\n      dateTimeFormat,\n      callLogSection,\n      routerInteraction,\n      activeCallControl,\n      rolesAndPermissions,\n      connectivityMonitor,\n      callingSettings,\n      forwardingNumber,\n    } = this._deps;\n    const { currentNotificationIdentify, currentIdentify } = callLogSection;\n    const isInTransferPage =\n      routerInteraction.currentPath.match('^/transfer/') !== null;\n\n    return {\n      currentLocale: locale.currentLocale,\n      header: true,\n      showSpinner: !(\n        locale.ready &&\n        regionSettings.ready &&\n        dateTimeFormat.ready &&\n        (!rolesAndPermissions || rolesAndPermissions.ready) &&\n        (!callLogger || callLogger.ready)\n      ),\n      isInTransferPage,\n      disableLinks: !connectivityMonitor.connectivity || rateLimiter.throttling,\n      currentIdentify,\n      // notification props\n      currentNotificationIdentify,\n      currentSession: activeCallControl.getActiveSession(\n        activeCallControl.sessionIdToTelephonySessionIdMapping[\n          currentNotificationIdentify\n        ],\n      ),\n      activeSession: activeCallControl.activeSession,\n      isWebRTC: callingSettings.callWith === callingOptions.browser,\n      forwardingNumbers: forwardingNumber.forwardingNumbers,\n    };\n  }\n\n  getUIFunctions(): CallLogUIFunctions {\n    const {\n      regionSettings,\n      callLogSection,\n      locale,\n      activeCallControl,\n      routerInteraction,\n    } = this._deps;\n    return {\n      formatPhone: (phoneNumber: string) =>\n        formatNumber({\n          phoneNumber,\n          areaCode: regionSettings.areaCode,\n          countryCode: regionSettings.countryCode,\n        }) || i18n.getString('unKnown', locale.currentLocale),\n      goBack: () => {\n        callLogSection.closeLogSection();\n        callLogSection.closeLogNotification();\n      },\n      renderCallLogCallControl: (\n        currentTelephonySessionId,\n        isWide,\n        isCurrentDeviceCall,\n      ) => (\n        <CallLogCallCtrlContainer\n          currentLocale={locale.currentLocale}\n          telephonySessionId={currentTelephonySessionId}\n          isCurrentDeviceCall={isCurrentDeviceCall}\n          isWide={isWide}\n        />\n      ),\n      // notification props\n      onSaveNotification: () => callLogSection.saveAndHandleNotification(),\n      onDiscardNotification: () =>\n        callLogSection.discardAndHandleNotification(),\n      onCloseNotification: () => callLogSection.closeLogNotification(),\n      onExpandNotification: () => callLogSection.expandLogNotification(),\n      onReject(sessionId) {\n        const telephonySessionId =\n          activeCallControl.sessionIdToTelephonySessionIdMapping[sessionId];\n        return activeCallControl.reject(telephonySessionId);\n      },\n      onHangup(sessionId) {\n        const telephonySessionId =\n          activeCallControl.sessionIdToTelephonySessionIdMapping[sessionId];\n        return activeCallControl.hangUp(telephonySessionId);\n      },\n      onIgnore: (telephonySessionId: string) => {\n        activeCallControl.ignore?.(telephonySessionId);\n        callLogSection.closeLogNotification();\n      },\n      onForward: (phoneNumber: string, telephonySessionId: string) => {\n        if (phoneNumber === 'custom') {\n          routerInteraction.push(`/forward/${telephonySessionId}`);\n        } else {\n          activeCallControl.forward?.(phoneNumber, telephonySessionId);\n          callLogSection.closeLogNotification();\n        }\n      },\n      endAndAnswer: (telephonySessionId: string) => {\n        activeCallControl.answerAndEnd?.(telephonySessionId);\n        callLogSection.discardAndHandleNotification();\n      },\n      holdAndAnswer: (telephonySessionId: string) => {\n        activeCallControl.answerAndHold?.(telephonySessionId);\n        callLogSection.discardAndHandleNotification();\n      },\n      toVoicemail: (telephonySessionId: string) => {\n        activeCallControl.reject(telephonySessionId);\n        callLogSection.closeLogNotification();\n      },\n      answer: (telephonySessionId: string) => {\n        activeCallControl.answer?.(telephonySessionId);\n        callLogSection.discardAndHandleNotification();\n      },\n      clickForwardTrack: () => activeCallControl.clickForwardTrack?.(),\n    };\n  }\n}\n\nexport { CallLogUI };\n"],"file":"CallLogUI.js"}