{"version":3,"sources":["modules/EvSettings/EvSettings.ts"],"names":["EvSettings","name","deps","dep","optional","that","isOffhooking","isOffhook","enableCache","storageKey","_beforeunloadHandler","_deps","evAgentSession","shouldBlockBrowser","isManualOffhook","status","_checkBeforeunload","offhooking","evAuth","isFreshLogin","isConfigTab","setOffhookTerm","setOffhooking","setIsManualOffhook","evClient","offhookTerm","offhookInit","beforeunload","add","remove","loginType","RcModuleV2","storage","state","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeMA,U,WAXL,gBAAO;AACNC,EAAAA,IAAI,EAAE,YADA;AAENC,EAAAA,IAAI,EAAE,CACJ,UADI,EAEJ,QAFI,EAGJ,gBAHI,EAIJ,cAJI,EAKJ,SALI,EAMJ;AAAEC,IAAAA,GAAG,EAAE,mBAAP;AAA4BC,IAAAA,QAAQ,EAAE;AAAtC,GANI;AAFA,CAAP,C,UAuCE,oBAAS,UAACC,IAAD;AAAA,SAAsB,CAACA,IAAI,CAACC,YAAN,EAAoBD,IAAI,CAACE,SAAzB,CAAtB;AAAA,CAAT,C;;;;;AAxBD,sBAAYL,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA,IADI;AAEJM,MAAAA,WAAW,EAAE,IAFT;AAGJC,MAAAA,UAAU,EAAE;AAHR,KAAN;;AADsB,UAHhBC,oBAGgB,GAHO;AAAA,aAC7B,MAAKC,KAAL,CAAWC,cAAX,CAA0BC,kBADG;AAAA,KAGP;;AAAA;;AAAA;;AAAA;;AAAA;AAMvB;;;;uCA4BkBC,e,EAA0B;AAC3C,WAAKA,eAAL,GAAuBA,eAAvB;AACD;;;+BAGUC,M,EAAiB;AAC1B,WAAKR,SAAL,GAAiBQ,MAAjB;;AACA,WAAKC,kBAAL;AACD;;;kCAGaC,U,EAAqB;AACjC,WAAKX,YAAL,GAAoBW,UAApB;AACD;;;qCAGgB;AACf,WAAKX,YAAL,GAAoB,KAApB;AACA,WAAKC,SAAL,GAAiB,IAAjB;;AACA,WAAKS,kBAAL;AACD;;;qCAGgB;AACf,WAAKV,YAAL,GAAoB,KAApB;AACA,WAAKC,SAAL,GAAiB,KAAjB;AACA,WAAKO,eAAL,GAAuB,KAAvB;;AACA,WAAKE,kBAAL;AACD;;;6BAEQ;AACP,UACE,KAAKL,KAAL,CAAWO,MAAX,CAAkBC,YAAlB,IACA,CAAC,KAAKR,KAAL,CAAWC,cAAX,CAA0BQ,WAF7B,EAGE;AACA,aAAKC,cAAL;AACD;AACF;;;8BAES;AACR,WAAKC,aAAL,CAAmB,IAAnB;;AACA,UAAI,KAAKf,SAAT,EAAoB;AAClB,aAAKgB,kBAAL,CAAwB,KAAxB;;AACA,aAAKZ,KAAL,CAAWa,QAAX,CAAoBC,WAApB;AACD,OAHD,MAGO;AACL,aAAKF,kBAAL,CAAwB,IAAxB;;AACA,aAAKZ,KAAL,CAAWa,QAAX,CAAoBE,WAApB;AACD;AACF;;;yCAE4B;AAC3B,UAAI,KAAKnB,SAAT,EAAoB;AAClB,aAAKI,KAAL,CAAWgB,YAAX,CAAwBC,GAAxB,CAA4B,KAAKlB,oBAAjC;AACD,OAFD,MAEO;AACL,aAAKC,KAAL,CAAWgB,YAAX,CAAwBE,MAAxB,CAA+B,KAAKnB,oBAApC;AACD;AACF;;;wBAtEe;AACd,aAAO,KAAKC,KAAL,CAAWC,cAAX,CAA0BkB,SAAjC;AACD;;;wBAGkB;AACjB,UAAI,KAAKxB,YAAT,EAAuB;AACrB,eAAO,KAAKC,SAAL,GAAiB,eAAjB,GAAmC,YAA1C;AACD;;AAED,aAAO,KAAKA,SAAL,GAAiB,WAAjB,GAA+B,cAAtC;AACD;;;;EAnCsBwB,gB,qFAYtBC,a,EACAC,W;;;;;WACW,K;;oFAEXD,a,EACAC,W;;;;;WACiB,K;;iFAEjBD,a,EACAC,W;;;;;WACc,K;;sOAedC,Y,6JAKAA,Y,wJAMAA,Y,4JAKAA,Y,6JAOAA,Y","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport { Deps, Settings } from './EvSettings.interface';\n\n@Module({\n  name: 'EvSettings',\n  deps: [\n    'EvClient',\n    'EvAuth',\n    'EvAgentSession',\n    'Beforeunload',\n    'Storage',\n    { dep: 'EvSettingsOptions', optional: true },\n  ],\n})\nclass EvSettings extends RcModuleV2<Deps> implements Settings {\n  private _beforeunloadHandler = () =>\n    this._deps.evAgentSession.shouldBlockBrowser;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvSettings',\n    });\n  }\n\n  @storage\n  @state\n  isOffhook = false;\n\n  @storage\n  @state\n  isManualOffhook = false;\n\n  @storage\n  @state\n  isOffhooking = false;\n\n  get loginType() {\n    return this._deps.evAgentSession.loginType;\n  }\n\n  @computed((that: EvSettings) => [that.isOffhooking, that.isOffhook])\n  get offhookState() {\n    if (this.isOffhooking) {\n      return this.isOffhook ? 'disconnecting' : 'connecting';\n    }\n\n    return this.isOffhook ? 'connected' : 'disconnected';\n  }\n\n  @action\n  setIsManualOffhook(isManualOffhook: boolean) {\n    this.isManualOffhook = isManualOffhook;\n  }\n\n  @action\n  setOffhook(status: boolean) {\n    this.isOffhook = status;\n    this._checkBeforeunload();\n  }\n\n  @action\n  setOffhooking(offhooking: boolean) {\n    this.isOffhooking = offhooking;\n  }\n\n  @action\n  setOffhookInit() {\n    this.isOffhooking = false;\n    this.isOffhook = true;\n    this._checkBeforeunload();\n  }\n\n  @action\n  setOffhookTerm() {\n    this.isOffhooking = false;\n    this.isOffhook = false;\n    this.isManualOffhook = false;\n    this._checkBeforeunload();\n  }\n\n  onInit() {\n    if (\n      this._deps.evAuth.isFreshLogin ||\n      !this._deps.evAgentSession.isConfigTab\n    ) {\n      this.setOffhookTerm();\n    }\n  }\n\n  offHook() {\n    this.setOffhooking(true);\n    if (this.isOffhook) {\n      this.setIsManualOffhook(false);\n      this._deps.evClient.offhookTerm();\n    } else {\n      this.setIsManualOffhook(true);\n      this._deps.evClient.offhookInit();\n    }\n  }\n\n  private _checkBeforeunload() {\n    if (this.isOffhook) {\n      this._deps.beforeunload.add(this._beforeunloadHandler);\n    } else {\n      this._deps.beforeunload.remove(this._beforeunloadHandler);\n    }\n  }\n}\n\nexport { EvSettings };\n"],"file":"EvSettings.js"}