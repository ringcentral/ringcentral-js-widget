{"version":3,"sources":["modules/CallLogV2/CallLog.ts"],"names":["DEFAULT_TTL","DEFAULT_REFRESH_LOCK","DEFAULT_TOKEN_EXPIRES_IN","DEFAULT_DAY_SPAN","RECORD_COUNT","LIST_RECORD_COUNT","DEFAULT_TIME_TO_RETRY","SYNC_DELAY","presenceRegExp","CallLog","name","deps","dep","optional","list","storageKey","enableCache","callLogOptions","disableCache","_promise","_queueSync","_timeoutId","data","token","timestamp","daySpan","cutOffTime","getTime","filter","call","startTime","syncToken","records","supplementRecords","indexMap","newState","forEach","id","length","push","sort","sortByStartTime","_deps","auth","loggedIn","ready","filterExpiredCalls","_daySpan","Date","now","_tokenExpiresIn","clearToken","extensionFeatures","features","ReadExtensionCallLog","available","_init","_clearTimeout","resetData","subscription","message","test","event","body","activeCalls","ownerId","storage","tabManager","active","sync","subscribe","subscriptionFilters","detailedPresence","refreshLock","console","log","_polling","_startPolling","dateFrom","dateTo","perPageParam","_isLimitList","perPage","_listRecordCount","params","client","account","extension","callLog","callLogSync","syncType","syncTypes","iSync","Error","syncSuccess","recordCount","fSync","_fetch","shouldFSync","_iSync","_fSync","timeToRetry","_retry","_sync","clearTimeout","t","pollingInterval","setTimeout","ttl","fetchData","tokenExpiresIn","polling","isLimitList","listRecordCount","calls","result","callResults","stopped","busy","unknown","faxSendError","faxReceiptError","callFailed","faxReceipt","map","isOutBoundCompanyNumber","from","phoneNumber","mainCompanyNumbers","indexOf","isOutBoundFromSelfExtNumber","extensionNumber","extensionInfo","info","action","callActions","ringOutWeb","ringOutPC","ringOutMobile","to","slice","_ttl","_refreshLock","_timeToRetry","extensionPhoneNumber","numbers","usageType","RcModuleV2","state","proxify"],"mappings":"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","sourcesContent":["import { ReadUserCallLogParameters } from '@rc-ex/core/definitions';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  watch,\n} from '@ringcentral-integration/core';\nimport { callActions } from '../../enums/callActions';\nimport { callResults } from '../../enums/callResults';\nimport { subscriptionFilters } from '../../enums/subscriptionFilters';\nimport { SyncType, syncTypes } from '../../enums/syncTypes';\nimport {\n  hasEndedCalls,\n  isOutbound,\n  removeDuplicateIntermediateCalls,\n  removeInboundRingOutLegs,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport getDateFrom from '../../lib/getDateFrom';\nimport { proxify } from '../../lib/proxy/proxify';\nimport sleep from '../../lib/sleep';\nimport {\n  CallLogData,\n  CallLogList,\n  CallLogRecords,\n  CallLogSyncData,\n  Deps,\n  SyncSuccessOptions,\n  UserCallLogResponseData,\n} from './CallLog.interface';\nimport {\n  getISODateFrom,\n  getISODateTo,\n  processData,\n  processRecords,\n} from './helper';\n\nconst DEFAULT_TTL = 5 * 60 * 1000;\n// Lock fetching on app refresh if lst fetch happened less than this timespan\nconst DEFAULT_REFRESH_LOCK = 3 * 60 * 1000;\nconst DEFAULT_TOKEN_EXPIRES_IN = 60 * 60 * 1000;\nconst DEFAULT_DAY_SPAN = 7;\nconst RECORD_COUNT = 250;\nconst LIST_RECORD_COUNT = 250;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst SYNC_DELAY = 30 * 1000;\n// to not use $ at the end, presence with sipData has extra query parameters\nconst presenceRegExp = /\\/presence\\?detailedTelephonyState=true/;\n\n@Module({\n  name: 'CallLog',\n  deps: [\n    'Auth',\n    'Client',\n    'ExtensionPhoneNumber',\n    'ExtensionInfo',\n    'Subscription',\n    'ExtensionFeatures',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'CallLogOptions', optional: true },\n  ],\n})\nexport class CallLog extends RcModuleV2<Deps> {\n  protected _promise: Promise<void> = null;\n\n  protected _queueSync: Promise<void> = null;\n\n  protected _timeoutId: NodeJS.Timeout = null;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      storageKey: 'CallLog',\n      enableCache: !(deps.callLogOptions?.disableCache ?? false),\n    });\n  }\n\n  @storage\n  @state\n  data: CallLogData = {\n    list: [],\n    token: null,\n    timestamp: null,\n  };\n\n  @action\n  resetData() {\n    this.data = {\n      list: [],\n      token: null,\n      timestamp: null,\n    };\n  }\n\n  @action\n  clearToken() {\n    this.data.token = null;\n    this.data.timestamp = null;\n  }\n\n  @action\n  filterExpiredCalls(daySpan: number) {\n    const cutOffTime = getDateFrom(daySpan).getTime();\n    this.data.list = this.data.list.filter(\n      (call) => call.startTime > cutOffTime,\n    );\n  }\n\n  @action\n  syncSuccess({\n    timestamp,\n    syncToken,\n    records = [],\n    supplementRecords = [],\n    daySpan,\n  }: SyncSuccessOptions) {\n    this.data.timestamp = timestamp;\n    this.data.token = syncToken;\n    const indexMap: Record<string, number> = {};\n    const newState: CallLogList = [];\n    const cutOffTime = getDateFrom(daySpan).getTime();\n    // filter old calls\n    this.data.list.forEach((call) => {\n      if (call.startTime > cutOffTime) {\n        indexMap[call.id] = newState.length;\n        newState.push(call);\n      }\n    });\n    processRecords(records, supplementRecords).forEach((call) => {\n      if (call.startTime > cutOffTime) {\n        if (indexMap[call.id] > -1) {\n          // replace the current data with new data\n          newState[indexMap[call.id]] = call;\n        } else {\n          indexMap[call.id] = newState.length;\n          newState.push(call);\n        }\n      }\n    });\n    newState.sort(sortByStartTime);\n    this.data.list = newState;\n  }\n\n  protected get _ttl() {\n    return this._deps.callLogOptions?.ttl ?? DEFAULT_TTL;\n  }\n\n  protected get _refreshLock() {\n    return this._deps.callLogOptions?.refreshLock ?? DEFAULT_REFRESH_LOCK;\n  }\n\n  protected get _tokenExpiresIn() {\n    return (\n      this._deps.callLogOptions?.tokenExpiresIn ?? DEFAULT_TOKEN_EXPIRES_IN\n    );\n  }\n\n  protected get _timeToRetry() {\n    return this._deps.callLogOptions?.timeToRetry ?? DEFAULT_TIME_TO_RETRY;\n  }\n\n  protected get _daySpan() {\n    return this._deps.callLogOptions?.daySpan ?? DEFAULT_DAY_SPAN;\n  }\n\n  protected get _polling() {\n    return this._deps.callLogOptions?.polling ?? true;\n  }\n\n  protected get _isLimitList() {\n    return this._deps.callLogOptions?.isLimitList ?? false;\n  }\n\n  protected get _listRecordCount() {\n    return this._deps.callLogOptions?.listRecordCount ?? LIST_RECORD_COUNT;\n  }\n\n  _shouldInit() {\n    return !!(super._shouldInit() && this._deps.auth.loggedIn);\n  }\n\n  _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this._deps.auth.loggedIn)\n    );\n  }\n\n  async onInit() {\n    this.filterExpiredCalls(this._daySpan);\n    if (\n      this.token &&\n      (!this.timestamp || Date.now() - this.timestamp > this._tokenExpiresIn)\n    ) {\n      this.clearToken();\n    }\n    if (\n      this._deps.extensionFeatures.features?.ReadExtensionCallLog?.available\n    ) {\n      await this._init();\n    }\n  }\n\n  onReset() {\n    this._clearTimeout();\n    this._promise = null;\n    this.resetData();\n  }\n\n  onInitOnce() {\n    watch(\n      this,\n      () => this._deps.subscription.message,\n      async (message) => {\n        if (\n          this.ready &&\n          this._deps.subscription.ready &&\n          presenceRegExp.test(message.event) &&\n          message.body &&\n          message.body.activeCalls &&\n          hasEndedCalls(message.body.activeCalls)\n        ) {\n          const { ownerId } = this._deps.auth;\n          await sleep(SYNC_DELAY);\n          if (\n            ownerId === this._deps.auth.ownerId &&\n            (!this._deps.storage ||\n              !this._deps.tabManager ||\n              this._deps.tabManager.active)\n          ) {\n            this.sync();\n          }\n        }\n      },\n    );\n  }\n\n  async _init() {\n    if (this._deps.subscription) {\n      this._deps.subscription.subscribe([subscriptionFilters.detailedPresence]);\n    }\n    if (\n      (!this._deps.tabManager || this._deps.tabManager.active) &&\n      (!this.timestamp || Date.now() - this.timestamp > this.refreshLock)\n    ) {\n      try {\n        await this.sync();\n      } catch (e) {\n        console.log(e);\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    }\n  }\n\n  @computed(({ list }: CallLog) => [list])\n  get calls() {\n    // TODO: make sure removeDuplicateIntermediateCalls is necessary here\n    const calls = removeInboundRingOutLegs(\n      removeDuplicateIntermediateCalls(\n        // https://developers.ringcentral.com/api-reference/Call-Log/readUserCallLog\n        this.list.filter(\n          (call) =>\n            // [RCINT-3472] calls with result === 'stopped' seems to be useless\n            call.result !== callResults.stopped &&\n            // [RCINT-51111] calls with result === 'busy'\n            call.result !== callResults.busy &&\n            // [RCINT-6839]\n            // Call processing result is undefined\n            call.result !== callResults.unknown &&\n            // Outgoing fax sending has failed\n            // TODO: Types of Legacy, remove for checking type?\n            // @ts-ignore\n            call.result !== callResults.faxSendError &&\n            // Incoming fax has failed to be received\n            call.result !== callResults.faxReceiptError &&\n            // Outgoing fax has failed because of no answer\n            call.result !== callResults.callFailed &&\n            // Error Internal error occurred when receiving fax\n            // TODO: Types of Legacy, remove for checking type?\n            // @ts-ignore\n            call.result !== callResults.faxReceipt,\n        ),\n      ),\n    ).map((call) => {\n      // [RCINT-7364] Call presence is incorrect when make ringout call from a DL number.\n      // When user use DL number set ringout and the outBound from number must not a oneself company/extension number\n      // Call log sync will response tow legs.\n      // But user use company plus extension number, call log sync will response only one leg.\n      // And the results about `to` and `from` in platform APIs call log sync response is opposite.\n      // This is a temporary solution.\n      const isOutBoundCompanyNumber =\n        call.from &&\n        call.from.phoneNumber &&\n        this.mainCompanyNumbers.indexOf(call.from.phoneNumber) > -1;\n      const isOutBoundFromSelfExtNumber =\n        call.from &&\n        call.from.extensionNumber &&\n        call.from.extensionNumber ===\n          this._deps.extensionInfo.info.extensionNumber;\n      if (\n        isOutbound(call) &&\n        (call.action === callActions.ringOutWeb ||\n          call.action === callActions.ringOutPC ||\n          call.action === callActions.ringOutMobile) &&\n        !isOutBoundCompanyNumber &&\n        !isOutBoundFromSelfExtNumber\n      ) {\n        return {\n          ...call,\n          from: call.to,\n          to: call.from,\n        };\n      }\n      return call;\n    });\n    if (this._isLimitList) {\n      return calls.slice(0, this._listRecordCount);\n    }\n    return calls;\n  }\n\n  get list() {\n    return this.data.list;\n  }\n\n  get token() {\n    return this.data.token;\n  }\n\n  get timestamp() {\n    return this.data.timestamp;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get refreshLock() {\n    return this._refreshLock;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  @proxify\n  async _fetch({\n    dateFrom,\n    dateTo,\n  }: Pick<ReadUserCallLogParameters, 'dateFrom' | 'dateTo'>) {\n    const perPageParam = this._isLimitList\n      ? { perPage: this._listRecordCount }\n      : {};\n    return fetchList(\n      (params) =>\n        this._deps.client\n          .account()\n          .extension()\n          .callLog()\n          .list({\n            ...params,\n            dateFrom,\n            dateTo,\n            ...perPageParam,\n          }) as Promise<UserCallLogResponseData>,\n    );\n  }\n\n  @proxify\n  async _iSync() {\n    const ownerId = this._deps.auth.ownerId;\n    try {\n      const data: CallLogSyncData = await this._deps.client\n        .account()\n        .extension()\n        .callLogSync()\n        .list({\n          syncType: syncTypes.iSync,\n          syncToken: this.token,\n        });\n      if (ownerId !== this._deps.auth.ownerId) throw Error('request aborted');\n      this.syncSuccess({\n        ...processData(data),\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._deps.auth.ownerId) {\n        // iSyncError\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async _fSync() {\n    const ownerId = this._deps.auth.ownerId;\n    try {\n      const dateFrom = getISODateFrom(this._daySpan);\n      const data: CallLogSyncData = await this._deps.client\n        .account()\n        .extension()\n        .callLogSync()\n        .list({\n          recordCount: RECORD_COUNT,\n          syncType: syncTypes.fSync,\n          dateFrom,\n        });\n      if (ownerId !== this._deps.auth.ownerId) throw Error('request aborted');\n      let supplementRecords: CallLogRecords;\n      const { records, timestamp, syncToken } = processData(data);\n      if (records.length >= RECORD_COUNT) {\n        // reach the max record count\n        supplementRecords = await this._fetch({\n          dateFrom,\n          dateTo: getISODateTo(records),\n        });\n      }\n      if (ownerId !== this._deps.auth.ownerId) throw Error('request aborted');\n      this.syncSuccess({\n        records,\n        supplementRecords,\n        timestamp,\n        syncToken,\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._deps.auth.ownerId) {\n        // fSyncError\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async _sync(syncType: SyncType) {\n    const ownerId = this._deps.auth.ownerId;\n    try {\n      let shouldFSync = syncType === syncTypes.fSync;\n      if (!shouldFSync) {\n        try {\n          await this._iSync();\n        } catch (error) {\n          shouldFSync = true;\n        }\n      }\n      if (shouldFSync && ownerId === this._deps.auth.ownerId) {\n        await this._fSync();\n      }\n      if (this._polling) {\n        this._startPolling();\n      }\n    } catch (error) {\n      if (ownerId === this._deps.auth.ownerId) {\n        if (this._polling) {\n          this._startPolling(this.timeToRetry);\n        } else {\n          this._retry();\n        }\n      }\n    }\n    this._promise = null;\n  }\n\n  @proxify\n  async sync(syncType = this.token ? syncTypes.iSync : syncTypes.fSync) {\n    if (!this._promise) {\n      this._promise = this._sync(syncType);\n      return this._promise;\n    }\n    if (!this._queueSync) {\n      this._queueSync = (async () => {\n        await this._promise;\n        this._promise = (async () => {\n          await sleep(300);\n          return this._sync(syncType);\n        })();\n        this._queueSync = null;\n        return this._promise;\n      })();\n      return this._queueSync;\n    }\n    return this._queueSync;\n  }\n\n  @proxify\n  fetchData() {\n    return this.sync();\n  }\n\n  get mainCompanyNumbers() {\n    return this._deps.extensionPhoneNumber.numbers\n      .filter(({ usageType }) => usageType === 'MainCompanyNumber')\n      .map(({ phoneNumber }) => phoneNumber);\n  }\n\n  get pollingInterval() {\n    return this.ttl;\n  }\n\n  _clearTimeout() {\n    if (this._timeoutId) clearTimeout(this._timeoutId);\n  }\n\n  _startPolling(t = this.timestamp + this.pollingInterval + 10 - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._deps.tabManager || this._deps.tabManager.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  _retry(t = this.timeToRetry) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n        if (!this._deps.tabManager || this._deps.tabManager.active) {\n          this.fetchData();\n        } else {\n          // continue retry checks in case tab becomes main tab\n          this._retry();\n        }\n      }\n    }, t);\n  }\n}\n"],"file":"CallLog.js"}