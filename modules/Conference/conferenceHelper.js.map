{"version":3,"sources":["modules/Conference/conferenceHelper.js"],"names":["updateJoinBeforeHost","client","allowJoinBeforeHost","account","extension","conferencing","put","data","getConferenceInfo","get","formatDialInNumbers","currentLocale","phoneNumbers","countryCode","areaCode","countryNames","countryCounter","reduce","acc","item","country","isoCode","dialInNumbers","map","countryName","getString","region","location","phoneNumber","e","formattedPhoneNumber","international"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AAEO,SAAeA,oBAAf,CAAoCC,MAApC,EAA4CC,mBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACcD,MAAM,CACtBE,OADgB,GAEhBC,SAFgB,GAGhBC,YAHgB,GAIhBC,GAJgB,CAIZ;AAAEJ,YAAAA,mBAAmB,EAAnBA;AAAF,WAJY,CADd;;AAAA;AACCK,UAAAA,IADD;AAAA,2CAMEA,IANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAeC,iBAAf,CAAiCP,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACcA,MAAM,CACtBE,OADgB,GAEhBC,SAFgB,GAGhBC,YAHgB,GAIhBI,GAJgB,EADd;;AAAA;AACCF,UAAAA,IADD;AAAA,4CAMEA,IANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAASG,mBAAT,OAMJ;AAAA,MALDC,aAKC,QALDA,aAKC;AAAA,MAJDC,YAIC,QAJDA,YAIC;AAAA,MAHDC,WAGC,QAHDA,WAGC;AAAA,MAFDC,QAEC,QAFDA,QAEC;AAAA,MADDC,YACC,QADDA,YACC;AACD,MAAMC,cAAc,GAAGJ,YAAY,CAACK,MAAb,CAAoB,UAACC,GAAD,EAAMC,IAAN,EAAe;AACxD,QAAI,CAACD,GAAG,CAACC,IAAI,CAACC,OAAL,CAAaC,OAAd,CAAR,EAAgC;AAC9BH,MAAAA,GAAG,CAACC,IAAI,CAACC,OAAL,CAAaC,OAAd,CAAH,GAA4B,CAA5B;AACD,KAFD,MAEO;AACLH,MAAAA,GAAG,CAACC,IAAI,CAACC,OAAL,CAAaC,OAAd,CAAH,IAA6B,CAA7B;AACD;;AACD,WAAOH,GAAP;AACD,GAPsB,EAOpB,EAPoB,CAAvB;AAQA,MAAMI,aAAa,GAAGV,YAAY,CAACW,GAAb,CAAiB,UAACJ,IAAD,EAAU;AAC/C,QAAMK,WAAW,GAAGT,YAAY,CAACU,SAAb,CAClBN,IAAI,CAACC,OAAL,CAAaC,OADK,EAElBV,aAFkB,CAApB,CAD+C,CAK/C;;AACA,WAAO;AACLe,MAAAA,MAAM,EACJV,cAAc,CAACG,IAAI,CAACC,OAAL,CAAaC,OAAd,CAAd,GAAuC,CAAvC,aACOG,WADP,eACuBL,IAAI,CAACQ,QAD5B,IAEIH,WAJD;AAKLI,MAAAA,WAAW,EAAET,IAAI,CAACS;AALb,KAAP;AAOD,GAbqB,CAAtB;AAcA,SAAON,aAAa,CAACC,GAAd,CAAkB,UAACM,CAAD;AAAA,6BACpBA,CADoB;AAEvBC,MAAAA,oBAAoB,EAAE,8BAAa;AACjCF,QAAAA,WAAW,EAAEC,CAAC,CAACD,WADkB;AAEjCf,QAAAA,WAAW,EAAXA,WAFiC;AAGjCC,QAAAA,QAAQ,EAARA,QAHiC;AAIjCiB,QAAAA,aAAa,EAAE;AAJkB,OAAb;AAFC;AAAA,GAAlB,CAAP;AASD","sourcesContent":["import formatNumber from '../../lib/formatNumber';\n\nexport async function updateJoinBeforeHost(client, allowJoinBeforeHost) {\n  const data = await client\n    .account()\n    .extension()\n    .conferencing()\n    .put({ allowJoinBeforeHost });\n  return data;\n}\n\nexport async function getConferenceInfo(client) {\n  const data = await client\n    .account()\n    .extension()\n    .conferencing()\n    .get();\n  return data;\n}\n\nexport function formatDialInNumbers({\n  currentLocale,\n  phoneNumbers,\n  countryCode,\n  areaCode,\n  countryNames,\n}) {\n  const countryCounter = phoneNumbers.reduce((acc, item) => {\n    if (!acc[item.country.isoCode]) {\n      acc[item.country.isoCode] = 1;\n    } else {\n      acc[item.country.isoCode] += 1;\n    }\n    return acc;\n  }, {});\n  const dialInNumbers = phoneNumbers.map((item) => {\n    const countryName = countryNames.getString(\n      item.country.isoCode,\n      currentLocale,\n    );\n    // only show the provinces of canada\n    return {\n      region:\n        countryCounter[item.country.isoCode] > 1\n          ? `${countryName}, ${item.location}`\n          : countryName,\n      phoneNumber: item.phoneNumber,\n    };\n  });\n  return dialInNumbers.map((e) => ({\n    ...e,\n    formattedPhoneNumber: formatNumber({\n      phoneNumber: e.phoneNumber,\n      countryCode,\n      areaCode,\n      international: true,\n    }),\n  }));\n}\n"],"file":"conferenceHelper.js"}