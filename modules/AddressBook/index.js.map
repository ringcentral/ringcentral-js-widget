{"version":3,"sources":["modules/AddressBook/index.js"],"names":["CONTACTS_PER_PAGE","DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","REGX_DECODE","DECODE","getSyncParams","syncToken","pageId","query","perPage","syncType","syncTypes","iSync","fSync","AddressBook","deps","dep","optional","client","auth","storage","tabManager","rolesAndPermissions","ttl","timeToRetry","polling","disableCache","options","actionTypes","_client","_storage","_auth","_tabManager","_ttl","_rolesAndPermissions","_timeToRetry","_polling","_promise","_addressBookStorageKey","_reducer","registerReducer","key","reducer","timestamp","contactList","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_shouleCleanCache","_cleanUp","_hasPermission","_initAddressBook","initSuccess","_isDataReady","_shouldReset","_resetModuleStatus","ready","loggedIn","pending","isFreshLogin","Date","now","active","status","moduleStatuses","initializing","_shouldFetch","sync","console","error","_startPolling","_retry","reset","_clearTimeout","resetSuccess","_sync","response","apiResponse","_response","result","records","syncInfo","undefined","_syncWithForbiddenCheck","syncSuccess","_onSyncError","syncError","params","_syncAddressBookApi","nextPageId","lastResponse","concat","account","extension","addressBookSync","list","updateRequest","_decodeAddressBook","text","replace","$0","handleText","origin","Array","isArray","forEach","record","firstName","_decode","lastName","cleanUp","phoneNumber","contacts","entityType","permissions","ReadPersonalContacts","state","getItem","Pollable","proxify","selector","rawContacts","contactsList","rawContact","contact","sourceName","phoneNumbers","emails","id","name","email","push","email2","Object","keys","toLowerCase","indexOf"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport sleep from '../../lib/sleep';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport syncTypes from '../../enums/syncTypes';\nimport actionTypes from './actionTypes';\nimport proxify from '../../lib/proxy/proxify';\nimport { selector } from '../../lib/selector';\nimport { addPhoneToContact, getMatchContacts } from '../../lib/contactHelper';\n\nimport getAddressBookReducer, {\n  getSyncTokenReducer,\n  getContactListReducer,\n  getTimestampReducer,\n} from './getAddressBookReducer';\n\nconst CONTACTS_PER_PAGE = 250;\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst REGX_DECODE = /&\\w+;/g;\nconst DECODE = {\n  '&amp;': '&',\n  '&bsol;': '\\\\',\n  '&sol;': '/',\n  '&apos;': \"'\",\n};\n\nfunction getSyncParams(syncToken, pageId) {\n  const query = {\n    perPage: CONTACTS_PER_PAGE,\n  };\n  if (syncToken) {\n    query.syncToken = syncToken;\n    query.syncType = syncTypes.iSync;\n  } else {\n    query.syncType = syncTypes.fSync;\n  }\n  if (pageId) {\n    query.pageId = pageId;\n  }\n  return query;\n}\n\n/**\n * @class\n * @description Accound book module to get user person contacts in RC\n */\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    'RolesAndPermissions',\n    { dep: 'Storage', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'AddressBookOptions', optional: true },\n  ],\n})\nexport default class AddressBook extends Pollable {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Auth} params.auth - Auth module instance\n   * @param {TabManager} params.tabManage - TabManager module instance\n   * @param {Storage} params.storage - storage module instance, optional\n   * @param {Number} params.ttl - local cache timestamp, default 30 mins\n   * @param {Number} params.timeToRetry - timestamp to retry, default 62 seconds\n   * @param {Bool} params.polling - polling flag, default true\n   * @param {Bool} params.disableCache - polling flag, default false\n   */\n  constructor({\n    client,\n    auth,\n    storage,\n    tabManager,\n    rolesAndPermissions,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    polling = true,\n    disableCache = false,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._auth = auth;\n    this._tabManager = tabManager;\n    this._ttl = ttl;\n    this._rolesAndPermissions = rolesAndPermissions;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._promise = null;\n    this._addressBookStorageKey = 'addressBookContactsList';\n    if (this._storage) {\n      this._reducer = getAddressBookReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._addressBookStorageKey,\n        reducer: combineReducers({\n          syncToken: getSyncTokenReducer(this.actionTypes),\n          timestamp: getTimestampReducer(this.actionTypes),\n          contactList: getContactListReducer(this.actionTypes),\n        }),\n      });\n    } else {\n      this._reducer = getAddressBookReducer(this.actionTypes, {\n        contactList: getContactListReducer(this.actionTypes),\n        syncToken: getSyncTokenReducer(this.actionTypes),\n        timestamp: getTimestampReducer(this.actionTypes),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._shouleCleanCache()) {\n        this._cleanUp();\n      }\n      if (this._hasPermission) {\n        await this._initAddressBook();\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      }\n    } else if (this._isDataReady()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      (!this._storage || this._storage.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._rolesAndPermissions.ready &&\n      this._auth.loggedIn &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      ((!!this._storage && !this._storage.ready) ||\n        (!!this._tabManager && !this._tabManager.ready) ||\n        !this._rolesAndPermissions.ready ||\n        !this._auth.loggedIn) &&\n      this.ready\n    );\n  }\n\n  _shouleCleanCache() {\n    return (\n      this._auth.isFreshLogin ||\n      !this.timestamp ||\n      Date.now() - this.timestamp > this._ttl\n    );\n  }\n\n  _shouldFetch() {\n    return (\n      (!this._storage || !this._tabManager || this._tabManager.active) &&\n      this._shouleCleanCache()\n    );\n  }\n\n  _isDataReady() {\n    // only turns ready when data has been fetched\n    // (could be from other tabs)\n    return (\n      this.status === moduleStatuses.initializing && this.timestamp !== null\n    );\n  }\n\n  async _initAddressBook() {\n    if (!this._hasPermission) return;\n    if (this._shouldFetch()) {\n      try {\n        await this.sync();\n      } catch (e) {\n        console.error('syncData error:', e);\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n  }\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.permissions.ReadPersonalContacts;\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.reset,\n    });\n    this._clearTimeout();\n    this._promise = null;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  async _syncWithForbiddenCheck(syncToken) {\n    try {\n      const response = await this._sync(syncToken);\n      return response;\n    } catch (error) {\n      if (\n        error &&\n        error.apiResponse &&\n        error.apiResponse._response &&\n        error.apiResponse._response.status === 403\n      ) {\n        const result = {\n          records: [],\n          syncInfo: {\n            syncToken: undefined,\n          },\n        };\n        return result;\n      }\n      throw error;\n    }\n  }\n\n  @proxify\n  async sync() {\n    if (!this._promise) {\n      this._promise = (async () => {\n        try {\n          this.store.dispatch({\n            type: this.actionTypes.sync,\n          });\n          const response = await this._syncWithForbiddenCheck(this.syncToken);\n          this.store.dispatch({\n            type: this.actionTypes.syncSuccess,\n            records: response.records,\n            syncToken: response.syncInfo.syncToken,\n            timestamp: Date.now(),\n          });\n          if (this._polling) {\n            this._startPolling();\n          }\n        } catch (error) {\n          this._onSyncError();\n          if (this._polling) {\n            this._startPolling(this.timeToRetry);\n          } else {\n            this._retry();\n          }\n          this._promise = null;\n          throw error;\n        }\n        this._promise = null;\n      })();\n    }\n    await this._promise;\n  }\n\n  _onSyncError() {\n    this.store.dispatch({\n      type: this.actionTypes.syncError,\n    });\n  }\n\n  @proxify\n  async _sync(syncToken, pageId) {\n    const params = getSyncParams(syncToken, pageId);\n    const response = await this._syncAddressBookApi(params);\n    if (!response.nextPageId) {\n      return response;\n    }\n    await sleep(1000);\n    const lastResponse = await this._sync(syncToken, response.nextPageId);\n    return {\n      ...lastResponse,\n      records: response.records.concat(lastResponse.records),\n    };\n  }\n\n  @proxify\n  async _syncAddressBookApi(params) {\n    const updateRequest = await this._client\n      .account()\n      .extension()\n      .addressBookSync()\n      .list(params);\n    this._decodeAddressBook(updateRequest);\n    return updateRequest;\n  }\n\n  _decode(text) {\n    return text.replace(REGX_DECODE, ($0) => {\n      let handleText = $0;\n      if (DECODE[$0]) {\n        handleText = DECODE[$0];\n      }\n      return handleText;\n    });\n  }\n\n  _decodeAddressBook(origin) {\n    if (origin && origin.records && Array.isArray(origin.records)) {\n      origin.records.forEach((record) => {\n        if (record.firstName) {\n          record.firstName = this._decode(record.firstName);\n        }\n        if (record.lastName) {\n          record.lastName = this._decode(record.lastName);\n        }\n      });\n    }\n  }\n\n  _cleanUp() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanUp,\n    });\n  }\n\n  // interface of contact source\n  matchPhoneNumber(phoneNumber) {\n    return getMatchContacts({\n      contacts: this.contacts,\n      phoneNumber,\n      entityType: 'rcContact',\n    });\n  }\n\n  @proxify\n  async fetchData() {\n    await this.sync();\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get syncToken() {\n    if (this._storage) {\n      return this._storage.getItem(this._addressBookStorageKey).syncToken;\n    }\n    return this.state.syncToken;\n  }\n\n  get rawContacts() {\n    if (this._storage) {\n      return this._storage.getItem(this._addressBookStorageKey).contactList;\n    }\n    return this.state.contactList;\n  }\n\n  get timestamp() {\n    if (this._storage) {\n      return this._storage.getItem(this._addressBookStorageKey).timestamp;\n    }\n    return this.state.timestamp;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  // interface of contact source\n  get sourceName() {\n    return 'personal';\n  }\n\n  // interface of contact source\n  @selector\n  contacts = [\n    () => this.rawContacts,\n    (rawContacts) => {\n      const contactsList = [];\n      rawContacts.forEach((rawContact) => {\n        const contact = {\n          type: this.sourceName,\n          phoneNumbers: [],\n          emails: [],\n          ...rawContact,\n        };\n        contact.id = `${contact.id}`;\n        contact.name = `${contact.firstName || ''} ${contact.lastName || ''}`;\n        if (contact.email) contact.emails.push(contact.email);\n        if (contact.email2) contact.emails.push(contact.email2);\n        Object.keys(contact).forEach((key) => {\n          if (key.toLowerCase().indexOf('phone') === -1) {\n            return;\n          }\n          if (typeof contact[key] !== 'string') {\n            return;\n          }\n          addPhoneToContact(contact, contact[key], key);\n        });\n        contactsList.push(contact);\n      });\n      return contactsList;\n    },\n  ];\n\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"],"file":"index.js"}