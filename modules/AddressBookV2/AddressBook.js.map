{"version":3,"sources":["modules/AddressBookV2/AddressBook.ts"],"names":["DEFAULT_FETCH_INTERVAL","DEFAULT_CONTACTS_PER_PAGE","AddressBook","name","deps","dep","optional","data","_deps","AddressBookOptions","polling","_source","DataSource","key","cleanOnReset","permissionCheckFunction","rolesAndPermissions","permissions","ReadPersonalContacts","readyCheckFunction","ready","fetchFunction","_sync","dataFetcherV2","register","perPage","syncToken","pageId","params","decodeAddressBookResponse","client","account","extension","addressBookSync","list","_perPage","records","_fetch","response","concat","nextPageId","_fetchInterval","syncInfo","status","contactId","contacts","find","x","id","searchFilter","searchString","entityType","phoneSources","contact","options","phoneNumber","rcContact","fetchInterval","rawContact","type","sourceName","phoneNumbers","emails","firstName","lastName","email","push","email2","email3","toLocaleLowerCase","indexOf","Object","keys","DataFetcherV2Consumer","proxify"],"mappings":"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","sourcesContent":["import { AddressBookSync } from '@rc-ex/core/definitions';\nimport { computed } from '@ringcentral-integration/core';\nimport { forEach, map } from 'ramda';\n\nimport { phoneSources } from '../../enums/phoneSources';\nimport { ContactModel, ContactSource } from '../../interfaces/Contact.model';\nimport {\n  getFilterContacts,\n  getSearchForPhoneNumbers,\n  getMatchContactsByPhoneNumber,\n  addPhoneToContact,\n} from '../../lib/contactHelper';\nimport { Module } from '../../lib/di';\nimport proxify from '../../lib/proxy/proxify';\nimport sleep from '../../lib/sleep';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport { Deps } from './AddressBook.interface';\nimport { decodeAddressBookResponse, getSyncParams } from './helpers';\n\nexport const DEFAULT_FETCH_INTERVAL = 1000;\nexport const DEFAULT_CONTACTS_PER_PAGE = 250;\n\n@Module({\n  name: 'AddressBook',\n  deps: [\n    'Client',\n    'RolesAndPermissions',\n    'DataFetcherV2',\n    { dep: 'AddressBookOptions', optional: true },\n  ],\n})\nexport class AddressBook\n  extends DataFetcherV2Consumer<\n    Deps,\n    Pick<AddressBookSync, 'syncInfo' | 'records'>\n  >\n  implements ContactSource {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    const { polling = true } = this._deps.AddressBookOptions ?? {};\n    this._source = new DataSource({\n      ...this._deps.AddressBookOptions,\n      key: 'addressBook',\n      polling,\n      cleanOnReset: true,\n      permissionCheckFunction: () =>\n        !!this._deps.rolesAndPermissions.permissions.ReadPersonalContacts,\n      readyCheckFunction: () => this._deps.rolesAndPermissions.ready,\n      fetchFunction: async () => this._sync(),\n    });\n    this._deps.dataFetcherV2.register(this._source);\n  }\n\n  protected get _fetchInterval() {\n    return (\n      this._deps.AddressBookOptions?.fetchInterval ?? DEFAULT_FETCH_INTERVAL\n    );\n  }\n\n  protected get _perPage() {\n    return this._deps.AddressBookOptions?.perPage ?? DEFAULT_CONTACTS_PER_PAGE;\n  }\n\n  get syncToken() {\n    return this.data?.syncInfo?.syncToken;\n  }\n\n  protected async _fetch(perPage: number, syncToken: string, pageId?: number) {\n    const params = getSyncParams({\n      perPage,\n      syncToken,\n      pageId,\n    });\n    return decodeAddressBookResponse(\n      await this._deps.client\n        .account()\n        .extension()\n        .addressBookSync()\n        .list(params),\n    );\n  }\n\n  protected async _sync() {\n    try {\n      const syncToken = this.syncToken;\n      const perPage = this._perPage;\n      let records: AddressBookSync['records'] = [];\n      let response = await this._fetch(perPage, syncToken);\n      records = records.concat(response.records ?? []);\n      while (response.nextPageId) {\n        await sleep(this._fetchInterval);\n        response = await this._fetch(perPage, syncToken, response.nextPageId);\n        records = records.concat(response.records ?? []);\n      }\n      return {\n        syncInfo: response.syncInfo,\n        records,\n      };\n    } catch (error) {\n      if (error?.response?.status === 403) {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  // interface of ContactSource\n  @proxify\n  async sync() {\n    await this._sync();\n  }\n\n  // interface of ContactSource\n  findContact(contactId: string) {\n    return this.contacts.find((x) => x.id === contactId);\n  }\n\n  // interface of ContactSource\n  filterContacts(searchFilter: string) {\n    return getFilterContacts(this.contacts, searchFilter);\n  }\n\n  // interface of ContactSource\n  searchForPhoneNumbers(searchString: string) {\n    return getSearchForPhoneNumbers({\n      contacts: this.contacts,\n      searchString,\n      entityType: phoneSources.contact,\n      options: null,\n    });\n  }\n\n  // interface of ContactSource\n  matchContactsByPhoneNumber(phoneNumber: string) {\n    return getMatchContactsByPhoneNumber({\n      contacts: this.contacts,\n      phoneNumber,\n      entityType: phoneSources.rcContact,\n    });\n  }\n\n  // interface of ContactSource\n  get sourceName() {\n    return 'personal';\n  }\n\n  // interface of ContactSource\n  @computed<AddressBook>(({ data }) => [data])\n  get contacts() {\n    return map((rawContact) => {\n      const contact: ContactModel = {\n        ...rawContact,\n        type: this.sourceName,\n        phoneNumbers: [],\n        emails: [],\n        id: `${rawContact.id}`,\n        name: `${rawContact.firstName ?? ''} ${rawContact.lastName ?? ''}`,\n      };\n      if (rawContact.email) {\n        contact.emails.push(rawContact.email);\n      }\n      if (rawContact.email2) {\n        contact.emails.push(rawContact.email2);\n      }\n      if (rawContact.email3) {\n        contact.emails.push(rawContact.email3);\n      }\n      forEach((key: keyof typeof contact) => {\n        if (\n          key.toLocaleLowerCase().indexOf('phone') === -1 ||\n          typeof contact[key] !== 'string'\n        ) {\n          return;\n        }\n        addPhoneToContact(contact, contact[key] as string, key);\n      }, Object.keys(contact) as (keyof typeof contact)[]);\n      return contact;\n    }, this.data?.records ?? []);\n  }\n\n  // interface of ContactSource\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"],"file":"AddressBook.js"}