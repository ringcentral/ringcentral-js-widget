{"version":3,"sources":["modules/ConnectivityMonitor/index.js"],"names":["DEFAULT_TIME_TO_RETRY","DEFAULT_HEART_BEAT_INTERVAL","defaultCheckConnectionFn","fetch","ConnectivityMonitor","deps","dep","optional","client","environment","timeToRetry","heartBeatInterval","checkConnectionFunc","options","actionTypes","_client","ensureExist","_environment","_timeToRetry","_heartBeatInterval","_reducer","_retryTimeoutId","_lastEnvironmentCounter","_requestSuccessHandler","_requestErrorHandler","_networkErrorHandler","_checkConnectionFunc","pending","ready","changeCounter","_shouldInit","_bindHandlers","store","dispatch","type","initSuccess","_retry","_shouldRebindHandlers","subscribe","_onStateChange","res","connectivity","connectSuccess","error","message","rateLimiterErrorMessage","rateLimitReached","availabilityErrorMessages","serviceLimited","apiResponse","_response","connectFail","networkLoss","_unbindHandlers","service","platform","on","events","requestSuccess","requestError","window","addEventListener","removeListener","removeEventListener","clearTimeout","t","_clearTimeout","setTimeout","_checkConnection","state","status","moduleStatuses","RcModule","proxify"],"mappings":"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","sourcesContent":["import 'isomorphic-fetch';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport actionTypes from './actionTypes';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport getConnectivityMonitorReducer from './getConnectivityMonitorReducer';\nimport rateLimiterErrorMessage from '../RateLimiter/errorMessages';\nimport availabilityErrorMessages from '../AvailabilityMonitor/errorMessages';\nimport ensureExist from '../../lib/ensureExist';\nimport proxify from '../../lib/proxy/proxify';\n\nexport const DEFAULT_TIME_TO_RETRY = 5 * 1000;\nexport const DEFAULT_HEART_BEAT_INTERVAL = 60 * 1000;\n\nasync function defaultCheckConnectionFn() {\n  return fetch('https://pubsub.pubnub.com/time/0');\n}\n\n/**\n * @class\n * @description Connectivity monitor module\n */\n@Module({\n  deps: [\n    'Client',\n    { dep: 'Environment', optional: true },\n    { dep: 'ConnectivityMonitorOptions', optional: true },\n  ],\n})\nexport default class ConnectivityMonitor extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Environment} params.environment - environment module instance\n   * @param {Number} params.timeToRetry - time to Retry\n   * @param {Number} params.heartBeatInterval - heart beat interval\n   * @param {Function} params.checkConnectionFunc - function to check network\n   */\n  constructor({\n    client,\n    environment,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    heartBeatInterval = DEFAULT_HEART_BEAT_INTERVAL,\n    checkConnectionFunc = defaultCheckConnectionFn,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = this::ensureExist(client, 'client');\n    this._environment = environment;\n    this._timeToRetry = timeToRetry;\n    this._heartBeatInterval = heartBeatInterval;\n    this._reducer = getConnectivityMonitorReducer(this.actionTypes);\n    this._retryTimeoutId = null;\n    this._lastEnvironmentCounter = 0;\n\n    // auto bind this\n    this._requestSuccessHandler = this::this._requestSuccessHandler;\n    this._requestErrorHandler = this::this._requestErrorHandler;\n    this._networkErrorHandler = this::this._networkErrorHandler;\n\n    this._checkConnectionFunc = async () => {\n      try {\n        await checkConnectionFunc();\n        this._requestSuccessHandler();\n      } catch (error) {\n        this._requestErrorHandler(error);\n      }\n    };\n  }\n\n  _shouldInit() {\n    return !!(this.pending && (!this._environment || this._environment.ready));\n  }\n\n  _shouldRebindHandlers() {\n    return !!(\n      this.ready &&\n      this._environment &&\n      this._environment.ready &&\n      this._environment.changeCounter !== this._lastEnvironmentCounter\n    );\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._bindHandlers();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      this._retry();\n    } else if (this._shouldRebindHandlers()) {\n      this._lastEnvironmentCounter = this._environment.changeCounter;\n      this._bindHandlers();\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _requestSuccessHandler(res) {\n    if (!this.connectivity) {\n      this.store.dispatch({\n        type: this.actionTypes.connectSuccess,\n      });\n    }\n    this._retry();\n  }\n\n  _requestErrorHandler(error) {\n    if (\n      error.message &&\n      (error.message === rateLimiterErrorMessage.rateLimitReached ||\n        error.message === availabilityErrorMessages.serviceLimited)\n    )\n      return;\n\n    if (!error.apiResponse || !error.apiResponse._response) {\n      if (this.connectivity) {\n        this.store.dispatch({\n          type: this.actionTypes.connectFail,\n        });\n      }\n    }\n    this._retry();\n  }\n\n  _networkErrorHandler() {\n    if (!this.networkLoss) {\n      this.store.dispatch({\n        type: this.actionTypes.networkLoss,\n      });\n    }\n    this._retry();\n  }\n\n  _bindHandlers() {\n    if (this._unbindHandlers) {\n      this._unbindHandlers();\n    }\n    const client = this._client.service.platform().client();\n    client.on(client.events.requestSuccess, this._requestSuccessHandler);\n    client.on(client.events.requestError, this._requestErrorHandler);\n    if (typeof window !== 'undefined') {\n      window.addEventListener('offline', this._networkErrorHandler);\n    }\n    this._unbindHandlers = () => {\n      client.removeListener(\n        client.events.requestSuccess,\n        this._requestSuccessHandler,\n      );\n      client.removeListener(\n        client.events.requestError,\n        this._requestErrorHandler,\n      );\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('offline', this._networkErrorHandler);\n      }\n      this._unbindHandlers = null;\n    };\n  }\n\n  @proxify\n  async _checkConnection() {\n    try {\n      await this._checkConnectionFunc();\n    } catch (error) {\n      // catch error\n    }\n  }\n\n  _clearTimeout() {\n    if (this._retryTimeoutId) {\n      clearTimeout(this._retryTimeoutId);\n      this._retryTimeoutId = null;\n    }\n  }\n\n  _retry(t = this.connectivity ? this._heartBeatInterval : this._timeToRetry) {\n    this._clearTimeout();\n    this._retryTimeoutId = setTimeout(() => {\n      this._retryTimeoutId = null;\n      this._checkConnection();\n    }, t);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get connectivity() {\n    return this.state.connectivity;\n  }\n\n  get networkLoss() {\n    return this.state.networkLoss;\n  }\n}\n"],"file":"index.js"}