{"version":3,"sources":["modules/EvCallHistory/EvCallHistory.ts"],"names":["EvCallHistory","name","deps","dep","optional","that","rawCalls","contactMatches","activityMatches","calls","_deps","contactMatcher","addQuerySource","getQueriesFn","uniqueIdentifies","readyCheckFn","evCallMonitor","ready","activityMatcher","callLogsIds","evSubscription","subscribe","EvCallbackTypes","DIRECT_AGENT_TRANSFER_NOTIF","data","status","directTransferNotificationTypes","VOICEMAIL","dataMapping","callLogs","callsMapping","map","call","contactMatchIdentify","phoneNumber","ani","callType","id","getCallId","session","length","RcModuleV2"],"mappings":"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","sourcesContent":["import { computed, RcModuleV2 } from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport { directTransferNotificationTypes } from '../../enums/directTransferNotificationTypes';\nimport { makeCallsUniqueIdentifies } from '../../lib/callUniqueIdentifies';\nimport { contactMatchIdentifyEncode } from '../../lib/contactMatchIdentify';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport { CallHistory, Deps } from './EvCallHistory.interface';\n\n@Module({\n  name: 'EvCallHistory',\n  deps: [\n    'EvCallMonitor',\n    'EvSubscription',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n  ],\n})\nclass EvCallHistory extends RcModuleV2<Deps> implements CallHistory {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    this._deps.contactMatcher?.addQuerySource({\n      getQueriesFn: () => this.uniqueIdentifies,\n      readyCheckFn: () => this._deps.evCallMonitor.ready,\n    });\n    this._deps.activityMatcher?.addQuerySource({\n      getQueriesFn: () => this.callLogsIds,\n      readyCheckFn: () => this._deps.evCallMonitor.ready,\n    });\n  }\n\n  // TODO: dataMapping type\n  get contactMatches(): any {\n    return this._deps.contactMatcher.dataMapping || {};\n  }\n\n  get activityMatches() {\n    return this._deps.activityMatcher.dataMapping || {};\n  }\n\n  get rawCalls() {\n    return this._deps.evCallMonitor.callLogs;\n  }\n\n  get callLogsIds() {\n    return this._deps.evCallMonitor.callLogsIds;\n  }\n\n  get callsMapping() {\n    return this._deps.evCallMonitor.callsMapping;\n  }\n\n  @computed((that: EvCallHistory) => [\n    that.rawCalls,\n    that.contactMatches,\n    that.activityMatches,\n  ])\n  get calls() {\n    return this.rawCalls.map((call) => {\n      const contactMatchIdentify = contactMatchIdentifyEncode({\n        phoneNumber: call.ani,\n        callType: call.callType,\n      });\n      const id = this._deps.evCallMonitor.getCallId(call.session);\n\n      return {\n        ...call,\n        // TODO confirm about using `toMatches` & `fromMatches`?\n        contactMatches: this.contactMatches[contactMatchIdentify] || [],\n        activityMatches: this.activityMatches[id] || [],\n      };\n    });\n  }\n\n  @computed((that: EvCallHistory) => [that.calls])\n  get lastEndedCall() {\n    return this.calls.length > 0 ? this.calls[0] : null;\n  }\n\n  @computed((that: EvCallHistory) => [that.rawCalls])\n  get uniqueIdentifies() {\n    return makeCallsUniqueIdentifies(this.rawCalls);\n  }\n\n  onInitOnce() {\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.DIRECT_AGENT_TRANSFER_NOTIF,\n      (data) => {\n        if (data.status === directTransferNotificationTypes.VOICEMAIL) {\n          // TODO add `data` for list and alert message about 'Direct Transfer: data.ani, Click to view call detail.'\n        }\n      },\n    );\n  }\n}\n\nexport { EvCallHistory };\n"],"file":"EvCallHistory.js"}