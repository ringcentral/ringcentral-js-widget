{"version":3,"sources":["modules/EvCallHistory/EvCallHistory.ts"],"names":["EvCallHistory","name","deps","dep","optional","that","rawCalls","contactMatches","activityMatches","calls","_deps","contactMatcher","addQuerySource","getQueriesFn","uniqueIdentifies","readyCheckFn","evCallMonitor","ready","activityMatcher","callLogsIds","now","lastWeekDay","clone","subtract","startOf","valueOf","evSubscription","subscribe","EvCallbackTypes","DIRECT_AGENT_TRANSFER_NOTIF","data","status","directTransferNotificationTypes","VOICEMAIL","dataMapping","callLogs","callsMapping","lastWeekDayTimestamp","_getLastWeekDayTimestamp","slice","filter","call","timestamp","map","contactMatchIdentify","phoneNumber","ani","callType","id","getCallId","session","direction","toLowerCase","callDirection","outbound","inbound","agent","agentId","length","activity","matched","find","match","contact","from","to","fromName","toName","fromMatches","toMatches","startTime","RcModuleV2"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport { computed, RcModuleV2 } from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport { callDirection } from 'ringcentral-integration/enums/callDirections';\n\nimport { directTransferNotificationTypes } from '../../enums/directTransferNotificationTypes';\nimport { makeCallsUniqueIdentifies } from '../../lib/callUniqueIdentifies';\nimport { contactMatchIdentifyEncode } from '../../lib/contactMatchIdentify';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport { CallHistory, Deps } from './EvCallHistory.interface';\n\n@Module({\n  name: 'EvCallHistory',\n  deps: [\n    'EvCallMonitor',\n    'EvSubscription',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n  ],\n})\nclass EvCallHistory extends RcModuleV2<Deps> implements CallHistory {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    this._deps.contactMatcher?.addQuerySource({\n      getQueriesFn: () => this.uniqueIdentifies,\n      readyCheckFn: () => this._deps.evCallMonitor.ready,\n    });\n    this._deps.activityMatcher?.addQuerySource({\n      getQueriesFn: () => this.callLogsIds,\n      readyCheckFn: () => this._deps.evCallMonitor.ready,\n    });\n  }\n\n  // TODO: dataMapping type\n  get contactMatches(): any {\n    return this._deps.contactMatcher.dataMapping || {};\n  }\n\n  get activityMatches() {\n    return this._deps.activityMatcher.dataMapping || {};\n  }\n\n  get rawCalls() {\n    return this._deps.evCallMonitor.callLogs;\n  }\n\n  get callLogsIds() {\n    return this._deps.evCallMonitor.callLogsIds;\n  }\n\n  get callsMapping() {\n    return this._deps.evCallMonitor.callsMapping;\n  }\n\n  @computed((that: EvCallHistory) => [\n    that.rawCalls,\n    that.contactMatches,\n    that.activityMatches,\n  ])\n  get calls() {\n    const lastWeekDayTimestamp = this._getLastWeekDayTimestamp();\n    // max 250 and 7 days\n    const calls = this.rawCalls\n      .slice(0, 250)\n      .filter((call) => call.timestamp >= lastWeekDayTimestamp);\n\n    return calls.map((call) => {\n      const contactMatchIdentify = contactMatchIdentifyEncode({\n        phoneNumber: call.ani,\n        callType: call.callType,\n      });\n\n      const id = this._deps.evCallMonitor.getCallId(call.session);\n      const direction =\n        call.callType.toLowerCase() === 'outbound'\n          ? callDirection.outbound\n          : callDirection.inbound;\n      const contactMatches = this.contactMatches[contactMatchIdentify] || [];\n      const activityMatches = this.activityMatches[id] || [];\n      const agent = {\n        name: call.agentId,\n        phoneNumber: call.agentId,\n      };\n\n      let name = '';\n      if (contactMatches.length && activityMatches.length) {\n        const activity = activityMatches[0];\n        const matched = contactMatches.find(\n          (match: { id: string }) => match.id === activity,\n        );\n        if (matched) {\n          name = matched.name;\n        }\n      }\n      const contact = {\n        name,\n        phoneNumber: call.ani,\n      };\n\n      return {\n        id,\n        direction,\n        from: direction === callDirection.outbound ? agent : contact,\n        to: direction === callDirection.outbound ? contact : agent,\n        fromName:\n          direction === callDirection.outbound\n            ? agent.name || agent.phoneNumber\n            : contact.name || contact.phoneNumber,\n        toName:\n          direction === callDirection.outbound\n            ? contact.name || contact.phoneNumber\n            : agent.name || agent.phoneNumber,\n        fromMatches: contactMatches,\n        toMatches: contactMatches,\n        activityMatches,\n        startTime: call.timestamp,\n      };\n    });\n  }\n\n  @computed((that: EvCallHistory) => [that.calls])\n  get lastEndedCall() {\n    return this.calls.length > 0 ? this.calls[0] : null;\n  }\n\n  @computed((that: EvCallHistory) => [that.rawCalls])\n  get uniqueIdentifies() {\n    return makeCallsUniqueIdentifies(this.rawCalls);\n  }\n\n  private _getLastWeekDayTimestamp() {\n    const now = moment();\n    const lastWeekDay = now.clone().subtract(7, 'days').startOf('day');\n    return lastWeekDay.valueOf();\n  }\n\n  onInitOnce() {\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.DIRECT_AGENT_TRANSFER_NOTIF,\n      (data) => {\n        if (data.status === directTransferNotificationTypes.VOICEMAIL) {\n          // TODO add `data` for list and alert message about 'Direct Transfer: data.ani, Click to view call detail.'\n        }\n      },\n    );\n  }\n}\n\nexport { EvCallHistory };\n"],"file":"EvCallHistory.js"}