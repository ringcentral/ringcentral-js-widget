{"version":3,"sources":["modules/EvCallHistory/EvCallHistory.ts"],"names":["EvCallHistory","name","deps","dep","optional","evCallMonitor","evSubscription","contactMatcher","activityMatcher","modules","getCalls","rawCalls","contactMatches","activityMatches","calls","map","call","contactMatchIdentify","phoneNumber","ani","callType","toLowerCase","id","_modules","getCallId","session","getLastEndedCall","length","getUniqueIdentifies","addQuerySource","getQueriesFn","readyCheckFn","ready","callLogsIds","subscribe","EvCallbackTypes","DIRECT_AGENT_TRANSFER_NOTIF","data","status","directTransferNotificationTypes","VOICEMAIL","dataMapping","callLogs","getCallsMapping","RcModuleV2"],"mappings":"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","sourcesContent":["import { RcModuleV2, createSelector } from '@ringcentral-integration/core';\nimport { Module } from 'ringcentral-integration/lib/di';\n\nimport { directTransferNotificationTypes } from '../../enums/directTransferNotificationTypes';\nimport { makeCallsUniqueIdentifies } from '../../lib/callUniqueIdentifies';\nimport { contactMatchIdentifyEncode } from '../../lib/contactMatchIdentify';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport { CallHistory, DepsModules } from './EvCallHistory.interface';\n\n@Module({\n  name: 'EvCallHistory',\n  deps: [\n    'EvCallMonitor',\n    'EvSubscription',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n  ],\n})\nclass EvCallHistory extends RcModuleV2<DepsModules> implements CallHistory {\n  constructor({\n    evCallMonitor,\n    evSubscription,\n    contactMatcher,\n    activityMatcher,\n  }) {\n    super({\n      modules: {\n        evCallMonitor,\n        evSubscription,\n        contactMatcher,\n        activityMatcher,\n      },\n    });\n    if (this._modules.contactMatcher) {\n      this._modules.contactMatcher.addQuerySource({\n        getQueriesFn: () => this.getUniqueIdentifies(),\n        readyCheckFn: () => this._modules.evCallMonitor.ready,\n      });\n    }\n\n    if (this._modules.activityMatcher) {\n      this._modules.activityMatcher.addQuerySource({\n        getQueriesFn: () => this.callLogsIds,\n        readyCheckFn: () => this._modules.evCallMonitor.ready,\n      });\n    }\n  }\n\n  get contactMatches() {\n    return this._modules.contactMatcher.dataMapping || {};\n  }\n\n  get activityMatches() {\n    return this._modules.activityMatcher.dataMapping || {};\n  }\n\n  get rawCalls() {\n    return this._modules.evCallMonitor.callLogs;\n  }\n\n  get callLogsIds() {\n    return this._modules.evCallMonitor.callLogsIds;\n  }\n\n  get callsMapping() {\n    return this._modules.evCallMonitor.getCallsMapping();\n  }\n\n  getCalls = createSelector(\n    () => this.rawCalls,\n    () => this.contactMatches,\n    () => this.activityMatches,\n    (calls, contactMatches, activityMatches) => {\n      return calls.map((call) => {\n        const contactMatchIdentify = contactMatchIdentifyEncode({\n          phoneNumber: call.ani,\n          callType: call.callType.toLowerCase(),\n        });\n        const id = this._modules.evCallMonitor.getCallId(call.session);\n        return {\n          ...call,\n          // TODO confirm about using `toMatches` & `fromMatches`?\n          contactMatches: contactMatches[contactMatchIdentify] || [],\n          activityMatches: activityMatches[id] || [],\n        };\n      });\n    },\n  );\n\n  getLastEndedCall = createSelector(\n    () => this.getCalls(),\n    (calls) => {\n      return calls.length > 0 ? calls[0] : null;\n    },\n  );\n\n  getUniqueIdentifies = createSelector(\n    () => this.rawCalls,\n    (calls) => makeCallsUniqueIdentifies(calls),\n  );\n\n  onInitOnce() {\n    this._modules.evSubscription.subscribe(\n      EvCallbackTypes.DIRECT_AGENT_TRANSFER_NOTIF,\n      (data) => {\n        if (data.status === directTransferNotificationTypes.VOICEMAIL) {\n          // TODO add `data` for list and alert message about 'Direct Transfer: data.ani, Click to view call detail.'\n        }\n      },\n    );\n  }\n}\n\nexport { EvCallHistory };\n"],"file":"EvCallHistory.js"}